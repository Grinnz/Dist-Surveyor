#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"CPAN/DistnameInfo.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CPAN_DISTNAMEINFO';
  
  package CPAN::DistnameInfo;
  
  $VERSION = "0.12";
  use strict;
  
  sub distname_info {
    my $file = shift or return;
  
    my ($dist, $version) = $file =~ /^
      ((?:[-+.]*(?:[A-Za-z0-9]+|(?<=\D)_|_(?=\D))*
       (?:
  	[A-Za-z](?=[^A-Za-z]|$)
  	|
  	\d(?=-)
       )(?<![._-][vV])
      )+)(.*)
    $/xs or return ($file,undef,undef);
  
    if ($dist =~ /-undef\z/ and ! length $version) {
      $dist =~ s/-undef\z//;
    }
  
    # Remove potential -withoutworldwriteables suffix
    $version =~ s/-withoutworldwriteables$//;
  
    if ($version =~ /^(-[Vv].*)-(\d.*)/) {
     
      # Catch names like Unicode-Collate-Standard-V3_1_1-0.1
      # where the V3_1_1 is part of the distname
      $dist .= $1;
      $version = $2;
    }
  
    if ($version =~ /(.+_.*)-(\d.*)/) {
        # Catch names like Task-Deprecations5_14-1.00.tar.gz where the 5_14 is
        # part of the distname. However, names like libao-perl_0.03-1.tar.gz
        # should still have 0.03-1 as their version.
        $dist .= $1;
        $version = $2;
    }
  
    # Normalize the Dist.pm-1.23 convention which CGI.pm and
    # a few others use.
    $dist =~ s{\.pm$}{};
  
    $version = $1
      if !length $version and $dist =~ s/-(\d+\w)$//;
  
    $version = $1 . $version
      if $version =~ /^\d+$/ and $dist =~ s/-(\w+)$//;
  
    if ($version =~ /\d\.\d/) {
      $version =~ s/^[-_.]+//;
    }
    else {
      $version =~ s/^[-_]+//;
    }
  
    my $dev;
    if (length $version) {
      if ($file =~ /^perl-?\d+\.(\d+)(?:\D(\d+))?(-(?:TRIAL|RC)\d+)?$/) {
        $dev = 1 if (($1 > 6 and $1 & 1) or ($2 and $2 >= 50)) or $3;
      }
      elsif ($version =~ /\d\D\d+_\d/ or $version =~ /-TRIAL/) {
        $dev = 1;
      }
    }
    else {
      $version = undef;
    }
  
    ($dist, $version, $dev);
  }
  
  sub new {
    my $class = shift;
    my $distfile = shift;
  
    $distfile =~ s,//+,/,g;
  
    my %info = ( pathname => $distfile );
  
    ($info{filename} = $distfile) =~ s,^(((.*?/)?authors/)?id/)?([A-Z])/(\4[A-Z])/(\5[-A-Z0-9]*)/,,
      and $info{cpanid} = $6;
  
    if ($distfile =~ m,([^/]+)\.(tar\.(?:g?z|bz2)|zip|tgz)$,i) { # support more ?
      $info{distvname} = $1;
      $info{extension} = $2;
    }
  
    @info{qw(dist version beta)} = distname_info($info{distvname});
    $info{maturity} = delete $info{beta} ? 'developer' : 'released';
  
    return bless \%info, $class;
  }
  
  sub dist      { shift->{dist} }
  sub version   { shift->{version} }
  sub maturity  { shift->{maturity} }
  sub filename  { shift->{filename} }
  sub cpanid    { shift->{cpanid} }
  sub distvname { shift->{distvname} }
  sub extension { shift->{extension} }
  sub pathname  { shift->{pathname} }
  
  sub properties { %{ $_[0] } }
  
  1;
  
  __END__
  
  =head1 NAME
  
  CPAN::DistnameInfo - Extract distribution name and version from a distribution filename
  
  =head1 SYNOPSIS
  
    my $pathname = "authors/id/G/GB/GBARR/CPAN-DistnameInfo-0.02.tar.gz";
  
    my $d = CPAN::DistnameInfo->new($pathname);
  
    my $dist      = $d->dist;      # "CPAN-DistnameInfo"
    my $version   = $d->version;   # "0.02"
    my $maturity  = $d->maturity;  # "released"
    my $filename  = $d->filename;  # "CPAN-DistnameInfo-0.02.tar.gz"
    my $cpanid    = $d->cpanid;    # "GBARR"
    my $distvname = $d->distvname; # "CPAN-DistnameInfo-0.02"
    my $extension = $d->extension; # "tar.gz"
    my $pathname  = $d->pathname;  # "authors/id/G/GB/GBARR/..."
  
    my %prop = $d->properties;
  
  =head1 DESCRIPTION
  
  Many online services that are centered around CPAN attempt to
  associate multiple uploads by extracting a distribution name from
  the filename of the upload. For most distributions this is easy as
  they have used ExtUtils::MakeMaker or Module::Build to create the
  distribution, which results in a uniform name. But sadly not all
  uploads are created in this way.
  
  C<CPAN::DistnameInfo> uses heuristics that have been learnt by
  L<http://search.cpan.org/> to extract the distribution name and
  version from filenames and also report if the version is to be
  treated as a developer release
  
  The constructor takes a single pathname, returning an object with the following methods
  
  =over
  
  =item cpanid
  
  If the path given looked like a CPAN authors directory path, then this will be the
  the CPAN id of the author.
  
  =item dist
  
  The name of the distribution
  
  =item distvname
  
  The file name with any suffix and leading directory names removed
  
  =item filename
  
  If the path given looked like a CPAN authors directory path, then this will be the
  path to the file relative to the detected CPAN author directory. Otherwise it is the path
  that was passed in.
  
  =item maturity
  
  The maturity of the distribution. This will be either C<released> or C<developer>
  
  =item extension
  
  The extension of the distribution, often used to denote the archive type (e.g. 'tar.gz')
  
  =item pathname
  
  The pathname that was passed to the constructor when creating the object.
  
  =item properties
  
  This will return a list of key-value pairs, suitable for assigning to a hash,
  for the known properties.
  
  =item version
  
  The extracted version
  
  =back
  
  =head1 AUTHOR
  
  Graham Barr <gbarr@pobox.com>
  
  =head1 COPYRIGHT 
  
  Copyright (c) 2003 Graham Barr. All rights reserved. This program is
  free software; you can redistribute it and/or modify it under the same
  terms as Perl itself.
  
  =cut
  
CPAN_DISTNAMEINFO

$fatpacked{"Dist/Surveyor.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR';
  package Dist::Surveyor;
  
  =head1 NAME
  
  Dist::Surveyor - Survey installed modules and determine the specific distribution versions they came from
  
  =head1 SYNOPSIS
  
      my $options = {
          opt_match => $opt_match,
          opt_perlver => $opt_perlver,
          opt_remnants => $opt_remnants,
          distro_key_mod_names => $distro_key_mod_names,
      };
      my @installed_releases = determine_installed_releases($options, \@libdirs);
  
  =head1 DESCRIPTION
  
  Surveys your huge ball of Perl modules, jammed together inside a directory,
  and tells you exactly which module is installed there.
  
  For quick start, and a fine example of this module usage, see L<dist_surveyor>.
  
  This module have one exported function - determine_installed_releases
  
  =cut
  
  use strict;
  use warnings;
  
  use version;
  use Carp; # core
  use Data::Dumper; # core
  use File::Find;  # core
  use File::Spec; # core
  use List::Util qw(max sum); # core
  use Dist::Surveyor::Inquiry; # internal
  use Module::CoreList;
  use Module::Metadata;
  
  our $VERSION = '0.022';
  
  use constant ON_WIN32 => $^O eq 'MSWin32';
  use constant ON_VMS   => $^O eq 'VMS';
  
  if (ON_VMS) {
      require File::Spec::Unix;
  }
  
  our ($DEBUG, $VERBOSE);
  *DEBUG = \$::DEBUG;
  *VERBOSE = \$::VERBOSE;
  
  require Exporter;
  our @ISA = qw{Exporter};
  our @EXPORT = qw{determine_installed_releases};
  
  =head1 determine_installed_releases($options, $search_dirs)
  
  $options includes:
  
  =over
  
  =item opt_match
  
  A regex qr//. If exists, will ignore modules that doesn't match this regex
  
  =item opt_perlver
  
  Skip modules that are included as core in this Perl version
  
  =item opt_remnants
  
  If true, output will include old distribution versions that have left old modules behind
  
  =item distro_key_mod_names
  
  A hash-ref, with a list of irregular named releases. i.e. 'libwww-perl' => 'LWP'.
  
  =back
  
  $search_dirs is an array-ref containing the list of directories to survey.
  
  Returns a list, where each element is a hashref representing one installed distibution.
  This hashref is what MetaCPAN returns for C<https://fastapi.metacpan.org/v1/release/$author/$release>,
  with two additional keys: 
  
  =over
  
  =item *
  
  'url' - that same as 'download_url', but without the hostname. can be used to
  download the file for your favorite mirror
  
  =item *
  
  'dist_data' - Hashref containing info about the release, i.e. percent_installed.
  (fully installed releases will have '100.00')
  
  =back
  
  =cut
  
  sub determine_installed_releases {
      my ($options, $search_dirs) = @_;
      $options->{opt_perlver} ||= version->parse( $] )->numify;
  
      my %installed_mod_info;
  
      warn "Finding modules in @$search_dirs\n";
      my ($installed_mod_files, $installed_meta) = find_installed_modules(@$search_dirs);
  
      # get the installed version of each installed module and related info
      warn "Finding candidate releases for the ".keys(%$installed_mod_files)." installed modules\n";
      foreach my $module ( sort keys %$installed_mod_files ) {
          my $mod_file = $installed_mod_files->{$module};
  
          if (my $opt_match = $options->{opt_match}) {
              if ($module !~ m/$opt_match/o) {
                  delete $installed_mod_files->{$module};
                  next;
              }
          }
  
          module_progress_indicator($module) unless $VERBOSE;
          my $mi = get_installed_mod_info($options, $module, $mod_file);
          $installed_mod_info{$module} = $mi if $mi;
      }
  
  
      # Map modules to dists using the accumulated %installed_mod_info info
  
      warn "*** Mapping modules to releases\n";
  
      my %best_dist;
      foreach my $mod ( sort keys %installed_mod_info ) {
          my $mi = $installed_mod_info{$mod};
  
          module_progress_indicator($mod) unless $VERBOSE;
  
          # find best match among the cpan releases that included this module
          my $ccdr = $installed_mod_info{$mod}{candidate_cpan_dist_releases}
              or next; # no candidates, warned about above (for mods with a version)
  
          my $best_dist_cache_key = join " ", sort keys %$ccdr;
          our %best_dist_cache;
          my $best = $best_dist_cache{$best_dist_cache_key}
              ||= pick_best_cpan_dist_release($ccdr, \%installed_mod_info);
  
          my $note = "";
          if ((@$best > 1) and $installed_meta->{perllocalpod}) { 
              # try using perllocal.pod to narrow the options, if there is one
              # XXX TODO move this logic into the per-candidate-distro loop below
              # it doesn't make much sense to be here at the per-module level
              my @in_perllocal = grep {
                  my $distname = $_->{distribution};
                  my ($v, $dist_mod_name) = perllocal_distro_mod_version(
                      $options->{distro_key_mod_names}, $distname, $installed_meta->{perllocalpod});
                  warn "$dist_mod_name in perllocal.pod: ".($v ? "YES" : "NO")."\n"
                      if $DEBUG;
                  $v;
              } @$best;
              if (@in_perllocal && @in_perllocal < @$best) {
                  $note = sprintf "narrowed from %d via perllocal", scalar @$best;
                  $best = \@in_perllocal;
              }
          }
  
          if (@$best > 1 or $note) { # note the poor match for this module
              # but not if there's no version (as that's common)
              my $best_desc = join " or ", map { $_->{release} } @$best;
              my $pct = sprintf "%.2f%%", $best->[0]{fraction_installed} * 100;
              warn "$mod $mi->{version} odd best match: $best_desc $note ($best->[0]{fraction_installed})\n"
                  if $note or $VERBOSE or ($mi->{version} and $best->[0]{fraction_installed} < 0.3);
              # if the module has no version and multiple best matches
              # then it's unlikely make a useful contribution, so ignore it
              # XXX there's a risk that we'd ignore all the modules of a release
              # where none of the modules has a version, but that seems unlikely.
              next if not $mi->{version};
          }
  
          for my $dist (@$best) {
              # two level hash to make it easier to handle versions
              my $di = $best_dist{ $dist->{distribution} }{ $dist->{release} } ||= { dist => $dist };
              push @{ $di->{modules} }, $mi;
              $di->{or}{$_->{release}}++ for grep { $_ != $dist } @$best;
          }
  
      }
  
      warn "*** Refining releases\n";
  
      # $best_dist{ Foo }{ Foo-1.23 }{ dist=>$dist_struct, modules=>, or=>{ Foo-1.22 => $dist_struct } }
  
      my @installed_releases;    # Dist-Name => { ... }
  
      for my $distname ( sort keys %best_dist ) {
          my $releases = $best_dist{$distname};
          push @installed_releases, refine_releases($options, $distname, $releases);
      }
  
      # sorting into dependency order could be added later, maybe
  
      return @installed_releases;
  }
  
  sub refine_releases {
      my ($options, $distname, $releases) = @_;
  
      my @dist_by_version  = sort {
          $a->{dist}{version_obj}        <=> $b->{dist}{version_obj} or
          $a->{dist}{fraction_installed} <=> $b->{dist}{fraction_installed}
      } values %$releases;
      my @dist_by_fraction = sort {
          $a->{dist}{fraction_installed} <=> $b->{dist}{fraction_installed} or
          $a->{dist}{version_obj}        <=> $b->{dist}{version_obj}
      } values %$releases;
      
      my @remnant_dists  = @dist_by_version;
      my $installed_dist = pop @remnant_dists;
  
      # is the most recent candidate dist version also the one with the
      # highest fraction_installed?
      if ($dist_by_version[-1] == $dist_by_fraction[-1]) {
          # this is the common case: we'll assume that's installed and the
          # rest are remnants of earlier versions
      }
      elsif ($dist_by_fraction[-1]{dist}{fraction_installed} == 100) {
          warn "Unsure which $distname is installed from among @{[ keys %$releases ]}\n";
          @remnant_dists  = @dist_by_fraction;
          $installed_dist = pop @remnant_dists;
          warn "Selecting the one that apprears to be 100% installed\n";
      }
      else {
          # else grumble so the user knows to ponder the possibilities
          warn "Can't determine which $distname is installed from among @{[ keys %$releases ]}\n";
          warn Dumper([\@dist_by_version, \@dist_by_fraction]);
          warn "\tSelecting based on latest version\n";
      }
  
      if (@remnant_dists or $DEBUG) {
          warn "Distributions with remnants (chosen release is first):\n"
              unless our $dist_with_remnants_warning++;
          warn "@{[ map { $_->{dist}{release} } reverse @dist_by_fraction ]}\n"; 
          for ($installed_dist, @remnant_dists) {
              my $fi = $_->{dist}{fraction_installed};
              my $modules = $_->{modules};
              my $mv_desc = join(", ", map { "$_->{module} $_->{version}" } @$modules);
              warn sprintf "\t%s\t%s%% installed: %s\n",
                  $_->{dist}{release},
                  $_->{dist}{percent_installed},
                  (@$modules > 4 ? "(".@$modules." modules)" : $mv_desc),
          }
      }
  
      my @installed_releases;
      # note ordering: remnants first
      for (($options->{opt_remnants} ? @remnant_dists : ()), $installed_dist) {
          my ($author, $release)
              = @{$_->{dist}}{qw(author release)};
  
          my $release_data = get_release_info($author, $release);
          next unless $release_data;
          
          # shortcuts
          (my $url = $release_data->{download_url}) =~ s{ .*? \b authors/ }{authors/}x;
  
          push @installed_releases, {
              # 
              %$release_data,
              # extra items mushed inhandy shortcuts
              url => $url,
              # raw data structures
              dist_data => $_->{dist},
          };
      }
      #die Dumper(\@installed_releases);
      return @installed_releases;
  }
  
  # for each installed module, get the list of releases that it exists in
  # Parameters:
  #   $options - uses only opt_perlver
  #   $module - module name (i.e. 'Dist::Surveyor')
  #   $mod_file - the location of this module on the filesystem
  # Return:
  #   undef if this module should be skipped
  #   otherwise, a hashref containing:
  #       file => $mod_file,
  #       module => $module,
  #       version => $mod_version,
  #       version_obj => same as version, but as an object,
  #       size => $mod_file_size,
  #       # optional flags:
  #       file_size_mismatch => 1,
  #       cpan_dist_fallback => 1, # could not find this module/version on cpan,
  #           # but found a release with that version, containing such module
  #       version_not_on_cpan> 1, # can not find this file on CPAN.
  #       # releases info
  #       candidate_cpan_dist_releases => hashref,
  #
  #   candidate_cpan_dist_releases hashref contain a map of all the releases
  #   that this module exists in. see get_candidate_cpan_dist_releases for more
  #   info.
  sub get_installed_mod_info {
      my ($options, $module, $mod_file) = @_;
  
      my $mod_version = do {
          # silence warnings about duplicate VERSION declarations
          # eg Catalyst::Controller::DBIC::API* 2.002001
          local $SIG{__WARN__} = sub { warn @_ if $_[0] !~ /already declared with version/ };
          my $mm = Module::Metadata->new_from_file($mod_file);
          $mm->version; # only one version for one package in file
      };
      $mod_version ||= 0; # XXX
      my $mod_file_size = -s $mod_file;
  
      # Eliminate modules that will be supplied by the target perl version
      if ( my $cv = $Module::CoreList::version{ $options->{opt_perlver} }->{$module} ) {
          $cv =~ s/ //g;
          if (version->parse($cv) >= version->parse($mod_version)) {
              warn "$module is core in perl $options->{opt_perlver} (lib: $mod_version, core: $cv) - skipped\n";
              return;
          }
      }
  
      my $mi = {
          file => $mod_file,
          module => $module,
          version => $mod_version,
          version_obj => version->parse($mod_version),
          size => $mod_file_size,
      };
  
      # ignore modules we know aren't indexed
      return $mi if $module =~ /^Moose::Meta::Method::Accessor::Native::/;
  
      # XXX could also consider file mtime: releases newer than the mtime
      # of the module file can't be the origin of that module file.
      # (assuming clocks and file times haven't been messed with)
  
      eval {
          my $ccdr = get_candidate_cpan_dist_releases($module, $mod_version, $mod_file_size);
          if (not %$ccdr) {
              $ccdr = get_candidate_cpan_dist_releases($module, $mod_version, 0);
              if (%$ccdr) {
                  # probably either a local change/patch or installed direct from repo
                  # but with a version number that matches a release
                  warn "$module $mod_version on CPAN but with different file size (not $mod_file_size)\n"
                      if $mod_version or $VERBOSE;
                  $mi->{file_size_mismatch}++;
              }
              elsif ($ccdr = get_candidate_cpan_dist_releases_fallback($module, $mod_version) and %$ccdr) {
                  warn "$module $mod_version not on CPAN but assumed to be from @{[ sort keys %$ccdr ]}\n"
                      if $mod_version or $VERBOSE;
                  $mi->{cpan_dist_fallback}++;
              }
              else {
                  $mi->{version_not_on_cpan}++;
                  # Possibly:
                  # - a local change/patch or installed direct from repo
                  #   with a version number that was never released.
                  # - a private module never released on cpan.
                  # - a build-time create module eg common/sense.pm.PL
                  warn "$module $mod_version not found on CPAN\n"
                      if $mi->{version} # no version implies uninteresting
                      or $VERBOSE;
                  # XXX could try finding the module with *any* version on cpan
                  # to help with later advice. ie could select as candidates
                  # the version above and the version below the number we have,
                  # and set a flag to inform later logic.
              }
          }
          $mi->{candidate_cpan_dist_releases} = $ccdr if %$ccdr;
      };
      if ($@) {
          warn "Failed get_candidate_cpan_dist_releases($module, $mod_version, $mod_file_size): $@";
      }
      return $mi;
  }
  
  # pick_best_cpan_dist_release - memoized
  # for each %$ccdr adds a fraction_installed based on %$installed_mod_info
  # returns ref to array of %$ccdr values that have the max fraction_installed
  
  sub pick_best_cpan_dist_release {
      my ($ccdr, $installed_mod_info) = @_;
  
      for my $release (sort keys %$ccdr) {
          my $release_info = $ccdr->{$release};
          $release_info->{fraction_installed}
              = dist_fraction_installed($release_info->{author}, $release, $installed_mod_info);
          $release_info->{percent_installed} # for informal use
              = sprintf "%.2f", $release_info->{fraction_installed} * 100;
      }
  
      my $max_fraction_installed = max( map { $_->{fraction_installed} } values %$ccdr );
      my @best = grep { $_->{fraction_installed} == $max_fraction_installed } values %$ccdr;
  
      return \@best;
  }
  
  
  # returns a number from 0 to 1 representing the fraction of the modules
  # in a particular release match the coresponding modules in %$installed_mod_info
  sub dist_fraction_installed {
      my ($author, $release, $installed_mod_info) = @_;
  
      my $tag = "$author/$release";
      my $mods_in_rel = get_module_versions_in_release($author, $release);
      my $mods_in_rel_count = keys %$mods_in_rel;
      my $mods_inst_count = sum( map {
          my $mi = $installed_mod_info->{ $_->{name} };
          # XXX we stash the version_obj into the mods_in_rel hash
          # (though with little/no caching effect with current setup)
          $_->{version_obj} ||= eval { version->parse($_->{version}) };
          my $hit = ($mi && $mi->{version_obj} == $_->{version_obj}) ? 1 : 0;
          # demote to a low-scoring partial match if the file size differs
          # XXX this isn't good as the effect varies with the number of modules
          $hit = 0.1 if $mi && $mi->{size} != $_->{size};
          warn sprintf "%s %s %s %s: %s\n", $tag, $_->{name}, $_->{version_obj}, $_->{size},
                  ($hit == 1) ? "matches"
                      : ($mi) ? "differs ($mi->{version_obj}, $mi->{size})"
                      : "not installed",
              if $DEBUG;
          $hit;
      } values %$mods_in_rel) || 0;
  
      my $fraction_installed = ($mods_in_rel_count) ? $mods_inst_count/$mods_in_rel_count : 0;
      warn "$author/$release:\tfraction_installed $fraction_installed ($mods_inst_count/$mods_in_rel_count)\n"
          if $VERBOSE or !$mods_in_rel_count;
  
      return $fraction_installed;
  }
  
  sub get_file_mtime {
      my ($file) = @_;
      # try to find the time the file was 'installed'
      # by looking for the commit date in svn or git
      # else fallback to the file modification time
      return (stat($file))[9];
  }
  
  
  sub find_installed_modules {
      my (@dirs) = @_;
  
      ### File::Find uses follow_skip => 1 by default, which doesn't die
      ### on duplicates, unless they are directories or symlinks.
      ### Ticket #29796 shows this code dying on Alien::WxWidgets,
      ### which uses symlinks.
      ### File::Find doc says to use follow_skip => 2 to ignore duplicates
      ### so this will stop it from dying.
      my %find_args = ( follow_skip => 2 );
  
      ### File::Find uses lstat, which quietly becomes stat on win32
      ### it then uses -l _ which is not allowed by the statbuffer because
      ### you did a stat, not an lstat (duh!). so don't tell win32 to
      ### follow symlinks, as that will break badly
      # XXX disabled because we want the postprocess hook to work
      #$find_args{'follow_fast'} = 1 unless ON_WIN32;
  
      ### never use the @INC hooks to find installed versions of
      ### modules -- they're just there in case they're not on the
      ### perl install, but the user shouldn't trust them for *other*
      ### modules!
      ### XXX CPANPLUS::inc is now obsolete, remove the calls
      #local @INC = CPANPLUS::inc->original_inc;
  
      # sort @dirs to put longest first to make it easy to handle
      # elements that are within other elements (e.g., an archdir)
      my @dirs_ordered = sort { length $b <=> length $a } @dirs;
  
      my %seen_mod;
      my %dir_done;
      my %meta; # return metadata about the search
      for my $dir (@dirs_ordered) {
          next if $dir eq '.';
  
          ### not a directory after all
          ### may be coderef or some such
          next unless -d $dir;
  
          ### make sure to clean up the directories just in case,
          ### as we're making assumptions about the length
          ### This solves rt.cpan issue #19738
  
          ### John M. notes: On VMS cannonpath can not currently handle
          ### the $dir values that are in UNIX format.
          $dir = File::Spec->canonpath($dir) unless ON_VMS;
  
          ### have to use F::S::Unix on VMS, or things will break
          my $file_spec = ON_VMS ? 'File::Spec::Unix' : 'File::Spec';
  
          ### XXX in some cases File::Find can actually die!
          ### so be safe and wrap it in an eval.
          eval {
              File::Find::find(
                  {   %find_args,
                      postprocess => sub {
                          $dir_done{$File::Find::dir}++;
                      },
                      wanted => sub {
  
                          unless (/\.pm$/i) {
                              # skip all dot-dirs (eg .git .svn)
                              $File::Find::prune = 1
                                  if -d $File::Find::name and /^\.\w/;
                              # don't reenter a dir we've already done
                              $File::Find::prune = 1
                                  if $dir_done{$File::Find::name};
                              # remember perllocal.pod if we see it
                              push @{$meta{perllocalpod}}, $File::Find::name
                                  if $_ eq 'perllocal.pod';
                              return;
                          }
                          my $mod = $File::Find::name;
  
                          ### make sure it's in Unix format, as it
                          ### may be in VMS format on VMS;
                          $mod = VMS::Filespec::unixify($mod) if ON_VMS;
  
                          $mod = substr( $mod, length($dir) + 1, -3 );
                          $mod = join '::', $file_spec->splitdir($mod);
  
                          return if $seen_mod{$mod};
                          $seen_mod{$mod} = $File::Find::name;
  
                          ### ignore files that don't contain a matching package declaration
                          ### warn about those that do contain some kind of package declaration
                          #use File::Slurp;
                          #my $content = read_file($File::Find::name);
                          #unless ( $content =~ m/^ \s* package \s+ (\#.*\n\s*)? $mod \b/xm ) {
                          #warn "No 'package $mod' seen in $File::Find::name\n"
                          #if $VERBOSE && $content =~ /\b package \b/x;
                          #return;
                          #}
  
                      },
                  },
                  $dir
              );
              1;
          }
              or die "File::Find died: $@";
  
      }
  
      return (\%seen_mod, \%meta);
  }
  
  
  sub perllocal_distro_mod_version {
      my ($distro_key_mod_names, $distname, $perllocalpod) = @_;
  
      ( my $dist_mod_name = $distname ) =~ s/-/::/g;
      my $key_mod_name = $distro_key_mod_names->{$distname} || $dist_mod_name;
  
      our $perllocal_distro_mod_version;
      if (not $perllocal_distro_mod_version) { # initial setup
          warn "Only first perllocal.pod file will be processed: @$perllocalpod\n"
              if ref $perllocalpod eq 'ARRAY' and @$perllocalpod > 1;
  
          $perllocal_distro_mod_version = {};
          # extract data from perllocal.pod
          if (my $plp = shift @$perllocalpod) {
              # The VERSION isn't always the same as that in the distro file
              if (eval { require ExtUtils::Perllocal::Parser }) {
                  my $p = ExtUtils::Perllocal::Parser->new;
                  $perllocal_distro_mod_version = { map {
                      $_->name => $_->{data}{VERSION}
                  } $p->parse_from_file($plp) };
                  warn "Details of ".keys(%$perllocal_distro_mod_version)." distributions found in $plp\n";
              }
              else {
                  warn "Wanted to use perllocal.pod but can't because ExtUtils::Perllocal::Parser isn't available\n";
              }
          }
          else {
              warn "No perllocal.pod found to aid disambiguation\n";
          }
      }
  
      return $perllocal_distro_mod_version->{$key_mod_name};
  }
  
  
  sub module_progress_indicator {
      my ($module) = @_;
      my $crnt = (split /::/, $module)[0];
      our $last ||= '';
      if ($last ne $crnt) {
          warn "\t$crnt...\n";
          $last = $crnt;
      }
  }
  
  =head1 OTHERS
  
  This module checks $::DEBUG and $::VERBOSE for obvious proposes.
  
  This module uses L<Dist::Surveyor::Inquiry> to communicate with MetaCPAN. 
  Check that module's documentation for options and caching. 
  
  You can use L<Dist::Surveyor::MakeCpan> to take the list of releases
  and create a mini-cpan containing them.
  
  =head1 AUTHOR
  
  Written by Tim Bunce E<lt>Tim.Bunce@pobox.comE<gt> 
  
  Maintained by Fomberg Shmuel E<lt>shmuelfomberg@gmail.comE<gt>, Dan Book E<lt>dbook@cpan.orgE<gt>
   
  =head1 COPYRIGHT AND LICENSE
   
  Copyright 2011-2013 by Tim Bunce.
   
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
   
  =cut
  
  1;
DIST_SURVEYOR

$fatpacked{"Dist/Surveyor/DB_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR_DB_FILE';
  package Dist::Surveyor::DB_File;
  
  use strict;
  use warnings;
  use Storable qw(freeze thaw);
  
  our $VERSION = '0.022';
  
  our @ISA;
  if    (eval { require DB_File;   1; }) {
      @ISA = ('DB_File');
  
  }
  elsif (eval { require SDBM_File; 1; }) {
      @ISA = ('SDBM_File');
  }
  else {
      die "Need either DB_file or SDBM_File installed to run";
  }
  
  # DB_File can store only strings as values, and not Perl structures
  # this small wrapper fixes the problem
  
  sub STORE {
      my ($self, $key, $val) = @_;
      $self->SUPER::STORE($key, freeze($val));
  }
  
  sub FETCH {
      my ($self, $key) = @_;
      my $val = $self->SUPER::FETCH($key);
      return thaw($val);
  }
  
  return 1;
DIST_SURVEYOR_DB_FILE

$fatpacked{"Dist/Surveyor/Inquiry.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR_INQUIRY';
  package Dist::Surveyor::Inquiry;
  
  use strict;
  use warnings;
  use Memoize; # core
  use FindBin;
  use Fcntl qw(:DEFAULT :flock); # core
  use Dist::Surveyor::DB_File; # internal
  use HTTP::Tiny;
  use JSON::MaybeXS qw(JSON decode_json);
  use Scalar::Util qw(looks_like_number); # core
  use Data::Dumper;
  use version;
  
  our $VERSION = '0.022';
  
  =head1 NAME
  
  Dist::Surveyor::Inquiry - Handling the meta-cpan API access for Dist::Surveyor
  
  =head1 DESCRIPTION
  
  There are a few things that needed to be known in this module:
  
  =over
  
  =item *
  
  $metacpan_size - internally defined global to limit the maximum size of 
  every API call
  
  =item *
  
  $metacpan_calls - internally defined global counting how many API call happen.
  
  =item *
  
  This module checks $::DEBUG and $::VERBOSE for obvious proposes.
  
  =item *
  
  For initating cache-on-disk, call Dist::Surveyor::Inquiry->perma_cache()
  (this should be usually done, except in testing environment)
  
  =back
  
  =cut
  
  # We have to limit the number of results when using MetaCPAN::API.
  # We can'r make it too large as it hurts the server (it preallocates)
  # but need to make it large enough for worst case distros (eg eBay-API).
  # TODO: switching to the ElasticSearch module, with cursor support, will
  # probably avoid the need for this. Else we could dynamically adjust.
  our $metacpan_size = 2500;
  our $metacpan_calls = 0;
  
  our ($DEBUG, $VERBOSE);
  *DEBUG = \$::DEBUG;
  *VERBOSE = \$::VERBOSE;
  
  require Exporter;
  our @ISA = qw{Exporter};
  our @EXPORT = qw{
      get_candidate_cpan_dist_releases
      get_candidate_cpan_dist_releases_fallback
      get_module_versions_in_release
      get_release_info
  };
  
  my $agent_string = "dist_surveyor/$VERSION";
  
  my ($ua, $wget, $curl);
  if (HTTP::Tiny->can_ssl) {
      $ua = HTTP::Tiny->new(
          agent => $agent_string,
          timeout => 10,
          keep_alive => 1, 
      );
  } else { # for fatpacking support
      require File::Which;
      require IPC::System::Simple;
      $wget = File::Which::which('wget');
      $curl = File::Which::which('curl');
  }
  
  sub _https_request {
      my ($method, $url, $headers, $content) = @_;
      $headers ||= {};
      $method = uc($method || 'GET');
      if (defined $ua) {
          my %options;
          $options{headers} = $headers if %$headers;
          $options{content} = $content if defined $content;
          my $response = $ua->request($method, $url, \%options);
          unless ($response->{success}) {
              die "Transport error: $response->{content}\n" if $response->{status} == 599;
              die "HTTP error: $response->{status} $response->{reason}\n";
          }
          return $response->{content};
      } elsif (defined $wget) {
          my @args = ('-q', '-O', '-', '-U', $agent_string, '-T', 10, '--method', $method);
          push @args, '--header', "$_: $headers->{$_}" for keys %$headers;
          push @args, '--body-data', $content if defined $content;
          return IPC::System::Simple::capturex($wget, @args, $url);
      } elsif (defined $curl) {
          my @args = ('-s', '-S', '-L', '-A', $agent_string, '--connect-timeout', 10, '-X', $method);
          push @args, '-H', "$_: $headers->{$_}" for keys %$headers;
          push @args, '--data-raw', $content if defined $content;
          return IPC::System::Simple::capturex($curl, @args, $url);
      } else {
          die "None of IO::Socket::SSL, wget, or curl are available; cannot make HTTPS requests.";
      }
  }
  
  # caching via persistent memoize
  
  my %memoize_cache;
  my $locking_file;
  
  =head1 CLASS METHODS
  
  =head2 Dist::Surveyor::Inquiry->perma_cache()
  
  Enable caching to disk of all the MetaCPAN API requests.
  This cache can grew to be quite big - 40MB is one case, but it worth it,
  as if you will need to run this program again, it will run much faster.
  
  =cut
  
  sub perma_cache {
      my $class = shift;
      my $db_generation = 3; # XXX increment on incompatible change
      my $pname = $FindBin::Script;
      $pname =~ s/\..*$//;
      my $memoize_file = "$pname-$db_generation.db";
      open $locking_file, ">", "$memoize_file.lock" 
          or die "Unable to open lock file: $!";
      flock ($locking_file, LOCK_EX) || die "flock: $!";
      tie %memoize_cache => 'Dist::Surveyor::DB_File', $memoize_file, O_CREAT|O_RDWR, 0640
          or die "Unable to use persistent cache: $!";
  }
  
  my @memoize_subs = qw(
      get_candidate_cpan_dist_releases
      get_candidate_cpan_dist_releases_fallback
      get_module_versions_in_release
      get_release_info
  );
  for my $subname (@memoize_subs) {
      my %memoize_args = (
          SCALAR_CACHE => [ HASH => \%memoize_cache ],
          LIST_CACHE   => 'FAULT',
          NORMALIZER   => sub { return join("\034", $subname, @_) }
      );
      memoize($subname, %memoize_args);
  }
  
  =head1 FUNCTIONS
  
  =head2 get_release_info($author, $release)
  
  Receive release info, such as:
  
      get_release_info('SEMUELF', 'Dist-Surveyor-0.009')
  
  Returns a hashref containing all that release meta information, returned by
  C<https://fastapi.metacpan.org/v1/release/$author/$release>
  (but not information on the files inside the module)
  
  Dies on HTTP error, and warns on empty response.
  
  =cut
  
  sub get_release_info {
      my ($author, $release) = @_;
      $metacpan_calls++;
      my $response = _https_request(GET => "https://fastapi.metacpan.org/v1/release/$author/$release");
      my $release_data = decode_json $response;
      if (!$release_data or !$release_data->{release}) {
          warn "Can't find release details for $author/$release - SKIPPED!\n";
          return; # XXX could fake some of $release_data instead
      }
      return $release_data->{release};
  }
  
  =head2 get_candidate_cpan_dist_releases($module, $version, $file_size)
  
  Return a hashref containing all the releases that contain this module 
  (with the specific version and file size combination)
  
  The keys are the release name (i.e. 'Dist-Surveyor-0.009') and the value
  is a hashref containing release information and file information:
  
      'Dist-Surveyor-0.009' => {
          # release information
          'date' => '2013-02-20T06:48:35.000Z',
          'version' => '0.009',
          'author' => 'SEMUELF',
          'version_numified' => '0.009',
          'release' => 'Dist-Surveyor-0.009',
          'distribution' => 'Dist-Surveyor',
          'version_obj' => <version object 0.009>,
  
          # File information
          'path' => 'lib/Dist/Surveyor/DB_File.pm',
          'stat.mtime' => 1361342736,
          'module.version' => '0.009'
          'module.version_numified' => '0.009',
      }
  
  =cut
  
  sub get_candidate_cpan_dist_releases {
      my ($module, $version, $file_size) = @_;
      my $funcstr = "get_candidate_cpan_dist_releases($module, $version, $file_size)";
  
      my $version_qual = _prepare_version_query(0, $version);
  
      my @and_quals = (
          {"term" => {"module.name" => $module }},
          (@$version_qual > 1 ? { "bool" => { "should" => $version_qual } } : $version_qual->[0]),
      );
      push @and_quals, {"term" => {"stat.size" => $file_size }}
          if $file_size;
  
      # XXX doesn't cope with odd cases like 
      # http://explorer.metacpan.org/?url=/module/MLEHMANN/common-sense-3.4/sense.pm.PL
      $metacpan_calls++;
  
      my $query = {
          "size" => $metacpan_size,
          "query" =>  { "bool" => {
              "filter" => \@and_quals,
          }},
          "fields" => [qw(
              release _parent author version version_numified module.version 
              module.version_numified date stat.mtime distribution path
              )]
      };
  
      my $response = _https_request(POST => 'https://fastapi.metacpan.org/v1/file',
          { 'Content-Type' => 'application/json;charset=UTF-8' },
          JSON->new->utf8->canonical->encode($query),
      );
      return _process_response($funcstr, $response);
  }
  
  =head2 get_candidate_cpan_dist_releases_fallback($module, $version)
  
  Similar to get_candidate_cpan_dist_releases, but getting called when 
  get_candidate_cpan_dist_releases fails for find matching file and release.
  
  Maybe the file was tempared somehow, so the file size does not match anymore.
  
  =cut
  
  sub get_candidate_cpan_dist_releases_fallback {
      my ($module, $version) = @_;
  
      # fallback to look for distro of the same name as the module
      # for odd cases like
      # http://explorer.metacpan.org/?url=/module/MLEHMANN/common-sense-3.4/sense.pm.PL
      (my $distname = $module) =~ s/::/-/g;
  
      my $version_qual = _prepare_version_query(1, $version);
  
      my @and_quals = (
          {"term" => {"distribution" => $distname }},
          (@$version_qual > 1 ? { "bool" => { "should" => $version_qual } } : $version_qual->[0]),
      );
  
      # XXX doesn't cope with odd cases like 
      $metacpan_calls++;
      my $query = {
          "size" => $metacpan_size,
          "query" =>  { "bool" => {
              "filter" => \@and_quals,
          }},
          "fields" => [qw(
              release _parent author version version_numified module.version 
              module.version_numified date stat.mtime distribution path)]
      };
      my $response = _https_request(POST => 'https://fastapi.metacpan.org/v1/file',
          { 'Content-Type' => 'application/json;charset=UTF-8' },
          JSON->new->utf8->canonical->encode($query),
      );
      return _process_response("get_candidate_cpan_dist_releases_fallback($module, $version)", $response);
  }
  
  sub _prepare_version_query {
      my ($is_fallback, $version) = @_;
      $version = 0 if not defined $version; # XXX
      my ($v_key, $num_key) = 
          $is_fallback 
          ? qw{ version version_numified } 
          : qw{ module.version module.version_numified };
  
      # timbunce: So, the current situation is that: version_numified is a float
      # holding version->parse($raw_version)->numify, and version is a string
      # also holding version->parse($raw_version)->numify at the moment, and
      # that'll change to ->stringify at some point. Is that right now? 
      # mo: yes, I already patched the indexer, so new releases are already
      # indexed ok, but for older ones I need to reindex cpan
      my $v = (ref $version && $version->isa('version')) ? $version : version->parse($version);
      my %v = map { $_ => 1 } "$version", $v->stringify, $v->numify;
      my @version_qual;
      push @version_qual, { term => { $v_key => $_ } }
          for keys %v;
      push @version_qual, { term => { $num_key => $_ }}
          for grep { looks_like_number($_) } keys %v;
      return \@version_qual;
  }
  
  sub _process_response {
      my ($funcname, $response) = @_;
  
      my $results = decode_json $response;
  
      my $hits = $results->{hits}{hits};
      die "$funcname: too many results (>$metacpan_size)"
          if @$hits >= $metacpan_size;
      warn "$funcname: ".Dumper($results)
          if grep { not $_->{fields}{release} } @$hits; # XXX temp, seen once but not since
  
      # filter out perl-like releases
      @$hits = 
          grep { $_->{fields}{path} !~ m!^(?:t|xt|tests?|inc|samples?|ex|examples?|bak|local-lib)\b! }
          grep { $_->{fields}{release} !~ /^(perl|ponie|parrot|kurila|SiePerl-)/ } 
          @$hits;
  
      for my $hit (@$hits) {
          $hit->{release_id} = delete $hit->{_parent};
          # add version_obj for convenience (will fail and be undef for releases like "0.08124-TRIAL")
          $hit->{fields}{version_obj} = eval { version->parse($hit->{fields}{version}) };
      }
  
      # we'll return { "Dist-Name-Version" => { details }, ... }
      my %dists = map { $_->{fields}{release} => $_->{fields} } @$hits;
  
      warn "$funcname: @{[ sort keys %dists ]}\n"
          if $VERBOSE;
  
      return \%dists;
  }
  
  =head2 get_module_versions_in_release($author, $release)
  
  Receive release info, such as:
  
      get_module_versions_in_release('SEMUELF', 'Dist-Surveyor-0.009')
  
  And returns a hashref, that contains one entry for each module that exists 
  in the release. module information is the format:
  
      'Dist::Surveyor' => {
          'version' => '0.009',
          'name' => 'Dist::Surveyor',
          'path' => 'lib/Dist/Surveyor.pm',
          'size' => 43879
      },
  
  this function can be called for all sorts of releases that are only vague 
  possibilities and aren't actually installed, so generally it's quiet
  
  =cut
  
  sub get_module_versions_in_release {
      my ($author, $release) = @_;
  
      $metacpan_calls++;
      my $results = eval { 
          my $query = {
              "size" => $metacpan_size,
              "query" =>  { "bool" => {
                  "filter" => [
                      {"term" => {"release" => $release }},
                      {"term" => {"author" => $author }},
                      {"term" => {"mime" => "text/x-script.perl-module"}},
                  ],
              }},
              "fields" => ["path","name","stat.size"],
              "inner_hits" => {"module" => {"path" => {"module" => {}}}},
          }; 
          my $response = _https_request(POST => 'https://fastapi.metacpan.org/v1/file',
              { 'Content-Type' => 'application/json;charset=UTF-8' },
              JSON->new->utf8->canonical->encode($query),
          );
          decode_json $response;
      };
      if (not $results) {
          warn "Failed get_module_versions_in_release for $author/$release: $@";
          return {};
      }
      my $hits = $results->{hits}{hits};
      die "get_module_versions_in_release($author, $release): too many results"
          if @$hits >= $metacpan_size;
  
      my %modules_in_release;
      for my $hit (@$hits) {
          my $path = $hit->{fields}{path};
  
          # XXX try to ignore files that won't get installed
          # XXX should use META noindex!
          if ($path =~ m!^(?:t|xt|tests?|inc|samples?|ex|examples?|bak|local-lib)\b!) {
              warn "$author/$release: ignored non-installed module $path\n"
                  if $DEBUG;
              next;
          }
  
          my $size = $hit->{fields}{"stat.size"};
          # files can contain more than one package ('module')
          my $rel_mods = $hit->{inner_hits}{module}{hits}{hits} || [];
          for my $inner_hit (@$rel_mods) { # actually packages in the file
              my $mod = $inner_hit->{_source};
  
              # Some files may contain multiple packages. We want to ignore
              # all except the one that matches the name of the file.
              # We use a fairly loose (but still very effective) test because we
              # can't rely on $path including the full package name.
              (my $filebasename = $hit->{fields}{name}) =~ s/\.pm$//;
              if ($mod->{name} !~ m/\b$filebasename$/) {
                  warn "$author/$release: ignored $mod->{name} in $path\n"
                      if $DEBUG;
                  next;
              }
  
              # warn if package previously seen in this release
              # with a different version or file size
              if (my $prev = $modules_in_release{$mod->{name}}) {
                  my $version_obj = eval { version->parse($mod->{version}) };
                  die "$author/$release: $mod $mod->{version}: $@" if $@;
  
                  if ($VERBOSE) {
                      # XXX could add a show-only-once cache here
                      my $msg = "$mod->{name} $mod->{version} ($size) seen in $path after $prev->{path} $prev->{version} ($prev->{size})";
                      warn "$release: $msg\n"
                          if ($version_obj != version->parse($prev->{version}) or $size != $prev->{size});
                  }
              }
  
              # keep result small as Storable thawing this is major runtime cost
              # (specifically we avoid storing a version_obj here)
              $modules_in_release{$mod->{name}} = {
                  name => $mod->{name},
                  path => $path,
                  version => $mod->{version},
                  size => $size,
              };
          }
      }
  
      warn "\n$author/$release contains: @{[ map { qq($_->{name} $_->{version}) } values %modules_in_release ]}\n"
          if $DEBUG;
  
      return \%modules_in_release;
  }
  
  =head1 License, Copyright
  
  Please see L<Dist::Surveyor> for details
  
  =cut
  
  1;
DIST_SURVEYOR_INQUIRY

$fatpacked{"Dist/Surveyor/MakeCpan.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR_MAKECPAN';
  package Dist::Surveyor::MakeCpan;
  
  use strict;
  use warnings;
  use Carp; # core
  use Data::Dumper; # core
  use File::Path; # core
  use CPAN::DistnameInfo;
  use File::Basename qw{dirname};  # core
  use HTTP::Tiny;
  use Dist::Surveyor::Inquiry;
  use List::Util qw(max); # core
  
  our $VERSION = '0.022';
  
  our $verbose;
  *verbose = \$::VERBOSE;
  
  sub new {
      my ($class, $cpan_dir, $progname, $irregularities) = @_;
  
      require Compress::Zlib;
      mkpath("$cpan_dir/modules");
  
      # --- write extra data files that may be useful XXX may change
      # XXX these don't all (yet?) merge with existing data
      my $survey_datadump_dir = "$cpan_dir/$progname";
      mkpath($survey_datadump_dir);
  
      # Write list of releases, like default stdout
      open my $rel_fh, ">", "$survey_datadump_dir/releases.txt";
  
      # dump the primary result data for additional info and debugging
      my $gzwrite = Compress::Zlib::gzopen("$survey_datadump_dir/_data_dump.perl.gz", 'wb')
          or croak "Cannot open $survey_datadump_dir/_data_dump.perl.gz for writing: " . $Compress::Zlib::gzerrno;
      $gzwrite->gzwrite("[\n");
  
  
      my $self = {
          errors => 0,
          cpan_dir => $cpan_dir,
          irregularities => $irregularities,
          pkg_ver_rel => {}, # for 02packages
          progname => $progname,
          rel_fh => $rel_fh,
          gzwrite => $gzwrite,
      };
      return bless $self, $class;
  }
  
  sub close {
      my $self = shift;
  
      # --- write 02packages file
  
      my $pkg_lines = _readpkgs($self->{cpan_dir});
      my %packages;
      for my $line (@$pkg_lines, map { $_->{line} } values %{ $self->{pkg_ver_rel} }) {
          my ($pkg) = split(/\s+/, $line, 2);
          if ($packages{$pkg} and $packages{$pkg} ne $line) {
              warn "Old $packages{$pkg}\nNew $line\n" if $verbose;
          }
          $packages{$pkg} = $line;
      };
      _writepkgs($self->{cpan_dir}, [ sort { lc $a cmp lc $b } values %packages ] );
  
  
  
      # Write list of token packages - each should match only one release.
      # This makes it _much_ faster to do installs via cpanm because it
      # can skip the modules it knows are installed (whereas using a list of
      # distros it has to reinstall _all_ of them every time).
      # XXX maybe add as a separate option: "--mainpkgs mainpkgs.lst"
      my %dist_packages;
      while ( my ($pkg, $line) = each %packages) {
          my $distpath = (split /\s+/, $line)[2];
          $dist_packages{$distpath}{$pkg}++;
      }
      my %token_package;
      my %token_package_pri = (       # alter install order for some modules
          'Module::Build' => 100,     # should be near first
          Moose => 50,
  
          # install distros that use Module::Install late so their dependencies
          # have already been resolved (else they try to fetch them directly,
          # bypassing our cpanm --mirror-only goal)
          'Olson::Abbreviations' => -90,
  
          # distros with special needs
          'Term::ReadKey' => -100,    # tests hang if run in background
      );
      for my $distpath (sort keys %dist_packages) {
          my $dp = $dist_packages{$distpath};
          my $di = CPAN::DistnameInfo->new($distpath);
          #warn Dumper([ $distpath, $di->dist, $di]);
          (my $token_pkg = $di->dist) =~ s/-/::/g;
          if (!$dp->{$token_pkg}) {
              if (my $keypkg = $self->{irregularities}->{$di->dist}) {
                  $token_pkg = $keypkg;
              }
              else {
                  # XXX not good - may pick a dummy test package
                  $token_pkg = (grep { $_ } keys %$dp)[0] || $token_pkg;
                  warn "Picked $token_pkg as token package for ".$di->distvname."\n";
              }
          }
          $token_package{$token_pkg} = $token_package_pri{$token_pkg} || 0;
      }
  
      my @main_pkgs = sort { $token_package{$b} <=> $token_package{$a} or $a cmp $b } keys %token_package;
      open my $key_pkg_fh, ">", join('/', $self->{cpan_dir}, $self->{progname}, "token_packages.txt");
      print $key_pkg_fh "$_\n" for @main_pkgs;
      close $key_pkg_fh;
  
      close $self->{rel_fh};
  
      $self->{gzwrite}->gzwrite("]\n");
      $self->{gzwrite}->gzclose;
  
      warn $self->{cpan_dir}." updated.\n";
      return $self->{errors};
  }
  
  sub add_release {
      my ($self, $ri) = @_;
  
      # --- get the file
  
      my $main_url = $ri->{download_url};
      my $di = distname_info_from_url($main_url);
      my $pathfile = "authors/id/".$di->pathname;
      my $destfile = $self->{cpan_dir}."/$pathfile";
      mkpath(dirname($destfile));
  
      my @urls = ($main_url);
      for my $mirror ('http://backpan.perl.org') {
          push @urls, "$mirror/$pathfile";
      }
  
      my $mirror_status;
      my $ua = HTTP::Tiny->new(agent => "dist_surveyor/$VERSION");
      for my $url (@urls) {
          $mirror_status = $ua->mirror($url, $destfile);
          last if $mirror_status->{success};
      }
      if (!$mirror_status->{success}) {
          my $err = $mirror_status->{status} == 599 ? $mirror_status->{content} : $mirror_status->{status};
          my $msg = "Error $err mirroring $main_url";
          if (-f $destfile) {
              warn "$msg - using existing file\n";
          }
          else {
              # better to keep going and add the packages to the index
              # than abort at this stage due to network/mirror problems
              # the user can drop the files in later
              warn "$msg - continuing, ADD FILE MANUALLY!\n";
              $self->{errors}++;
          }
      }
      else {
          warn "$mirror_status->{status} $main_url\n" if $verbose;
      }
  
  
      my $mods_in_rel = get_module_versions_in_release($ri->{author}, $ri->{name});
  
      if (!keys %$mods_in_rel) { # XXX hack for common::sense
          (my $dist_as_pkg = $ri->{distribution}) =~ s/-/::/g;
          warn "$ri->{author}/$ri->{name} has no modules! Adding fake module $dist_as_pkg ".$di->version."\n";
          $mods_in_rel->{$dist_as_pkg} = {
              name => $dist_as_pkg,
              version => $di->version,
              version_obj => version->parse($di->version),
          };
      }
  
  
      # --- accumulate package info for 02packages file
  
      for my $pkg (sort keys %$mods_in_rel ) {
          # pi => { name=>, version=>, version_obj=> }
          my $pi = $mods_in_rel->{$pkg};
  
          # for selecting which dist a package belongs to
          # XXX should factor in authorization status
          my $p_r_match_score = p_r_match_score($pkg, $ri);
  
          if (my $pvr = $self->{pkg_ver_rel}->{$pkg}) {
              # already seen same package name in different distribution
              if ($p_r_match_score < $pvr->{p_r_match_score}) {
                  warn "$pkg seen in $pvr->{ri}{name} so ignoring one in $ri->{name}\n";
                  next;
              }
              warn "$pkg seen in $pvr->{ri}{name} - now overridden by $ri->{name}\n";
          }
  
          my $line = _fmtmodule($pkg, $di->pathname, $pi->{version});
          $self->{pkg_ver_rel}->{$pkg} = { line => $line, pi => $pi, ri => $ri, p_r_match_score => $p_r_match_score };
      }
  
      printf { $self->{rel_fh} } "%s\n", ( exists $ri->{url} ? $ri->{url} : "?url" );
  
      $self->{gzwrite}->gzwrite(Dumper($ri));
      $self->{gzwrite}->gzwrite(",");
  
  }
  
  sub p_r_match_score {
      my ($pkg_name, $ri) = @_;
      my @p = split /\W/, $pkg_name;
      my @r = split /\W/, $ri->{name};
      for my $i (0..max(scalar @p, scalar @r)) {
          return $i if not defined $p[$i]
                    or not defined $r[$i]
                    or $p[$i] ne $r[$i]
      }
      die; # unreached
  }
  
  # copied from CPAN::Mini::Inject and hacked
  
  sub _readpkgs {
      my ($cpandir) = @_;
  
      my $packages_file = $cpandir.'/modules/02packages.details.txt.gz';
      return [] if not -f $packages_file;
  
      my $gzread = Compress::Zlib::gzopen($packages_file, 'rb')
          or croak "Cannot open $packages_file: " . $Compress::Zlib::gzerrno . "\n";
  
      my $inheader = 1;
      my @packages;
      my $package;
  
      while ( $gzread->gzreadline( $package ) ) {
          if ( $inheader ) {
              $inheader = 0 unless $package =~ /\S/;
              next;
          }
          chomp $package;
          push @packages, $package;
      }
  
      $gzread->gzclose;
  
      return \@packages;
  }
  
  sub _writepkgs {
      my ($cpandir, $pkgs) = @_;
  
      my $packages_file = $cpandir.'/modules/02packages.details.txt.gz';
      my $gzwrite = Compress::Zlib::gzopen($packages_file, 'wb')
          or croak "Cannot open $packages_file for writing: " . $Compress::Zlib::gzerrno;
      
      $gzwrite->gzwrite( "File:         02packages.details.txt\n" );
      $gzwrite->gzwrite(
          "URL:          http://www.perl.com/CPAN/modules/02packages.details.txt\n"
      );
      $gzwrite->gzwrite(
          'Description:  Package names found in directory $CPAN/authors/id/'
          . "\n" );
      $gzwrite->gzwrite( "Columns:      package name, version, path\n" );
      $gzwrite->gzwrite(
          "Intended-For: Automated fetch routines, namespace documentation.\n"
      );
      $gzwrite->gzwrite( "Written-By:   $0 0.001\n" ); # XXX TODO
      $gzwrite->gzwrite( "Line-Count:   " . scalar( @$pkgs ) . "\n" );
      # Last-Updated: Sat, 19 Mar 2005 19:49:10 GMT
      my @date = split( /\s+/, scalar( gmtime ) );
      $gzwrite->gzwrite( "Last-Updated: $date[0], $date[2] $date[1] $date[4] $date[3] GMT\n\n" );
      
      $gzwrite->gzwrite( "$_\n" ) for ( @$pkgs );
      
      $gzwrite->gzclose;
  }
  
  sub distname_info_from_url {
      my ($url) = @_;
      $url =~ s{.* \b authors/id/ }{}x
          or warn "No authors/ in '$url'\n";
      my $di = CPAN::DistnameInfo->new($url);
      return $di;
  }
  
  sub _fmtmodule {
      my ( $module, $file, $version ) = @_;
      $version = "undef" if not defined $version;
      my $fw = 38 - length $version;
      $fw = length $module if $fw < length $module;
      return sprintf "%-${fw}s %s  %s", $module, $version, $file;
  }
  
  sub errors {
      my $self = shift;
      return $self->{errors};
  }
  
  1;
  
  =head1 NAME
  
  Dist::Surveyor::MakeCpan - Create a Mini-CPAN for the surveyed modules
  
  =head1 SYNOPSIS
  
      use Dist::Surveyor::MakeCpan;
      my $cpan = Dist::Surveyor::MakeCpan->new(
              $cpan_dir, $progname, $irregularities);
      foreach my $rel (@releases) {
          $cpan->add_release($rel);
      }
      $cpan->close();
      say "There where ", $cpan->errors(), " errors";
  
  =head1 DESCRIPTION
  
  Create a mini-CPAN for the surveyed modules, so you will be able to re-install 
  the same setup in a new computer.
  
  =head1 CONSTRUCTOR
  
      my $cpan = Dist::Surveyor::MakeCpan->new(
              $cpan_dir, $progname, $irregularities, $verbose);
  
  =over
  
  =item $cpan_dir
  
  The directory where the mini-cpan will be created
  
  =item $progname
  
  The name of the running program - will be used to create a subdirectory 
  inside $cpan_dir, that will contain debug information.
  
  =item $irregularities
  
  A hashref with a list of irregular named releases. i.e. 'libwww-perl' => 'LWP'.
  
  =back
  
  =head1 METHODS
  
  =head2 $cpan->add_release($rel)
  
  Add one release to the mini-cpan. the $rel should be a hashref, 
  and contain the following fields:
  
      $rel = {
          download_url => 'http://cpan.metacpan.org/authors/id/S/SE/SEMUELF/Dist-Surveyor-0.009.tar.gz',
          url => 'authors/id/S/SE/SEMUELF/Dist-Surveyor-0.009.tar.gz',
          author => 'SEMUELF',
          name => 'Dist-Surveyor-0.009',
          distribution => 'Dist-Surveyor',
      }
  
  =head2 $cpan->close()
  
  Close the mini-CPAN, and close all the debug data dump files.
  
  =head1 License, Copyright
  
  Please see L<Dist::Surveyor> for details
  
  =cut
DIST_SURVEYOR_MAKECPAN

$fatpacked{"Exporter.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'EXPORTER';
  package Exporter;
  
  require 5.006;
  
  # Be lean.
  #use strict;
  #no strict 'refs';
  
  our $Debug = 0;
  our $ExportLevel = 0;
  our $Verbose ||= 0;
  our $VERSION = '5.72';
  our (%Cache);
  
  sub as_heavy {
    require Exporter::Heavy;
    # Unfortunately, this does not work if the caller is aliased as *name = \&foo
    # Thus the need to create a lot of identical subroutines
    my $c = (caller(1))[3];
    $c =~ s/.*:://;
    \&{"Exporter::Heavy::heavy_$c"};
  }
  
  sub export {
    goto &{as_heavy()};
  }
  
  sub import {
    my $pkg = shift;
    my $callpkg = caller($ExportLevel);
  
    if ($pkg eq "Exporter" and @_ and $_[0] eq "import") {
      *{$callpkg."::import"} = \&import;
      return;
    }
  
    # We *need* to treat @{"$pkg\::EXPORT_FAIL"} since Carp uses it :-(
    my $exports = \@{"$pkg\::EXPORT"};
    # But, avoid creating things if they don't exist, which saves a couple of
    # hundred bytes per package processed.
    my $fail = ${$pkg . '::'}{EXPORT_FAIL} && \@{"$pkg\::EXPORT_FAIL"};
    return export $pkg, $callpkg, @_
      if $Verbose or $Debug or $fail && @$fail > 1;
    my $export_cache = ($Cache{$pkg} ||= {});
    my $args = @_ or @_ = @$exports;
  
    if ($args and not %$export_cache) {
      s/^&//, $export_cache->{$_} = 1
        foreach (@$exports, @{"$pkg\::EXPORT_OK"});
    }
    my $heavy;
    # Try very hard not to use {} and hence have to  enter scope on the foreach
    # We bomb out of the loop with last as soon as heavy is set.
    if ($args or $fail) {
      ($heavy = (/\W/ or $args and not exists $export_cache->{$_}
                 or $fail and @$fail and $_ eq $fail->[0])) and last
                   foreach (@_);
    } else {
      ($heavy = /\W/) and last
        foreach (@_);
    }
    return export $pkg, $callpkg, ($args ? @_ : ()) if $heavy;
    local $SIG{__WARN__} = 
  	sub {require Carp; &Carp::carp} if not $SIG{__WARN__};
    # shortcut for the common case of no type character
    *{"$callpkg\::$_"} = \&{"$pkg\::$_"} foreach @_;
  }
  
  # Default methods
  
  sub export_fail {
      my $self = shift;
      @_;
  }
  
  # Unfortunately, caller(1)[3] "does not work" if the caller is aliased as
  # *name = \&foo.  Thus the need to create a lot of identical subroutines
  # Otherwise we could have aliased them to export().
  
  sub export_to_level {
    goto &{as_heavy()};
  }
  
  sub export_tags {
    goto &{as_heavy()};
  }
  
  sub export_ok_tags {
    goto &{as_heavy()};
  }
  
  sub require_version {
    goto &{as_heavy()};
  }
  
  1;
  __END__
  
  =head1 NAME
  
  Exporter - Implements default import method for modules
  
  =head1 SYNOPSIS
  
  In module F<YourModule.pm>:
  
    package YourModule;
    require Exporter;
    @ISA = qw(Exporter);
    @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
  
  or
  
    package YourModule;
    use Exporter 'import'; # gives you Exporter's import() method directly
    @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
  
  In other files which wish to use C<YourModule>:
  
    use YourModule qw(frobnicate);      # import listed symbols
    frobnicate ($left, $right)          # calls YourModule::frobnicate
  
  Take a look at L</Good Practices> for some variants
  you will like to use in modern Perl code.
  
  =head1 DESCRIPTION
  
  The Exporter module implements an C<import> method which allows a module
  to export functions and variables to its users' namespaces.  Many modules
  use Exporter rather than implementing their own C<import> method because
  Exporter provides a highly flexible interface, with an implementation optimised
  for the common case.
  
  Perl automatically calls the C<import> method when processing a
  C<use> statement for a module.  Modules and C<use> are documented
  in L<perlfunc> and L<perlmod>.  Understanding the concept of
  modules and how the C<use> statement operates is important to
  understanding the Exporter.
  
  =head2 How to Export
  
  The arrays C<@EXPORT> and C<@EXPORT_OK> in a module hold lists of
  symbols that are going to be exported into the users name space by
  default, or which they can request to be exported, respectively.  The
  symbols can represent functions, scalars, arrays, hashes, or typeglobs.
  The symbols must be given by full name with the exception that the
  ampersand in front of a function is optional, e.g.
  
      @EXPORT    = qw(afunc $scalar @array);   # afunc is a function
      @EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc
  
  If you are only exporting function names it is recommended to omit the
  ampersand, as the implementation is faster this way.
  
  =head2 Selecting What to Export
  
  Do B<not> export method names!
  
  Do B<not> export anything else by default without a good reason!
  
  Exports pollute the namespace of the module user.  If you must export
  try to use C<@EXPORT_OK> in preference to C<@EXPORT> and avoid short or
  common symbol names to reduce the risk of name clashes.
  
  Generally anything not exported is still accessible from outside the
  module using the C<YourModule::item_name> (or C<< $blessed_ref->method >>)
  syntax.  By convention you can use a leading underscore on names to
  informally indicate that they are 'internal' and not for public use.
  
  (It is actually possible to get private functions by saying:
  
    my $subref = sub { ... };
    $subref->(@args);            # Call it as a function
    $obj->$subref(@args);        # Use it as a method
  
  However if you use them for methods it is up to you to figure out
  how to make inheritance work.)
  
  As a general rule, if the module is trying to be object oriented
  then export nothing.  If it's just a collection of functions then
  C<@EXPORT_OK> anything but use C<@EXPORT> with caution.  For function and
  method names use barewords in preference to names prefixed with
  ampersands for the export lists.
  
  Other module design guidelines can be found in L<perlmod>.
  
  =head2 How to Import
  
  In other files which wish to use your module there are three basic ways for
  them to load your module and import its symbols:
  
  =over 4
  
  =item C<use YourModule;>
  
  This imports all the symbols from YourModule's C<@EXPORT> into the namespace
  of the C<use> statement.
  
  =item C<use YourModule ();>
  
  This causes perl to load your module but does not import any symbols.
  
  =item C<use YourModule qw(...);>
  
  This imports only the symbols listed by the caller into their namespace.
  All listed symbols must be in your C<@EXPORT> or C<@EXPORT_OK>, else an error
  occurs.  The advanced export features of Exporter are accessed like this,
  but with list entries that are syntactically distinct from symbol names.
  
  =back
  
  Unless you want to use its advanced features, this is probably all you
  need to know to use Exporter.
  
  =head1 Advanced Features
  
  =head2 Specialised Import Lists
  
  If any of the entries in an import list begins with !, : or / then
  the list is treated as a series of specifications which either add to
  or delete from the list of names to import.  They are processed left to
  right. Specifications are in the form:
  
      [!]name         This name only
      [!]:DEFAULT     All names in @EXPORT
      [!]:tag         All names in $EXPORT_TAGS{tag} anonymous array
      [!]/pattern/    All names in @EXPORT and @EXPORT_OK which match
  
  A leading ! indicates that matching names should be deleted from the
  list of names to import.  If the first specification is a deletion it
  is treated as though preceded by :DEFAULT.  If you just want to import
  extra names in addition to the default set you will still need to
  include :DEFAULT explicitly.
  
  e.g., F<Module.pm> defines:
  
      @EXPORT      = qw(A1 A2 A3 A4 A5);
      @EXPORT_OK   = qw(B1 B2 B3 B4 B5);
      %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]);
  
  Note that you cannot use tags in @EXPORT or @EXPORT_OK.
  
  Names in EXPORT_TAGS must also appear in @EXPORT or @EXPORT_OK.
  
  An application using Module can say something like:
  
      use Module qw(:DEFAULT :T2 !B3 A3);
  
  Other examples include:
  
      use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
      use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);
  
  Remember that most patterns (using //) will need to be anchored
  with a leading ^, e.g., C</^EXIT/> rather than C</EXIT/>.
  
  You can say C<BEGIN { $Exporter::Verbose=1 }> to see how the
  specifications are being processed and what is actually being imported
  into modules.
  
  =head2 Exporting Without Using Exporter's import Method
  
  Exporter has a special method, 'export_to_level' which is used in situations
  where you can't directly call Exporter's
  import method.  The export_to_level
  method looks like:
  
      MyPackage->export_to_level(
  	$where_to_export, $package, @what_to_export
      );
  
  where C<$where_to_export> is an integer telling how far up the calling stack
  to export your symbols, and C<@what_to_export> is an array telling what
  symbols *to* export (usually this is C<@_>).  The C<$package> argument is
  currently unused.
  
  For example, suppose that you have a module, A, which already has an
  import function:
  
      package A;
  
      @ISA = qw(Exporter);
      @EXPORT_OK = qw($b);
  
      sub import
      {
  	$A::b = 1;     # not a very useful import method
      }
  
  and you want to Export symbol C<$A::b> back to the module that called 
  package A.  Since Exporter relies on the import method to work, via 
  inheritance, as it stands Exporter::import() will never get called. 
  Instead, say the following:
  
      package A;
      @ISA = qw(Exporter);
      @EXPORT_OK = qw($b);
  
      sub import
      {
  	$A::b = 1;
  	A->export_to_level(1, @_);
      }
  
  This will export the symbols one level 'above' the current package - ie: to 
  the program or module that used package A. 
  
  Note: Be careful not to modify C<@_> at all before you call export_to_level
  - or people using your package will get very unexplained results!
  
  =head2 Exporting Without Inheriting from Exporter
  
  By including Exporter in your C<@ISA> you inherit an Exporter's import() method
  but you also inherit several other helper methods which you probably don't
  want.  To avoid this you can do:
  
    package YourModule;
    use Exporter qw(import);
  
  which will export Exporter's own import() method into YourModule.
  Everything will work as before but you won't need to include Exporter in
  C<@YourModule::ISA>.
  
  Note: This feature was introduced in version 5.57
  of Exporter, released with perl 5.8.3.
  
  =head2 Module Version Checking
  
  The Exporter module will convert an attempt to import a number from a
  module into a call to C<< $module_name->VERSION($value) >>.  This can
  be used to validate that the version of the module being used is
  greater than or equal to the required version.
  
  For historical reasons, Exporter supplies a C<require_version> method that
  simply delegates to C<VERSION>.  Originally, before C<UNIVERSAL::VERSION>
  existed, Exporter would call C<require_version>.
  
  Since the C<UNIVERSAL::VERSION> method treats the C<$VERSION> number as
  a simple numeric value it will regard version 1.10 as lower than
  1.9.  For this reason it is strongly recommended that you use numbers
  with at least two decimal places, e.g., 1.09.
  
  =head2 Managing Unknown Symbols
  
  In some situations you may want to prevent certain symbols from being
  exported.  Typically this applies to extensions which have functions
  or constants that may not exist on some systems.
  
  The names of any symbols that cannot be exported should be listed
  in the C<@EXPORT_FAIL> array.
  
  If a module attempts to import any of these symbols the Exporter
  will give the module an opportunity to handle the situation before
  generating an error.  The Exporter will call an export_fail method
  with a list of the failed symbols:
  
    @failed_symbols = $module_name->export_fail(@failed_symbols);
  
  If the C<export_fail> method returns an empty list then no error is
  recorded and all the requested symbols are exported.  If the returned
  list is not empty then an error is generated for each symbol and the
  export fails.  The Exporter provides a default C<export_fail> method which
  simply returns the list unchanged.
  
  Uses for the C<export_fail> method include giving better error messages
  for some symbols and performing lazy architectural checks (put more
  symbols into C<@EXPORT_FAIL> by default and then take them out if someone
  actually tries to use them and an expensive check shows that they are
  usable on that platform).
  
  =head2 Tag Handling Utility Functions
  
  Since the symbols listed within C<%EXPORT_TAGS> must also appear in either
  C<@EXPORT> or C<@EXPORT_OK>, two utility functions are provided which allow
  you to easily add tagged sets of symbols to C<@EXPORT> or C<@EXPORT_OK>:
  
    %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
  
    Exporter::export_tags('foo');     # add aa, bb and cc to @EXPORT
    Exporter::export_ok_tags('bar');  # add aa, cc and dd to @EXPORT_OK
  
  Any names which are not tags are added to C<@EXPORT> or C<@EXPORT_OK>
  unchanged but will trigger a warning (with C<-w>) to avoid misspelt tags
  names being silently added to C<@EXPORT> or C<@EXPORT_OK>.  Future versions
  may make this a fatal error.
  
  =head2 Generating Combined Tags
  
  If several symbol categories exist in C<%EXPORT_TAGS>, it's usually
  useful to create the utility ":all" to simplify "use" statements.
  
  The simplest way to do this is:
  
    %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
  
    # add all the other ":class" tags to the ":all" class,
    # deleting duplicates
    {
      my %seen;
  
      push @{$EXPORT_TAGS{all}},
        grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
    }
  
  F<CGI.pm> creates an ":all" tag which contains some (but not really
  all) of its categories.  That could be done with one small
  change:
  
    # add some of the other ":class" tags to the ":all" class,
    # deleting duplicates
    {
      my %seen;
  
      push @{$EXPORT_TAGS{all}},
        grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}}
          foreach qw/html2 html3 netscape form cgi internal/;
    }
  
  Note that the tag names in C<%EXPORT_TAGS> don't have the leading ':'.
  
  =head2 C<AUTOLOAD>ed Constants
  
  Many modules make use of C<AUTOLOAD>ing for constant subroutines to
  avoid having to compile and waste memory on rarely used values (see
  L<perlsub> for details on constant subroutines).  Calls to such
  constant subroutines are not optimized away at compile time because
  they can't be checked at compile time for constancy.
  
  Even if a prototype is available at compile time, the body of the
  subroutine is not (it hasn't been C<AUTOLOAD>ed yet).  perl needs to
  examine both the C<()> prototype and the body of a subroutine at
  compile time to detect that it can safely replace calls to that
  subroutine with the constant value.
  
  A workaround for this is to call the constants once in a C<BEGIN> block:
  
     package My ;
  
     use Socket ;
  
     foo( SO_LINGER );  ## SO_LINGER NOT optimized away; called at runtime
     BEGIN { SO_LINGER }
     foo( SO_LINGER );  ## SO_LINGER optimized away at compile time.
  
  This forces the C<AUTOLOAD> for C<SO_LINGER> to take place before
  SO_LINGER is encountered later in C<My> package.
  
  If you are writing a package that C<AUTOLOAD>s, consider forcing
  an C<AUTOLOAD> for any constants explicitly imported by other packages
  or which are usually used when your package is C<use>d.
  
  =head1 Good Practices
  
  =head2 Declaring C<@EXPORT_OK> and Friends
  
  When using C<Exporter> with the standard C<strict> and C<warnings>
  pragmas, the C<our> keyword is needed to declare the package
  variables C<@EXPORT_OK>, C<@EXPORT>, C<@ISA>, etc.
  
    our @ISA = qw(Exporter);
    our @EXPORT_OK = qw(munge frobnicate);
  
  If backward compatibility for Perls under 5.6 is important,
  one must write instead a C<use vars> statement.
  
    use vars qw(@ISA @EXPORT_OK);
    @ISA = qw(Exporter);
    @EXPORT_OK = qw(munge frobnicate);
  
  =head2 Playing Safe
  
  There are some caveats with the use of runtime statements
  like C<require Exporter> and the assignment to package
  variables, which can be very subtle for the unaware programmer.
  This may happen for instance with mutually recursive
  modules, which are affected by the time the relevant
  constructions are executed.
  
  The ideal (but a bit ugly) way to never have to think
  about that is to use C<BEGIN> blocks.  So the first part
  of the L</SYNOPSIS> code could be rewritten as:
  
    package YourModule;
  
    use strict;
    use warnings;
  
    our (@ISA, @EXPORT_OK);
    BEGIN {
       require Exporter;
       @ISA = qw(Exporter);
       @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
    }
  
  The C<BEGIN> will assure that the loading of F<Exporter.pm>
  and the assignments to C<@ISA> and C<@EXPORT_OK> happen
  immediately, leaving no room for something to get awry
  or just plain wrong.
  
  With respect to loading C<Exporter> and inheriting, there
  are alternatives with the use of modules like C<base> and C<parent>.
  
    use base qw(Exporter);
    # or
    use parent qw(Exporter);
  
  Any of these statements are nice replacements for
  C<BEGIN { require Exporter; @ISA = qw(Exporter); }>
  with the same compile-time effect.  The basic difference
  is that C<base> code interacts with declared C<fields>
  while C<parent> is a streamlined version of the older
  C<base> code to just establish the IS-A relationship.
  
  For more details, see the documentation and code of
  L<base> and L<parent>.
  
  Another thorough remedy to that runtime
  vs. compile-time trap is to use L<Exporter::Easy>,
  which is a wrapper of Exporter that allows all
  boilerplate code at a single gulp in the
  use statement.
  
     use Exporter::Easy (
         OK => [ qw(munge frobnicate) ],
     );
     # @ISA setup is automatic
     # all assignments happen at compile time
  
  =head2 What Not to Export
  
  You have been warned already in L</Selecting What to Export>
  to not export:
  
  =over 4
  
  =item *
  
  method names (because you don't need to
  and that's likely to not do what you want),
  
  =item *
  
  anything by default (because you don't want to surprise your users...
  badly)
  
  =item *
  
  anything you don't need to (because less is more)
  
  =back
  
  There's one more item to add to this list.  Do B<not>
  export variable names.  Just because C<Exporter> lets you
  do that, it does not mean you should.
  
    @EXPORT_OK = qw($svar @avar %hvar); # DON'T!
  
  Exporting variables is not a good idea.  They can
  change under the hood, provoking horrible
  effects at-a-distance that are too hard to track
  and to fix.  Trust me: they are not worth it.
  
  To provide the capability to set/get class-wide
  settings, it is best instead to provide accessors
  as subroutines or class methods instead.
  
  =head1 SEE ALSO
  
  C<Exporter> is definitely not the only module with
  symbol exporter capabilities.  At CPAN, you may find
  a bunch of them.  Some are lighter.  Some
  provide improved APIs and features.  Pick the one
  that fits your needs.  The following is
  a sample list of such modules.
  
      Exporter::Easy
      Exporter::Lite
      Exporter::Renaming
      Exporter::Tidy
      Sub::Exporter / Sub::Installer
      Perl6::Export / Perl6::Export::Attrs
  
  =head1 LICENSE
  
  This library is free software.  You can redistribute it
  and/or modify it under the same terms as Perl itself.
  
  =cut
  
  
  
EXPORTER

$fatpacked{"Exporter/Heavy.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'EXPORTER_HEAVY';
  package Exporter::Heavy;
  
  use strict;
  no strict 'refs';
  
  # On one line so MakeMaker will see it.
  require Exporter;  our $VERSION = $Exporter::VERSION;
  
  =head1 NAME
  
  Exporter::Heavy - Exporter guts
  
  =head1 SYNOPSIS
  
  (internal use only)
  
  =head1 DESCRIPTION
  
  No user-serviceable parts inside.
  
  =cut
  
  #
  # We go to a lot of trouble not to 'require Carp' at file scope,
  #  because Carp requires Exporter, and something has to give.
  #
  
  sub _rebuild_cache {
      my ($pkg, $exports, $cache) = @_;
      s/^&// foreach @$exports;
      @{$cache}{@$exports} = (1) x @$exports;
      my $ok = \@{"${pkg}::EXPORT_OK"};
      if (@$ok) {
  	s/^&// foreach @$ok;
  	@{$cache}{@$ok} = (1) x @$ok;
      }
  }
  
  sub heavy_export {
  
      # Save the old __WARN__ handler in case it was defined
      my $oldwarn = $SIG{__WARN__};
  
      # First make import warnings look like they're coming from the "use".
      local $SIG{__WARN__} = sub {
  	# restore it back so proper stacking occurs
  	local $SIG{__WARN__} = $oldwarn;
  	my $text = shift;
  	if ($text =~ s/ at \S*Exporter\S*.pm line \d+.*\n//) {
  	    require Carp;
  	    local $Carp::CarpLevel = 1;	# ignore package calling us too.
  	    Carp::carp($text);
  	}
  	else {
  	    warn $text;
  	}
      };
      local $SIG{__DIE__} = sub {
  	require Carp;
  	local $Carp::CarpLevel = 1;	# ignore package calling us too.
  	Carp::croak("$_[0]Illegal null symbol in \@${1}::EXPORT")
  	    if $_[0] =~ /^Unable to create sub named "(.*?)::"/;
      };
  
      my($pkg, $callpkg, @imports) = @_;
      my($type, $sym, $cache_is_current, $oops);
      my($exports, $export_cache) = (\@{"${pkg}::EXPORT"},
                                     $Exporter::Cache{$pkg} ||= {});
  
      if (@imports) {
  	if (!%$export_cache) {
  	    _rebuild_cache ($pkg, $exports, $export_cache);
  	    $cache_is_current = 1;
  	}
  
  	if (grep m{^[/!:]}, @imports) {
  	    my $tagsref = \%{"${pkg}::EXPORT_TAGS"};
  	    my $tagdata;
  	    my %imports;
  	    my($remove, $spec, @names, @allexports);
  	    # negated first item implies starting with default set:
  	    unshift @imports, ':DEFAULT' if $imports[0] =~ m/^!/;
  	    foreach $spec (@imports){
  		$remove = $spec =~ s/^!//;
  
  		if ($spec =~ s/^://){
  		    if ($spec eq 'DEFAULT'){
  			@names = @$exports;
  		    }
  		    elsif ($tagdata = $tagsref->{$spec}) {
  			@names = @$tagdata;
  		    }
  		    else {
  			warn qq["$spec" is not defined in %${pkg}::EXPORT_TAGS];
  			++$oops;
  			next;
  		    }
  		}
  		elsif ($spec =~ m:^/(.*)/$:){
  		    my $patn = $1;
  		    @allexports = keys %$export_cache unless @allexports; # only do keys once
  		    @names = grep(/$patn/, @allexports); # not anchored by default
  		}
  		else {
  		    @names = ($spec); # is a normal symbol name
  		}
  
  		warn "Import ".($remove ? "del":"add").": @names "
  		    if $Exporter::Verbose;
  
  		if ($remove) {
  		   foreach $sym (@names) { delete $imports{$sym} } 
  		}
  		else {
  		    @imports{@names} = (1) x @names;
  		}
  	    }
  	    @imports = keys %imports;
  	}
  
          my @carp;
  	foreach $sym (@imports) {
  	    if (!$export_cache->{$sym}) {
  		if ($sym =~ m/^\d/) {
  		    $pkg->VERSION($sym); # inherit from UNIVERSAL
  		    # If the version number was the only thing specified
  		    # then we should act as if nothing was specified:
  		    if (@imports == 1) {
  			@imports = @$exports;
  			last;
  		    }
  		    # We need a way to emulate 'use Foo ()' but still
  		    # allow an easy version check: "use Foo 1.23, ''";
  		    if (@imports == 2 and !$imports[1]) {
  			@imports = ();
  			last;
  		    }
  		} elsif ($sym !~ s/^&// || !$export_cache->{$sym}) {
  		    # Last chance - see if they've updated EXPORT_OK since we
  		    # cached it.
  
  		    unless ($cache_is_current) {
  			%$export_cache = ();
  			_rebuild_cache ($pkg, $exports, $export_cache);
  			$cache_is_current = 1;
  		    }
  
  		    if (!$export_cache->{$sym}) {
  			# accumulate the non-exports
  			push @carp,
  			  qq["$sym" is not exported by the $pkg module\n];
  			$oops++;
  		    }
  		}
  	    }
  	}
  	if ($oops) {
  	    require Carp;
  	    Carp::croak("@{carp}Can't continue after import errors");
  	}
      }
      else {
  	@imports = @$exports;
      }
  
      my($fail, $fail_cache) = (\@{"${pkg}::EXPORT_FAIL"},
                                $Exporter::FailCache{$pkg} ||= {});
  
      if (@$fail) {
  	if (!%$fail_cache) {
  	    # Build cache of symbols. Optimise the lookup by adding
  	    # barewords twice... both with and without a leading &.
  	    # (Technique could be applied to $export_cache at cost of memory)
  	    my @expanded = map { /^\w/ ? ($_, '&'.$_) : $_ } @$fail;
  	    warn "${pkg}::EXPORT_FAIL cached: @expanded" if $Exporter::Verbose;
  	    @{$fail_cache}{@expanded} = (1) x @expanded;
  	}
  	my @failed;
  	foreach $sym (@imports) { push(@failed, $sym) if $fail_cache->{$sym} }
  	if (@failed) {
  	    @failed = $pkg->export_fail(@failed);
  	    foreach $sym (@failed) {
                  require Carp;
  		Carp::carp(qq["$sym" is not implemented by the $pkg module ],
  			"on this architecture");
  	    }
  	    if (@failed) {
  		require Carp;
  		Carp::croak("Can't continue after import errors");
  	    }
  	}
      }
  
      warn "Importing into $callpkg from $pkg: ",
  		join(", ",sort @imports) if $Exporter::Verbose;
  
      foreach $sym (@imports) {
  	# shortcut for the common case of no type character
  	(*{"${callpkg}::$sym"} = \&{"${pkg}::$sym"}, next)
  	    unless $sym =~ s/^(\W)//;
  	$type = $1;
  	no warnings 'once';
  	*{"${callpkg}::$sym"} =
  	    $type eq '&' ? \&{"${pkg}::$sym"} :
  	    $type eq '$' ? \${"${pkg}::$sym"} :
  	    $type eq '@' ? \@{"${pkg}::$sym"} :
  	    $type eq '%' ? \%{"${pkg}::$sym"} :
  	    $type eq '*' ?  *{"${pkg}::$sym"} :
  	    do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
      }
  }
  
  sub heavy_export_to_level
  {
        my $pkg = shift;
        my $level = shift;
        (undef) = shift;			# XXX redundant arg
        my $callpkg = caller($level);
        $pkg->export($callpkg, @_);
  }
  
  # Utility functions
  
  sub _push_tags {
      my($pkg, $var, $syms) = @_;
      my @nontag = ();
      my $export_tags = \%{"${pkg}::EXPORT_TAGS"};
      push(@{"${pkg}::$var"},
  	map { $export_tags->{$_} ? @{$export_tags->{$_}} 
                                   : scalar(push(@nontag,$_),$_) }
  		(@$syms) ? @$syms : keys %$export_tags);
      if (@nontag and $^W) {
  	# This may change to a die one day
  	require Carp;
  	Carp::carp(join(", ", @nontag)." are not tags of $pkg");
      }
  }
  
  sub heavy_require_version {
      my($self, $wanted) = @_;
      my $pkg = ref $self || $self;
      return ${pkg}->VERSION($wanted);
  }
  
  sub heavy_export_tags {
    _push_tags((caller)[0], "EXPORT",    \@_);
  }
  
  sub heavy_export_ok_tags {
    _push_tags((caller)[0], "EXPORT_OK", \@_);
  }
  
  1;
EXPORTER_HEAVY

$fatpacked{"File/Path.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'FILE_PATH';
  package File::Path;
  
  use 5.005_04;
  use strict;
  
  use Cwd 'getcwd';
  use File::Basename ();
  use File::Spec     ();
  
  BEGIN {
      if ( $] < 5.006 ) {
  
          # can't say 'opendir my $dh, $dirname'
          # need to initialise $dh
          eval 'use Symbol';
      }
  }
  
  use Exporter ();
  use vars qw($VERSION @ISA @EXPORT @EXPORT_OK);
  $VERSION   = '2.15';
  $VERSION   = eval $VERSION;
  @ISA       = qw(Exporter);
  @EXPORT    = qw(mkpath rmtree);
  @EXPORT_OK = qw(make_path remove_tree);
  
  BEGIN {
    for (qw(VMS MacOS MSWin32 os2)) {
      no strict 'refs';
      *{"_IS_\U$_"} = $^O eq $_ ? sub () { 1 } : sub () { 0 };
    }
  
    # These OSes complain if you want to remove a file that you have no
    # write permission to:
    *_FORCE_WRITABLE = (
      grep { $^O eq $_ } qw(amigaos dos epoc MSWin32 MacOS os2)
    ) ? sub () { 1 } : sub () { 0 };
  
    # Unix-like systems need to stat each directory in order to detect
    # race condition. MS-Windows is immune to this particular attack.
    *_NEED_STAT_CHECK = !(_IS_MSWIN32()) ? sub () { 1 } : sub () { 0 };
  }
  
  sub _carp {
      require Carp;
      goto &Carp::carp;
  }
  
  sub _croak {
      require Carp;
      goto &Carp::croak;
  }
  
  sub _error {
      my $arg     = shift;
      my $message = shift;
      my $object  = shift;
  
      if ( $arg->{error} ) {
          $object = '' unless defined $object;
          $message .= ": $!" if $!;
          push @{ ${ $arg->{error} } }, { $object => $message };
      }
      else {
          _carp( defined($object) ? "$message for $object: $!" : "$message: $!" );
      }
  }
  
  sub __is_arg {
      my ($arg) = @_;
  
      # If client code blessed an array ref to HASH, this will not work
      # properly. We could have done $arg->isa() wrapped in eval, but
      # that would be expensive. This implementation should suffice.
      # We could have also used Scalar::Util:blessed, but we choose not
      # to add this dependency
      return ( ref $arg eq 'HASH' );
  }
  
  sub make_path {
      push @_, {} unless @_ and __is_arg( $_[-1] );
      goto &mkpath;
  }
  
  sub mkpath {
      my $old_style = !( @_ and __is_arg( $_[-1] ) );
  
      my $data;
      my $paths;
  
      if ($old_style) {
          my ( $verbose, $mode );
          ( $paths, $verbose, $mode ) = @_;
          $paths = [$paths] unless UNIVERSAL::isa( $paths, 'ARRAY' );
          $data->{verbose} = $verbose;
          $data->{mode} = defined $mode ? $mode : oct '777';
      }
      else {
          my %args_permitted = map { $_ => 1 } ( qw|
              chmod
              error
              group
              mask
              mode
              owner
              uid
              user
              verbose
          | );
          my %not_on_win32_args = map { $_ => 1 } ( qw|
              group
              owner
              uid
              user
          | );
          my @bad_args = ();
          my @win32_implausible_args = ();
          my $arg = pop @_;
          for my $k (sort keys %{$arg}) {
              if (! $args_permitted{$k}) {
                  push @bad_args, $k;
              }
              elsif ($not_on_win32_args{$k} and _IS_MSWIN32) {
                  push @win32_implausible_args, $k;
              }
              else {
                  $data->{$k} = $arg->{$k};
              }
          }
          _carp("Unrecognized option(s) passed to mkpath() or make_path(): @bad_args")
              if @bad_args;
          _carp("Option(s) implausible on Win32 passed to mkpath() or make_path(): @win32_implausible_args")
              if @win32_implausible_args;
          $data->{mode} = delete $data->{mask} if exists $data->{mask};
          $data->{mode} = oct '777' unless exists $data->{mode};
          ${ $data->{error} } = [] if exists $data->{error};
          unless (@win32_implausible_args) {
              $data->{owner} = delete $data->{user} if exists $data->{user};
              $data->{owner} = delete $data->{uid}  if exists $data->{uid};
              if ( exists $data->{owner} and $data->{owner} =~ /\D/ ) {
                  my $uid = ( getpwnam $data->{owner} )[2];
                  if ( defined $uid ) {
                      $data->{owner} = $uid;
                  }
                  else {
                      _error( $data,
                              "unable to map $data->{owner} to a uid, ownership not changed"
                            );
                      delete $data->{owner};
                  }
              }
              if ( exists $data->{group} and $data->{group} =~ /\D/ ) {
                  my $gid = ( getgrnam $data->{group} )[2];
                  if ( defined $gid ) {
                      $data->{group} = $gid;
                  }
                  else {
                      _error( $data,
                              "unable to map $data->{group} to a gid, group ownership not changed"
                      );
                      delete $data->{group};
                  }
              }
              if ( exists $data->{owner} and not exists $data->{group} ) {
                  $data->{group} = -1;    # chown will leave group unchanged
              }
              if ( exists $data->{group} and not exists $data->{owner} ) {
                  $data->{owner} = -1;    # chown will leave owner unchanged
              }
          }
          $paths = [@_];
      }
      return _mkpath( $data, $paths );
  }
  
  sub _mkpath {
      my $data   = shift;
      my $paths = shift;
  
      my ( @created );
      foreach my $path ( @{$paths} ) {
          next unless defined($path) and length($path);
          $path .= '/' if _IS_OS2 and $path =~ /^\w:\z/s; # feature of CRT
  
          # Logic wants Unix paths, so go with the flow.
          if (_IS_VMS) {
              next if $path eq '/';
              $path = VMS::Filespec::unixify($path);
          }
          next if -d $path;
          my $parent = File::Basename::dirname($path);
          # Coverage note:  It's not clear how we would test the condition:
          # '-d $parent or $path eq $parent'
          unless ( -d $parent or $path eq $parent ) {
              push( @created, _mkpath( $data, [$parent] ) );
          }
          print "mkdir $path\n" if $data->{verbose};
          if ( mkdir( $path, $data->{mode} ) ) {
              push( @created, $path );
              if ( exists $data->{owner} ) {
  
                  # NB: $data->{group} guaranteed to be set during initialisation
                  if ( !chown $data->{owner}, $data->{group}, $path ) {
                      _error( $data,
                          "Cannot change ownership of $path to $data->{owner}:$data->{group}"
                      );
                  }
              }
              if ( exists $data->{chmod} ) {
                  # Coverage note:  It's not clear how we would trigger the next
                  # 'if' block.  Failure of 'chmod' might first result in a
                  # system error: "Permission denied".
                  if ( !chmod $data->{chmod}, $path ) {
                      _error( $data,
                          "Cannot change permissions of $path to $data->{chmod}" );
                  }
              }
          }
          else {
              my $save_bang = $!;
  
              # From 'perldoc perlvar': $EXTENDED_OS_ERROR ($^E) is documented
              # as:
              # Error information specific to the current operating system. At the
              # moment, this differs from "$!" under only VMS, OS/2, and Win32
              # (and for MacPerl). On all other platforms, $^E is always just the
              # same as $!.
  
              my ( $e, $e1 ) = ( $save_bang, $^E );
              $e .= "; $e1" if $e ne $e1;
  
              # allow for another process to have created it meanwhile
              if ( ! -d $path ) {
                  $! = $save_bang;
                  if ( $data->{error} ) {
                      push @{ ${ $data->{error} } }, { $path => $e };
                  }
                  else {
                      _croak("mkdir $path: $e");
                  }
              }
          }
      }
      return @created;
  }
  
  sub remove_tree {
      push @_, {} unless @_ and __is_arg( $_[-1] );
      goto &rmtree;
  }
  
  sub _is_subdir {
      my ( $dir, $test ) = @_;
  
      my ( $dv, $dd ) = File::Spec->splitpath( $dir,  1 );
      my ( $tv, $td ) = File::Spec->splitpath( $test, 1 );
  
      # not on same volume
      return 0 if $dv ne $tv;
  
      my @d = File::Spec->splitdir($dd);
      my @t = File::Spec->splitdir($td);
  
      # @t can't be a subdir if it's shorter than @d
      return 0 if @t < @d;
  
      return join( '/', @d ) eq join( '/', splice @t, 0, +@d );
  }
  
  sub rmtree {
      my $old_style = !( @_ and __is_arg( $_[-1] ) );
  
      my ($arg, $data, $paths);
  
      if ($old_style) {
          my ( $verbose, $safe );
          ( $paths, $verbose, $safe ) = @_;
          $data->{verbose} = $verbose;
          $data->{safe} = defined $safe ? $safe : 0;
  
          if ( defined($paths) and length($paths) ) {
              $paths = [$paths] unless UNIVERSAL::isa( $paths, 'ARRAY' );
          }
          else {
              _carp("No root path(s) specified\n");
              return 0;
          }
      }
      else {
          my %args_permitted = map { $_ => 1 } ( qw|
              error
              keep_root
              result
              safe
              verbose
          | );
          my @bad_args = ();
          my $arg = pop @_;
          for my $k (sort keys %{$arg}) {
              if (! $args_permitted{$k}) {
                  push @bad_args, $k;
              }
              else {
                  $data->{$k} = $arg->{$k};
              }
          }
          _carp("Unrecognized option(s) passed to remove_tree(): @bad_args")
              if @bad_args;
          ${ $data->{error} }  = [] if exists $data->{error};
          ${ $data->{result} } = [] if exists $data->{result};
  
          # Wouldn't it make sense to do some validation on @_ before assigning
          # to $paths here?
          # In the $old_style case we guarantee that each path is both defined
          # and non-empty.  We don't check that here, which means we have to
          # check it later in the first condition in this line:
          #     if ( $ortho_root_length && _is_subdir( $ortho_root, $ortho_cwd ) ) {
          # Granted, that would be a change in behavior for the two
          # non-old-style interfaces.
  
          $paths = [@_];
      }
  
      $data->{prefix} = '';
      $data->{depth}  = 0;
  
      my @clean_path;
      $data->{cwd} = getcwd() or do {
          _error( $data, "cannot fetch initial working directory" );
          return 0;
      };
      for ( $data->{cwd} ) { /\A(.*)\Z/s; $_ = $1 }    # untaint
  
      for my $p (@$paths) {
  
          # need to fixup case and map \ to / on Windows
          my $ortho_root = _IS_MSWIN32 ? _slash_lc($p) : $p;
          my $ortho_cwd =
            _IS_MSWIN32 ? _slash_lc( $data->{cwd} ) : $data->{cwd};
          my $ortho_root_length = length($ortho_root);
          $ortho_root_length-- if _IS_VMS;   # don't compare '.' with ']'
          if ( $ortho_root_length && _is_subdir( $ortho_root, $ortho_cwd ) ) {
              local $! = 0;
              _error( $data, "cannot remove path when cwd is $data->{cwd}", $p );
              next;
          }
  
          if (_IS_MACOS) {
              $p = ":$p" unless $p =~ /:/;
              $p .= ":" unless $p =~ /:\z/;
          }
          elsif ( _IS_MSWIN32 ) {
              $p =~ s{[/\\]\z}{};
          }
          else {
              $p =~ s{/\z}{};
          }
          push @clean_path, $p;
      }
  
      @{$data}{qw(device inode)} = ( lstat $data->{cwd} )[ 0, 1 ] or do {
          _error( $data, "cannot stat initial working directory", $data->{cwd} );
          return 0;
      };
  
      return _rmtree( $data, \@clean_path );
  }
  
  sub _rmtree {
      my $data   = shift;
      my $paths = shift;
  
      my $count  = 0;
      my $curdir = File::Spec->curdir();
      my $updir  = File::Spec->updir();
  
      my ( @files, $root );
    ROOT_DIR:
      foreach my $root (@$paths) {
  
          # since we chdir into each directory, it may not be obvious
          # to figure out where we are if we generate a message about
          # a file name. We therefore construct a semi-canonical
          # filename, anchored from the directory being unlinked (as
          # opposed to being truly canonical, anchored from the root (/).
  
          my $canon =
            $data->{prefix}
            ? File::Spec->catfile( $data->{prefix}, $root )
            : $root;
  
          my ( $ldev, $lino, $perm ) = ( lstat $root )[ 0, 1, 2 ]
            or next ROOT_DIR;
  
          if ( -d _ ) {
              $root = VMS::Filespec::vmspath( VMS::Filespec::pathify($root) )
                if _IS_VMS;
  
              if ( !chdir($root) ) {
  
                  # see if we can escalate privileges to get in
                  # (e.g. funny protection mask such as -w- instead of rwx)
                  # This uses fchmod to avoid traversing outside of the proper
                  # location (CVE-2017-6512)
                  my $root_fh;
                  if (open($root_fh, '<', $root)) {
                      my ($fh_dev, $fh_inode) = (stat $root_fh )[0,1];
                      $perm &= oct '7777';
                      my $nperm = $perm | oct '700';
                      local $@;
                      if (
                          !(
                              $data->{safe}
                             or $nperm == $perm
                             or !-d _
                             or $fh_dev ne $ldev
                             or $fh_inode ne $lino
                             or eval { chmod( $nperm, $root_fh ) }
                          )
                        )
                      {
                          _error( $data,
                              "cannot make child directory read-write-exec", $canon );
                          next ROOT_DIR;
                      }
                      close $root_fh;
                  }
                  if ( !chdir($root) ) {
                      _error( $data, "cannot chdir to child", $canon );
                      next ROOT_DIR;
                  }
              }
  
              my ( $cur_dev, $cur_inode, $perm ) = ( stat $curdir )[ 0, 1, 2 ]
                or do {
                  _error( $data, "cannot stat current working directory", $canon );
                  next ROOT_DIR;
                };
  
              if (_NEED_STAT_CHECK) {
                  ( $ldev eq $cur_dev and $lino eq $cur_inode )
                    or _croak(
  "directory $canon changed before chdir, expected dev=$ldev ino=$lino, actual dev=$cur_dev ino=$cur_inode, aborting."
                    );
              }
  
              $perm &= oct '7777';    # don't forget setuid, setgid, sticky bits
              my $nperm = $perm | oct '700';
  
              # notabene: 0700 is for making readable in the first place,
              # it's also intended to change it to writable in case we have
              # to recurse in which case we are better than rm -rf for
              # subtrees with strange permissions
  
              if (
                  !(
                         $data->{safe}
                      or $nperm == $perm
                      or chmod( $nperm, $curdir )
                  )
                )
              {
                  _error( $data, "cannot make directory read+writeable", $canon );
                  $nperm = $perm;
              }
  
              my $d;
              $d = gensym() if $] < 5.006;
              if ( !opendir $d, $curdir ) {
                  _error( $data, "cannot opendir", $canon );
                  @files = ();
              }
              else {
                  if ( !defined ${^TAINT} or ${^TAINT} ) {
                      # Blindly untaint dir names if taint mode is active
                      @files = map { /\A(.*)\z/s; $1 } readdir $d;
                  }
                  else {
                      @files = readdir $d;
                  }
                  closedir $d;
              }
  
              if (_IS_VMS) {
  
                  # Deleting large numbers of files from VMS Files-11
                  # filesystems is faster if done in reverse ASCIIbetical order.
                  # include '.' to '.;' from blead patch #31775
                  @files = map { $_ eq '.' ? '.;' : $_ } reverse @files;
              }
  
              @files = grep { $_ ne $updir and $_ ne $curdir } @files;
  
              if (@files) {
  
                  # remove the contained files before the directory itself
                  my $narg = {%$data};
                  @{$narg}{qw(device inode cwd prefix depth)} =
                    ( $cur_dev, $cur_inode, $updir, $canon, $data->{depth} + 1 );
                  $count += _rmtree( $narg, \@files );
              }
  
              # restore directory permissions of required now (in case the rmdir
              # below fails), while we are still in the directory and may do so
              # without a race via '.'
              if ( $nperm != $perm and not chmod( $perm, $curdir ) ) {
                  _error( $data, "cannot reset chmod", $canon );
              }
  
              # don't leave the client code in an unexpected directory
              chdir( $data->{cwd} )
                or
                _croak("cannot chdir to $data->{cwd} from $canon: $!, aborting.");
  
              # ensure that a chdir upwards didn't take us somewhere other
              # than we expected (see CVE-2002-0435)
              ( $cur_dev, $cur_inode ) = ( stat $curdir )[ 0, 1 ]
                or _croak(
                  "cannot stat prior working directory $data->{cwd}: $!, aborting."
                );
  
              if (_NEED_STAT_CHECK) {
                  ( $data->{device} eq $cur_dev and $data->{inode} eq $cur_inode )
                    or _croak(  "previous directory $data->{cwd} "
                              . "changed before entering $canon, "
                              . "expected dev=$ldev ino=$lino, "
                              . "actual dev=$cur_dev ino=$cur_inode, aborting."
                    );
              }
  
              if ( $data->{depth} or !$data->{keep_root} ) {
                  if ( $data->{safe}
                      && ( _IS_VMS
                          ? !&VMS::Filespec::candelete($root)
                          : !-w $root ) )
                  {
                      print "skipped $root\n" if $data->{verbose};
                      next ROOT_DIR;
                  }
                  if ( _FORCE_WRITABLE and !chmod $perm | oct '700', $root ) {
                      _error( $data, "cannot make directory writeable", $canon );
                  }
                  print "rmdir $root\n" if $data->{verbose};
                  if ( rmdir $root ) {
                      push @{ ${ $data->{result} } }, $root if $data->{result};
                      ++$count;
                  }
                  else {
                      _error( $data, "cannot remove directory", $canon );
                      if (
                          _FORCE_WRITABLE
                          && !chmod( $perm,
                              ( _IS_VMS ? VMS::Filespec::fileify($root) : $root )
                          )
                        )
                      {
                          _error(
                              $data,
                              sprintf( "cannot restore permissions to 0%o",
                                  $perm ),
                              $canon
                          );
                      }
                  }
              }
          }
          else {
              # not a directory
              $root = VMS::Filespec::vmsify("./$root")
                if _IS_VMS
                && !File::Spec->file_name_is_absolute($root)
                && ( $root !~ m/(?<!\^)[\]>]+/ );    # not already in VMS syntax
  
              if (
                  $data->{safe}
                  && (
                      _IS_VMS
                      ? !&VMS::Filespec::candelete($root)
                      : !( -l $root || -w $root )
                  )
                )
              {
                  print "skipped $root\n" if $data->{verbose};
                  next ROOT_DIR;
              }
  
              my $nperm = $perm & oct '7777' | oct '600';
              if (    _FORCE_WRITABLE
                  and $nperm != $perm
                  and not chmod $nperm, $root )
              {
                  _error( $data, "cannot make file writeable", $canon );
              }
              print "unlink $canon\n" if $data->{verbose};
  
              # delete all versions under VMS
              for ( ; ; ) {
                  if ( unlink $root ) {
                      push @{ ${ $data->{result} } }, $root if $data->{result};
                  }
                  else {
                      _error( $data, "cannot unlink file", $canon );
                      _FORCE_WRITABLE and chmod( $perm, $root )
                        or _error( $data,
                          sprintf( "cannot restore permissions to 0%o", $perm ),
                          $canon );
                      last;
                  }
                  ++$count;
                  last unless _IS_VMS && lstat $root;
              }
          }
      }
      return $count;
  }
  
  sub _slash_lc {
  
      # fix up slashes and case on MSWin32 so that we can determine that
      # c:\path\to\dir is underneath C:/Path/To
      my $path = shift;
      $path =~ tr{\\}{/};
      return lc($path);
  }
  
  1;
  
  __END__
  
  =head1 NAME
  
  File::Path - Create or remove directory trees
  
  =head1 VERSION
  
  2.15 - released June 07 2017.
  
  =head1 SYNOPSIS
  
      use File::Path qw(make_path remove_tree);
  
      @created = make_path('foo/bar/baz', '/zug/zwang');
      @created = make_path('foo/bar/baz', '/zug/zwang', {
          verbose => 1,
          mode => 0711,
      });
      make_path('foo/bar/baz', '/zug/zwang', {
          chmod => 0777,
      });
  
      $removed_count = remove_tree('foo/bar/baz', '/zug/zwang', {
          verbose => 1,
          error  => \my $err_list,
          safe => 1,
      });
  
      # legacy (interface promoted before v2.00)
      @created = mkpath('/foo/bar/baz');
      @created = mkpath('/foo/bar/baz', 1, 0711);
      @created = mkpath(['/foo/bar/baz', 'blurfl/quux'], 1, 0711);
      $removed_count = rmtree('foo/bar/baz', 1, 1);
      $removed_count = rmtree(['foo/bar/baz', 'blurfl/quux'], 1, 1);
  
      # legacy (interface promoted before v2.06)
      @created = mkpath('foo/bar/baz', '/zug/zwang', { verbose => 1, mode => 0711 });
      $removed_count = rmtree('foo/bar/baz', '/zug/zwang', { verbose => 1, mode => 0711 });
  
  =head1 DESCRIPTION
  
  This module provides a convenient way to create directories of
  arbitrary depth and to delete an entire directory subtree from the
  filesystem.
  
  The following functions are provided:
  
  =over
  
  =item make_path( $dir1, $dir2, .... )
  
  =item make_path( $dir1, $dir2, ...., \%opts )
  
  The C<make_path> function creates the given directories if they don't
  exist before, much like the Unix command C<mkdir -p>.
  
  The function accepts a list of directories to be created. Its
  behaviour may be tuned by an optional hashref appearing as the last
  parameter on the call.
  
  The function returns the list of directories actually created during
  the call; in scalar context the number of directories created.
  
  The following keys are recognised in the option hash:
  
  =over
  
  =item mode => $num
  
  The numeric permissions mode to apply to each created directory
  (defaults to C<0777>), to be modified by the current C<umask>. If the
  directory already exists (and thus does not need to be created),
  the permissions will not be modified.
  
  C<mask> is recognised as an alias for this parameter.
  
  =item chmod => $num
  
  Takes a numeric mode to apply to each created directory (not
  modified by the current C<umask>). If the directory already exists
  (and thus does not need to be created), the permissions will
  not be modified.
  
  =item verbose => $bool
  
  If present, will cause C<make_path> to print the name of each directory
  as it is created. By default nothing is printed.
  
  =item error => \$err
  
  If present, it should be a reference to a scalar.
  This scalar will be made to reference an array, which will
  be used to store any errors that are encountered.  See the L</"ERROR
  HANDLING"> section for more information.
  
  If this parameter is not used, certain error conditions may raise
  a fatal error that will cause the program to halt, unless trapped
  in an C<eval> block.
  
  =item owner => $owner
  
  =item user => $owner
  
  =item uid => $owner
  
  If present, will cause any created directory to be owned by C<$owner>.
  If the value is numeric, it will be interpreted as a uid; otherwise a
  username is assumed. An error will be issued if the username cannot be
  mapped to a uid, the uid does not exist or the process lacks the
  privileges to change ownership.
  
  Ownership of directories that already exist will not be changed.
  
  C<user> and C<uid> are aliases of C<owner>.
  
  =item group => $group
  
  If present, will cause any created directory to be owned by the group
  C<$group>.  If the value is numeric, it will be interpreted as a gid;
  otherwise a group name is assumed. An error will be issued if the
  group name cannot be mapped to a gid, the gid does not exist or the
  process lacks the privileges to change group ownership.
  
  Group ownership of directories that already exist will not be changed.
  
      make_path '/var/tmp/webcache', {owner=>'nobody', group=>'nogroup'};
  
  =back
  
  =item mkpath( $dir )
  
  =item mkpath( $dir, $verbose, $mode )
  
  =item mkpath( [$dir1, $dir2,...], $verbose, $mode )
  
  =item mkpath( $dir1, $dir2,..., \%opt )
  
  The C<mkpath()> function provide the legacy interface of
  C<make_path()> with a different interpretation of the arguments
  passed.  The behaviour and return value of the function is otherwise
  identical to C<make_path()>.
  
  =item remove_tree( $dir1, $dir2, .... )
  
  =item remove_tree( $dir1, $dir2, ...., \%opts )
  
  The C<remove_tree> function deletes the given directories and any
  files and subdirectories they might contain, much like the Unix
  command C<rm -rf> or the Windows commands C<rmdir /s> and C<rd /s>.
  
  The function accepts a list of directories to be removed. (In point of fact,
  it will also accept filesystem entries which are not directories, such as
  regular files and symlinks.  But, as its name suggests, its intent is to
  remove trees rather than individual files.)
  
  C<remove_tree()>'s behaviour may be tuned by an optional hashref
  appearing as the last parameter on the call.  If an empty string is
  passed to C<remove_tree>, an error will occur.
  
  B<NOTE:>  For security reasons, we strongly advise use of the
  hashref-as-final-argument syntax -- specifically, with a setting of the C<safe>
  element to a true value.
  
      remove_tree( $dir1, $dir2, ....,
          {
              safe => 1,
              ...         # other key-value pairs
          },
      );
  
  The function returns the number of files successfully deleted.
  
  The following keys are recognised in the option hash:
  
  =over
  
  =item verbose => $bool
  
  If present, will cause C<remove_tree> to print the name of each file as
  it is unlinked. By default nothing is printed.
  
  =item safe => $bool
  
  When set to a true value, will cause C<remove_tree> to skip the files
  for which the process lacks the required privileges needed to delete
  files, such as delete privileges on VMS. In other words, the code
  will make no attempt to alter file permissions. Thus, if the process
  is interrupted, no filesystem object will be left in a more
  permissive mode.
  
  =item keep_root => $bool
  
  When set to a true value, will cause all files and subdirectories
  to be removed, except the initially specified directories. This comes
  in handy when cleaning out an application's scratch directory.
  
      remove_tree( '/tmp', {keep_root => 1} );
  
  =item result => \$res
  
  If present, it should be a reference to a scalar.
  This scalar will be made to reference an array, which will
  be used to store all files and directories unlinked
  during the call. If nothing is unlinked, the array will be empty.
  
      remove_tree( '/tmp', {result => \my $list} );
      print "unlinked $_\n" for @$list;
  
  This is a useful alternative to the C<verbose> key.
  
  =item error => \$err
  
  If present, it should be a reference to a scalar.
  This scalar will be made to reference an array, which will
  be used to store any errors that are encountered.  See the L</"ERROR
  HANDLING"> section for more information.
  
  Removing things is a much more dangerous proposition than
  creating things. As such, there are certain conditions that
  C<remove_tree> may encounter that are so dangerous that the only
  sane action left is to kill the program.
  
  Use C<error> to trap all that is reasonable (problems with
  permissions and the like), and let it die if things get out
  of hand. This is the safest course of action.
  
  =back
  
  =item rmtree( $dir )
  
  =item rmtree( $dir, $verbose, $safe )
  
  =item rmtree( [$dir1, $dir2,...], $verbose, $safe )
  
  =item rmtree( $dir1, $dir2,..., \%opt )
  
  The C<rmtree()> function provide the legacy interface of
  C<remove_tree()> with a different interpretation of the arguments
  passed. The behaviour and return value of the function is otherwise
  identical to C<remove_tree()>.
  
  B<NOTE:>  For security reasons, we strongly advise use of the
  hashref-as-final-argument syntax, specifically with a setting of the C<safe>
  element to a true value.
  
      rmtree( $dir1, $dir2, ....,
          {
              safe => 1,
              ...         # other key-value pairs
          },
      );
  
  =back
  
  =head2 ERROR HANDLING
  
  =over 4
  
  =item B<NOTE:>
  
  The following error handling mechanism is consistent throughout all
  code paths EXCEPT in cases where the ROOT node is nonexistent.  In
  version 2.11 the maintainers attempted to rectify this inconsistency
  but too many downstream modules encountered problems.  In such case,
  if you require root node evaluation or error checking prior to calling
  C<make_path> or C<remove_tree>, you should take additional precautions.
  
  =back
  
  If C<make_path> or C<remove_tree> encounters an error, a diagnostic
  message will be printed to C<STDERR> via C<carp> (for non-fatal
  errors) or via C<croak> (for fatal errors).
  
  If this behaviour is not desirable, the C<error> attribute may be
  used to hold a reference to a variable, which will be used to store
  the diagnostics. The variable is made a reference to an array of hash
  references.  Each hash contain a single key/value pair where the key
  is the name of the file, and the value is the error message (including
  the contents of C<$!> when appropriate).  If a general error is
  encountered the diagnostic key will be empty.
  
  An example usage looks like:
  
    remove_tree( 'foo/bar', 'bar/rat', {error => \my $err} );
    if ($err && @$err) {
        for my $diag (@$err) {
            my ($file, $message) = %$diag;
            if ($file eq '') {
                print "general error: $message\n";
            }
            else {
                print "problem unlinking $file: $message\n";
            }
        }
    }
    else {
        print "No error encountered\n";
    }
  
  Note that if no errors are encountered, C<$err> will reference an
  empty array.  This means that C<$err> will always end up TRUE; so you
  need to test C<@$err> to determine if errors occurred.
  
  =head2 NOTES
  
  C<File::Path> blindly exports C<mkpath> and C<rmtree> into the
  current namespace. These days, this is considered bad style, but
  to change it now would break too much code. Nonetheless, you are
  invited to specify what it is you are expecting to use:
  
    use File::Path 'rmtree';
  
  The routines C<make_path> and C<remove_tree> are B<not> exported
  by default. You must specify which ones you want to use.
  
    use File::Path 'remove_tree';
  
  Note that a side-effect of the above is that C<mkpath> and C<rmtree>
  are no longer exported at all. This is due to the way the C<Exporter>
  module works. If you are migrating a codebase to use the new
  interface, you will have to list everything explicitly. But that's
  just good practice anyway.
  
    use File::Path qw(remove_tree rmtree);
  
  =head3 API CHANGES
  
  The API was changed in the 2.0 branch. For a time, C<mkpath> and
  C<rmtree> tried, unsuccessfully, to deal with the two different
  calling mechanisms. This approach was considered a failure.
  
  The new semantics are now only available with C<make_path> and
  C<remove_tree>. The old semantics are only available through
  C<mkpath> and C<rmtree>. Users are strongly encouraged to upgrade
  to at least 2.08 in order to avoid surprises.
  
  =head3 SECURITY CONSIDERATIONS
  
  There were race conditions in the 1.x implementations of File::Path's
  C<rmtree> function (although sometimes patched depending on the OS
  distribution or platform). The 2.0 version contains code to avoid the
  problem mentioned in CVE-2002-0435.
  
  See the following pages for more information:
  
      http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=286905
      http://www.nntp.perl.org/group/perl.perl5.porters/2005/01/msg97623.html
      http://www.debian.org/security/2005/dsa-696
  
  Additionally, unless the C<safe> parameter is set (or the
  third parameter in the traditional interface is TRUE), should a
  C<remove_tree> be interrupted, files that were originally in read-only
  mode may now have their permissions set to a read-write (or "delete
  OK") mode.
  
  The following CVE reports were previously filed against File-Path and are
  believed to have been addressed:
  
  =over 4
  
  =item * L<http://cve.circl.lu/cve/CVE-2004-0452>
  
  =item * L<http://cve.circl.lu/cve/CVE-2005-0448>
  
  =back
  
  In February 2017 the cPanel Security Team reported an additional vulnerability
  in File-Path.  The C<chmod()> logic to make directories traversable can be
  abused to set the mode on an attacker-chosen file to an attacker-chosen value.
  This is due to the time-of-check-to-time-of-use (TOCTTOU) race condition
  (L<https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use>) between the
  C<stat()> that decides the inode is a directory and the C<chmod()> that tries
  to make it user-rwx.  CPAN versions 2.13 and later incorporate a patch
  provided by John Lightsey to address this problem.  This vulnerability has
  been reported as CVE-2017-6512.
  
  =head1 DIAGNOSTICS
  
  FATAL errors will cause the program to halt (C<croak>), since the
  problem is so severe that it would be dangerous to continue. (This
  can always be trapped with C<eval>, but it's not a good idea. Under
  the circumstances, dying is the best thing to do).
  
  SEVERE errors may be trapped using the modern interface. If the
  they are not trapped, or if the old interface is used, such an error
  will cause the program will halt.
  
  All other errors may be trapped using the modern interface, otherwise
  they will be C<carp>ed about. Program execution will not be halted.
  
  =over 4
  
  =item mkdir [path]: [errmsg] (SEVERE)
  
  C<make_path> was unable to create the path. Probably some sort of
  permissions error at the point of departure or insufficient resources
  (such as free inodes on Unix).
  
  =item No root path(s) specified
  
  C<make_path> was not given any paths to create. This message is only
  emitted if the routine is called with the traditional interface.
  The modern interface will remain silent if given nothing to do.
  
  =item No such file or directory
  
  On Windows, if C<make_path> gives you this warning, it may mean that
  you have exceeded your filesystem's maximum path length.
  
  =item cannot fetch initial working directory: [errmsg]
  
  C<remove_tree> attempted to determine the initial directory by calling
  C<Cwd::getcwd>, but the call failed for some reason. No attempt
  will be made to delete anything.
  
  =item cannot stat initial working directory: [errmsg]
  
  C<remove_tree> attempted to stat the initial directory (after having
  successfully obtained its name via C<getcwd>), however, the call
  failed for some reason. No attempt will be made to delete anything.
  
  =item cannot chdir to [dir]: [errmsg]
  
  C<remove_tree> attempted to set the working directory in order to
  begin deleting the objects therein, but was unsuccessful. This is
  usually a permissions issue. The routine will continue to delete
  other things, but this directory will be left intact.
  
  =item directory [dir] changed before chdir, expected dev=[n] ino=[n], actual dev=[n] ino=[n], aborting. (FATAL)
  
  C<remove_tree> recorded the device and inode of a directory, and then
  moved into it. It then performed a C<stat> on the current directory
  and detected that the device and inode were no longer the same. As
  this is at the heart of the race condition problem, the program
  will die at this point.
  
  =item cannot make directory [dir] read+writeable: [errmsg]
  
  C<remove_tree> attempted to change the permissions on the current directory
  to ensure that subsequent unlinkings would not run into problems,
  but was unable to do so. The permissions remain as they were, and
  the program will carry on, doing the best it can.
  
  =item cannot read [dir]: [errmsg]
  
  C<remove_tree> tried to read the contents of the directory in order
  to acquire the names of the directory entries to be unlinked, but
  was unsuccessful. This is usually a permissions issue. The
  program will continue, but the files in this directory will remain
  after the call.
  
  =item cannot reset chmod [dir]: [errmsg]
  
  C<remove_tree>, after having deleted everything in a directory, attempted
  to restore its permissions to the original state but failed. The
  directory may wind up being left behind.
  
  =item cannot remove [dir] when cwd is [dir]
  
  The current working directory of the program is F</some/path/to/here>
  and you are attempting to remove an ancestor, such as F</some/path>.
  The directory tree is left untouched.
  
  The solution is to C<chdir> out of the child directory to a place
  outside the directory tree to be removed.
  
  =item cannot chdir to [parent-dir] from [child-dir]: [errmsg], aborting. (FATAL)
  
  C<remove_tree>, after having deleted everything and restored the permissions
  of a directory, was unable to chdir back to the parent. The program
  halts to avoid a race condition from occurring.
  
  =item cannot stat prior working directory [dir]: [errmsg], aborting. (FATAL)
  
  C<remove_tree> was unable to stat the parent directory after having returned
  from the child. Since there is no way of knowing if we returned to
  where we think we should be (by comparing device and inode) the only
  way out is to C<croak>.
  
  =item previous directory [parent-dir] changed before entering [child-dir], expected dev=[n] ino=[n], actual dev=[n] ino=[n], aborting. (FATAL)
  
  When C<remove_tree> returned from deleting files in a child directory, a
  check revealed that the parent directory it returned to wasn't the one
  it started out from. This is considered a sign of malicious activity.
  
  =item cannot make directory [dir] writeable: [errmsg]
  
  Just before removing a directory (after having successfully removed
  everything it contained), C<remove_tree> attempted to set the permissions
  on the directory to ensure it could be removed and failed. Program
  execution continues, but the directory may possibly not be deleted.
  
  =item cannot remove directory [dir]: [errmsg]
  
  C<remove_tree> attempted to remove a directory, but failed. This may be because
  some objects that were unable to be removed remain in the directory, or
  it could be a permissions issue. The directory will be left behind.
  
  =item cannot restore permissions of [dir] to [0nnn]: [errmsg]
  
  After having failed to remove a directory, C<remove_tree> was unable to
  restore its permissions from a permissive state back to a possibly
  more restrictive setting. (Permissions given in octal).
  
  =item cannot make file [file] writeable: [errmsg]
  
  C<remove_tree> attempted to force the permissions of a file to ensure it
  could be deleted, but failed to do so. It will, however, still attempt
  to unlink the file.
  
  =item cannot unlink file [file]: [errmsg]
  
  C<remove_tree> failed to remove a file. Probably a permissions issue.
  
  =item cannot restore permissions of [file] to [0nnn]: [errmsg]
  
  After having failed to remove a file, C<remove_tree> was also unable
  to restore the permissions on the file to a possibly less permissive
  setting. (Permissions given in octal).
  
  =item unable to map [owner] to a uid, ownership not changed");
  
  C<make_path> was instructed to give the ownership of created
  directories to the symbolic name [owner], but C<getpwnam> did
  not return the corresponding numeric uid. The directory will
  be created, but ownership will not be changed.
  
  =item unable to map [group] to a gid, group ownership not changed
  
  C<make_path> was instructed to give the group ownership of created
  directories to the symbolic name [group], but C<getgrnam> did
  not return the corresponding numeric gid. The directory will
  be created, but group ownership will not be changed.
  
  =back
  
  =head1 SEE ALSO
  
  =over 4
  
  =item *
  
  L<File::Remove>
  
  Allows files and directories to be moved to the Trashcan/Recycle
  Bin (where they may later be restored if necessary) if the operating
  system supports such functionality. This feature may one day be
  made available directly in C<File::Path>.
  
  =item *
  
  L<File::Find::Rule>
  
  When removing directory trees, if you want to examine each file to
  decide whether to delete it (and possibly leaving large swathes
  alone), F<File::Find::Rule> offers a convenient and flexible approach
  to examining directory trees.
  
  =back
  
  =head1 BUGS AND LIMITATIONS
  
  The following describes F<File::Path> limitations and how to report bugs.
  
  =head2 MULTITHREADED APPLICATIONS
  
  F<File::Path> C<rmtree> and C<remove_tree> will not work with
  multithreaded applications due to its use of C<chdir>.  At this time,
  no warning or error is generated in this situation.  You will
  certainly encounter unexpected results.
  
  The implementation that surfaces this limitation will not be changed. See the
  F<File::Path::Tiny> module for functionality similar to F<File::Path> but which does
  not C<chdir>.
  
  =head2 NFS Mount Points
  
  F<File::Path> is not responsible for triggering the automounts, mirror mounts,
  and the contents of network mounted filesystems.  If your NFS implementation
  requires an action to be performed on the filesystem in order for
  F<File::Path> to perform operations, it is strongly suggested you assure
  filesystem availability by reading the root of the mounted filesystem.
  
  =head2 REPORTING BUGS
  
  Please report all bugs on the RT queue, either via the web interface:
  
  L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=File-Path>
  
  or by email:
  
      bug-File-Path@rt.cpan.org
  
  In either case, please B<attach> patches to the bug report rather than
  including them inline in the web post or the body of the email.
  
  You can also send pull requests to the Github repository:
  
  L<https://github.com/rpcme/File-Path>
  
  =head1 ACKNOWLEDGEMENTS
  
  Paul Szabo identified the race condition originally, and Brendan
  O'Dea wrote an implementation for Debian that addressed the problem.
  That code was used as a basis for the current code. Their efforts
  are greatly appreciated.
  
  Gisle Aas made a number of improvements to the documentation for
  2.07 and his advice and assistance is also greatly appreciated.
  
  =head1 AUTHORS
  
  Prior authors and maintainers: Tim Bunce, Charles Bailey, and
  David Landgren <F<david@landgren.net>>.
  
  Current maintainers are Richard Elberger <F<riche@cpan.org>> and
  James (Jim) Keenan <F<jkeenan@cpan.org>>.
  
  =head1 CONTRIBUTORS
  
  Contributors to File::Path, in alphabetical order by first name.
  
  =over 1
  
  =item <F<bulkdd@cpan.org>>
  
  =item Charlie Gonzalez <F<itcharlie@cpan.org>>
  
  =item Craig A. Berry <F<craigberry@mac.com>>
  
  =item James E Keenan <F<jkeenan@cpan.org>>
  
  =item John Lightsey <F<john@perlsec.org>>
  
  =item Nigel Horne <F<njh@bandsman.co.uk>>
  
  =item Richard Elberger <F<riche@cpan.org>>
  
  =item Ryan Yee <F<ryee@cpan.org>>
  
  =item Skye Shaw <F<shaw@cpan.org>>
  
  =item Tom Lutz <F<tommylutz@gmail.com>>
  
  =item Will Sheppard <F<willsheppard@github>>
  
  =back
  
  =head1 COPYRIGHT
  
  This module is copyright (C) Charles Bailey, Tim Bunce, David Landgren,
  James Keenan and Richard Elberger 1995-2017. All rights reserved.
  
  =head1 LICENSE
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =cut
FILE_PATH

$fatpacked{"File/Which.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'FILE_WHICH';
  package File::Which;
  
  use strict;
  use warnings;
  use Exporter   ();
  use File::Spec ();
  
  # ABSTRACT: Perl implementation of the which utility as an API
  our $VERSION = '1.22'; # VERSION
  
  
  our @ISA       = 'Exporter';
  our @EXPORT    = 'which';
  our @EXPORT_OK = 'where';
  
  use constant IS_VMS => ($^O eq 'VMS');
  use constant IS_MAC => ($^O eq 'MacOS');
  use constant IS_DOS => ($^O eq 'MSWin32' or $^O eq 'dos' or $^O eq 'os2');
  use constant IS_CYG => ($^O eq 'cygwin' || $^O eq 'msys');
  
  # For Win32 systems, stores the extensions used for
  # executable files
  # For others, the empty string is used
  # because 'perl' . '' eq 'perl' => easier
  my @PATHEXT = ('');
  if ( IS_DOS ) {
    # WinNT. PATHEXT might be set on Cygwin, but not used.
    if ( $ENV{PATHEXT} ) {
      push @PATHEXT, split ';', $ENV{PATHEXT};
    } else {
      # Win9X or other: doesn't have PATHEXT, so needs hardcoded.
      push @PATHEXT, qw{.com .exe .bat};
    }
  } elsif ( IS_VMS ) {
    push @PATHEXT, qw{.exe .com};
  } elsif ( IS_CYG ) {
    # See this for more info
    # http://cygwin.com/cygwin-ug-net/using-specialnames.html#pathnames-exe
    push @PATHEXT, qw{.exe .com};
  }
  
  
  sub which {
    my ($exec) = @_;
  
    return undef unless defined $exec;
    return undef if $exec eq '';
  
    my $all = wantarray;
    my @results = ();
  
    # check for aliases first
    if ( IS_VMS ) {
      my $symbol = `SHOW SYMBOL $exec`;
      chomp($symbol);
      unless ( $? ) {
        return $symbol unless $all;
        push @results, $symbol;
      }
    }
    if ( IS_MAC ) {
      my @aliases = split /\,/, $ENV{Aliases};
      foreach my $alias ( @aliases ) {
        # This has not been tested!!
        # PPT which says MPW-Perl cannot resolve `Alias $alias`,
        # let's just hope it's fixed
        if ( lc($alias) eq lc($exec) ) {
          chomp(my $file = `Alias $alias`);
          last unless $file;  # if it failed, just go on the normal way
          return $file unless $all;
          push @results, $file;
          # we can stop this loop as if it finds more aliases matching,
          # it'll just be the same result anyway
          last;
        }
      }
    }
  
    return $exec
            if !IS_VMS and !IS_MAC and !IS_DOS and $exec =~ /\// and -f $exec and -x $exec;
  
    my @path = File::Spec->path;
    if ( IS_DOS or IS_VMS or IS_MAC ) {
      unshift @path, File::Spec->curdir;
    }
  
    foreach my $base ( map { File::Spec->catfile($_, $exec) } @path ) {
      for my $ext ( @PATHEXT ) {
        my $file = $base.$ext;
  
        # We don't want dirs (as they are -x)
        next if -d $file;
  
        if (
          # Executable, normal case
          -x _
          or (
            # MacOS doesn't mark as executable so we check -e
            IS_MAC
            ||
            (
              ( IS_DOS or IS_CYG )
              and
              grep {
                $file =~ /$_\z/i
              } @PATHEXT[1..$#PATHEXT]
            )
            # DOSish systems don't pass -x on
            # non-exe/bat/com files. so we check -e.
            # However, we don't want to pass -e on files
            # that aren't in PATHEXT, like README.
            and -e _
          )
        ) {
          return $file unless $all;
          push @results, $file;
        }
      }
    }
  
    if ( $all ) {
      return @results;
    } else {
      return undef;
    }
  }
  
  
  sub where {
    # force wantarray
    my @res = which($_[0]);
    return @res;
  }
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  File::Which - Perl implementation of the which utility as an API
  
  =head1 VERSION
  
  version 1.22
  
  =head1 SYNOPSIS
  
   use File::Which;                  # exports which()
   use File::Which qw(which where);  # exports which() and where()
   
   my $exe_path = which 'perldoc';
   
   my @paths = where 'perl';
   # Or
   my @paths = which 'perl'; # an array forces search for all of them
  
  =head1 DESCRIPTION
  
  L<File::Which> finds the full or relative paths to executable programs on
  the system.  This is normally the function of C<which> utility.  C<which> is
  typically implemented as either a program or a built in shell command.  On
  some platforms, such as Microsoft Windows it is not provided as part of the
  core operating system.  This module provides a consistent API to this
  functionality regardless of the underlying platform.
  
  The focus of this module is correctness and portability.  As a consequence
  platforms where the current directory is implicitly part of the search path
  such as Microsoft Windows will find executables in the current directory,
  whereas on platforms such as UNIX where this is not the case executables 
  in the current directory will only be found if the current directory is
  explicitly added to the path.
  
  If you need a portable C<which> on the command line in an environment that
  does not provide it, install L<App::pwhich> which provides a command line
  interface to this API.
  
  =head2 Implementations
  
  L<File::Which> searches the directories of the user's C<PATH> (the current
  implementation uses L<File::Spec#path> to determine the correct C<PATH>),
  looking for executable files having the name specified as a parameter to
  L</which>. Under Win32 systems, which do not have a notion of directly
  executable files, but uses special extensions such as C<.exe> and C<.bat>
  to identify them, C<File::Which> takes extra steps to assure that
  you will find the correct file (so for example, you might be searching for
  C<perl>, it'll try F<perl.exe>, F<perl.bat>, etc.)
  
  =head3 Linux, *BSD and other UNIXes
  
  There should not be any surprises here.  The current directory will not be
  searched unless it is explicitly added to the path.
  
  =head3 Modern Windows (including NT, XP, Vista, 7, 8, 10 etc)
  
  Windows NT has a special environment variable called C<PATHEXT>, which is used
  by the shell to look for executable files. Usually, it will contain a list in
  the form C<.EXE;.BAT;.COM;.JS;.VBS> etc. If C<File::Which> finds such an
  environment variable, it parses the list and uses it as the different
  extensions.
  
  =head3 Cygwin
  
  Cygwin provides a Unix-like environment for Microsoft Windows users.  In most
  ways it works like other Unix and Unix-like environments, but in a few key
  aspects it works like Windows.  As with other Unix environments, the current
  directory is not included in the search unless it is explicitly included in
  the search path.  Like on Windows, files with C<.EXE> or <.BAT> extensions will
  be discovered even if they are not part of the query.  C<.COM> or extensions
  specified using the C<PATHEXT> environment variable will NOT be discovered
  without the fully qualified name, however.
  
  =head3 Windows 95, 98, ME, MS-DOS, OS/2
  
  This set of operating systems don't have the C<PATHEXT> variable, and usually
  you will find executable files there with the extensions C<.exe>, C<.bat> and
  (less likely) C<.com>. C<File::Which> uses this hardcoded list if it's running
  under Win32 but does not find a C<PATHEXT> variable.
  
  As of 2015 none of these platforms are tested frequently (or perhaps ever),
  but the current maintainer is determined not to intentionally remove support
  for older operating systems.
  
  =head3 VMS
  
  Same case as Windows 9x: uses C<.exe> and C<.com> (in that order).
  
  As of 2015 the current maintainer does not test on VMS, and is in fact not
  certain it has ever been tested on VMS.  If this platform is important to you
  and you can help me verify and or support it on that platform please contact
  me.
  
  =head1 FUNCTIONS
  
  =head2 which
  
   my $path = which $short_exe_name;
   my @paths = which $short_exe_name;
  
  Exported by default.
  
  C<$short_exe_name> is the name used in the shell to call the program (for
  example, C<perl>).
  
  If it finds an executable with the name you specified, C<which()> will return
  the absolute path leading to this executable (for example, F</usr/bin/perl> or
  F<C:\Perl\Bin\perl.exe>).
  
  If it does I<not> find the executable, it returns C<undef>.
  
  If C<which()> is called in list context, it will return I<all> the
  matches.
  
  =head2 where
  
   my @paths = where $short_exe_name;
  
  Not exported by default.
  
  Same as L</which> in array context. Same as the
  C<where> utility, will return an array containing all the path names
  matching C<$short_exe_name>.
  
  =head1 CAVEATS
  
  This module has no non-core requirements for Perl 5.6.2 and better.
  
  This module is fully supported back to Perl 5.8.1.  It may work on 5.8.0.  
  It should work on Perl 5.6.x and I may even test on 5.6.2.  I will accept
  patches to maintain compatibility for such older Perls, but you may
  need to fix it on 5.6.x / 5.8.0 and send me a patch.
  
  Not tested on VMS although there is platform specific code
  for those. Anyone who haves a second would be very kind to send me a
  report of how it went.
  
  =head1 SUPPORT
  
  Bugs should be reported via the GitHub issue tracker
  
  L<https://github.com/plicease/File-Which/issues>
  
  For other issues, contact the maintainer.
  
  =head1 SEE ALSO
  
  =over 4
  
  =item L<pwhich>, L<App::pwhich>
  
  Command line interface to this module.
  
  =item L<IPC::Cmd>
  
  Comes with a C<can_run> function with slightly different semantics that
  the traditional UNIX where.  It will find executables in the current
  directory, even though the current directory is not searched for by
  default on Unix.
  
  =item L<Devel::CheckBin>
  
  This module purports to "check that a command is available", but does not
  provide any documentation on how you might use it.
  
  =back
  
  =head1 AUTHORS
  
  =over 4
  
  =item *
  
  Per Einar Ellefsen <pereinar@cpan.org>
  
  =item *
  
  Adam Kennedy <adamk@cpan.org>
  
  =item *
  
  Graham Ollis <plicease@cpan.org>
  
  =back
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2002 by Per Einar Ellefsen <pereinar@cpan.org>.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
FILE_WHICH

$fatpacked{"Getopt/Long.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'GETOPT_LONG';
  #! perl
  
  # Getopt::Long.pm -- Universal options parsing
  # Author          : Johan Vromans
  # Created On      : Tue Sep 11 15:00:12 1990
  # Last Modified By: Johan Vromans
  # Last Modified On: Sat May 27 12:11:39 2017
  # Update Count    : 1715
  # Status          : Released
  
  ################ Module Preamble ################
  
  use 5.004;
  
  use strict;
  use warnings;
  
  package Getopt::Long;
  
  use vars qw($VERSION);
  $VERSION        =  2.50;
  # For testing versions only.
  use vars qw($VERSION_STRING);
  $VERSION_STRING = "2.50";
  
  use Exporter;
  use vars qw(@ISA @EXPORT @EXPORT_OK);
  @ISA = qw(Exporter);
  
  # Exported subroutines.
  sub GetOptions(@);		# always
  sub GetOptionsFromArray(@);	# on demand
  sub GetOptionsFromString(@);	# on demand
  sub Configure(@);		# on demand
  sub HelpMessage(@);		# on demand
  sub VersionMessage(@);		# in demand
  
  BEGIN {
      # Init immediately so their contents can be used in the 'use vars' below.
      @EXPORT    = qw(&GetOptions $REQUIRE_ORDER $PERMUTE $RETURN_IN_ORDER);
      @EXPORT_OK = qw(&HelpMessage &VersionMessage &Configure
  		    &GetOptionsFromArray &GetOptionsFromString);
  }
  
  # User visible variables.
  use vars @EXPORT, @EXPORT_OK;
  use vars qw($error $debug $major_version $minor_version);
  # Deprecated visible variables.
  use vars qw($autoabbrev $getopt_compat $ignorecase $bundling $order
  	    $passthrough);
  # Official invisible variables.
  use vars qw($genprefix $caller $gnu_compat $auto_help $auto_version $longprefix);
  
  # Really invisible variables.
  my $bundling_values;
  
  # Public subroutines.
  sub config(@);			# deprecated name
  
  # Private subroutines.
  sub ConfigDefaults();
  sub ParseOptionSpec($$);
  sub OptCtl($);
  sub FindOption($$$$$);
  sub ValidValue ($$$$$);
  
  ################ Local Variables ################
  
  # $requested_version holds the version that was mentioned in the 'use'
  # or 'require', if any. It can be used to enable or disable specific
  # features.
  my $requested_version = 0;
  
  ################ Resident subroutines ################
  
  sub ConfigDefaults() {
      # Handle POSIX compliancy.
      if ( defined $ENV{"POSIXLY_CORRECT"} ) {
  	$genprefix = "(--|-)";
  	$autoabbrev = 0;		# no automatic abbrev of options
  	$bundling = 0;			# no bundling of single letter switches
  	$getopt_compat = 0;		# disallow '+' to start options
  	$order = $REQUIRE_ORDER;
      }
      else {
  	$genprefix = "(--|-|\\+)";
  	$autoabbrev = 1;		# automatic abbrev of options
  	$bundling = 0;			# bundling off by default
  	$getopt_compat = 1;		# allow '+' to start options
  	$order = $PERMUTE;
      }
      # Other configurable settings.
      $debug = 0;			# for debugging
      $error = 0;			# error tally
      $ignorecase = 1;		# ignore case when matching options
      $passthrough = 0;		# leave unrecognized options alone
      $gnu_compat = 0;		# require --opt=val if value is optional
      $longprefix = "(--)";       # what does a long prefix look like
      $bundling_values = 0;	# no bundling of values
  }
  
  # Override import.
  sub import {
      my $pkg = shift;		# package
      my @syms = ();		# symbols to import
      my @config = ();		# configuration
      my $dest = \@syms;		# symbols first
      for ( @_ ) {
  	if ( $_ eq ':config' ) {
  	    $dest = \@config;	# config next
  	    next;
  	}
  	push(@$dest, $_);	# push
      }
      # Hide one level and call super.
      local $Exporter::ExportLevel = 1;
      push(@syms, qw(&GetOptions)) if @syms; # always export GetOptions
      $requested_version = 0;
      $pkg->SUPER::import(@syms);
      # And configure.
      Configure(@config) if @config;
  }
  
  ################ Initialization ################
  
  # Values for $order. See GNU getopt.c for details.
  ($REQUIRE_ORDER, $PERMUTE, $RETURN_IN_ORDER) = (0..2);
  # Version major/minor numbers.
  ($major_version, $minor_version) = $VERSION =~ /^(\d+)\.(\d+)/;
  
  ConfigDefaults();
  
  ################ OO Interface ################
  
  package Getopt::Long::Parser;
  
  # Store a copy of the default configuration. Since ConfigDefaults has
  # just been called, what we get from Configure is the default.
  my $default_config = do {
      Getopt::Long::Configure ()
  };
  
  sub new {
      my $that = shift;
      my $class = ref($that) || $that;
      my %atts = @_;
  
      # Register the callers package.
      my $self = { caller_pkg => (caller)[0] };
  
      bless ($self, $class);
  
      # Process config attributes.
      if ( defined $atts{config} ) {
  	my $save = Getopt::Long::Configure ($default_config, @{$atts{config}});
  	$self->{settings} = Getopt::Long::Configure ($save);
  	delete ($atts{config});
      }
      # Else use default config.
      else {
  	$self->{settings} = $default_config;
      }
  
      if ( %atts ) {		# Oops
  	die(__PACKAGE__.": unhandled attributes: ".
  	    join(" ", sort(keys(%atts)))."\n");
      }
  
      $self;
  }
  
  sub configure {
      my ($self) = shift;
  
      # Restore settings, merge new settings in.
      my $save = Getopt::Long::Configure ($self->{settings}, @_);
  
      # Restore orig config and save the new config.
      $self->{settings} = Getopt::Long::Configure ($save);
  }
  
  sub getoptions {
      my ($self) = shift;
  
      return $self->getoptionsfromarray(\@ARGV, @_);
  }
  
  sub getoptionsfromarray {
      my ($self) = shift;
  
      # Restore config settings.
      my $save = Getopt::Long::Configure ($self->{settings});
  
      # Call main routine.
      my $ret = 0;
      $Getopt::Long::caller = $self->{caller_pkg};
  
      eval {
  	# Locally set exception handler to default, otherwise it will
  	# be called implicitly here, and again explicitly when we try
  	# to deliver the messages.
  	local ($SIG{__DIE__}) = 'DEFAULT';
  	$ret = Getopt::Long::GetOptionsFromArray (@_);
      };
  
      # Restore saved settings.
      Getopt::Long::Configure ($save);
  
      # Handle errors and return value.
      die ($@) if $@;
      return $ret;
  }
  
  package Getopt::Long;
  
  ################ Back to Normal ################
  
  # Indices in option control info.
  # Note that ParseOptions uses the fields directly. Search for 'hard-wired'.
  use constant CTL_TYPE    => 0;
  #use constant   CTL_TYPE_FLAG   => '';
  #use constant   CTL_TYPE_NEG    => '!';
  #use constant   CTL_TYPE_INCR   => '+';
  #use constant   CTL_TYPE_INT    => 'i';
  #use constant   CTL_TYPE_INTINC => 'I';
  #use constant   CTL_TYPE_XINT   => 'o';
  #use constant   CTL_TYPE_FLOAT  => 'f';
  #use constant   CTL_TYPE_STRING => 's';
  
  use constant CTL_CNAME   => 1;
  
  use constant CTL_DEFAULT => 2;
  
  use constant CTL_DEST    => 3;
   use constant   CTL_DEST_SCALAR => 0;
   use constant   CTL_DEST_ARRAY  => 1;
   use constant   CTL_DEST_HASH   => 2;
   use constant   CTL_DEST_CODE   => 3;
  
  use constant CTL_AMIN    => 4;
  use constant CTL_AMAX    => 5;
  
  # FFU.
  #use constant CTL_RANGE   => ;
  #use constant CTL_REPEAT  => ;
  
  # Rather liberal patterns to match numbers.
  use constant PAT_INT   => "[-+]?_*[0-9][0-9_]*";
  use constant PAT_XINT  =>
    "(?:".
  	  "[-+]?_*[1-9][0-9_]*".
    "|".
  	  "0x_*[0-9a-f][0-9a-f_]*".
    "|".
  	  "0b_*[01][01_]*".
    "|".
  	  "0[0-7_]*".
    ")";
  use constant PAT_FLOAT =>
    "[-+]?".			# optional sign
    "(?=[0-9.])".			# must start with digit or dec.point
    "[0-9_]*".			# digits before the dec.point
    "(\.[0-9_]+)?".		# optional fraction
    "([eE][-+]?[0-9_]+)?";	# optional exponent
  
  sub GetOptions(@) {
      # Shift in default array.
      unshift(@_, \@ARGV);
      # Try to keep caller() and Carp consistent.
      goto &GetOptionsFromArray;
  }
  
  sub GetOptionsFromString(@) {
      my ($string) = shift;
      require Text::ParseWords;
      my $args = [ Text::ParseWords::shellwords($string) ];
      $caller ||= (caller)[0];	# current context
      my $ret = GetOptionsFromArray($args, @_);
      return ( $ret, $args ) if wantarray;
      if ( @$args ) {
  	$ret = 0;
  	warn("GetOptionsFromString: Excess data \"@$args\" in string \"$string\"\n");
      }
      $ret;
  }
  
  sub GetOptionsFromArray(@) {
  
      my ($argv, @optionlist) = @_;	# local copy of the option descriptions
      my $argend = '--';		# option list terminator
      my %opctl = ();		# table of option specs
      my $pkg = $caller || (caller)[0];	# current context
  				# Needed if linkage is omitted.
      my @ret = ();		# accum for non-options
      my %linkage;		# linkage
      my $userlinkage;		# user supplied HASH
      my $opt;			# current option
      my $prefix = $genprefix;	# current prefix
  
      $error = '';
  
      if ( $debug ) {
  	# Avoid some warnings if debugging.
  	local ($^W) = 0;
  	print STDERR
  	  ("Getopt::Long $Getopt::Long::VERSION ",
  	   "called from package \"$pkg\".",
  	   "\n  ",
  	   "argv: ",
  	   defined($argv)
  	   ? UNIVERSAL::isa( $argv, 'ARRAY' ) ? "(@$argv)" : $argv
  	   : "<undef>",
  	   "\n  ",
  	   "autoabbrev=$autoabbrev,".
  	   "bundling=$bundling,",
  	   "bundling_values=$bundling_values,",
  	   "getopt_compat=$getopt_compat,",
  	   "gnu_compat=$gnu_compat,",
  	   "order=$order,",
  	   "\n  ",
  	   "ignorecase=$ignorecase,",
  	   "requested_version=$requested_version,",
  	   "passthrough=$passthrough,",
  	   "genprefix=\"$genprefix\",",
  	   "longprefix=\"$longprefix\".",
  	   "\n");
      }
  
      # Check for ref HASH as first argument.
      # First argument may be an object. It's OK to use this as long
      # as it is really a hash underneath.
      $userlinkage = undef;
      if ( @optionlist && ref($optionlist[0]) and
  	 UNIVERSAL::isa($optionlist[0],'HASH') ) {
  	$userlinkage = shift (@optionlist);
  	print STDERR ("=> user linkage: $userlinkage\n") if $debug;
      }
  
      # See if the first element of the optionlist contains option
      # starter characters.
      # Be careful not to interpret '<>' as option starters.
      if ( @optionlist && $optionlist[0] =~ /^\W+$/
  	 && !($optionlist[0] eq '<>'
  	      && @optionlist > 0
  	      && ref($optionlist[1])) ) {
  	$prefix = shift (@optionlist);
  	# Turn into regexp. Needs to be parenthesized!
  	$prefix =~ s/(\W)/\\$1/g;
  	$prefix = "([" . $prefix . "])";
  	print STDERR ("=> prefix=\"$prefix\"\n") if $debug;
      }
  
      # Verify correctness of optionlist.
      %opctl = ();
      while ( @optionlist ) {
  	my $opt = shift (@optionlist);
  
  	unless ( defined($opt) ) {
  	    $error .= "Undefined argument in option spec\n";
  	    next;
  	}
  
  	# Strip leading prefix so people can specify "--foo=i" if they like.
  	$opt = $+ if $opt =~ /^$prefix+(.*)$/s;
  
  	if ( $opt eq '<>' ) {
  	    if ( (defined $userlinkage)
  		&& !(@optionlist > 0 && ref($optionlist[0]))
  		&& (exists $userlinkage->{$opt})
  		&& ref($userlinkage->{$opt}) ) {
  		unshift (@optionlist, $userlinkage->{$opt});
  	    }
  	    unless ( @optionlist > 0
  		    && ref($optionlist[0]) && ref($optionlist[0]) eq 'CODE' ) {
  		$error .= "Option spec <> requires a reference to a subroutine\n";
  		# Kill the linkage (to avoid another error).
  		shift (@optionlist)
  		  if @optionlist && ref($optionlist[0]);
  		next;
  	    }
  	    $linkage{'<>'} = shift (@optionlist);
  	    next;
  	}
  
  	# Parse option spec.
  	my ($name, $orig) = ParseOptionSpec ($opt, \%opctl);
  	unless ( defined $name ) {
  	    # Failed. $orig contains the error message. Sorry for the abuse.
  	    $error .= $orig;
  	    # Kill the linkage (to avoid another error).
  	    shift (@optionlist)
  	      if @optionlist && ref($optionlist[0]);
  	    next;
  	}
  
  	# If no linkage is supplied in the @optionlist, copy it from
  	# the userlinkage if available.
  	if ( defined $userlinkage ) {
  	    unless ( @optionlist > 0 && ref($optionlist[0]) ) {
  		if ( exists $userlinkage->{$orig} &&
  		     ref($userlinkage->{$orig}) ) {
  		    print STDERR ("=> found userlinkage for \"$orig\": ",
  				  "$userlinkage->{$orig}\n")
  			if $debug;
  		    unshift (@optionlist, $userlinkage->{$orig});
  		}
  		else {
  		    # Do nothing. Being undefined will be handled later.
  		    next;
  		}
  	    }
  	}
  
  	# Copy the linkage. If omitted, link to global variable.
  	if ( @optionlist > 0 && ref($optionlist[0]) ) {
  	    print STDERR ("=> link \"$orig\" to $optionlist[0]\n")
  		if $debug;
  	    my $rl = ref($linkage{$orig} = shift (@optionlist));
  
  	    if ( $rl eq "ARRAY" ) {
  		$opctl{$name}[CTL_DEST] = CTL_DEST_ARRAY;
  	    }
  	    elsif ( $rl eq "HASH" ) {
  		$opctl{$name}[CTL_DEST] = CTL_DEST_HASH;
  	    }
  	    elsif ( $rl eq "SCALAR" || $rl eq "REF" ) {
  #		if ( $opctl{$name}[CTL_DEST] == CTL_DEST_ARRAY ) {
  #		    my $t = $linkage{$orig};
  #		    $$t = $linkage{$orig} = [];
  #		}
  #		elsif ( $opctl{$name}[CTL_DEST] == CTL_DEST_HASH ) {
  #		}
  #		else {
  		    # Ok.
  #		}
  	    }
  	    elsif ( $rl eq "CODE" ) {
  		# Ok.
  	    }
  	    else {
  		$error .= "Invalid option linkage for \"$opt\"\n";
  	    }
  	}
  	else {
  	    # Link to global $opt_XXX variable.
  	    # Make sure a valid perl identifier results.
  	    my $ov = $orig;
  	    $ov =~ s/\W/_/g;
  	    if ( $opctl{$name}[CTL_DEST] == CTL_DEST_ARRAY ) {
  		print STDERR ("=> link \"$orig\" to \@$pkg","::opt_$ov\n")
  		    if $debug;
  		eval ("\$linkage{\$orig} = \\\@".$pkg."::opt_$ov;");
  	    }
  	    elsif ( $opctl{$name}[CTL_DEST] == CTL_DEST_HASH ) {
  		print STDERR ("=> link \"$orig\" to \%$pkg","::opt_$ov\n")
  		    if $debug;
  		eval ("\$linkage{\$orig} = \\\%".$pkg."::opt_$ov;");
  	    }
  	    else {
  		print STDERR ("=> link \"$orig\" to \$$pkg","::opt_$ov\n")
  		    if $debug;
  		eval ("\$linkage{\$orig} = \\\$".$pkg."::opt_$ov;");
  	    }
  	}
  
  	if ( $opctl{$name}[CTL_TYPE] eq 'I'
  	     && ( $opctl{$name}[CTL_DEST] == CTL_DEST_ARRAY
  		  || $opctl{$name}[CTL_DEST] == CTL_DEST_HASH )
  	   ) {
  	    $error .= "Invalid option linkage for \"$opt\"\n";
  	}
  
      }
  
      $error .= "GetOptionsFromArray: 1st parameter is not an array reference\n"
        unless $argv && UNIVERSAL::isa( $argv, 'ARRAY' );
  
      # Bail out if errors found.
      die ($error) if $error;
      $error = 0;
  
      # Supply --version and --help support, if needed and allowed.
      if ( defined($auto_version) ? $auto_version : ($requested_version >= 2.3203) ) {
  	if ( !defined($opctl{version}) ) {
  	    $opctl{version} = ['','version',0,CTL_DEST_CODE,undef];
  	    $linkage{version} = \&VersionMessage;
  	}
  	$auto_version = 1;
      }
      if ( defined($auto_help) ? $auto_help : ($requested_version >= 2.3203) ) {
  	if ( !defined($opctl{help}) && !defined($opctl{'?'}) ) {
  	    $opctl{help} = $opctl{'?'} = ['','help',0,CTL_DEST_CODE,undef];
  	    $linkage{help} = \&HelpMessage;
  	}
  	$auto_help = 1;
      }
  
      # Show the options tables if debugging.
      if ( $debug ) {
  	my ($arrow, $k, $v);
  	$arrow = "=> ";
  	while ( ($k,$v) = each(%opctl) ) {
  	    print STDERR ($arrow, "\$opctl{$k} = $v ", OptCtl($v), "\n");
  	    $arrow = "   ";
  	}
      }
  
      # Process argument list
      my $goon = 1;
      while ( $goon && @$argv > 0 ) {
  
  	# Get next argument.
  	$opt = shift (@$argv);
  	print STDERR ("=> arg \"", $opt, "\"\n") if $debug;
  
  	# Double dash is option list terminator.
  	if ( defined($opt) && $opt eq $argend ) {
  	  push (@ret, $argend) if $passthrough;
  	  last;
  	}
  
  	# Look it up.
  	my $tryopt = $opt;
  	my $found;		# success status
  	my $key;		# key (if hash type)
  	my $arg;		# option argument
  	my $ctl;		# the opctl entry
  
  	($found, $opt, $ctl, $arg, $key) =
  	  FindOption ($argv, $prefix, $argend, $opt, \%opctl);
  
  	if ( $found ) {
  
  	    # FindOption undefines $opt in case of errors.
  	    next unless defined $opt;
  
  	    my $argcnt = 0;
  	    while ( defined $arg ) {
  
  		# Get the canonical name.
  		print STDERR ("=> cname for \"$opt\" is ") if $debug;
  		$opt = $ctl->[CTL_CNAME];
  		print STDERR ("\"$ctl->[CTL_CNAME]\"\n") if $debug;
  
  		if ( defined $linkage{$opt} ) {
  		    print STDERR ("=> ref(\$L{$opt}) -> ",
  				  ref($linkage{$opt}), "\n") if $debug;
  
  		    if ( ref($linkage{$opt}) eq 'SCALAR'
  			 || ref($linkage{$opt}) eq 'REF' ) {
  			if ( $ctl->[CTL_TYPE] eq '+' ) {
  			    print STDERR ("=> \$\$L{$opt} += \"$arg\"\n")
  			      if $debug;
  			    if ( defined ${$linkage{$opt}} ) {
  			        ${$linkage{$opt}} += $arg;
  			    }
  		            else {
  			        ${$linkage{$opt}} = $arg;
  			    }
  			}
  			elsif ( $ctl->[CTL_DEST] == CTL_DEST_ARRAY ) {
  			    print STDERR ("=> ref(\$L{$opt}) auto-vivified",
  					  " to ARRAY\n")
  			      if $debug;
  			    my $t = $linkage{$opt};
  			    $$t = $linkage{$opt} = [];
  			    print STDERR ("=> push(\@{\$L{$opt}, \"$arg\")\n")
  			      if $debug;
  			    push (@{$linkage{$opt}}, $arg);
  			}
  			elsif ( $ctl->[CTL_DEST] == CTL_DEST_HASH ) {
  			    print STDERR ("=> ref(\$L{$opt}) auto-vivified",
  					  " to HASH\n")
  			      if $debug;
  			    my $t = $linkage{$opt};
  			    $$t = $linkage{$opt} = {};
  			    print STDERR ("=> \$\$L{$opt}->{$key} = \"$arg\"\n")
  			      if $debug;
  			    $linkage{$opt}->{$key} = $arg;
  			}
  			else {
  			    print STDERR ("=> \$\$L{$opt} = \"$arg\"\n")
  			      if $debug;
  			    ${$linkage{$opt}} = $arg;
  		        }
  		    }
  		    elsif ( ref($linkage{$opt}) eq 'ARRAY' ) {
  			print STDERR ("=> push(\@{\$L{$opt}, \"$arg\")\n")
  			    if $debug;
  			push (@{$linkage{$opt}}, $arg);
  		    }
  		    elsif ( ref($linkage{$opt}) eq 'HASH' ) {
  			print STDERR ("=> \$\$L{$opt}->{$key} = \"$arg\"\n")
  			    if $debug;
  			$linkage{$opt}->{$key} = $arg;
  		    }
  		    elsif ( ref($linkage{$opt}) eq 'CODE' ) {
  			print STDERR ("=> &L{$opt}(\"$opt\"",
  				      $ctl->[CTL_DEST] == CTL_DEST_HASH ? ", \"$key\"" : "",
  				      ", \"$arg\")\n")
  			    if $debug;
  			my $eval_error = do {
  			    local $@;
  			    local $SIG{__DIE__}  = 'DEFAULT';
  			    eval {
  				&{$linkage{$opt}}
  				  (Getopt::Long::CallBack->new
  				   (name    => $opt,
  				    ctl     => $ctl,
  				    opctl   => \%opctl,
  				    linkage => \%linkage,
  				    prefix  => $prefix,
  				   ),
  				   $ctl->[CTL_DEST] == CTL_DEST_HASH ? ($key) : (),
  				   $arg);
  			    };
  			    $@;
  			};
  			print STDERR ("=> die($eval_error)\n")
  			  if $debug && $eval_error ne '';
  			if ( $eval_error =~ /^!/ ) {
  			    if ( $eval_error =~ /^!FINISH\b/ ) {
  				$goon = 0;
  			    }
  			}
  			elsif ( $eval_error ne '' ) {
  			    warn ($eval_error);
  			    $error++;
  			}
  		    }
  		    else {
  			print STDERR ("Invalid REF type \"", ref($linkage{$opt}),
  				      "\" in linkage\n");
  			die("Getopt::Long -- internal error!\n");
  		    }
  		}
  		# No entry in linkage means entry in userlinkage.
  		elsif ( $ctl->[CTL_DEST] == CTL_DEST_ARRAY ) {
  		    if ( defined $userlinkage->{$opt} ) {
  			print STDERR ("=> push(\@{\$L{$opt}}, \"$arg\")\n")
  			    if $debug;
  			push (@{$userlinkage->{$opt}}, $arg);
  		    }
  		    else {
  			print STDERR ("=>\$L{$opt} = [\"$arg\"]\n")
  			    if $debug;
  			$userlinkage->{$opt} = [$arg];
  		    }
  		}
  		elsif ( $ctl->[CTL_DEST] == CTL_DEST_HASH ) {
  		    if ( defined $userlinkage->{$opt} ) {
  			print STDERR ("=> \$L{$opt}->{$key} = \"$arg\"\n")
  			    if $debug;
  			$userlinkage->{$opt}->{$key} = $arg;
  		    }
  		    else {
  			print STDERR ("=>\$L{$opt} = {$key => \"$arg\"}\n")
  			    if $debug;
  			$userlinkage->{$opt} = {$key => $arg};
  		    }
  		}
  		else {
  		    if ( $ctl->[CTL_TYPE] eq '+' ) {
  			print STDERR ("=> \$L{$opt} += \"$arg\"\n")
  			  if $debug;
  			if ( defined $userlinkage->{$opt} ) {
  			    $userlinkage->{$opt} += $arg;
  			}
  			else {
  			    $userlinkage->{$opt} = $arg;
  			}
  		    }
  		    else {
  			print STDERR ("=>\$L{$opt} = \"$arg\"\n") if $debug;
  			$userlinkage->{$opt} = $arg;
  		    }
  		}
  
  		$argcnt++;
  		last if $argcnt >= $ctl->[CTL_AMAX] && $ctl->[CTL_AMAX] != -1;
  		undef($arg);
  
  		# Need more args?
  		if ( $argcnt < $ctl->[CTL_AMIN] ) {
  		    if ( @$argv ) {
  			if ( ValidValue($ctl, $argv->[0], 1, $argend, $prefix) ) {
  			    $arg = shift(@$argv);
  			    if ( $ctl->[CTL_TYPE] =~ /^[iIo]$/ ) {
  				$arg =~ tr/_//d;
  				$arg = $ctl->[CTL_TYPE] eq 'o' && $arg =~ /^0/
  				  ? oct($arg)
  				  : 0+$arg
  			    }
  			    ($key,$arg) = $arg =~ /^([^=]+)=(.*)/
  			      if $ctl->[CTL_DEST] == CTL_DEST_HASH;
  			    next;
  			}
  			warn("Value \"$$argv[0]\" invalid for option $opt\n");
  			$error++;
  		    }
  		    else {
  			warn("Insufficient arguments for option $opt\n");
  			$error++;
  		    }
  		}
  
  		# Any more args?
  		if ( @$argv && ValidValue($ctl, $argv->[0], 0, $argend, $prefix) ) {
  		    $arg = shift(@$argv);
  		    if ( $ctl->[CTL_TYPE] =~ /^[iIo]$/ ) {
  			$arg =~ tr/_//d;
  			$arg = $ctl->[CTL_TYPE] eq 'o' && $arg =~ /^0/
  			  ? oct($arg)
  			  : 0+$arg
  		    }
  		    ($key,$arg) = $arg =~ /^([^=]+)=(.*)/
  		      if $ctl->[CTL_DEST] == CTL_DEST_HASH;
  		    next;
  		}
  	    }
  	}
  
  	# Not an option. Save it if we $PERMUTE and don't have a <>.
  	elsif ( $order == $PERMUTE ) {
  	    # Try non-options call-back.
  	    my $cb;
  	    if ( defined ($cb = $linkage{'<>'}) ) {
  		print STDERR ("=> &L{$tryopt}(\"$tryopt\")\n")
  		  if $debug;
  		my $eval_error = do {
  		    local $@;
  		    local $SIG{__DIE__}  = 'DEFAULT';
  		    eval {
  			# The arg to <> cannot be the CallBack object
  			# since it may be passed to other modules that
  			# get confused (e.g., Archive::Tar). Well,
  			# it's not relevant for this callback anyway.
  			&$cb($tryopt);
  		    };
  		    $@;
  		};
  		print STDERR ("=> die($eval_error)\n")
  		  if $debug && $eval_error ne '';
  		if ( $eval_error =~ /^!/ ) {
  		    if ( $eval_error =~ /^!FINISH\b/ ) {
  			$goon = 0;
  		    }
  		}
  		elsif ( $eval_error ne '' ) {
  		    warn ($eval_error);
  		    $error++;
  		}
  	    }
  	    else {
  		print STDERR ("=> saving \"$tryopt\" ",
  			      "(not an option, may permute)\n") if $debug;
  		push (@ret, $tryopt);
  	    }
  	    next;
  	}
  
  	# ...otherwise, terminate.
  	else {
  	    # Push this one back and exit.
  	    unshift (@$argv, $tryopt);
  	    return ($error == 0);
  	}
  
      }
  
      # Finish.
      if ( @ret && $order == $PERMUTE ) {
  	#  Push back accumulated arguments
  	print STDERR ("=> restoring \"", join('" "', @ret), "\"\n")
  	    if $debug;
  	unshift (@$argv, @ret);
      }
  
      return ($error == 0);
  }
  
  # A readable representation of what's in an optbl.
  sub OptCtl ($) {
      my ($v) = @_;
      my @v = map { defined($_) ? ($_) : ("<undef>") } @$v;
      "[".
        join(",",
  	   "\"$v[CTL_TYPE]\"",
  	   "\"$v[CTL_CNAME]\"",
  	   "\"$v[CTL_DEFAULT]\"",
  	   ("\$","\@","\%","\&")[$v[CTL_DEST] || 0],
  	   $v[CTL_AMIN] || '',
  	   $v[CTL_AMAX] || '',
  #	   $v[CTL_RANGE] || '',
  #	   $v[CTL_REPEAT] || '',
  	  ). "]";
  }
  
  # Parse an option specification and fill the tables.
  sub ParseOptionSpec ($$) {
      my ($opt, $opctl) = @_;
  
      # Match option spec.
      if ( $opt !~ m;^
  		   (
  		     # Option name
  		     (?: \w+[-\w]* )
  		     # Alias names, or "?"
  		     (?: \| (?: \? | \w[-\w]* ) )*
  		     # Aliases
  		     (?: \| (?: [^-|!+=:][^|!+=:]* )? )*
  		   )?
  		   (
  		     # Either modifiers ...
  		     [!+]
  		     |
  		     # ... or a value/dest/repeat specification
  		     [=:] [ionfs] [@%]? (?: \{\d*,?\d*\} )?
  		     |
  		     # ... or an optional-with-default spec
  		     : (?: -?\d+ | \+ ) [@%]?
  		   )?
  		   $;x ) {
  	return (undef, "Error in option spec: \"$opt\"\n");
      }
  
      my ($names, $spec) = ($1, $2);
      $spec = '' unless defined $spec;
  
      # $orig keeps track of the primary name the user specified.
      # This name will be used for the internal or external linkage.
      # In other words, if the user specifies "FoO|BaR", it will
      # match any case combinations of 'foo' and 'bar', but if a global
      # variable needs to be set, it will be $opt_FoO in the exact case
      # as specified.
      my $orig;
  
      my @names;
      if ( defined $names ) {
  	@names =  split (/\|/, $names);
  	$orig = $names[0];
      }
      else {
  	@names = ('');
  	$orig = '';
      }
  
      # Construct the opctl entries.
      my $entry;
      if ( $spec eq '' || $spec eq '+' || $spec eq '!' ) {
  	# Fields are hard-wired here.
  	$entry = [$spec,$orig,undef,CTL_DEST_SCALAR,0,0];
      }
      elsif ( $spec =~ /^:(-?\d+|\+)([@%])?$/ ) {
  	my $def = $1;
  	my $dest = $2;
  	my $type = $def eq '+' ? 'I' : 'i';
  	$dest ||= '$';
  	$dest = $dest eq '@' ? CTL_DEST_ARRAY
  	  : $dest eq '%' ? CTL_DEST_HASH : CTL_DEST_SCALAR;
  	# Fields are hard-wired here.
  	$entry = [$type,$orig,$def eq '+' ? undef : $def,
  		  $dest,0,1];
      }
      else {
  	my ($mand, $type, $dest) =
  	  $spec =~ /^([=:])([ionfs])([@%])?(\{(\d+)?(,)?(\d+)?\})?$/;
  	return (undef, "Cannot repeat while bundling: \"$opt\"\n")
  	  if $bundling && defined($4);
  	my ($mi, $cm, $ma) = ($5, $6, $7);
  	return (undef, "{0} is useless in option spec: \"$opt\"\n")
  	  if defined($mi) && !$mi && !defined($ma) && !defined($cm);
  
  	$type = 'i' if $type eq 'n';
  	$dest ||= '$';
  	$dest = $dest eq '@' ? CTL_DEST_ARRAY
  	  : $dest eq '%' ? CTL_DEST_HASH : CTL_DEST_SCALAR;
  	# Default minargs to 1/0 depending on mand status.
  	$mi = $mand eq '=' ? 1 : 0 unless defined $mi;
  	# Adjust mand status according to minargs.
  	$mand = $mi ? '=' : ':';
  	# Adjust maxargs.
  	$ma = $mi ? $mi : 1 unless defined $ma || defined $cm;
  	return (undef, "Max must be greater than zero in option spec: \"$opt\"\n")
  	  if defined($ma) && !$ma;
  	return (undef, "Max less than min in option spec: \"$opt\"\n")
  	  if defined($ma) && $ma < $mi;
  
  	# Fields are hard-wired here.
  	$entry = [$type,$orig,undef,$dest,$mi,$ma||-1];
      }
  
      # Process all names. First is canonical, the rest are aliases.
      my $dups = '';
      foreach ( @names ) {
  
  	$_ = lc ($_)
  	  if $ignorecase > (($bundling && length($_) == 1) ? 1 : 0);
  
  	if ( exists $opctl->{$_} ) {
  	    $dups .= "Duplicate specification \"$opt\" for option \"$_\"\n";
  	}
  
  	if ( $spec eq '!' ) {
  	    $opctl->{"no$_"} = $entry;
  	    $opctl->{"no-$_"} = $entry;
  	    $opctl->{$_} = [@$entry];
  	    $opctl->{$_}->[CTL_TYPE] = '';
  	}
  	else {
  	    $opctl->{$_} = $entry;
  	}
      }
  
      if ( $dups && $^W ) {
  	foreach ( split(/\n+/, $dups) ) {
  	    warn($_."\n");
  	}
      }
      ($names[0], $orig);
  }
  
  # Option lookup.
  sub FindOption ($$$$$) {
  
      # returns (1, $opt, $ctl, $arg, $key) if okay,
      # returns (1, undef) if option in error,
      # returns (0) otherwise.
  
      my ($argv, $prefix, $argend, $opt, $opctl) = @_;
  
      print STDERR ("=> find \"$opt\"\n") if $debug;
  
      return (0) unless defined($opt);
      return (0) unless $opt =~ /^($prefix)(.*)$/s;
      return (0) if $opt eq "-" && !defined $opctl->{''};
  
      $opt = substr( $opt, length($1) ); # retain taintedness
      my $starter = $1;
  
      print STDERR ("=> split \"$starter\"+\"$opt\"\n") if $debug;
  
      my $optarg;			# value supplied with --opt=value
      my $rest;			# remainder from unbundling
  
      # If it is a long option, it may include the value.
      # With getopt_compat, only if not bundling.
      if ( ($starter=~/^$longprefix$/
  	  || ($getopt_compat && ($bundling == 0 || $bundling == 2)))
  	 && (my $oppos = index($opt, '=', 1)) > 0) {
  	my $optorg = $opt;
  	$opt = substr($optorg, 0, $oppos);
  	$optarg = substr($optorg, $oppos + 1); # retain tainedness
  	print STDERR ("=> option \"", $opt,
  		      "\", optarg = \"$optarg\"\n") if $debug;
      }
  
      #### Look it up ###
  
      my $tryopt = $opt;		# option to try
  
      if ( ( $bundling || $bundling_values ) && $starter eq '-' ) {
  
  	# To try overrides, obey case ignore.
  	$tryopt = $ignorecase ? lc($opt) : $opt;
  
  	# If bundling == 2, long options can override bundles.
  	if ( $bundling == 2 && length($tryopt) > 1
  	     && defined ($opctl->{$tryopt}) ) {
  	    print STDERR ("=> $starter$tryopt overrides unbundling\n")
  	      if $debug;
  	}
  
  	# If bundling_values, option may be followed by the value.
  	elsif ( $bundling_values ) {
  	    $tryopt = $opt;
  	    # Unbundle single letter option.
  	    $rest = length ($tryopt) > 0 ? substr ($tryopt, 1) : '';
  	    $tryopt = substr ($tryopt, 0, 1);
  	    $tryopt = lc ($tryopt) if $ignorecase > 1;
  	    print STDERR ("=> $starter$tryopt unbundled from ",
  			  "$starter$tryopt$rest\n") if $debug;
  	    # Whatever remains may not be considered an option.
  	    $optarg = $rest eq '' ? undef : $rest;
  	    $rest = undef;
  	}
  
  	# Split off a single letter and leave the rest for
  	# further processing.
  	else {
  	    $tryopt = $opt;
  	    # Unbundle single letter option.
  	    $rest = length ($tryopt) > 0 ? substr ($tryopt, 1) : '';
  	    $tryopt = substr ($tryopt, 0, 1);
  	    $tryopt = lc ($tryopt) if $ignorecase > 1;
  	    print STDERR ("=> $starter$tryopt unbundled from ",
  			  "$starter$tryopt$rest\n") if $debug;
  	    $rest = undef unless $rest ne '';
  	}
      }
  
      # Try auto-abbreviation.
      elsif ( $autoabbrev && $opt ne "" ) {
  	# Sort the possible long option names.
  	my @names = sort(keys (%$opctl));
  	# Downcase if allowed.
  	$opt = lc ($opt) if $ignorecase;
  	$tryopt = $opt;
  	# Turn option name into pattern.
  	my $pat = quotemeta ($opt);
  	# Look up in option names.
  	my @hits = grep (/^$pat/, @names);
  	print STDERR ("=> ", scalar(@hits), " hits (@hits) with \"$pat\" ",
  		      "out of ", scalar(@names), "\n") if $debug;
  
  	# Check for ambiguous results.
  	unless ( (@hits <= 1) || (grep ($_ eq $opt, @hits) == 1) ) {
  	    # See if all matches are for the same option.
  	    my %hit;
  	    foreach ( @hits ) {
  		my $hit = $opctl->{$_}->[CTL_CNAME]
  		  if defined $opctl->{$_}->[CTL_CNAME];
  		$hit = "no" . $hit if $opctl->{$_}->[CTL_TYPE] eq '!';
  		$hit{$hit} = 1;
  	    }
  	    # Remove auto-supplied options (version, help).
  	    if ( keys(%hit) == 2 ) {
  		if ( $auto_version && exists($hit{version}) ) {
  		    delete $hit{version};
  		}
  		elsif ( $auto_help && exists($hit{help}) ) {
  		    delete $hit{help};
  		}
  	    }
  	    # Now see if it really is ambiguous.
  	    unless ( keys(%hit) == 1 ) {
  		return (0) if $passthrough;
  		warn ("Option ", $opt, " is ambiguous (",
  		      join(", ", @hits), ")\n");
  		$error++;
  		return (1, undef);
  	    }
  	    @hits = keys(%hit);
  	}
  
  	# Complete the option name, if appropriate.
  	if ( @hits == 1 && $hits[0] ne $opt ) {
  	    $tryopt = $hits[0];
  	    $tryopt = lc ($tryopt)
  	      if $ignorecase > (($bundling && length($tryopt) == 1) ? 1 : 0);
  	    print STDERR ("=> option \"$opt\" -> \"$tryopt\"\n")
  		if $debug;
  	}
      }
  
      # Map to all lowercase if ignoring case.
      elsif ( $ignorecase ) {
  	$tryopt = lc ($opt);
      }
  
      # Check validity by fetching the info.
      my $ctl = $opctl->{$tryopt};
      unless  ( defined $ctl ) {
  	return (0) if $passthrough;
  	# Pretend one char when bundling.
  	if ( $bundling == 1 && length($starter) == 1 ) {
  	    $opt = substr($opt,0,1);
              unshift (@$argv, $starter.$rest) if defined $rest;
  	}
  	if ( $opt eq "" ) {
  	    warn ("Missing option after ", $starter, "\n");
  	}
  	else {
  	    warn ("Unknown option: ", $opt, "\n");
  	}
  	$error++;
  	return (1, undef);
      }
      # Apparently valid.
      $opt = $tryopt;
      print STDERR ("=> found ", OptCtl($ctl),
  		  " for \"", $opt, "\"\n") if $debug;
  
      #### Determine argument status ####
  
      # If it is an option w/o argument, we're almost finished with it.
      my $type = $ctl->[CTL_TYPE];
      my $arg;
  
      if ( $type eq '' || $type eq '!' || $type eq '+' ) {
  	if ( defined $optarg ) {
  	    return (0) if $passthrough;
  	    warn ("Option ", $opt, " does not take an argument\n");
  	    $error++;
  	    undef $opt;
  	    undef $optarg if $bundling_values;
  	}
  	elsif ( $type eq '' || $type eq '+' ) {
  	    # Supply explicit value.
  	    $arg = 1;
  	}
  	else {
  	    $opt =~ s/^no-?//i;	# strip NO prefix
  	    $arg = 0;		# supply explicit value
  	}
  	unshift (@$argv, $starter.$rest) if defined $rest;
  	return (1, $opt, $ctl, $arg);
      }
  
      # Get mandatory status and type info.
      my $mand = $ctl->[CTL_AMIN];
  
      # Check if there is an option argument available.
      if ( $gnu_compat ) {
  	my $optargtype = 0; # none, 1 = empty, 2 = nonempty, 3 = aux
  	if ( defined($optarg) ) {
  	    $optargtype = (length($optarg) == 0) ? 1 : 2;
  	}
  	elsif ( defined $rest || @$argv > 0 ) {
  	    # GNU getopt_long() does not accept the (optional)
  	    # argument to be passed to the option without = sign.
  	    # We do, since not doing so breaks existing scripts.
  	    $optargtype = 3;
  	}
  	if(($optargtype == 0) && !$mand) {
  	    my $val
  	      = defined($ctl->[CTL_DEFAULT]) ? $ctl->[CTL_DEFAULT]
  	      : $type eq 's'                 ? ''
  	      :                                0;
  	    return (1, $opt, $ctl, $val);
  	}
  	return (1, $opt, $ctl, $type eq 's' ? '' : 0)
  	  if $optargtype == 1;  # --foo=  -> return nothing
      }
  
      # Check if there is an option argument available.
      if ( defined $optarg
  	 ? ($optarg eq '')
  	 : !(defined $rest || @$argv > 0) ) {
  	# Complain if this option needs an argument.
  #	if ( $mand && !($type eq 's' ? defined($optarg) : 0) ) {
  	if ( $mand ) {
  	    return (0) if $passthrough;
  	    warn ("Option ", $opt, " requires an argument\n");
  	    $error++;
  	    return (1, undef);
  	}
  	if ( $type eq 'I' ) {
  	    # Fake incremental type.
  	    my @c = @$ctl;
  	    $c[CTL_TYPE] = '+';
  	    return (1, $opt, \@c, 1);
  	}
  	return (1, $opt, $ctl,
  		defined($ctl->[CTL_DEFAULT]) ? $ctl->[CTL_DEFAULT] :
  		$type eq 's' ? '' : 0);
      }
  
      # Get (possibly optional) argument.
      $arg = (defined $rest ? $rest
  	    : (defined $optarg ? $optarg : shift (@$argv)));
  
      # Get key if this is a "name=value" pair for a hash option.
      my $key;
      if ($ctl->[CTL_DEST] == CTL_DEST_HASH && defined $arg) {
  	($key, $arg) = ($arg =~ /^([^=]*)=(.*)$/s) ? ($1, $2)
  	  : ($arg, defined($ctl->[CTL_DEFAULT]) ? $ctl->[CTL_DEFAULT] :
  	     ($mand ? undef : ($type eq 's' ? "" : 1)));
  	if (! defined $arg) {
  	    warn ("Option $opt, key \"$key\", requires a value\n");
  	    $error++;
  	    # Push back.
  	    unshift (@$argv, $starter.$rest) if defined $rest;
  	    return (1, undef);
  	}
      }
  
      #### Check if the argument is valid for this option ####
  
      my $key_valid = $ctl->[CTL_DEST] == CTL_DEST_HASH ? "[^=]+=" : "";
  
      if ( $type eq 's' ) {	# string
  	# A mandatory string takes anything.
  	return (1, $opt, $ctl, $arg, $key) if $mand;
  
  	# Same for optional string as a hash value
  	return (1, $opt, $ctl, $arg, $key)
  	  if $ctl->[CTL_DEST] == CTL_DEST_HASH;
  
  	# An optional string takes almost anything.
  	return (1, $opt, $ctl, $arg, $key)
  	  if defined $optarg || defined $rest;
  	return (1, $opt, $ctl, $arg, $key) if $arg eq "-"; # ??
  
  	# Check for option or option list terminator.
  	if ($arg eq $argend ||
  	    $arg =~ /^$prefix.+/) {
  	    # Push back.
  	    unshift (@$argv, $arg);
  	    # Supply empty value.
  	    $arg = '';
  	}
      }
  
      elsif ( $type eq 'i'	# numeric/integer
              || $type eq 'I'	# numeric/integer w/ incr default
  	    || $type eq 'o' ) { # dec/oct/hex/bin value
  
  	my $o_valid = $type eq 'o' ? PAT_XINT : PAT_INT;
  
  	if ( $bundling && defined $rest
  	     && $rest =~ /^($key_valid)($o_valid)(.*)$/si ) {
  	    ($key, $arg, $rest) = ($1, $2, $+);
  	    chop($key) if $key;
  	    $arg = ($type eq 'o' && $arg =~ /^0/) ? oct($arg) : 0+$arg;
  	    unshift (@$argv, $starter.$rest) if defined $rest && $rest ne '';
  	}
  	elsif ( $arg =~ /^$o_valid$/si ) {
  	    $arg =~ tr/_//d;
  	    $arg = ($type eq 'o' && $arg =~ /^0/) ? oct($arg) : 0+$arg;
  	}
  	else {
  	    if ( defined $optarg || $mand ) {
  		if ( $passthrough ) {
  		    unshift (@$argv, defined $rest ? $starter.$rest : $arg)
  		      unless defined $optarg;
  		    return (0);
  		}
  		warn ("Value \"", $arg, "\" invalid for option ",
  		      $opt, " (",
  		      $type eq 'o' ? "extended " : '',
  		      "number expected)\n");
  		$error++;
  		# Push back.
  		unshift (@$argv, $starter.$rest) if defined $rest;
  		return (1, undef);
  	    }
  	    else {
  		# Push back.
  		unshift (@$argv, defined $rest ? $starter.$rest : $arg);
  		if ( $type eq 'I' ) {
  		    # Fake incremental type.
  		    my @c = @$ctl;
  		    $c[CTL_TYPE] = '+';
  		    return (1, $opt, \@c, 1);
  		}
  		# Supply default value.
  		$arg = defined($ctl->[CTL_DEFAULT]) ? $ctl->[CTL_DEFAULT] : 0;
  	    }
  	}
      }
  
      elsif ( $type eq 'f' ) { # real number, int is also ok
  	my $o_valid = PAT_FLOAT;
  	if ( $bundling && defined $rest &&
  	     $rest =~ /^($key_valid)($o_valid)(.*)$/s ) {
  	    $arg =~ tr/_//d;
  	    ($key, $arg, $rest) = ($1, $2, $+);
  	    chop($key) if $key;
  	    unshift (@$argv, $starter.$rest) if defined $rest && $rest ne '';
  	}
  	elsif ( $arg =~ /^$o_valid$/ ) {
  	    $arg =~ tr/_//d;
  	}
  	else {
  	    if ( defined $optarg || $mand ) {
  		if ( $passthrough ) {
  		    unshift (@$argv, defined $rest ? $starter.$rest : $arg)
  		      unless defined $optarg;
  		    return (0);
  		}
  		warn ("Value \"", $arg, "\" invalid for option ",
  		      $opt, " (real number expected)\n");
  		$error++;
  		# Push back.
  		unshift (@$argv, $starter.$rest) if defined $rest;
  		return (1, undef);
  	    }
  	    else {
  		# Push back.
  		unshift (@$argv, defined $rest ? $starter.$rest : $arg);
  		# Supply default value.
  		$arg = 0.0;
  	    }
  	}
      }
      else {
  	die("Getopt::Long internal error (Can't happen)\n");
      }
      return (1, $opt, $ctl, $arg, $key);
  }
  
  sub ValidValue ($$$$$) {
      my ($ctl, $arg, $mand, $argend, $prefix) = @_;
  
      if ( $ctl->[CTL_DEST] == CTL_DEST_HASH ) {
  	return 0 unless $arg =~ /[^=]+=(.*)/;
  	$arg = $1;
      }
  
      my $type = $ctl->[CTL_TYPE];
  
      if ( $type eq 's' ) {	# string
  	# A mandatory string takes anything.
  	return (1) if $mand;
  
  	return (1) if $arg eq "-";
  
  	# Check for option or option list terminator.
  	return 0 if $arg eq $argend || $arg =~ /^$prefix.+/;
  	return 1;
      }
  
      elsif ( $type eq 'i'	# numeric/integer
              || $type eq 'I'	# numeric/integer w/ incr default
  	    || $type eq 'o' ) { # dec/oct/hex/bin value
  
  	my $o_valid = $type eq 'o' ? PAT_XINT : PAT_INT;
  	return $arg =~ /^$o_valid$/si;
      }
  
      elsif ( $type eq 'f' ) { # real number, int is also ok
  	my $o_valid = PAT_FLOAT;
  	return $arg =~ /^$o_valid$/;
      }
      die("ValidValue: Cannot happen\n");
  }
  
  # Getopt::Long Configuration.
  sub Configure (@) {
      my (@options) = @_;
  
      my $prevconfig =
        [ $error, $debug, $major_version, $minor_version, $caller,
  	$autoabbrev, $getopt_compat, $ignorecase, $bundling, $order,
  	$gnu_compat, $passthrough, $genprefix, $auto_version, $auto_help,
  	$longprefix, $bundling_values ];
  
      if ( ref($options[0]) eq 'ARRAY' ) {
  	( $error, $debug, $major_version, $minor_version, $caller,
  	  $autoabbrev, $getopt_compat, $ignorecase, $bundling, $order,
  	  $gnu_compat, $passthrough, $genprefix, $auto_version, $auto_help,
  	  $longprefix, $bundling_values ) = @{shift(@options)};
      }
  
      my $opt;
      foreach $opt ( @options ) {
  	my $try = lc ($opt);
  	my $action = 1;
  	if ( $try =~ /^no_?(.*)$/s ) {
  	    $action = 0;
  	    $try = $+;
  	}
  	if ( ($try eq 'default' or $try eq 'defaults') && $action ) {
  	    ConfigDefaults ();
  	}
  	elsif ( ($try eq 'posix_default' or $try eq 'posix_defaults') ) {
  	    local $ENV{POSIXLY_CORRECT};
  	    $ENV{POSIXLY_CORRECT} = 1 if $action;
  	    ConfigDefaults ();
  	}
  	elsif ( $try eq 'auto_abbrev' or $try eq 'autoabbrev' ) {
  	    $autoabbrev = $action;
  	}
  	elsif ( $try eq 'getopt_compat' ) {
  	    $getopt_compat = $action;
              $genprefix = $action ? "(--|-|\\+)" : "(--|-)";
  	}
  	elsif ( $try eq 'gnu_getopt' ) {
  	    if ( $action ) {
  		$gnu_compat = 1;
  		$bundling = 1;
  		$getopt_compat = 0;
                  $genprefix = "(--|-)";
  		$order = $PERMUTE;
  		$bundling_values = 0;
  	    }
  	}
  	elsif ( $try eq 'gnu_compat' ) {
  	    $gnu_compat = $action;
  	    $bundling = 0;
  	    $bundling_values = 1;
  	}
  	elsif ( $try =~ /^(auto_?)?version$/ ) {
  	    $auto_version = $action;
  	}
  	elsif ( $try =~ /^(auto_?)?help$/ ) {
  	    $auto_help = $action;
  	}
  	elsif ( $try eq 'ignorecase' or $try eq 'ignore_case' ) {
  	    $ignorecase = $action;
  	}
  	elsif ( $try eq 'ignorecase_always' or $try eq 'ignore_case_always' ) {
  	    $ignorecase = $action ? 2 : 0;
  	}
  	elsif ( $try eq 'bundling' ) {
  	    $bundling = $action;
  	    $bundling_values = 0 if $action;
  	}
  	elsif ( $try eq 'bundling_override' ) {
  	    $bundling = $action ? 2 : 0;
  	    $bundling_values = 0 if $action;
  	}
  	elsif ( $try eq 'bundling_values' ) {
  	    $bundling_values = $action;
  	    $bundling = 0 if $action;
  	}
  	elsif ( $try eq 'require_order' ) {
  	    $order = $action ? $REQUIRE_ORDER : $PERMUTE;
  	}
  	elsif ( $try eq 'permute' ) {
  	    $order = $action ? $PERMUTE : $REQUIRE_ORDER;
  	}
  	elsif ( $try eq 'pass_through' or $try eq 'passthrough' ) {
  	    $passthrough = $action;
  	}
  	elsif ( $try =~ /^prefix=(.+)$/ && $action ) {
  	    $genprefix = $1;
  	    # Turn into regexp. Needs to be parenthesized!
  	    $genprefix = "(" . quotemeta($genprefix) . ")";
  	    eval { '' =~ /$genprefix/; };
  	    die("Getopt::Long: invalid pattern \"$genprefix\"\n") if $@;
  	}
  	elsif ( $try =~ /^prefix_pattern=(.+)$/ && $action ) {
  	    $genprefix = $1;
  	    # Parenthesize if needed.
  	    $genprefix = "(" . $genprefix . ")"
  	      unless $genprefix =~ /^\(.*\)$/;
  	    eval { '' =~ m"$genprefix"; };
  	    die("Getopt::Long: invalid pattern \"$genprefix\"\n") if $@;
  	}
  	elsif ( $try =~ /^long_prefix_pattern=(.+)$/ && $action ) {
  	    $longprefix = $1;
  	    # Parenthesize if needed.
  	    $longprefix = "(" . $longprefix . ")"
  	      unless $longprefix =~ /^\(.*\)$/;
  	    eval { '' =~ m"$longprefix"; };
  	    die("Getopt::Long: invalid long prefix pattern \"$longprefix\"\n") if $@;
  	}
  	elsif ( $try eq 'debug' ) {
  	    $debug = $action;
  	}
  	else {
  	    die("Getopt::Long: unknown or erroneous config parameter \"$opt\"\n")
  	}
      }
      $prevconfig;
  }
  
  # Deprecated name.
  sub config (@) {
      Configure (@_);
  }
  
  # Issue a standard message for --version.
  #
  # The arguments are mostly the same as for Pod::Usage::pod2usage:
  #
  #  - a number (exit value)
  #  - a string (lead in message)
  #  - a hash with options. See Pod::Usage for details.
  #
  sub VersionMessage(@) {
      # Massage args.
      my $pa = setup_pa_args("version", @_);
  
      my $v = $main::VERSION;
      my $fh = $pa->{-output} ||
        ( ($pa->{-exitval} eq "NOEXIT" || $pa->{-exitval} < 2) ? \*STDOUT : \*STDERR );
  
      print $fh (defined($pa->{-message}) ? $pa->{-message} : (),
  	       $0, defined $v ? " version $v" : (),
  	       "\n",
  	       "(", __PACKAGE__, "::", "GetOptions",
  	       " version ",
  	       defined($Getopt::Long::VERSION_STRING)
  	         ? $Getopt::Long::VERSION_STRING : $VERSION, ";",
  	       " Perl version ",
  	       $] >= 5.006 ? sprintf("%vd", $^V) : $],
  	       ")\n");
      exit($pa->{-exitval}) unless $pa->{-exitval} eq "NOEXIT";
  }
  
  # Issue a standard message for --help.
  #
  # The arguments are the same as for Pod::Usage::pod2usage:
  #
  #  - a number (exit value)
  #  - a string (lead in message)
  #  - a hash with options. See Pod::Usage for details.
  #
  sub HelpMessage(@) {
      eval {
  	require Pod::Usage;
  	import Pod::Usage;
  	1;
      } || die("Cannot provide help: cannot load Pod::Usage\n");
  
      # Note that pod2usage will issue a warning if -exitval => NOEXIT.
      pod2usage(setup_pa_args("help", @_));
  
  }
  
  # Helper routine to set up a normalized hash ref to be used as
  # argument to pod2usage.
  sub setup_pa_args($@) {
      my $tag = shift;		# who's calling
  
      # If called by direct binding to an option, it will get the option
      # name and value as arguments. Remove these, if so.
      @_ = () if @_ == 2 && $_[0] eq $tag;
  
      my $pa;
      if ( @_ > 1 ) {
  	$pa = { @_ };
      }
      else {
  	$pa = shift || {};
      }
  
      # At this point, $pa can be a number (exit value), string
      # (message) or hash with options.
  
      if ( UNIVERSAL::isa($pa, 'HASH') ) {
  	# Get rid of -msg vs. -message ambiguity.
  	$pa->{-message} = $pa->{-msg};
  	delete($pa->{-msg});
      }
      elsif ( $pa =~ /^-?\d+$/ ) {
  	$pa = { -exitval => $pa };
      }
      else {
  	$pa = { -message => $pa };
      }
  
      # These are _our_ defaults.
      $pa->{-verbose} = 0 unless exists($pa->{-verbose});
      $pa->{-exitval} = 0 unless exists($pa->{-exitval});
      $pa;
  }
  
  # Sneak way to know what version the user requested.
  sub VERSION {
      $requested_version = $_[1];
      shift->SUPER::VERSION(@_);
  }
  
  package Getopt::Long::CallBack;
  
  sub new {
      my ($pkg, %atts) = @_;
      bless { %atts }, $pkg;
  }
  
  sub name {
      my $self = shift;
      ''.$self->{name};
  }
  
  use overload
    # Treat this object as an ordinary string for legacy API.
    '""'	   => \&name,
    fallback => 1;
  
  1;
  
  ################ Documentation ################
  
  =head1 NAME
  
  Getopt::Long - Extended processing of command line options
  
  =head1 SYNOPSIS
  
    use Getopt::Long;
    my $data   = "file.dat";
    my $length = 24;
    my $verbose;
    GetOptions ("length=i" => \$length,    # numeric
                "file=s"   => \$data,      # string
                "verbose"  => \$verbose)   # flag
    or die("Error in command line arguments\n");
  
  =head1 DESCRIPTION
  
  The Getopt::Long module implements an extended getopt function called
  GetOptions(). It parses the command line from C<@ARGV>, recognizing
  and removing specified options and their possible values.
  
  This function adheres to the POSIX syntax for command
  line options, with GNU extensions. In general, this means that options
  have long names instead of single letters, and are introduced with a
  double dash "--". Support for bundling of command line options, as was
  the case with the more traditional single-letter approach, is provided
  but not enabled by default.
  
  =head1 Command Line Options, an Introduction
  
  Command line operated programs traditionally take their arguments from
  the command line, for example filenames or other information that the
  program needs to know. Besides arguments, these programs often take
  command line I<options> as well. Options are not necessary for the
  program to work, hence the name 'option', but are used to modify its
  default behaviour. For example, a program could do its job quietly,
  but with a suitable option it could provide verbose information about
  what it did.
  
  Command line options come in several flavours. Historically, they are
  preceded by a single dash C<->, and consist of a single letter.
  
      -l -a -c
  
  Usually, these single-character options can be bundled:
  
      -lac
  
  Options can have values, the value is placed after the option
  character. Sometimes with whitespace in between, sometimes not:
  
      -s 24 -s24
  
  Due to the very cryptic nature of these options, another style was
  developed that used long names. So instead of a cryptic C<-l> one
  could use the more descriptive C<--long>. To distinguish between a
  bundle of single-character options and a long one, two dashes are used
  to precede the option name. Early implementations of long options used
  a plus C<+> instead. Also, option values could be specified either
  like
  
      --size=24
  
  or
  
      --size 24
  
  The C<+> form is now obsolete and strongly deprecated.
  
  =head1 Getting Started with Getopt::Long
  
  Getopt::Long is the Perl5 successor of C<newgetopt.pl>. This was the
  first Perl module that provided support for handling the new style of
  command line options, in particular long option names, hence the Perl5
  name Getopt::Long. This module also supports single-character options
  and bundling.
  
  To use Getopt::Long from a Perl program, you must include the
  following line in your Perl program:
  
      use Getopt::Long;
  
  This will load the core of the Getopt::Long module and prepare your
  program for using it. Most of the actual Getopt::Long code is not
  loaded until you really call one of its functions.
  
  In the default configuration, options names may be abbreviated to
  uniqueness, case does not matter, and a single dash is sufficient,
  even for long option names. Also, options may be placed between
  non-option arguments. See L<Configuring Getopt::Long> for more
  details on how to configure Getopt::Long.
  
  =head2 Simple options
  
  The most simple options are the ones that take no values. Their mere
  presence on the command line enables the option. Popular examples are:
  
      --all --verbose --quiet --debug
  
  Handling simple options is straightforward:
  
      my $verbose = '';	# option variable with default value (false)
      my $all = '';	# option variable with default value (false)
      GetOptions ('verbose' => \$verbose, 'all' => \$all);
  
  The call to GetOptions() parses the command line arguments that are
  present in C<@ARGV> and sets the option variable to the value C<1> if
  the option did occur on the command line. Otherwise, the option
  variable is not touched. Setting the option value to true is often
  called I<enabling> the option.
  
  The option name as specified to the GetOptions() function is called
  the option I<specification>. Later we'll see that this specification
  can contain more than just the option name. The reference to the
  variable is called the option I<destination>.
  
  GetOptions() will return a true value if the command line could be
  processed successfully. Otherwise, it will write error messages using
  die() and warn(), and return a false result.
  
  =head2 A little bit less simple options
  
  Getopt::Long supports two useful variants of simple options:
  I<negatable> options and I<incremental> options.
  
  A negatable option is specified with an exclamation mark C<!> after the
  option name:
  
      my $verbose = '';	# option variable with default value (false)
      GetOptions ('verbose!' => \$verbose);
  
  Now, using C<--verbose> on the command line will enable C<$verbose>,
  as expected. But it is also allowed to use C<--noverbose>, which will
  disable C<$verbose> by setting its value to C<0>. Using a suitable
  default value, the program can find out whether C<$verbose> is false
  by default, or disabled by using C<--noverbose>.
  
  An incremental option is specified with a plus C<+> after the
  option name:
  
      my $verbose = '';	# option variable with default value (false)
      GetOptions ('verbose+' => \$verbose);
  
  Using C<--verbose> on the command line will increment the value of
  C<$verbose>. This way the program can keep track of how many times the
  option occurred on the command line. For example, each occurrence of
  C<--verbose> could increase the verbosity level of the program.
  
  =head2 Mixing command line option with other arguments
  
  Usually programs take command line options as well as other arguments,
  for example, file names. It is good practice to always specify the
  options first, and the other arguments last. Getopt::Long will,
  however, allow the options and arguments to be mixed and 'filter out'
  all the options before passing the rest of the arguments to the
  program. To stop Getopt::Long from processing further arguments,
  insert a double dash C<--> on the command line:
  
      --size 24 -- --all
  
  In this example, C<--all> will I<not> be treated as an option, but
  passed to the program unharmed, in C<@ARGV>.
  
  =head2 Options with values
  
  For options that take values it must be specified whether the option
  value is required or not, and what kind of value the option expects.
  
  Three kinds of values are supported: integer numbers, floating point
  numbers, and strings.
  
  If the option value is required, Getopt::Long will take the
  command line argument that follows the option and assign this to the
  option variable. If, however, the option value is specified as
  optional, this will only be done if that value does not look like a
  valid command line option itself.
  
      my $tag = '';	# option variable with default value
      GetOptions ('tag=s' => \$tag);
  
  In the option specification, the option name is followed by an equals
  sign C<=> and the letter C<s>. The equals sign indicates that this
  option requires a value. The letter C<s> indicates that this value is
  an arbitrary string. Other possible value types are C<i> for integer
  values, and C<f> for floating point values. Using a colon C<:> instead
  of the equals sign indicates that the option value is optional. In
  this case, if no suitable value is supplied, string valued options get
  an empty string C<''> assigned, while numeric options are set to C<0>.
  
  =head2 Options with multiple values
  
  Options sometimes take several values. For example, a program could
  use multiple directories to search for library files:
  
      --library lib/stdlib --library lib/extlib
  
  To accomplish this behaviour, simply specify an array reference as the
  destination for the option:
  
      GetOptions ("library=s" => \@libfiles);
  
  Alternatively, you can specify that the option can have multiple
  values by adding a "@", and pass a reference to a scalar as the
  destination:
  
      GetOptions ("library=s@" => \$libfiles);
  
  Used with the example above, C<@libfiles> c.q. C<@$libfiles> would
  contain two strings upon completion: C<"lib/stdlib"> and
  C<"lib/extlib">, in that order. It is also possible to specify that
  only integer or floating point numbers are acceptable values.
  
  Often it is useful to allow comma-separated lists of values as well as
  multiple occurrences of the options. This is easy using Perl's split()
  and join() operators:
  
      GetOptions ("library=s" => \@libfiles);
      @libfiles = split(/,/,join(',',@libfiles));
  
  Of course, it is important to choose the right separator string for
  each purpose.
  
  Warning: What follows is an experimental feature.
  
  Options can take multiple values at once, for example
  
      --coordinates 52.2 16.4 --rgbcolor 255 255 149
  
  This can be accomplished by adding a repeat specifier to the option
  specification. Repeat specifiers are very similar to the C<{...}>
  repeat specifiers that can be used with regular expression patterns.
  For example, the above command line would be handled as follows:
  
      GetOptions('coordinates=f{2}' => \@coor, 'rgbcolor=i{3}' => \@color);
  
  The destination for the option must be an array or array reference.
  
  It is also possible to specify the minimal and maximal number of
  arguments an option takes. C<foo=s{2,4}> indicates an option that
  takes at least two and at most 4 arguments. C<foo=s{1,}> indicates one
  or more values; C<foo:s{,}> indicates zero or more option values.
  
  =head2 Options with hash values
  
  If the option destination is a reference to a hash, the option will
  take, as value, strings of the form I<key>C<=>I<value>. The value will
  be stored with the specified key in the hash.
  
      GetOptions ("define=s" => \%defines);
  
  Alternatively you can use:
  
      GetOptions ("define=s%" => \$defines);
  
  When used with command line options:
  
      --define os=linux --define vendor=redhat
  
  the hash C<%defines> (or C<%$defines>) will contain two keys, C<"os">
  with value C<"linux"> and C<"vendor"> with value C<"redhat">. It is
  also possible to specify that only integer or floating point numbers
  are acceptable values. The keys are always taken to be strings.
  
  =head2 User-defined subroutines to handle options
  
  Ultimate control over what should be done when (actually: each time)
  an option is encountered on the command line can be achieved by
  designating a reference to a subroutine (or an anonymous subroutine)
  as the option destination. When GetOptions() encounters the option, it
  will call the subroutine with two or three arguments. The first
  argument is the name of the option. (Actually, it is an object that
  stringifies to the name of the option.) For a scalar or array destination,
  the second argument is the value to be stored. For a hash destination,
  the second argument is the key to the hash, and the third argument
  the value to be stored. It is up to the subroutine to store the value,
  or do whatever it thinks is appropriate.
  
  A trivial application of this mechanism is to implement options that
  are related to each other. For example:
  
      my $verbose = '';	# option variable with default value (false)
      GetOptions ('verbose' => \$verbose,
  	        'quiet'   => sub { $verbose = 0 });
  
  Here C<--verbose> and C<--quiet> control the same variable
  C<$verbose>, but with opposite values.
  
  If the subroutine needs to signal an error, it should call die() with
  the desired error message as its argument. GetOptions() will catch the
  die(), issue the error message, and record that an error result must
  be returned upon completion.
  
  If the text of the error message starts with an exclamation mark C<!>
  it is interpreted specially by GetOptions(). There is currently one
  special command implemented: C<die("!FINISH")> will cause GetOptions()
  to stop processing options, as if it encountered a double dash C<-->.
  
  In version 2.37 the first argument to the callback function was
  changed from string to object. This was done to make room for
  extensions and more detailed control. The object stringifies to the
  option name so this change should not introduce compatibility
  problems.
  
  Here is an example of how to access the option name and value from within
  a subroutine:
  
      GetOptions ('opt=i' => \&handler);
      sub handler {
          my ($opt_name, $opt_value) = @_;
          print("Option name is $opt_name and value is $opt_value\n");
      }
  
  =head2 Options with multiple names
  
  Often it is user friendly to supply alternate mnemonic names for
  options. For example C<--height> could be an alternate name for
  C<--length>. Alternate names can be included in the option
  specification, separated by vertical bar C<|> characters. To implement
  the above example:
  
      GetOptions ('length|height=f' => \$length);
  
  The first name is called the I<primary> name, the other names are
  called I<aliases>. When using a hash to store options, the key will
  always be the primary name.
  
  Multiple alternate names are possible.
  
  =head2 Case and abbreviations
  
  Without additional configuration, GetOptions() will ignore the case of
  option names, and allow the options to be abbreviated to uniqueness.
  
      GetOptions ('length|height=f' => \$length, "head" => \$head);
  
  This call will allow C<--l> and C<--L> for the length option, but
  requires a least C<--hea> and C<--hei> for the head and height options.
  
  =head2 Summary of Option Specifications
  
  Each option specifier consists of two parts: the name specification
  and the argument specification.
  
  The name specification contains the name of the option, optionally
  followed by a list of alternative names separated by vertical bar
  characters.
  
      length	      option name is "length"
      length|size|l     name is "length", aliases are "size" and "l"
  
  The argument specification is optional. If omitted, the option is
  considered boolean, a value of 1 will be assigned when the option is
  used on the command line.
  
  The argument specification can be
  
  =over 4
  
  =item !
  
  The option does not take an argument and may be negated by prefixing
  it with "no" or "no-". E.g. C<"foo!"> will allow C<--foo> (a value of
  1 will be assigned) as well as C<--nofoo> and C<--no-foo> (a value of
  0 will be assigned). If the option has aliases, this applies to the
  aliases as well.
  
  Using negation on a single letter option when bundling is in effect is
  pointless and will result in a warning.
  
  =item +
  
  The option does not take an argument and will be incremented by 1
  every time it appears on the command line. E.g. C<"more+">, when used
  with C<--more --more --more>, will increment the value three times,
  resulting in a value of 3 (provided it was 0 or undefined at first).
  
  The C<+> specifier is ignored if the option destination is not a scalar.
  
  =item = I<type> [ I<desttype> ] [ I<repeat> ]
  
  The option requires an argument of the given type. Supported types
  are:
  
  =over 4
  
  =item s
  
  String. An arbitrary sequence of characters. It is valid for the
  argument to start with C<-> or C<-->.
  
  =item i
  
  Integer. An optional leading plus or minus sign, followed by a
  sequence of digits.
  
  =item o
  
  Extended integer, Perl style. This can be either an optional leading
  plus or minus sign, followed by a sequence of digits, or an octal
  string (a zero, optionally followed by '0', '1', .. '7'), or a
  hexadecimal string (C<0x> followed by '0' .. '9', 'a' .. 'f', case
  insensitive), or a binary string (C<0b> followed by a series of '0'
  and '1').
  
  =item f
  
  Real number. For example C<3.14>, C<-6.23E24> and so on.
  
  =back
  
  The I<desttype> can be C<@> or C<%> to specify that the option is
  list or a hash valued. This is only needed when the destination for
  the option value is not otherwise specified. It should be omitted when
  not needed.
  
  The I<repeat> specifies the number of values this option takes per
  occurrence on the command line. It has the format C<{> [ I<min> ] [ C<,> [ I<max> ] ] C<}>.
  
  I<min> denotes the minimal number of arguments. It defaults to 1 for
  options with C<=> and to 0 for options with C<:>, see below. Note that
  I<min> overrules the C<=> / C<:> semantics.
  
  I<max> denotes the maximum number of arguments. It must be at least
  I<min>. If I<max> is omitted, I<but the comma is not>, there is no
  upper bound to the number of argument values taken.
  
  =item : I<type> [ I<desttype> ]
  
  Like C<=>, but designates the argument as optional.
  If omitted, an empty string will be assigned to string values options,
  and the value zero to numeric options.
  
  Note that if a string argument starts with C<-> or C<-->, it will be
  considered an option on itself.
  
  =item : I<number> [ I<desttype> ]
  
  Like C<:i>, but if the value is omitted, the I<number> will be assigned.
  
  =item : + [ I<desttype> ]
  
  Like C<:i>, but if the value is omitted, the current value for the
  option will be incremented.
  
  =back
  
  =head1 Advanced Possibilities
  
  =head2 Object oriented interface
  
  Getopt::Long can be used in an object oriented way as well:
  
      use Getopt::Long;
      $p = Getopt::Long::Parser->new;
      $p->configure(...configuration options...);
      if ($p->getoptions(...options descriptions...)) ...
      if ($p->getoptionsfromarray( \@array, ...options descriptions...)) ...
  
  Configuration options can be passed to the constructor:
  
      $p = new Getopt::Long::Parser
               config => [...configuration options...];
  
  =head2 Thread Safety
  
  Getopt::Long is thread safe when using ithreads as of Perl 5.8.  It is
  I<not> thread safe when using the older (experimental and now
  obsolete) threads implementation that was added to Perl 5.005.
  
  =head2 Documentation and help texts
  
  Getopt::Long encourages the use of Pod::Usage to produce help
  messages. For example:
  
      use Getopt::Long;
      use Pod::Usage;
  
      my $man = 0;
      my $help = 0;
  
      GetOptions('help|?' => \$help, man => \$man) or pod2usage(2);
      pod2usage(1) if $help;
      pod2usage(-exitval => 0, -verbose => 2) if $man;
  
      __END__
  
      =head1 NAME
  
      sample - Using Getopt::Long and Pod::Usage
  
      =head1 SYNOPSIS
  
      sample [options] [file ...]
  
       Options:
         -help            brief help message
         -man             full documentation
  
      =head1 OPTIONS
  
      =over 8
  
      =item B<-help>
  
      Print a brief help message and exits.
  
      =item B<-man>
  
      Prints the manual page and exits.
  
      =back
  
      =head1 DESCRIPTION
  
      B<This program> will read the given input file(s) and do something
      useful with the contents thereof.
  
      =cut
  
  See L<Pod::Usage> for details.
  
  =head2 Parsing options from an arbitrary array
  
  By default, GetOptions parses the options that are present in the
  global array C<@ARGV>. A special entry C<GetOptionsFromArray> can be
  used to parse options from an arbitrary array.
  
      use Getopt::Long qw(GetOptionsFromArray);
      $ret = GetOptionsFromArray(\@myopts, ...);
  
  When used like this, options and their possible values are removed
  from C<@myopts>, the global C<@ARGV> is not touched at all.
  
  The following two calls behave identically:
  
      $ret = GetOptions( ... );
      $ret = GetOptionsFromArray(\@ARGV, ... );
  
  This also means that a first argument hash reference now becomes the
  second argument:
  
      $ret = GetOptions(\%opts, ... );
      $ret = GetOptionsFromArray(\@ARGV, \%opts, ... );
  
  =head2 Parsing options from an arbitrary string
  
  A special entry C<GetOptionsFromString> can be used to parse options
  from an arbitrary string.
  
      use Getopt::Long qw(GetOptionsFromString);
      $ret = GetOptionsFromString($string, ...);
  
  The contents of the string are split into arguments using a call to
  C<Text::ParseWords::shellwords>. As with C<GetOptionsFromArray>, the
  global C<@ARGV> is not touched.
  
  It is possible that, upon completion, not all arguments in the string
  have been processed. C<GetOptionsFromString> will, when called in list
  context, return both the return status and an array reference to any
  remaining arguments:
  
      ($ret, $args) = GetOptionsFromString($string, ... );
  
  If any arguments remain, and C<GetOptionsFromString> was not called in
  list context, a message will be given and C<GetOptionsFromString> will
  return failure.
  
  As with GetOptionsFromArray, a first argument hash reference now
  becomes the second argument.
  
  =head2 Storing options values in a hash
  
  Sometimes, for example when there are a lot of options, having a
  separate variable for each of them can be cumbersome. GetOptions()
  supports, as an alternative mechanism, storing options values in a
  hash.
  
  To obtain this, a reference to a hash must be passed I<as the first
  argument> to GetOptions(). For each option that is specified on the
  command line, the option value will be stored in the hash with the
  option name as key. Options that are not actually used on the command
  line will not be put in the hash, on other words,
  C<exists($h{option})> (or defined()) can be used to test if an option
  was used. The drawback is that warnings will be issued if the program
  runs under C<use strict> and uses C<$h{option}> without testing with
  exists() or defined() first.
  
      my %h = ();
      GetOptions (\%h, 'length=i');	# will store in $h{length}
  
  For options that take list or hash values, it is necessary to indicate
  this by appending an C<@> or C<%> sign after the type:
  
      GetOptions (\%h, 'colours=s@');	# will push to @{$h{colours}}
  
  To make things more complicated, the hash may contain references to
  the actual destinations, for example:
  
      my $len = 0;
      my %h = ('length' => \$len);
      GetOptions (\%h, 'length=i');	# will store in $len
  
  This example is fully equivalent with:
  
      my $len = 0;
      GetOptions ('length=i' => \$len);	# will store in $len
  
  Any mixture is possible. For example, the most frequently used options
  could be stored in variables while all other options get stored in the
  hash:
  
      my $verbose = 0;			# frequently referred
      my $debug = 0;			# frequently referred
      my %h = ('verbose' => \$verbose, 'debug' => \$debug);
      GetOptions (\%h, 'verbose', 'debug', 'filter', 'size=i');
      if ( $verbose ) { ... }
      if ( exists $h{filter} ) { ... option 'filter' was specified ... }
  
  =head2 Bundling
  
  With bundling it is possible to set several single-character options
  at once. For example if C<a>, C<v> and C<x> are all valid options,
  
      -vax
  
  will set all three.
  
  Getopt::Long supports three styles of bundling. To enable bundling, a
  call to Getopt::Long::Configure is required.
  
  The simplest style of bundling can be enabled with:
  
      Getopt::Long::Configure ("bundling");
  
  Configured this way, single-character options can be bundled but long
  options B<must> always start with a double dash C<--> to avoid
  ambiguity. For example, when C<vax>, C<a>, C<v> and C<x> are all valid
  options,
  
      -vax
  
  will set C<a>, C<v> and C<x>, but
  
      --vax
  
  will set C<vax>.
  
  The second style of bundling lifts this restriction. It can be enabled
  with:
  
      Getopt::Long::Configure ("bundling_override");
  
  Now, C<-vax> will set the option C<vax>.
  
  In all of the above cases, option values may be inserted in the
  bundle. For example:
  
      -h24w80
  
  is equivalent to
  
      -h 24 -w 80
  
  A third style of bundling allows only values to be bundled with
  options. It can be enabled with:
  
      Getopt::Long::Configure ("bundling_values");
  
  Now, C<-h24> will set the option C<h> to C<24>, but option bundles
  like C<-vxa> and C<-h24w80> are flagged as errors.
  
  Enabling C<bundling_values> will disable the other two styles of
  bundling.
  
  When configured for bundling, single-character options are matched
  case sensitive while long options are matched case insensitive. To
  have the single-character options matched case insensitive as well,
  use:
  
      Getopt::Long::Configure ("bundling", "ignorecase_always");
  
  It goes without saying that bundling can be quite confusing.
  
  =head2 The lonesome dash
  
  Normally, a lone dash C<-> on the command line will not be considered
  an option. Option processing will terminate (unless "permute" is
  configured) and the dash will be left in C<@ARGV>.
  
  It is possible to get special treatment for a lone dash. This can be
  achieved by adding an option specification with an empty name, for
  example:
  
      GetOptions ('' => \$stdio);
  
  A lone dash on the command line will now be a legal option, and using
  it will set variable C<$stdio>.
  
  =head2 Argument callback
  
  A special option 'name' C<< <> >> can be used to designate a subroutine
  to handle non-option arguments. When GetOptions() encounters an
  argument that does not look like an option, it will immediately call this
  subroutine and passes it one parameter: the argument name. Well, actually
  it is an object that stringifies to the argument name.
  
  For example:
  
      my $width = 80;
      sub process { ... }
      GetOptions ('width=i' => \$width, '<>' => \&process);
  
  When applied to the following command line:
  
      arg1 --width=72 arg2 --width=60 arg3
  
  This will call
  C<process("arg1")> while C<$width> is C<80>,
  C<process("arg2")> while C<$width> is C<72>, and
  C<process("arg3")> while C<$width> is C<60>.
  
  This feature requires configuration option B<permute>, see section
  L<Configuring Getopt::Long>.
  
  =head1 Configuring Getopt::Long
  
  Getopt::Long can be configured by calling subroutine
  Getopt::Long::Configure(). This subroutine takes a list of quoted
  strings, each specifying a configuration option to be enabled, e.g.
  C<ignore_case>, or disabled, e.g. C<no_ignore_case>. Case does not
  matter. Multiple calls to Configure() are possible.
  
  Alternatively, as of version 2.24, the configuration options may be
  passed together with the C<use> statement:
  
      use Getopt::Long qw(:config no_ignore_case bundling);
  
  The following options are available:
  
  =over 12
  
  =item default
  
  This option causes all configuration options to be reset to their
  default values.
  
  =item posix_default
  
  This option causes all configuration options to be reset to their
  default values as if the environment variable POSIXLY_CORRECT had
  been set.
  
  =item auto_abbrev
  
  Allow option names to be abbreviated to uniqueness.
  Default is enabled unless environment variable
  POSIXLY_CORRECT has been set, in which case C<auto_abbrev> is disabled.
  
  =item getopt_compat
  
  Allow C<+> to start options.
  Default is enabled unless environment variable
  POSIXLY_CORRECT has been set, in which case C<getopt_compat> is disabled.
  
  =item gnu_compat
  
  C<gnu_compat> controls whether C<--opt=> is allowed, and what it should
  do. Without C<gnu_compat>, C<--opt=> gives an error. With C<gnu_compat>,
  C<--opt=> will give option C<opt> and empty value.
  This is the way GNU getopt_long() does it.
  
  Note that C<--opt value> is still accepted, even though GNU
  getopt_long() doesn't.
  
  =item gnu_getopt
  
  This is a short way of setting C<gnu_compat> C<bundling> C<permute>
  C<no_getopt_compat>. With C<gnu_getopt>, command line handling should be
  reasonably compatible with GNU getopt_long().
  
  =item require_order
  
  Whether command line arguments are allowed to be mixed with options.
  Default is disabled unless environment variable
  POSIXLY_CORRECT has been set, in which case C<require_order> is enabled.
  
  See also C<permute>, which is the opposite of C<require_order>.
  
  =item permute
  
  Whether command line arguments are allowed to be mixed with options.
  Default is enabled unless environment variable
  POSIXLY_CORRECT has been set, in which case C<permute> is disabled.
  Note that C<permute> is the opposite of C<require_order>.
  
  If C<permute> is enabled, this means that
  
      --foo arg1 --bar arg2 arg3
  
  is equivalent to
  
      --foo --bar arg1 arg2 arg3
  
  If an argument callback routine is specified, C<@ARGV> will always be
  empty upon successful return of GetOptions() since all options have been
  processed. The only exception is when C<--> is used:
  
      --foo arg1 --bar arg2 -- arg3
  
  This will call the callback routine for arg1 and arg2, and then
  terminate GetOptions() leaving C<"arg3"> in C<@ARGV>.
  
  If C<require_order> is enabled, options processing
  terminates when the first non-option is encountered.
  
      --foo arg1 --bar arg2 arg3
  
  is equivalent to
  
      --foo -- arg1 --bar arg2 arg3
  
  If C<pass_through> is also enabled, options processing will terminate
  at the first unrecognized option, or non-option, whichever comes
  first.
  
  =item bundling (default: disabled)
  
  Enabling this option will allow single-character options to be
  bundled. To distinguish bundles from long option names, long options
  I<must> be introduced with C<--> and bundles with C<->.
  
  Note that, if you have options C<a>, C<l> and C<all>, and
  auto_abbrev enabled, possible arguments and option settings are:
  
      using argument               sets option(s)
      ------------------------------------------
      -a, --a                      a
      -l, --l                      l
      -al, -la, -ala, -all,...     a, l
      --al, --all                  all
  
  The surprising part is that C<--a> sets option C<a> (due to auto
  completion), not C<all>.
  
  Note: disabling C<bundling> also disables C<bundling_override>.
  
  =item bundling_override (default: disabled)
  
  If C<bundling_override> is enabled, bundling is enabled as with
  C<bundling> but now long option names override option bundles.
  
  Note: disabling C<bundling_override> also disables C<bundling>.
  
  B<Note:> Using option bundling can easily lead to unexpected results,
  especially when mixing long options and bundles. Caveat emptor.
  
  =item ignore_case  (default: enabled)
  
  If enabled, case is ignored when matching option names. If, however,
  bundling is enabled as well, single character options will be treated
  case-sensitive.
  
  With C<ignore_case>, option specifications for options that only
  differ in case, e.g., C<"foo"> and C<"Foo">, will be flagged as
  duplicates.
  
  Note: disabling C<ignore_case> also disables C<ignore_case_always>.
  
  =item ignore_case_always (default: disabled)
  
  When bundling is in effect, case is ignored on single-character
  options also.
  
  Note: disabling C<ignore_case_always> also disables C<ignore_case>.
  
  =item auto_version (default:disabled)
  
  Automatically provide support for the B<--version> option if
  the application did not specify a handler for this option itself.
  
  Getopt::Long will provide a standard version message that includes the
  program name, its version (if $main::VERSION is defined), and the
  versions of Getopt::Long and Perl. The message will be written to
  standard output and processing will terminate.
  
  C<auto_version> will be enabled if the calling program explicitly
  specified a version number higher than 2.32 in the C<use> or
  C<require> statement.
  
  =item auto_help (default:disabled)
  
  Automatically provide support for the B<--help> and B<-?> options if
  the application did not specify a handler for this option itself.
  
  Getopt::Long will provide a help message using module L<Pod::Usage>. The
  message, derived from the SYNOPSIS POD section, will be written to
  standard output and processing will terminate.
  
  C<auto_help> will be enabled if the calling program explicitly
  specified a version number higher than 2.32 in the C<use> or
  C<require> statement.
  
  =item pass_through (default: disabled)
  
  With C<pass_through> anything that is unknown, ambiguous or supplied with
  an invalid option will not be flagged as an error. Instead the unknown
  option(s) will be passed to the catchall C<< <> >> if present, otherwise
  through to C<@ARGV>. This makes it possible to write wrapper scripts that
  process only part of the user supplied command line arguments, and pass the
  remaining options to some other program.
  
  If C<require_order> is enabled, options processing will terminate at the
  first unrecognized option, or non-option, whichever comes first and all
  remaining arguments are passed to C<@ARGV> instead of the catchall
  C<< <> >> if present.  However, if C<permute> is enabled instead, results
  can become confusing.
  
  Note that the options terminator (default C<-->), if present, will
  also be passed through in C<@ARGV>.
  
  =item prefix
  
  The string that starts options. If a constant string is not
  sufficient, see C<prefix_pattern>.
  
  =item prefix_pattern
  
  A Perl pattern that identifies the strings that introduce options.
  Default is C<--|-|\+> unless environment variable
  POSIXLY_CORRECT has been set, in which case it is C<--|->.
  
  =item long_prefix_pattern
  
  A Perl pattern that allows the disambiguation of long and short
  prefixes. Default is C<-->.
  
  Typically you only need to set this if you are using nonstandard
  prefixes and want some or all of them to have the same semantics as
  '--' does under normal circumstances.
  
  For example, setting prefix_pattern to C<--|-|\+|\/> and
  long_prefix_pattern to C<--|\/> would add Win32 style argument
  handling.
  
  =item debug (default: disabled)
  
  Enable debugging output.
  
  =back
  
  =head1 Exportable Methods
  
  =over
  
  =item VersionMessage
  
  This subroutine provides a standard version message. Its argument can be:
  
  =over 4
  
  =item *
  
  A string containing the text of a message to print I<before> printing
  the standard message.
  
  =item *
  
  A numeric value corresponding to the desired exit status.
  
  =item *
  
  A reference to a hash.
  
  =back
  
  If more than one argument is given then the entire argument list is
  assumed to be a hash.  If a hash is supplied (either as a reference or
  as a list) it should contain one or more elements with the following
  keys:
  
  =over 4
  
  =item C<-message>
  
  =item C<-msg>
  
  The text of a message to print immediately prior to printing the
  program's usage message.
  
  =item C<-exitval>
  
  The desired exit status to pass to the B<exit()> function.
  This should be an integer, or else the string "NOEXIT" to
  indicate that control should simply be returned without
  terminating the invoking process.
  
  =item C<-output>
  
  A reference to a filehandle, or the pathname of a file to which the
  usage message should be written. The default is C<\*STDERR> unless the
  exit value is less than 2 (in which case the default is C<\*STDOUT>).
  
  =back
  
  You cannot tie this routine directly to an option, e.g.:
  
      GetOptions("version" => \&VersionMessage);
  
  Use this instead:
  
      GetOptions("version" => sub { VersionMessage() });
  
  =item HelpMessage
  
  This subroutine produces a standard help message, derived from the
  program's POD section SYNOPSIS using L<Pod::Usage>. It takes the same
  arguments as VersionMessage(). In particular, you cannot tie it
  directly to an option, e.g.:
  
      GetOptions("help" => \&HelpMessage);
  
  Use this instead:
  
      GetOptions("help" => sub { HelpMessage() });
  
  =back
  
  =head1 Return values and Errors
  
  Configuration errors and errors in the option definitions are
  signalled using die() and will terminate the calling program unless
  the call to Getopt::Long::GetOptions() was embedded in C<eval { ...
  }>, or die() was trapped using C<$SIG{__DIE__}>.
  
  GetOptions returns true to indicate success.
  It returns false when the function detected one or more errors during
  option parsing. These errors are signalled using warn() and can be
  trapped with C<$SIG{__WARN__}>.
  
  =head1 Legacy
  
  The earliest development of C<newgetopt.pl> started in 1990, with Perl
  version 4. As a result, its development, and the development of
  Getopt::Long, has gone through several stages. Since backward
  compatibility has always been extremely important, the current version
  of Getopt::Long still supports a lot of constructs that nowadays are
  no longer necessary or otherwise unwanted. This section describes
  briefly some of these 'features'.
  
  =head2 Default destinations
  
  When no destination is specified for an option, GetOptions will store
  the resultant value in a global variable named C<opt_>I<XXX>, where
  I<XXX> is the primary name of this option. When a program executes
  under C<use strict> (recommended), these variables must be
  pre-declared with our() or C<use vars>.
  
      our $opt_length = 0;
      GetOptions ('length=i');	# will store in $opt_length
  
  To yield a usable Perl variable, characters that are not part of the
  syntax for variables are translated to underscores. For example,
  C<--fpp-struct-return> will set the variable
  C<$opt_fpp_struct_return>. Note that this variable resides in the
  namespace of the calling program, not necessarily C<main>. For
  example:
  
      GetOptions ("size=i", "sizes=i@");
  
  with command line "-size 10 -sizes 24 -sizes 48" will perform the
  equivalent of the assignments
  
      $opt_size = 10;
      @opt_sizes = (24, 48);
  
  =head2 Alternative option starters
  
  A string of alternative option starter characters may be passed as the
  first argument (or the first argument after a leading hash reference
  argument).
  
      my $len = 0;
      GetOptions ('/', 'length=i' => $len);
  
  Now the command line may look like:
  
      /length 24 -- arg
  
  Note that to terminate options processing still requires a double dash
  C<-->.
  
  GetOptions() will not interpret a leading C<< "<>" >> as option starters
  if the next argument is a reference. To force C<< "<" >> and C<< ">" >> as
  option starters, use C<< "><" >>. Confusing? Well, B<using a starter
  argument is strongly deprecated> anyway.
  
  =head2 Configuration variables
  
  Previous versions of Getopt::Long used variables for the purpose of
  configuring. Although manipulating these variables still work, it is
  strongly encouraged to use the C<Configure> routine that was introduced
  in version 2.17. Besides, it is much easier.
  
  =head1 Tips and Techniques
  
  =head2 Pushing multiple values in a hash option
  
  Sometimes you want to combine the best of hashes and arrays. For
  example, the command line:
  
    --list add=first --list add=second --list add=third
  
  where each successive 'list add' option will push the value of add
  into array ref $list->{'add'}. The result would be like
  
    $list->{add} = [qw(first second third)];
  
  This can be accomplished with a destination routine:
  
    GetOptions('list=s%' =>
                 sub { push(@{$list{$_[1]}}, $_[2]) });
  
  =head1 Troubleshooting
  
  =head2 GetOptions does not return a false result when an option is not supplied
  
  That's why they're called 'options'.
  
  =head2 GetOptions does not split the command line correctly
  
  The command line is not split by GetOptions, but by the command line
  interpreter (CLI). On Unix, this is the shell. On Windows, it is
  COMMAND.COM or CMD.EXE. Other operating systems have other CLIs.
  
  It is important to know that these CLIs may behave different when the
  command line contains special characters, in particular quotes or
  backslashes. For example, with Unix shells you can use single quotes
  (C<'>) and double quotes (C<">) to group words together. The following
  alternatives are equivalent on Unix:
  
      "two words"
      'two words'
      two\ words
  
  In case of doubt, insert the following statement in front of your Perl
  program:
  
      print STDERR (join("|",@ARGV),"\n");
  
  to verify how your CLI passes the arguments to the program.
  
  =head2 Undefined subroutine &main::GetOptions called
  
  Are you running Windows, and did you write
  
      use GetOpt::Long;
  
  (note the capital 'O')?
  
  =head2 How do I put a "-?" option into a Getopt::Long?
  
  You can only obtain this using an alias, and Getopt::Long of at least
  version 2.13.
  
      use Getopt::Long;
      GetOptions ("help|?");    # -help and -? will both set $opt_help
  
  Other characters that can't appear in Perl identifiers are also supported
  as aliases with Getopt::Long of at least version 2.39.
  
  As of version 2.32 Getopt::Long provides auto-help, a quick and easy way
  to add the options --help and -? to your program, and handle them.
  
  See C<auto_help> in section L<Configuring Getopt::Long>.
  
  =head1 AUTHOR
  
  Johan Vromans <jvromans@squirrel.nl>
  
  =head1 COPYRIGHT AND DISCLAIMER
  
  This program is Copyright 1990,2015 by Johan Vromans.
  This program is free software; you can redistribute it and/or
  modify it under the terms of the Perl Artistic License or the
  GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any
  later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  If you do not have a copy of the GNU General Public License write to
  the Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
  MA 02139, USA.
  
  =cut
  
GETOPT_LONG

$fatpacked{"HTTP/Tiny.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'HTTP_TINY';
  # vim: ts=4 sts=4 sw=4 et:
  package HTTP::Tiny;
  use strict;
  use warnings;
  # ABSTRACT: A small, simple, correct HTTP/1.1 client
  
  our $VERSION = '0.070';
  
  sub _croak { require Carp; Carp::croak(@_) }
  
  #pod =method new
  #pod
  #pod     $http = HTTP::Tiny->new( %attributes );
  #pod
  #pod This constructor returns a new HTTP::Tiny object.  Valid attributes include:
  #pod
  #pod =for :list
  #pod * C<agent> — A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If
  #pod   C<agent> — ends in a space character, the default user-agent string is
  #pod   appended.
  #pod * C<cookie_jar> — An instance of L<HTTP::CookieJar> — or equivalent class
  #pod   that supports the C<add> and C<cookie_header> methods
  #pod * C<default_headers> — A hashref of default headers to apply to requests
  #pod * C<local_address> — The local IP address to bind to
  #pod * C<keep_alive> — Whether to reuse the last connection (if for the same
  #pod   scheme, host and port) (defaults to 1)
  #pod * C<max_redirect> — Maximum number of redirects allowed (defaults to 5)
  #pod * C<max_size> — Maximum response size in bytes (only when not using a data
  #pod   callback).  If defined, responses larger than this will return an
  #pod   exception.
  #pod * C<http_proxy> — URL of a proxy server to use for HTTP connections
  #pod   (default is C<$ENV{http_proxy}> — if set)
  #pod * C<https_proxy> — URL of a proxy server to use for HTTPS connections
  #pod   (default is C<$ENV{https_proxy}> — if set)
  #pod * C<proxy> — URL of a generic proxy server for both HTTP and HTTPS
  #pod   connections (default is C<$ENV{all_proxy}> — if set)
  #pod * C<no_proxy> — List of domain suffixes that should not be proxied.  Must
  #pod   be a comma-separated string or an array reference. (default is
  #pod   C<$ENV{no_proxy}> —)
  #pod * C<timeout> — Request timeout in seconds (default is 60) If a socket open,
  #pod   read or write takes longer than the timeout, an exception is thrown.
  #pod * C<verify_SSL> — A boolean that indicates whether to validate the SSL
  #pod   certificate of an C<https> — connection (default is false)
  #pod * C<SSL_options> — A hashref of C<SSL_*> — options to pass through to
  #pod   L<IO::Socket::SSL>
  #pod
  #pod Passing an explicit C<undef> for C<proxy>, C<http_proxy> or C<https_proxy> will
  #pod prevent getting the corresponding proxies from the environment.
  #pod
  #pod Exceptions from C<max_size>, C<timeout> or other errors will result in a
  #pod pseudo-HTTP status code of 599 and a reason of "Internal Exception". The
  #pod content field in the response will contain the text of the exception.
  #pod
  #pod The C<keep_alive> parameter enables a persistent connection, but only to a
  #pod single destination scheme, host and port.  Also, if any connection-relevant
  #pod attributes are modified, or if the process ID or thread ID change, the
  #pod persistent connection will be dropped.  If you want persistent connections
  #pod across multiple destinations, use multiple HTTP::Tiny objects.
  #pod
  #pod See L</SSL SUPPORT> for more on the C<verify_SSL> and C<SSL_options> attributes.
  #pod
  #pod =cut
  
  my @attributes;
  BEGIN {
      @attributes = qw(
          cookie_jar default_headers http_proxy https_proxy keep_alive
          local_address max_redirect max_size proxy no_proxy
          SSL_options verify_SSL
      );
      my %persist_ok = map {; $_ => 1 } qw(
          cookie_jar default_headers max_redirect max_size
      );
      no strict 'refs';
      no warnings 'uninitialized';
      for my $accessor ( @attributes ) {
          *{$accessor} = sub {
              @_ > 1
                  ? do {
                      delete $_[0]->{handle} if !$persist_ok{$accessor} && $_[1] ne $_[0]->{$accessor};
                      $_[0]->{$accessor} = $_[1]
                  }
                  : $_[0]->{$accessor};
          };
      }
  }
  
  sub agent {
      my($self, $agent) = @_;
      if( @_ > 1 ){
          $self->{agent} =
              (defined $agent && $agent =~ / $/) ? $agent . $self->_agent : $agent;
      }
      return $self->{agent};
  }
  
  sub timeout {
      my ($self, $timeout) = @_;
      if ( @_ > 1 ) {
          $self->{timeout} = $timeout;
          if ($self->{handle}) {
              $self->{handle}->timeout($timeout);
          }
      }
      return $self->{timeout};
  }
  
  sub new {
      my($class, %args) = @_;
  
      my $self = {
          max_redirect => 5,
          timeout      => defined $args{timeout} ? $args{timeout} : 60,
          keep_alive   => 1,
          verify_SSL   => $args{verify_SSL} || $args{verify_ssl} || 0, # no verification by default
          no_proxy     => $ENV{no_proxy},
      };
  
      bless $self, $class;
  
      $class->_validate_cookie_jar( $args{cookie_jar} ) if $args{cookie_jar};
  
      for my $key ( @attributes ) {
          $self->{$key} = $args{$key} if exists $args{$key}
      }
  
      $self->agent( exists $args{agent} ? $args{agent} : $class->_agent );
  
      $self->_set_proxies;
  
      return $self;
  }
  
  sub _set_proxies {
      my ($self) = @_;
  
      # get proxies from %ENV only if not provided; explicit undef will disable
      # getting proxies from the environment
  
      # generic proxy
      if (! exists $self->{proxy} ) {
          $self->{proxy} = $ENV{all_proxy} || $ENV{ALL_PROXY};
      }
  
      if ( defined $self->{proxy} ) {
          $self->_split_proxy( 'generic proxy' => $self->{proxy} ); # validate
      }
      else {
          delete $self->{proxy};
      }
  
      # http proxy
      if (! exists $self->{http_proxy} ) {
          # under CGI, bypass HTTP_PROXY as request sets it from Proxy header
          local $ENV{HTTP_PROXY} if $ENV{REQUEST_METHOD};
          $self->{http_proxy} = $ENV{http_proxy} || $ENV{HTTP_PROXY} || $self->{proxy};
      }
  
      if ( defined $self->{http_proxy} ) {
          $self->_split_proxy( http_proxy => $self->{http_proxy} ); # validate
          $self->{_has_proxy}{http} = 1;
      }
      else {
          delete $self->{http_proxy};
      }
  
      # https proxy
      if (! exists $self->{https_proxy} ) {
          $self->{https_proxy} = $ENV{https_proxy} || $ENV{HTTPS_PROXY} || $self->{proxy};
      }
  
      if ( $self->{https_proxy} ) {
          $self->_split_proxy( https_proxy => $self->{https_proxy} ); # validate
          $self->{_has_proxy}{https} = 1;
      }
      else {
          delete $self->{https_proxy};
      }
  
      # Split no_proxy to array reference if not provided as such
      unless ( ref $self->{no_proxy} eq 'ARRAY' ) {
          $self->{no_proxy} =
              (defined $self->{no_proxy}) ? [ split /\s*,\s*/, $self->{no_proxy} ] : [];
      }
  
      return;
  }
  
  #pod =method get|head|put|post|delete
  #pod
  #pod     $response = $http->get($url);
  #pod     $response = $http->get($url, \%options);
  #pod     $response = $http->head($url);
  #pod
  #pod These methods are shorthand for calling C<request()> for the given method.  The
  #pod URL must have unsafe characters escaped and international domain names encoded.
  #pod See C<request()> for valid options and a description of the response.
  #pod
  #pod The C<success> field of the response will be true if the status code is 2XX.
  #pod
  #pod =cut
  
  for my $sub_name ( qw/get head put post delete/ ) {
      my $req_method = uc $sub_name;
      no strict 'refs';
      eval <<"HERE"; ## no critic
      sub $sub_name {
          my (\$self, \$url, \$args) = \@_;
          \@_ == 2 || (\@_ == 3 && ref \$args eq 'HASH')
          or _croak(q/Usage: \$http->$sub_name(URL, [HASHREF])/ . "\n");
          return \$self->request('$req_method', \$url, \$args || {});
      }
  HERE
  }
  
  #pod =method post_form
  #pod
  #pod     $response = $http->post_form($url, $form_data);
  #pod     $response = $http->post_form($url, $form_data, \%options);
  #pod
  #pod This method executes a C<POST> request and sends the key/value pairs from a
  #pod form data hash or array reference to the given URL with a C<content-type> of
  #pod C<application/x-www-form-urlencoded>.  If data is provided as an array
  #pod reference, the order is preserved; if provided as a hash reference, the terms
  #pod are sorted on key and value for consistency.  See documentation for the
  #pod C<www_form_urlencode> method for details on the encoding.
  #pod
  #pod The URL must have unsafe characters escaped and international domain names
  #pod encoded.  See C<request()> for valid options and a description of the response.
  #pod Any C<content-type> header or content in the options hashref will be ignored.
  #pod
  #pod The C<success> field of the response will be true if the status code is 2XX.
  #pod
  #pod =cut
  
  sub post_form {
      my ($self, $url, $data, $args) = @_;
      (@_ == 3 || @_ == 4 && ref $args eq 'HASH')
          or _croak(q/Usage: $http->post_form(URL, DATAREF, [HASHREF])/ . "\n");
  
      my $headers = {};
      while ( my ($key, $value) = each %{$args->{headers} || {}} ) {
          $headers->{lc $key} = $value;
      }
      delete $args->{headers};
  
      return $self->request('POST', $url, {
              %$args,
              content => $self->www_form_urlencode($data),
              headers => {
                  %$headers,
                  'content-type' => 'application/x-www-form-urlencoded'
              },
          }
      );
  }
  
  #pod =method mirror
  #pod
  #pod     $response = $http->mirror($url, $file, \%options)
  #pod     if ( $response->{success} ) {
  #pod         print "$file is up to date\n";
  #pod     }
  #pod
  #pod Executes a C<GET> request for the URL and saves the response body to the file
  #pod name provided.  The URL must have unsafe characters escaped and international
  #pod domain names encoded.  If the file already exists, the request will include an
  #pod C<If-Modified-Since> header with the modification timestamp of the file.  You
  #pod may specify a different C<If-Modified-Since> header yourself in the C<<
  #pod $options->{headers} >> hash.
  #pod
  #pod The C<success> field of the response will be true if the status code is 2XX
  #pod or if the status code is 304 (unmodified).
  #pod
  #pod If the file was modified and the server response includes a properly
  #pod formatted C<Last-Modified> header, the file modification time will
  #pod be updated accordingly.
  #pod
  #pod =cut
  
  sub mirror {
      my ($self, $url, $file, $args) = @_;
      @_ == 3 || (@_ == 4 && ref $args eq 'HASH')
        or _croak(q/Usage: $http->mirror(URL, FILE, [HASHREF])/ . "\n");
  
      if ( exists $args->{headers} ) {
          my $headers = {};
          while ( my ($key, $value) = each %{$args->{headers} || {}} ) {
              $headers->{lc $key} = $value;
          }
          $args->{headers} = $headers;
      }
  
      if ( -e $file and my $mtime = (stat($file))[9] ) {
          $args->{headers}{'if-modified-since'} ||= $self->_http_date($mtime);
      }
      my $tempfile = $file . int(rand(2**31));
  
      require Fcntl;
      sysopen my $fh, $tempfile, Fcntl::O_CREAT()|Fcntl::O_EXCL()|Fcntl::O_WRONLY()
         or _croak(qq/Error: Could not create temporary file $tempfile for downloading: $!\n/);
      binmode $fh;
      $args->{data_callback} = sub { print {$fh} $_[0] };
      my $response = $self->request('GET', $url, $args);
      close $fh
          or _croak(qq/Error: Caught error closing temporary file $tempfile: $!\n/);
  
      if ( $response->{success} ) {
          rename $tempfile, $file
              or _croak(qq/Error replacing $file with $tempfile: $!\n/);
          my $lm = $response->{headers}{'last-modified'};
          if ( $lm and my $mtime = $self->_parse_http_date($lm) ) {
              utime $mtime, $mtime, $file;
          }
      }
      $response->{success} ||= $response->{status} eq '304';
      unlink $tempfile;
      return $response;
  }
  
  #pod =method request
  #pod
  #pod     $response = $http->request($method, $url);
  #pod     $response = $http->request($method, $url, \%options);
  #pod
  #pod Executes an HTTP request of the given method type ('GET', 'HEAD', 'POST',
  #pod 'PUT', etc.) on the given URL.  The URL must have unsafe characters escaped and
  #pod international domain names encoded.
  #pod
  #pod If the URL includes a "user:password" stanza, they will be used for Basic-style
  #pod authorization headers.  (Authorization headers will not be included in a
  #pod redirected request.) For example:
  #pod
  #pod     $http->request('GET', 'http://Aladdin:open sesame@example.com/');
  #pod
  #pod If the "user:password" stanza contains reserved characters, they must
  #pod be percent-escaped:
  #pod
  #pod     $http->request('GET', 'http://john%40example.com:password@example.com/');
  #pod
  #pod A hashref of options may be appended to modify the request.
  #pod
  #pod Valid options are:
  #pod
  #pod =for :list
  #pod * C<headers> —
  #pod     A hashref containing headers to include with the request.  If the value for
  #pod     a header is an array reference, the header will be output multiple times with
  #pod     each value in the array.  These headers over-write any default headers.
  #pod * C<content> —
  #pod     A scalar to include as the body of the request OR a code reference
  #pod     that will be called iteratively to produce the body of the request
  #pod * C<trailer_callback> —
  #pod     A code reference that will be called if it exists to provide a hashref
  #pod     of trailing headers (only used with chunked transfer-encoding)
  #pod * C<data_callback> —
  #pod     A code reference that will be called for each chunks of the response
  #pod     body received.
  #pod * C<peer> —
  #pod     Override host resolution and force all connections to go only to a
  #pod     specific peer address, regardless of the URL of the request.  This will
  #pod     include any redirections!  This options should be used with extreme
  #pod     caution (e.g. debugging or very special circumstances).
  #pod
  #pod The C<Host> header is generated from the URL in accordance with RFC 2616.  It
  #pod is a fatal error to specify C<Host> in the C<headers> option.  Other headers
  #pod may be ignored or overwritten if necessary for transport compliance.
  #pod
  #pod If the C<content> option is a code reference, it will be called iteratively
  #pod to provide the content body of the request.  It should return the empty
  #pod string or undef when the iterator is exhausted.
  #pod
  #pod If the C<content> option is the empty string, no C<content-type> or
  #pod C<content-length> headers will be generated.
  #pod
  #pod If the C<data_callback> option is provided, it will be called iteratively until
  #pod the entire response body is received.  The first argument will be a string
  #pod containing a chunk of the response body, the second argument will be the
  #pod in-progress response hash reference, as described below.  (This allows
  #pod customizing the action of the callback based on the C<status> or C<headers>
  #pod received prior to the content body.)
  #pod
  #pod The C<request> method returns a hashref containing the response.  The hashref
  #pod will have the following keys:
  #pod
  #pod =for :list
  #pod * C<success> —
  #pod     Boolean indicating whether the operation returned a 2XX status code
  #pod * C<url> —
  #pod     URL that provided the response. This is the URL of the request unless
  #pod     there were redirections, in which case it is the last URL queried
  #pod     in a redirection chain
  #pod * C<status> —
  #pod     The HTTP status code of the response
  #pod * C<reason> —
  #pod     The response phrase returned by the server
  #pod * C<content> —
  #pod     The body of the response.  If the response does not have any content
  #pod     or if a data callback is provided to consume the response body,
  #pod     this will be the empty string
  #pod * C<headers> —
  #pod     A hashref of header fields.  All header field names will be normalized
  #pod     to be lower case. If a header is repeated, the value will be an arrayref;
  #pod     it will otherwise be a scalar string containing the value
  #pod * C<redirects>
  #pod     If this field exists, it is an arrayref of response hash references from
  #pod     redirects in the same order that redirections occurred.  If it does
  #pod     not exist, then no redirections occurred.
  #pod
  #pod On an exception during the execution of the request, the C<status> field will
  #pod contain 599, and the C<content> field will contain the text of the exception.
  #pod
  #pod =cut
  
  my %idempotent = map { $_ => 1 } qw/GET HEAD PUT DELETE OPTIONS TRACE/;
  
  sub request {
      my ($self, $method, $url, $args) = @_;
      @_ == 3 || (@_ == 4 && ref $args eq 'HASH')
        or _croak(q/Usage: $http->request(METHOD, URL, [HASHREF])/ . "\n");
      $args ||= {}; # we keep some state in this during _request
  
      # RFC 2616 Section 8.1.4 mandates a single retry on broken socket
      my $response;
      for ( 0 .. 1 ) {
          $response = eval { $self->_request($method, $url, $args) };
          last unless $@ && $idempotent{$method}
              && $@ =~ m{^(?:Socket closed|Unexpected end)};
      }
  
      if (my $e = $@) {
          # maybe we got a response hash thrown from somewhere deep
          if ( ref $e eq 'HASH' && exists $e->{status} ) {
              $e->{redirects} = delete $args->{_redirects} if @{ $args->{_redirects} || []};
              return $e;
          }
  
          # otherwise, stringify it
          $e = "$e";
          $response = {
              url     => $url,
              success => q{},
              status  => 599,
              reason  => 'Internal Exception',
              content => $e,
              headers => {
                  'content-type'   => 'text/plain',
                  'content-length' => length $e,
              },
              ( @{$args->{_redirects} || []} ? (redirects => delete $args->{_redirects}) : () ),
          };
      }
      return $response;
  }
  
  #pod =method www_form_urlencode
  #pod
  #pod     $params = $http->www_form_urlencode( $data );
  #pod     $response = $http->get("http://example.com/query?$params");
  #pod
  #pod This method converts the key/value pairs from a data hash or array reference
  #pod into a C<x-www-form-urlencoded> string.  The keys and values from the data
  #pod reference will be UTF-8 encoded and escaped per RFC 3986.  If a value is an
  #pod array reference, the key will be repeated with each of the values of the array
  #pod reference.  If data is provided as a hash reference, the key/value pairs in the
  #pod resulting string will be sorted by key and value for consistent ordering.
  #pod
  #pod =cut
  
  sub www_form_urlencode {
      my ($self, $data) = @_;
      (@_ == 2 && ref $data)
          or _croak(q/Usage: $http->www_form_urlencode(DATAREF)/ . "\n");
      (ref $data eq 'HASH' || ref $data eq 'ARRAY')
          or _croak("form data must be a hash or array reference\n");
  
      my @params = ref $data eq 'HASH' ? %$data : @$data;
      @params % 2 == 0
          or _croak("form data reference must have an even number of terms\n");
  
      my @terms;
      while( @params ) {
          my ($key, $value) = splice(@params, 0, 2);
          if ( ref $value eq 'ARRAY' ) {
              unshift @params, map { $key => $_ } @$value;
          }
          else {
              push @terms, join("=", map { $self->_uri_escape($_) } $key, $value);
          }
      }
  
      return join("&", (ref $data eq 'ARRAY') ? (@terms) : (sort @terms) );
  }
  
  #pod =method can_ssl
  #pod
  #pod     $ok         = HTTP::Tiny->can_ssl;
  #pod     ($ok, $why) = HTTP::Tiny->can_ssl;
  #pod     ($ok, $why) = $http->can_ssl;
  #pod
  #pod Indicates if SSL support is available.  When called as a class object, it
  #pod checks for the correct version of L<Net::SSLeay> and L<IO::Socket::SSL>.
  #pod When called as an object methods, if C<SSL_verify> is true or if C<SSL_verify_mode>
  #pod is set in C<SSL_options>, it checks that a CA file is available.
  #pod
  #pod In scalar context, returns a boolean indicating if SSL is available.
  #pod In list context, returns the boolean and a (possibly multi-line) string of
  #pod errors indicating why SSL isn't available.
  #pod
  #pod =cut
  
  sub can_ssl {
      my ($self) = @_;
  
      my($ok, $reason) = (1, '');
  
      # Need IO::Socket::SSL 1.42 for SSL_create_ctx_callback
      local @INC = @INC;
      pop @INC if $INC[-1] eq '.';
      unless (eval {require IO::Socket::SSL; IO::Socket::SSL->VERSION(1.42)}) {
          $ok = 0;
          $reason .= qq/IO::Socket::SSL 1.42 must be installed for https support\n/;
      }
  
      # Need Net::SSLeay 1.49 for MODE_AUTO_RETRY
      unless (eval {require Net::SSLeay; Net::SSLeay->VERSION(1.49)}) {
          $ok = 0;
          $reason .= qq/Net::SSLeay 1.49 must be installed for https support\n/;
      }
  
      # If an object, check that SSL config lets us get a CA if necessary
      if ( ref($self) && ( $self->{verify_SSL} || $self->{SSL_options}{SSL_verify_mode} ) ) {
          my $handle = HTTP::Tiny::Handle->new(
              SSL_options => $self->{SSL_options},
              verify_SSL  => $self->{verify_SSL},
          );
          unless ( eval { $handle->_find_CA_file; 1 } ) {
              $ok = 0;
              $reason .= "$@";
          }
      }
  
      wantarray ? ($ok, $reason) : $ok;
  }
  
  #pod =method connected
  #pod
  #pod     $host = $http->connected;
  #pod     ($host, $port) = $http->connected;
  #pod
  #pod Indicates if a connection to a peer is being kept alive, per the C<keep_alive>
  #pod option.
  #pod
  #pod In scalar context, returns the peer host and port, joined with a colon, or
  #pod C<undef> (if no peer is connected).
  #pod In list context, returns the peer host and port or an empty list (if no peer
  #pod is connected).
  #pod
  #pod B<Note>: This method cannot reliably be used to discover whether the remote
  #pod host has closed its end of the socket.
  #pod
  #pod =cut
  
  sub connected {
      my ($self) = @_;
  
      # If a socket exists...
      if ($self->{handle} && $self->{handle}{fh}) {
          my $socket = $self->{handle}{fh};
  
          # ...and is connected, return the peer host and port.
          if ($socket->connected) {
              return wantarray
                  ? ($socket->peerhost, $socket->peerport)
                  : join(':', $socket->peerhost, $socket->peerport);
          }
      }
      return;
  }
  
  #--------------------------------------------------------------------------#
  # private methods
  #--------------------------------------------------------------------------#
  
  my %DefaultPort = (
      http => 80,
      https => 443,
  );
  
  sub _agent {
      my $class = ref($_[0]) || $_[0];
      (my $default_agent = $class) =~ s{::}{-}g;
      return $default_agent . "/" . $class->VERSION;
  }
  
  sub _request {
      my ($self, $method, $url, $args) = @_;
  
      my ($scheme, $host, $port, $path_query, $auth) = $self->_split_url($url);
  
      my $request = {
          method    => $method,
          scheme    => $scheme,
          host      => $host,
          port      => $port,
          host_port => ($port == $DefaultPort{$scheme} ? $host : "$host:$port"),
          uri       => $path_query,
          headers   => {},
      };
  
      my $peer = $args->{peer} || $host;
  
      # We remove the cached handle so it is not reused in the case of redirect.
      # If all is well, it will be recached at the end of _request.  We only
      # reuse for the same scheme, host and port
      my $handle = delete $self->{handle};
      if ( $handle ) {
          unless ( $handle->can_reuse( $scheme, $host, $port, $peer ) ) {
              $handle->close;
              undef $handle;
          }
      }
      $handle ||= $self->_open_handle( $request, $scheme, $host, $port, $peer );
  
      $self->_prepare_headers_and_cb($request, $args, $url, $auth);
      $handle->write_request($request);
  
      my $response;
      do { $response = $handle->read_response_header }
          until (substr($response->{status},0,1) ne '1');
  
      $self->_update_cookie_jar( $url, $response ) if $self->{cookie_jar};
      my @redir_args = $self->_maybe_redirect($request, $response, $args);
  
      my $known_message_length;
      if ($method eq 'HEAD' || $response->{status} =~ /^[23]04/) {
          # response has no message body
          $known_message_length = 1;
      }
      else {
          # Ignore any data callbacks during redirection.
          my $cb_args = @redir_args ? +{} : $args;
          my $data_cb = $self->_prepare_data_cb($response, $cb_args);
          $known_message_length = $handle->read_body($data_cb, $response);
      }
  
      if ( $self->{keep_alive}
          && $known_message_length
          && $response->{protocol} eq 'HTTP/1.1'
          && ($response->{headers}{connection} || '') ne 'close'
      ) {
          $self->{handle} = $handle;
      }
      else {
          $handle->close;
      }
  
      $response->{success} = substr( $response->{status}, 0, 1 ) eq '2';
      $response->{url} = $url;
  
      # Push the current response onto the stack of redirects if redirecting.
      if (@redir_args) {
          push @{$args->{_redirects}}, $response;
          return $self->_request(@redir_args, $args);
      }
  
      # Copy the stack of redirects into the response before returning.
      $response->{redirects} = delete $args->{_redirects}
        if @{$args->{_redirects}};
      return $response;
  }
  
  sub _open_handle {
      my ($self, $request, $scheme, $host, $port, $peer) = @_;
  
      my $handle  = HTTP::Tiny::Handle->new(
          timeout         => $self->{timeout},
          SSL_options     => $self->{SSL_options},
          verify_SSL      => $self->{verify_SSL},
          local_address   => $self->{local_address},
          keep_alive      => $self->{keep_alive}
      );
  
      if ($self->{_has_proxy}{$scheme} && ! grep { $host =~ /\Q$_\E$/ } @{$self->{no_proxy}}) {
          return $self->_proxy_connect( $request, $handle );
      }
      else {
          return $handle->connect($scheme, $host, $port, $peer);
      }
  }
  
  sub _proxy_connect {
      my ($self, $request, $handle) = @_;
  
      my @proxy_vars;
      if ( $request->{scheme} eq 'https' ) {
          _croak(qq{No https_proxy defined}) unless $self->{https_proxy};
          @proxy_vars = $self->_split_proxy( https_proxy => $self->{https_proxy} );
          if ( $proxy_vars[0] eq 'https' ) {
              _croak(qq{Can't proxy https over https: $request->{uri} via $self->{https_proxy}});
          }
      }
      else {
          _croak(qq{No http_proxy defined}) unless $self->{http_proxy};
          @proxy_vars = $self->_split_proxy( http_proxy => $self->{http_proxy} );
      }
  
      my ($p_scheme, $p_host, $p_port, $p_auth) = @proxy_vars;
  
      if ( length $p_auth && ! defined $request->{headers}{'proxy-authorization'} ) {
          $self->_add_basic_auth_header( $request, 'proxy-authorization' => $p_auth );
      }
  
      $handle->connect($p_scheme, $p_host, $p_port, $p_host);
  
      if ($request->{scheme} eq 'https') {
          $self->_create_proxy_tunnel( $request, $handle );
      }
      else {
          # non-tunneled proxy requires absolute URI
          $request->{uri} = "$request->{scheme}://$request->{host_port}$request->{uri}";
      }
  
      return $handle;
  }
  
  sub _split_proxy {
      my ($self, $type, $proxy) = @_;
  
      my ($scheme, $host, $port, $path_query, $auth) = eval { $self->_split_url($proxy) };
  
      unless(
          defined($scheme) && length($scheme) && length($host) && length($port)
          && $path_query eq '/'
      ) {
          _croak(qq{$type URL must be in format http[s]://[auth@]<host>:<port>/\n});
      }
  
      return ($scheme, $host, $port, $auth);
  }
  
  sub _create_proxy_tunnel {
      my ($self, $request, $handle) = @_;
  
      $handle->_assert_ssl;
  
      my $agent = exists($request->{headers}{'user-agent'})
          ? $request->{headers}{'user-agent'} : $self->{agent};
  
      my $connect_request = {
          method    => 'CONNECT',
          uri       => "$request->{host}:$request->{port}",
          headers   => {
              host => "$request->{host}:$request->{port}",
              'user-agent' => $agent,
          }
      };
  
      if ( $request->{headers}{'proxy-authorization'} ) {
          $connect_request->{headers}{'proxy-authorization'} =
              delete $request->{headers}{'proxy-authorization'};
      }
  
      $handle->write_request($connect_request);
      my $response;
      do { $response = $handle->read_response_header }
          until (substr($response->{status},0,1) ne '1');
  
      # if CONNECT failed, throw the response so it will be
      # returned from the original request() method;
      unless (substr($response->{status},0,1) eq '2') {
          die $response;
      }
  
      # tunnel established, so start SSL handshake
      $handle->start_ssl( $request->{host} );
  
      return;
  }
  
  sub _prepare_headers_and_cb {
      my ($self, $request, $args, $url, $auth) = @_;
  
      for ($self->{default_headers}, $args->{headers}) {
          next unless defined;
          while (my ($k, $v) = each %$_) {
              $request->{headers}{lc $k} = $v;
              $request->{header_case}{lc $k} = $k;
          }
      }
  
      if (exists $request->{headers}{'host'}) {
          die(qq/The 'Host' header must not be provided as header option\n/);
      }
  
      $request->{headers}{'host'}         = $request->{host_port};
      $request->{headers}{'user-agent'} ||= $self->{agent};
      $request->{headers}{'connection'}   = "close"
          unless $self->{keep_alive};
  
      if ( defined $args->{content} ) {
          if (ref $args->{content} eq 'CODE') {
              $request->{headers}{'content-type'} ||= "application/octet-stream";
              $request->{headers}{'transfer-encoding'} = 'chunked'
                unless $request->{headers}{'content-length'}
                    || $request->{headers}{'transfer-encoding'};
              $request->{cb} = $args->{content};
          }
          elsif ( length $args->{content} ) {
              my $content = $args->{content};
              if ( $] ge '5.008' ) {
                  utf8::downgrade($content, 1)
                      or die(qq/Wide character in request message body\n/);
              }
              $request->{headers}{'content-type'} ||= "application/octet-stream";
              $request->{headers}{'content-length'} = length $content
                unless $request->{headers}{'content-length'}
                    || $request->{headers}{'transfer-encoding'};
              $request->{cb} = sub { substr $content, 0, length $content, '' };
          }
          $request->{trailer_cb} = $args->{trailer_callback}
              if ref $args->{trailer_callback} eq 'CODE';
      }
  
      ### If we have a cookie jar, then maybe add relevant cookies
      if ( $self->{cookie_jar} ) {
          my $cookies = $self->cookie_jar->cookie_header( $url );
          $request->{headers}{cookie} = $cookies if length $cookies;
      }
  
      # if we have Basic auth parameters, add them
      if ( length $auth && ! defined $request->{headers}{authorization} ) {
          $self->_add_basic_auth_header( $request, 'authorization' => $auth );
      }
  
      return;
  }
  
  sub _add_basic_auth_header {
      my ($self, $request, $header, $auth) = @_;
      require MIME::Base64;
      $request->{headers}{$header} =
          "Basic " . MIME::Base64::encode_base64($auth, "");
      return;
  }
  
  sub _prepare_data_cb {
      my ($self, $response, $args) = @_;
      my $data_cb = $args->{data_callback};
      $response->{content} = '';
  
      if (!$data_cb || $response->{status} !~ /^2/) {
          if (defined $self->{max_size}) {
              $data_cb = sub {
                  $_[1]->{content} .= $_[0];
                  die(qq/Size of response body exceeds the maximum allowed of $self->{max_size}\n/)
                    if length $_[1]->{content} > $self->{max_size};
              };
          }
          else {
              $data_cb = sub { $_[1]->{content} .= $_[0] };
          }
      }
      return $data_cb;
  }
  
  sub _update_cookie_jar {
      my ($self, $url, $response) = @_;
  
      my $cookies = $response->{headers}->{'set-cookie'};
      return unless defined $cookies;
  
      my @cookies = ref $cookies ? @$cookies : $cookies;
  
      $self->cookie_jar->add( $url, $_ ) for @cookies;
  
      return;
  }
  
  sub _validate_cookie_jar {
      my ($class, $jar) = @_;
  
      # duck typing
      for my $method ( qw/add cookie_header/ ) {
          _croak(qq/Cookie jar must provide the '$method' method\n/)
              unless ref($jar) && ref($jar)->can($method);
      }
  
      return;
  }
  
  sub _maybe_redirect {
      my ($self, $request, $response, $args) = @_;
      my $headers = $response->{headers};
      my ($status, $method) = ($response->{status}, $request->{method});
      $args->{_redirects} ||= [];
  
      if (($status eq '303' or ($status =~ /^30[1278]/ && $method =~ /^GET|HEAD$/))
          and $headers->{location}
          and @{$args->{_redirects}} < $self->{max_redirect}
      ) {
          my $location = ($headers->{location} =~ /^\//)
              ? "$request->{scheme}://$request->{host_port}$headers->{location}"
              : $headers->{location} ;
          return (($status eq '303' ? 'GET' : $method), $location);
      }
      return;
  }
  
  sub _split_url {
      my $url = pop;
  
      # URI regex adapted from the URI module
      my ($scheme, $host, $path_query) = $url =~ m<\A([^:/?#]+)://([^/?#]*)([^#]*)>
        or die(qq/Cannot parse URL: '$url'\n/);
  
      $scheme     = lc $scheme;
      $path_query = "/$path_query" unless $path_query =~ m<\A/>;
  
      my $auth = '';
      if ( (my $i = index $host, '@') != -1 ) {
          # user:pass@host
          $auth = substr $host, 0, $i, ''; # take up to the @ for auth
          substr $host, 0, 1, '';          # knock the @ off the host
  
          # userinfo might be percent escaped, so recover real auth info
          $auth =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;
      }
      my $port = $host =~ s/:(\d*)\z// && length $1 ? $1
               : $scheme eq 'http'                  ? 80
               : $scheme eq 'https'                 ? 443
               : undef;
  
      return ($scheme, (length $host ? lc $host : "localhost") , $port, $path_query, $auth);
  }
  
  # Date conversions adapted from HTTP::Date
  my $DoW = "Sun|Mon|Tue|Wed|Thu|Fri|Sat";
  my $MoY = "Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec";
  sub _http_date {
      my ($sec, $min, $hour, $mday, $mon, $year, $wday) = gmtime($_[1]);
      return sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",
          substr($DoW,$wday*4,3),
          $mday, substr($MoY,$mon*4,3), $year+1900,
          $hour, $min, $sec
      );
  }
  
  sub _parse_http_date {
      my ($self, $str) = @_;
      require Time::Local;
      my @tl_parts;
      if ($str =~ /^[SMTWF][a-z]+, +(\d{1,2}) ($MoY) +(\d\d\d\d) +(\d\d):(\d\d):(\d\d) +GMT$/) {
          @tl_parts = ($6, $5, $4, $1, (index($MoY,$2)/4), $3);
      }
      elsif ($str =~ /^[SMTWF][a-z]+, +(\d\d)-($MoY)-(\d{2,4}) +(\d\d):(\d\d):(\d\d) +GMT$/ ) {
          @tl_parts = ($6, $5, $4, $1, (index($MoY,$2)/4), $3);
      }
      elsif ($str =~ /^[SMTWF][a-z]+ +($MoY) +(\d{1,2}) +(\d\d):(\d\d):(\d\d) +(?:[^0-9]+ +)?(\d\d\d\d)$/ ) {
          @tl_parts = ($5, $4, $3, $2, (index($MoY,$1)/4), $6);
      }
      return eval {
          my $t = @tl_parts ? Time::Local::timegm(@tl_parts) : -1;
          $t < 0 ? undef : $t;
      };
  }
  
  # URI escaping adapted from URI::Escape
  # c.f. http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1
  # perl 5.6 ready UTF-8 encoding adapted from JSON::PP
  my %escapes = map { chr($_) => sprintf("%%%02X", $_) } 0..255;
  $escapes{' '}="+";
  my $unsafe_char = qr/[^A-Za-z0-9\-\._~]/;
  
  sub _uri_escape {
      my ($self, $str) = @_;
      if ( $] ge '5.008' ) {
          utf8::encode($str);
      }
      else {
          $str = pack("U*", unpack("C*", $str)) # UTF-8 encode a byte string
              if ( length $str == do { use bytes; length $str } );
          $str = pack("C*", unpack("C*", $str)); # clear UTF-8 flag
      }
      $str =~ s/($unsafe_char)/$escapes{$1}/ge;
      return $str;
  }
  
  package
      HTTP::Tiny::Handle; # hide from PAUSE/indexers
  use strict;
  use warnings;
  
  use Errno      qw[EINTR EPIPE];
  use IO::Socket qw[SOCK_STREAM];
  use Socket     qw[SOL_SOCKET SO_KEEPALIVE];
  
  # PERL_HTTP_TINY_IPV4_ONLY is a private environment variable to force old
  # behavior if someone is unable to boostrap CPAN from a new perl install; it is
  # not intended for general, per-client use and may be removed in the future
  my $SOCKET_CLASS =
      $ENV{PERL_HTTP_TINY_IPV4_ONLY} ? 'IO::Socket::INET' :
      eval { require IO::Socket::IP; IO::Socket::IP->VERSION(0.25) } ? 'IO::Socket::IP' :
      'IO::Socket::INET';
  
  sub BUFSIZE () { 32768 } ## no critic
  
  my $Printable = sub {
      local $_ = shift;
      s/\r/\\r/g;
      s/\n/\\n/g;
      s/\t/\\t/g;
      s/([^\x20-\x7E])/sprintf('\\x%.2X', ord($1))/ge;
      $_;
  };
  
  my $Token = qr/[\x21\x23-\x27\x2A\x2B\x2D\x2E\x30-\x39\x41-\x5A\x5E-\x7A\x7C\x7E]/;
  my $Field_Content = qr/[[:print:]]+ (?: [\x20\x09]+ [[:print:]]+ )*/x;
  
  sub new {
      my ($class, %args) = @_;
      return bless {
          rbuf             => '',
          timeout          => 60,
          max_line_size    => 16384,
          max_header_lines => 64,
          verify_SSL       => 0,
          SSL_options      => {},
          %args
      }, $class;
  }
  
  sub timeout {
      my ($self, $timeout) = @_;
      if ( @_ > 1 ) {
          $self->{timeout} = $timeout;
          if ( $self->{fh} && $self->{fh}->can('timeout') ) {
              $self->{fh}->timeout($timeout);
          }
      }
      return $self->{timeout};
  }
  
  sub connect {
      @_ == 5 || die(q/Usage: $handle->connect(scheme, host, port, peer)/ . "\n");
      my ($self, $scheme, $host, $port, $peer) = @_;
  
      if ( $scheme eq 'https' ) {
          $self->_assert_ssl;
      }
      elsif ( $scheme ne 'http' ) {
        die(qq/Unsupported URL scheme '$scheme'\n/);
      }
      $self->{fh} = $SOCKET_CLASS->new(
          PeerHost  => $peer,
          PeerPort  => $port,
          $self->{local_address} ?
              ( LocalAddr => $self->{local_address} ) : (),
          Proto     => 'tcp',
          Type      => SOCK_STREAM,
          Timeout   => $self->{timeout},
      ) or die(qq/Could not connect to '$host:$port': $@\n/);
  
      binmode($self->{fh})
        or die(qq/Could not binmode() socket: '$!'\n/);
  
      if ( $self->{keep_alive} ) {
          unless ( defined( $self->{fh}->setsockopt( SOL_SOCKET, SO_KEEPALIVE, 1 ) ) ) {
              CORE::close($self->{fh});
              die(qq/Could not set SO_KEEPALIVE on socket: '$!'\n/);
          }
      }
  
      $self->start_ssl($host) if $scheme eq 'https';
  
      $self->{scheme} = $scheme;
      $self->{host} = $host;
      $self->{peer} = $peer;
      $self->{port} = $port;
      $self->{pid} = $$;
      $self->{tid} = _get_tid();
  
      return $self;
  }
  
  sub start_ssl {
      my ($self, $host) = @_;
  
      # As this might be used via CONNECT after an SSL session
      # to a proxy, we shut down any existing SSL before attempting
      # the handshake
      if ( ref($self->{fh}) eq 'IO::Socket::SSL' ) {
          unless ( $self->{fh}->stop_SSL ) {
              my $ssl_err = IO::Socket::SSL->errstr;
              die(qq/Error halting prior SSL connection: $ssl_err/);
          }
      }
  
      my $ssl_args = $self->_ssl_args($host);
      IO::Socket::SSL->start_SSL(
          $self->{fh},
          %$ssl_args,
          SSL_create_ctx_callback => sub {
              my $ctx = shift;
              Net::SSLeay::CTX_set_mode($ctx, Net::SSLeay::MODE_AUTO_RETRY());
          },
      );
  
      unless ( ref($self->{fh}) eq 'IO::Socket::SSL' ) {
          my $ssl_err = IO::Socket::SSL->errstr;
          die(qq/SSL connection failed for $host: $ssl_err\n/);
      }
  }
  
  sub close {
      @_ == 1 || die(q/Usage: $handle->close()/ . "\n");
      my ($self) = @_;
      CORE::close($self->{fh})
        or die(qq/Could not close socket: '$!'\n/);
  }
  
  sub write {
      @_ == 2 || die(q/Usage: $handle->write(buf)/ . "\n");
      my ($self, $buf) = @_;
  
      if ( $] ge '5.008' ) {
          utf8::downgrade($buf, 1)
              or die(qq/Wide character in write()\n/);
      }
  
      my $len = length $buf;
      my $off = 0;
  
      local $SIG{PIPE} = 'IGNORE';
  
      while () {
          $self->can_write
            or die(qq/Timed out while waiting for socket to become ready for writing\n/);
          my $r = syswrite($self->{fh}, $buf, $len, $off);
          if (defined $r) {
              $len -= $r;
              $off += $r;
              last unless $len > 0;
          }
          elsif ($! == EPIPE) {
              die(qq/Socket closed by remote server: $!\n/);
          }
          elsif ($! != EINTR) {
              if ($self->{fh}->can('errstr')){
                  my $err = $self->{fh}->errstr();
                  die (qq/Could not write to SSL socket: '$err'\n /);
              }
              else {
                  die(qq/Could not write to socket: '$!'\n/);
              }
  
          }
      }
      return $off;
  }
  
  sub read {
      @_ == 2 || @_ == 3 || die(q/Usage: $handle->read(len [, allow_partial])/ . "\n");
      my ($self, $len, $allow_partial) = @_;
  
      my $buf  = '';
      my $got = length $self->{rbuf};
  
      if ($got) {
          my $take = ($got < $len) ? $got : $len;
          $buf  = substr($self->{rbuf}, 0, $take, '');
          $len -= $take;
      }
  
      while ($len > 0) {
          $self->can_read
            or die(q/Timed out while waiting for socket to become ready for reading/ . "\n");
          my $r = sysread($self->{fh}, $buf, $len, length $buf);
          if (defined $r) {
              last unless $r;
              $len -= $r;
          }
          elsif ($! != EINTR) {
              if ($self->{fh}->can('errstr')){
                  my $err = $self->{fh}->errstr();
                  die (qq/Could not read from SSL socket: '$err'\n /);
              }
              else {
                  die(qq/Could not read from socket: '$!'\n/);
              }
          }
      }
      if ($len && !$allow_partial) {
          die(qq/Unexpected end of stream\n/);
      }
      return $buf;
  }
  
  sub readline {
      @_ == 1 || die(q/Usage: $handle->readline()/ . "\n");
      my ($self) = @_;
  
      while () {
          if ($self->{rbuf} =~ s/\A ([^\x0D\x0A]* \x0D?\x0A)//x) {
              return $1;
          }
          if (length $self->{rbuf} >= $self->{max_line_size}) {
              die(qq/Line size exceeds the maximum allowed size of $self->{max_line_size}\n/);
          }
          $self->can_read
            or die(qq/Timed out while waiting for socket to become ready for reading\n/);
          my $r = sysread($self->{fh}, $self->{rbuf}, BUFSIZE, length $self->{rbuf});
          if (defined $r) {
              last unless $r;
          }
          elsif ($! != EINTR) {
              if ($self->{fh}->can('errstr')){
                  my $err = $self->{fh}->errstr();
                  die (qq/Could not read from SSL socket: '$err'\n /);
              }
              else {
                  die(qq/Could not read from socket: '$!'\n/);
              }
          }
      }
      die(qq/Unexpected end of stream while looking for line\n/);
  }
  
  sub read_header_lines {
      @_ == 1 || @_ == 2 || die(q/Usage: $handle->read_header_lines([headers])/ . "\n");
      my ($self, $headers) = @_;
      $headers ||= {};
      my $lines   = 0;
      my $val;
  
      while () {
           my $line = $self->readline;
  
           if (++$lines >= $self->{max_header_lines}) {
               die(qq/Header lines exceeds maximum number allowed of $self->{max_header_lines}\n/);
           }
           elsif ($line =~ /\A ([^\x00-\x1F\x7F:]+) : [\x09\x20]* ([^\x0D\x0A]*)/x) {
               my ($field_name) = lc $1;
               if (exists $headers->{$field_name}) {
                   for ($headers->{$field_name}) {
                       $_ = [$_] unless ref $_ eq "ARRAY";
                       push @$_, $2;
                       $val = \$_->[-1];
                   }
               }
               else {
                   $val = \($headers->{$field_name} = $2);
               }
           }
           elsif ($line =~ /\A [\x09\x20]+ ([^\x0D\x0A]*)/x) {
               $val
                 or die(qq/Unexpected header continuation line\n/);
               next unless length $1;
               $$val .= ' ' if length $$val;
               $$val .= $1;
           }
           elsif ($line =~ /\A \x0D?\x0A \z/x) {
              last;
           }
           else {
              die(q/Malformed header line: / . $Printable->($line) . "\n");
           }
      }
      return $headers;
  }
  
  sub write_request {
      @_ == 2 || die(q/Usage: $handle->write_request(request)/ . "\n");
      my($self, $request) = @_;
      $self->write_request_header(@{$request}{qw/method uri headers header_case/});
      $self->write_body($request) if $request->{cb};
      return;
  }
  
  # Standard request header names/case from HTTP/1.1 RFCs
  my @rfc_request_headers = qw(
    Accept Accept-Charset Accept-Encoding Accept-Language Authorization
    Cache-Control Connection Content-Length Expect From Host
    If-Match If-Modified-Since If-None-Match If-Range If-Unmodified-Since
    Max-Forwards Pragma Proxy-Authorization Range Referer TE Trailer
    Transfer-Encoding Upgrade User-Agent Via
  );
  
  my @other_request_headers = qw(
    Content-Encoding Content-MD5 Content-Type Cookie DNT Date Origin
    X-XSS-Protection
  );
  
  my %HeaderCase = map { lc($_) => $_ } @rfc_request_headers, @other_request_headers;
  
  # to avoid multiple small writes and hence nagle, you can pass the method line or anything else to
  # combine writes.
  sub write_header_lines {
      (@_ >= 2 && @_ <= 4 && ref $_[1] eq 'HASH') || die(q/Usage: $handle->write_header_lines(headers, [header_case, prefix])/ . "\n");
      my($self, $headers, $header_case, $prefix_data) = @_;
      $header_case ||= {};
  
      my $buf = (defined $prefix_data ? $prefix_data : '');
  
      # Per RFC, control fields should be listed first
      my %seen;
      for my $k ( qw/host cache-control expect max-forwards pragma range te/ ) {
          next unless exists $headers->{$k};
          $seen{$k}++;
          my $field_name = $HeaderCase{$k};
          my $v = $headers->{$k};
          for (ref $v eq 'ARRAY' ? @$v : $v) {
              $_ = '' unless defined $_;
              $buf .= "$field_name: $_\x0D\x0A";
          }
      }
  
      # Other headers sent in arbitrary order
      while (my ($k, $v) = each %$headers) {
          my $field_name = lc $k;
          next if $seen{$field_name};
          if (exists $HeaderCase{$field_name}) {
              $field_name = $HeaderCase{$field_name};
          }
          else {
              if (exists $header_case->{$field_name}) {
                  $field_name = $header_case->{$field_name};
              }
              else {
                  $field_name =~ s/\b(\w)/\u$1/g;
              }
              $field_name =~ /\A $Token+ \z/xo
                or die(q/Invalid HTTP header field name: / . $Printable->($field_name) . "\n");
              $HeaderCase{lc $field_name} = $field_name;
          }
          for (ref $v eq 'ARRAY' ? @$v : $v) {
              # unwrap a field value if pre-wrapped by user
              s/\x0D?\x0A\s+/ /g;
              die(qq/Invalid HTTP header field value ($field_name): / . $Printable->($_). "\n")
                unless $_ eq '' || /\A $Field_Content \z/xo;
              $_ = '' unless defined $_;
              $buf .= "$field_name: $_\x0D\x0A";
          }
      }
      $buf .= "\x0D\x0A";
      return $self->write($buf);
  }
  
  # return value indicates whether message length was defined; this is generally
  # true unless there was no content-length header and we just read until EOF.
  # Other message length errors are thrown as exceptions
  sub read_body {
      @_ == 3 || die(q/Usage: $handle->read_body(callback, response)/ . "\n");
      my ($self, $cb, $response) = @_;
      my $te = $response->{headers}{'transfer-encoding'} || '';
      my $chunked = grep { /chunked/i } ( ref $te eq 'ARRAY' ? @$te : $te ) ;
      return $chunked
          ? $self->read_chunked_body($cb, $response)
          : $self->read_content_body($cb, $response);
  }
  
  sub write_body {
      @_ == 2 || die(q/Usage: $handle->write_body(request)/ . "\n");
      my ($self, $request) = @_;
      if ($request->{headers}{'content-length'}) {
          return $self->write_content_body($request);
      }
      else {
          return $self->write_chunked_body($request);
      }
  }
  
  sub read_content_body {
      @_ == 3 || @_ == 4 || die(q/Usage: $handle->read_content_body(callback, response, [read_length])/ . "\n");
      my ($self, $cb, $response, $content_length) = @_;
      $content_length ||= $response->{headers}{'content-length'};
  
      if ( defined $content_length ) {
          my $len = $content_length;
          while ($len > 0) {
              my $read = ($len > BUFSIZE) ? BUFSIZE : $len;
              $cb->($self->read($read, 0), $response);
              $len -= $read;
          }
          return length($self->{rbuf}) == 0;
      }
  
      my $chunk;
      $cb->($chunk, $response) while length( $chunk = $self->read(BUFSIZE, 1) );
  
      return;
  }
  
  sub write_content_body {
      @_ == 2 || die(q/Usage: $handle->write_content_body(request)/ . "\n");
      my ($self, $request) = @_;
  
      my ($len, $content_length) = (0, $request->{headers}{'content-length'});
      while () {
          my $data = $request->{cb}->();
  
          defined $data && length $data
            or last;
  
          if ( $] ge '5.008' ) {
              utf8::downgrade($data, 1)
                  or die(qq/Wide character in write_content()\n/);
          }
  
          $len += $self->write($data);
      }
  
      $len == $content_length
        or die(qq/Content-Length mismatch (got: $len expected: $content_length)\n/);
  
      return $len;
  }
  
  sub read_chunked_body {
      @_ == 3 || die(q/Usage: $handle->read_chunked_body(callback, $response)/ . "\n");
      my ($self, $cb, $response) = @_;
  
      while () {
          my $head = $self->readline;
  
          $head =~ /\A ([A-Fa-f0-9]+)/x
            or die(q/Malformed chunk head: / . $Printable->($head) . "\n");
  
          my $len = hex($1)
            or last;
  
          $self->read_content_body($cb, $response, $len);
  
          $self->read(2) eq "\x0D\x0A"
            or die(qq/Malformed chunk: missing CRLF after chunk data\n/);
      }
      $self->read_header_lines($response->{headers});
      return 1;
  }
  
  sub write_chunked_body {
      @_ == 2 || die(q/Usage: $handle->write_chunked_body(request)/ . "\n");
      my ($self, $request) = @_;
  
      my $len = 0;
      while () {
          my $data = $request->{cb}->();
  
          defined $data && length $data
            or last;
  
          if ( $] ge '5.008' ) {
              utf8::downgrade($data, 1)
                  or die(qq/Wide character in write_chunked_body()\n/);
          }
  
          $len += length $data;
  
          my $chunk  = sprintf '%X', length $data;
             $chunk .= "\x0D\x0A";
             $chunk .= $data;
             $chunk .= "\x0D\x0A";
  
          $self->write($chunk);
      }
      $self->write("0\x0D\x0A");
      if ( ref $request->{trailer_cb} eq 'CODE' ) {
          $self->write_header_lines($request->{trailer_cb}->())
      }
      else {
          $self->write("\x0D\x0A");
      }
      return $len;
  }
  
  sub read_response_header {
      @_ == 1 || die(q/Usage: $handle->read_response_header()/ . "\n");
      my ($self) = @_;
  
      my $line = $self->readline;
  
      $line =~ /\A (HTTP\/(0*\d+\.0*\d+)) [\x09\x20]+ ([0-9]{3}) [\x09\x20]+ ([^\x0D\x0A]*) \x0D?\x0A/x
        or die(q/Malformed Status-Line: / . $Printable->($line). "\n");
  
      my ($protocol, $version, $status, $reason) = ($1, $2, $3, $4);
  
      die (qq/Unsupported HTTP protocol: $protocol\n/)
          unless $version =~ /0*1\.0*[01]/;
  
      return {
          status       => $status,
          reason       => $reason,
          headers      => $self->read_header_lines,
          protocol     => $protocol,
      };
  }
  
  sub write_request_header {
      @_ == 5 || die(q/Usage: $handle->write_request_header(method, request_uri, headers, header_case)/ . "\n");
      my ($self, $method, $request_uri, $headers, $header_case) = @_;
  
      return $self->write_header_lines($headers, $header_case, "$method $request_uri HTTP/1.1\x0D\x0A");
  }
  
  sub _do_timeout {
      my ($self, $type, $timeout) = @_;
      $timeout = $self->{timeout}
          unless defined $timeout && $timeout >= 0;
  
      my $fd = fileno $self->{fh};
      defined $fd && $fd >= 0
        or die(qq/select(2): 'Bad file descriptor'\n/);
  
      my $initial = time;
      my $pending = $timeout;
      my $nfound;
  
      vec(my $fdset = '', $fd, 1) = 1;
  
      while () {
          $nfound = ($type eq 'read')
              ? select($fdset, undef, undef, $pending)
              : select(undef, $fdset, undef, $pending) ;
          if ($nfound == -1) {
              $! == EINTR
                or die(qq/select(2): '$!'\n/);
              redo if !$timeout || ($pending = $timeout - (time - $initial)) > 0;
              $nfound = 0;
          }
          last;
      }
      $! = 0;
      return $nfound;
  }
  
  sub can_read {
      @_ == 1 || @_ == 2 || die(q/Usage: $handle->can_read([timeout])/ . "\n");
      my $self = shift;
      if ( ref($self->{fh}) eq 'IO::Socket::SSL' ) {
          return 1 if $self->{fh}->pending;
      }
      return $self->_do_timeout('read', @_)
  }
  
  sub can_write {
      @_ == 1 || @_ == 2 || die(q/Usage: $handle->can_write([timeout])/ . "\n");
      my $self = shift;
      return $self->_do_timeout('write', @_)
  }
  
  sub _assert_ssl {
      my($ok, $reason) = HTTP::Tiny->can_ssl();
      die $reason unless $ok;
  }
  
  sub can_reuse {
      my ($self,$scheme,$host,$port,$peer) = @_;
      return 0 if
          $self->{pid} != $$
          || $self->{tid} != _get_tid()
          || length($self->{rbuf})
          || $scheme ne $self->{scheme}
          || $host ne $self->{host}
          || $port ne $self->{port}
          || $peer ne $self->{peer}
          || eval { $self->can_read(0) }
          || $@ ;
          return 1;
  }
  
  # Try to find a CA bundle to validate the SSL cert,
  # prefer Mozilla::CA or fallback to a system file
  sub _find_CA_file {
      my $self = shift();
  
      my $ca_file =
        defined( $self->{SSL_options}->{SSL_ca_file} )
        ? $self->{SSL_options}->{SSL_ca_file}
        : $ENV{SSL_CERT_FILE};
  
      if ( defined $ca_file ) {
          unless ( -r $ca_file ) {
              die qq/SSL_ca_file '$ca_file' not found or not readable\n/;
          }
          return $ca_file;
      }
  
      local @INC = @INC;
      pop @INC if $INC[-1] eq '.';
      return Mozilla::CA::SSL_ca_file()
          if eval { require Mozilla::CA; 1 };
  
      # cert list copied from golang src/crypto/x509/root_unix.go
      foreach my $ca_bundle (
          "/etc/ssl/certs/ca-certificates.crt",     # Debian/Ubuntu/Gentoo etc.
          "/etc/pki/tls/certs/ca-bundle.crt",       # Fedora/RHEL
          "/etc/ssl/ca-bundle.pem",                 # OpenSUSE
          "/etc/openssl/certs/ca-certificates.crt", # NetBSD
          "/etc/ssl/cert.pem",                      # OpenBSD
          "/usr/local/share/certs/ca-root-nss.crt", # FreeBSD/DragonFly
          "/etc/pki/tls/cacert.pem",                # OpenELEC
          "/etc/certs/ca-certificates.crt",         # Solaris 11.2+
      ) {
          return $ca_bundle if -e $ca_bundle;
      }
  
      die qq/Couldn't find a CA bundle with which to verify the SSL certificate.\n/
        . qq/Try installing Mozilla::CA from CPAN\n/;
  }
  
  # for thread safety, we need to know thread id if threads are loaded
  sub _get_tid {
      no warnings 'reserved'; # for 'threads'
      return threads->can("tid") ? threads->tid : 0;
  }
  
  sub _ssl_args {
      my ($self, $host) = @_;
  
      my %ssl_args;
  
      # This test reimplements IO::Socket::SSL::can_client_sni(), which wasn't
      # added until IO::Socket::SSL 1.84
      if ( Net::SSLeay::OPENSSL_VERSION_NUMBER() >= 0x01000000 ) {
          $ssl_args{SSL_hostname} = $host,          # Sane SNI support
      }
  
      if ($self->{verify_SSL}) {
          $ssl_args{SSL_verifycn_scheme}  = 'http'; # enable CN validation
          $ssl_args{SSL_verifycn_name}    = $host;  # set validation hostname
          $ssl_args{SSL_verify_mode}      = 0x01;   # enable cert validation
          $ssl_args{SSL_ca_file}          = $self->_find_CA_file;
      }
      else {
          $ssl_args{SSL_verifycn_scheme}  = 'none'; # disable CN validation
          $ssl_args{SSL_verify_mode}      = 0x00;   # disable cert validation
      }
  
      # user options override settings from verify_SSL
      for my $k ( keys %{$self->{SSL_options}} ) {
          $ssl_args{$k} = $self->{SSL_options}{$k} if $k =~ m/^SSL_/;
      }
  
      return \%ssl_args;
  }
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  HTTP::Tiny - A small, simple, correct HTTP/1.1 client
  
  =head1 VERSION
  
  version 0.070
  
  =head1 SYNOPSIS
  
      use HTTP::Tiny;
  
      my $response = HTTP::Tiny->new->get('http://example.com/');
  
      die "Failed!\n" unless $response->{success};
  
      print "$response->{status} $response->{reason}\n";
  
      while (my ($k, $v) = each %{$response->{headers}}) {
          for (ref $v eq 'ARRAY' ? @$v : $v) {
              print "$k: $_\n";
          }
      }
  
      print $response->{content} if length $response->{content};
  
  =head1 DESCRIPTION
  
  This is a very simple HTTP/1.1 client, designed for doing simple
  requests without the overhead of a large framework like L<LWP::UserAgent>.
  
  It is more correct and more complete than L<HTTP::Lite>.  It supports
  proxies and redirection.  It also correctly resumes after EINTR.
  
  If L<IO::Socket::IP> 0.25 or later is installed, HTTP::Tiny will use it instead
  of L<IO::Socket::INET> for transparent support for both IPv4 and IPv6.
  
  Cookie support requires L<HTTP::CookieJar> or an equivalent class.
  
  =head1 METHODS
  
  =head2 new
  
      $http = HTTP::Tiny->new( %attributes );
  
  This constructor returns a new HTTP::Tiny object.  Valid attributes include:
  
  =over 4
  
  =item *
  
  C<agent> — A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If C<agent> — ends in a space character, the default user-agent string is appended.
  
  =item *
  
  C<cookie_jar> — An instance of L<HTTP::CookieJar> — or equivalent class that supports the C<add> and C<cookie_header> methods
  
  =item *
  
  C<default_headers> — A hashref of default headers to apply to requests
  
  =item *
  
  C<local_address> — The local IP address to bind to
  
  =item *
  
  C<keep_alive> — Whether to reuse the last connection (if for the same scheme, host and port) (defaults to 1)
  
  =item *
  
  C<max_redirect> — Maximum number of redirects allowed (defaults to 5)
  
  =item *
  
  C<max_size> — Maximum response size in bytes (only when not using a data callback).  If defined, responses larger than this will return an exception.
  
  =item *
  
  C<http_proxy> — URL of a proxy server to use for HTTP connections (default is C<$ENV{http_proxy}> — if set)
  
  =item *
  
  C<https_proxy> — URL of a proxy server to use for HTTPS connections (default is C<$ENV{https_proxy}> — if set)
  
  =item *
  
  C<proxy> — URL of a generic proxy server for both HTTP and HTTPS connections (default is C<$ENV{all_proxy}> — if set)
  
  =item *
  
  C<no_proxy> — List of domain suffixes that should not be proxied.  Must be a comma-separated string or an array reference. (default is C<$ENV{no_proxy}> —)
  
  =item *
  
  C<timeout> — Request timeout in seconds (default is 60) If a socket open, read or write takes longer than the timeout, an exception is thrown.
  
  =item *
  
  C<verify_SSL> — A boolean that indicates whether to validate the SSL certificate of an C<https> — connection (default is false)
  
  =item *
  
  C<SSL_options> — A hashref of C<SSL_*> — options to pass through to L<IO::Socket::SSL>
  
  =back
  
  Passing an explicit C<undef> for C<proxy>, C<http_proxy> or C<https_proxy> will
  prevent getting the corresponding proxies from the environment.
  
  Exceptions from C<max_size>, C<timeout> or other errors will result in a
  pseudo-HTTP status code of 599 and a reason of "Internal Exception". The
  content field in the response will contain the text of the exception.
  
  The C<keep_alive> parameter enables a persistent connection, but only to a
  single destination scheme, host and port.  Also, if any connection-relevant
  attributes are modified, or if the process ID or thread ID change, the
  persistent connection will be dropped.  If you want persistent connections
  across multiple destinations, use multiple HTTP::Tiny objects.
  
  See L</SSL SUPPORT> for more on the C<verify_SSL> and C<SSL_options> attributes.
  
  =head2 get|head|put|post|delete
  
      $response = $http->get($url);
      $response = $http->get($url, \%options);
      $response = $http->head($url);
  
  These methods are shorthand for calling C<request()> for the given method.  The
  URL must have unsafe characters escaped and international domain names encoded.
  See C<request()> for valid options and a description of the response.
  
  The C<success> field of the response will be true if the status code is 2XX.
  
  =head2 post_form
  
      $response = $http->post_form($url, $form_data);
      $response = $http->post_form($url, $form_data, \%options);
  
  This method executes a C<POST> request and sends the key/value pairs from a
  form data hash or array reference to the given URL with a C<content-type> of
  C<application/x-www-form-urlencoded>.  If data is provided as an array
  reference, the order is preserved; if provided as a hash reference, the terms
  are sorted on key and value for consistency.  See documentation for the
  C<www_form_urlencode> method for details on the encoding.
  
  The URL must have unsafe characters escaped and international domain names
  encoded.  See C<request()> for valid options and a description of the response.
  Any C<content-type> header or content in the options hashref will be ignored.
  
  The C<success> field of the response will be true if the status code is 2XX.
  
  =head2 mirror
  
      $response = $http->mirror($url, $file, \%options)
      if ( $response->{success} ) {
          print "$file is up to date\n";
      }
  
  Executes a C<GET> request for the URL and saves the response body to the file
  name provided.  The URL must have unsafe characters escaped and international
  domain names encoded.  If the file already exists, the request will include an
  C<If-Modified-Since> header with the modification timestamp of the file.  You
  may specify a different C<If-Modified-Since> header yourself in the C<<
  $options->{headers} >> hash.
  
  The C<success> field of the response will be true if the status code is 2XX
  or if the status code is 304 (unmodified).
  
  If the file was modified and the server response includes a properly
  formatted C<Last-Modified> header, the file modification time will
  be updated accordingly.
  
  =head2 request
  
      $response = $http->request($method, $url);
      $response = $http->request($method, $url, \%options);
  
  Executes an HTTP request of the given method type ('GET', 'HEAD', 'POST',
  'PUT', etc.) on the given URL.  The URL must have unsafe characters escaped and
  international domain names encoded.
  
  If the URL includes a "user:password" stanza, they will be used for Basic-style
  authorization headers.  (Authorization headers will not be included in a
  redirected request.) For example:
  
      $http->request('GET', 'http://Aladdin:open sesame@example.com/');
  
  If the "user:password" stanza contains reserved characters, they must
  be percent-escaped:
  
      $http->request('GET', 'http://john%40example.com:password@example.com/');
  
  A hashref of options may be appended to modify the request.
  
  Valid options are:
  
  =over 4
  
  =item *
  
  C<headers> — A hashref containing headers to include with the request.  If the value for a header is an array reference, the header will be output multiple times with each value in the array.  These headers over-write any default headers.
  
  =item *
  
  C<content> — A scalar to include as the body of the request OR a code reference that will be called iteratively to produce the body of the request
  
  =item *
  
  C<trailer_callback> — A code reference that will be called if it exists to provide a hashref of trailing headers (only used with chunked transfer-encoding)
  
  =item *
  
  C<data_callback> — A code reference that will be called for each chunks of the response body received.
  
  =item *
  
  C<peer> — Override host resolution and force all connections to go only to a specific peer address, regardless of the URL of the request.  This will include any redirections!  This options should be used with extreme caution (e.g. debugging or very special circumstances).
  
  =back
  
  The C<Host> header is generated from the URL in accordance with RFC 2616.  It
  is a fatal error to specify C<Host> in the C<headers> option.  Other headers
  may be ignored or overwritten if necessary for transport compliance.
  
  If the C<content> option is a code reference, it will be called iteratively
  to provide the content body of the request.  It should return the empty
  string or undef when the iterator is exhausted.
  
  If the C<content> option is the empty string, no C<content-type> or
  C<content-length> headers will be generated.
  
  If the C<data_callback> option is provided, it will be called iteratively until
  the entire response body is received.  The first argument will be a string
  containing a chunk of the response body, the second argument will be the
  in-progress response hash reference, as described below.  (This allows
  customizing the action of the callback based on the C<status> or C<headers>
  received prior to the content body.)
  
  The C<request> method returns a hashref containing the response.  The hashref
  will have the following keys:
  
  =over 4
  
  =item *
  
  C<success> — Boolean indicating whether the operation returned a 2XX status code
  
  =item *
  
  C<url> — URL that provided the response. This is the URL of the request unless there were redirections, in which case it is the last URL queried in a redirection chain
  
  =item *
  
  C<status> — The HTTP status code of the response
  
  =item *
  
  C<reason> — The response phrase returned by the server
  
  =item *
  
  C<content> — The body of the response.  If the response does not have any content or if a data callback is provided to consume the response body, this will be the empty string
  
  =item *
  
  C<headers> — A hashref of header fields.  All header field names will be normalized to be lower case. If a header is repeated, the value will be an arrayref; it will otherwise be a scalar string containing the value
  
  =item *
  
  C<redirects> If this field exists, it is an arrayref of response hash references from redirects in the same order that redirections occurred.  If it does not exist, then no redirections occurred.
  
  =back
  
  On an exception during the execution of the request, the C<status> field will
  contain 599, and the C<content> field will contain the text of the exception.
  
  =head2 www_form_urlencode
  
      $params = $http->www_form_urlencode( $data );
      $response = $http->get("http://example.com/query?$params");
  
  This method converts the key/value pairs from a data hash or array reference
  into a C<x-www-form-urlencoded> string.  The keys and values from the data
  reference will be UTF-8 encoded and escaped per RFC 3986.  If a value is an
  array reference, the key will be repeated with each of the values of the array
  reference.  If data is provided as a hash reference, the key/value pairs in the
  resulting string will be sorted by key and value for consistent ordering.
  
  =head2 can_ssl
  
      $ok         = HTTP::Tiny->can_ssl;
      ($ok, $why) = HTTP::Tiny->can_ssl;
      ($ok, $why) = $http->can_ssl;
  
  Indicates if SSL support is available.  When called as a class object, it
  checks for the correct version of L<Net::SSLeay> and L<IO::Socket::SSL>.
  When called as an object methods, if C<SSL_verify> is true or if C<SSL_verify_mode>
  is set in C<SSL_options>, it checks that a CA file is available.
  
  In scalar context, returns a boolean indicating if SSL is available.
  In list context, returns the boolean and a (possibly multi-line) string of
  errors indicating why SSL isn't available.
  
  =head2 connected
  
      $host = $http->connected;
      ($host, $port) = $http->connected;
  
  Indicates if a connection to a peer is being kept alive, per the C<keep_alive>
  option.
  
  In scalar context, returns the peer host and port, joined with a colon, or
  C<undef> (if no peer is connected).
  In list context, returns the peer host and port or an empty list (if no peer
  is connected).
  
  B<Note>: This method cannot reliably be used to discover whether the remote
  host has closed its end of the socket.
  
  =for Pod::Coverage SSL_options
  agent
  cookie_jar
  default_headers
  http_proxy
  https_proxy
  keep_alive
  local_address
  max_redirect
  max_size
  no_proxy
  proxy
  timeout
  verify_SSL
  
  =head1 SSL SUPPORT
  
  Direct C<https> connections are supported only if L<IO::Socket::SSL> 1.56 or
  greater and L<Net::SSLeay> 1.49 or greater are installed. An exception will be
  thrown if new enough versions of these modules are not installed or if the SSL
  encryption fails. You can also use C<HTTP::Tiny::can_ssl()> utility function
  that returns boolean to see if the required modules are installed.
  
  An C<https> connection may be made via an C<http> proxy that supports the CONNECT
  command (i.e. RFC 2817).  You may not proxy C<https> via a proxy that itself
  requires C<https> to communicate.
  
  SSL provides two distinct capabilities:
  
  =over 4
  
  =item *
  
  Encrypted communication channel
  
  =item *
  
  Verification of server identity
  
  =back
  
  B<By default, HTTP::Tiny does not verify server identity>.
  
  Server identity verification is controversial and potentially tricky because it
  depends on a (usually paid) third-party Certificate Authority (CA) trust model
  to validate a certificate as legitimate.  This discriminates against servers
  with self-signed certificates or certificates signed by free, community-driven
  CA's such as L<CAcert.org|http://cacert.org>.
  
  By default, HTTP::Tiny does not make any assumptions about your trust model,
  threat level or risk tolerance.  It just aims to give you an encrypted channel
  when you need one.
  
  Setting the C<verify_SSL> attribute to a true value will make HTTP::Tiny verify
  that an SSL connection has a valid SSL certificate corresponding to the host
  name of the connection and that the SSL certificate has been verified by a CA.
  Assuming you trust the CA, this will protect against a L<man-in-the-middle
  attack|http://en.wikipedia.org/wiki/Man-in-the-middle_attack>.  If you are
  concerned about security, you should enable this option.
  
  Certificate verification requires a file containing trusted CA certificates.
  
  If the environment variable C<SSL_CERT_FILE> is present, HTTP::Tiny
  will try to find a CA certificate file in that location.
  
  If the L<Mozilla::CA> module is installed, HTTP::Tiny will use the CA file
  included with it as a source of trusted CA's.  (This means you trust Mozilla,
  the author of Mozilla::CA, the CPAN mirror where you got Mozilla::CA, the
  toolchain used to install it, and your operating system security, right?)
  
  If that module is not available, then HTTP::Tiny will search several
  system-specific default locations for a CA certificate file:
  
  =over 4
  
  =item *
  
  /etc/ssl/certs/ca-certificates.crt
  
  =item *
  
  /etc/pki/tls/certs/ca-bundle.crt
  
  =item *
  
  /etc/ssl/ca-bundle.pem
  
  =back
  
  An exception will be raised if C<verify_SSL> is true and no CA certificate file
  is available.
  
  If you desire complete control over SSL connections, the C<SSL_options> attribute
  lets you provide a hash reference that will be passed through to
  C<IO::Socket::SSL::start_SSL()>, overriding any options set by HTTP::Tiny. For
  example, to provide your own trusted CA file:
  
      SSL_options => {
          SSL_ca_file => $file_path,
      }
  
  The C<SSL_options> attribute could also be used for such things as providing a
  client certificate for authentication to a server or controlling the choice of
  cipher used for the SSL connection. See L<IO::Socket::SSL> documentation for
  details.
  
  =head1 PROXY SUPPORT
  
  HTTP::Tiny can proxy both C<http> and C<https> requests.  Only Basic proxy
  authorization is supported and it must be provided as part of the proxy URL:
  C<http://user:pass@proxy.example.com/>.
  
  HTTP::Tiny supports the following proxy environment variables:
  
  =over 4
  
  =item *
  
  http_proxy or HTTP_PROXY
  
  =item *
  
  https_proxy or HTTPS_PROXY
  
  =item *
  
  all_proxy or ALL_PROXY
  
  =back
  
  If the C<REQUEST_METHOD> environment variable is set, then this might be a CGI
  process and C<HTTP_PROXY> would be set from the C<Proxy:> header, which is a
  security risk.  If C<REQUEST_METHOD> is set, C<HTTP_PROXY> (the upper case
  variant only) is ignored.
  
  Tunnelling C<https> over an C<http> proxy using the CONNECT method is
  supported.  If your proxy uses C<https> itself, you can not tunnel C<https>
  over it.
  
  Be warned that proxying an C<https> connection opens you to the risk of a
  man-in-the-middle attack by the proxy server.
  
  The C<no_proxy> environment variable is supported in the format of a
  comma-separated list of domain extensions proxy should not be used for.
  
  Proxy arguments passed to C<new> will override their corresponding
  environment variables.
  
  =head1 LIMITATIONS
  
  HTTP::Tiny is I<conditionally compliant> with the
  L<HTTP/1.1 specifications|http://www.w3.org/Protocols/>:
  
  =over 4
  
  =item *
  
  "Message Syntax and Routing" [RFC7230]
  
  =item *
  
  "Semantics and Content" [RFC7231]
  
  =item *
  
  "Conditional Requests" [RFC7232]
  
  =item *
  
  "Range Requests" [RFC7233]
  
  =item *
  
  "Caching" [RFC7234]
  
  =item *
  
  "Authentication" [RFC7235]
  
  =back
  
  It attempts to meet all "MUST" requirements of the specification, but does not
  implement all "SHOULD" requirements.  (Note: it was developed against the
  earlier RFC 2616 specification and may not yet meet the revised RFC 7230-7235
  spec.)
  
  Some particular limitations of note include:
  
  =over
  
  =item *
  
  HTTP::Tiny focuses on correct transport.  Users are responsible for ensuring
  that user-defined headers and content are compliant with the HTTP/1.1
  specification.
  
  =item *
  
  Users must ensure that URLs are properly escaped for unsafe characters and that
  international domain names are properly encoded to ASCII. See L<URI::Escape>,
  L<URI::_punycode> and L<Net::IDN::Encode>.
  
  =item *
  
  Redirection is very strict against the specification.  Redirection is only
  automatic for response codes 301, 302, 307 and 308 if the request method is
  'GET' or 'HEAD'.  Response code 303 is always converted into a 'GET'
  redirection, as mandated by the specification.  There is no automatic support
  for status 305 ("Use proxy") redirections.
  
  =item *
  
  There is no provision for delaying a request body using an C<Expect> header.
  Unexpected C<1XX> responses are silently ignored as per the specification.
  
  =item *
  
  Only 'chunked' C<Transfer-Encoding> is supported.
  
  =item *
  
  There is no support for a Request-URI of '*' for the 'OPTIONS' request.
  
  =item *
  
  Headers mentioned in the RFCs and some other, well-known headers are
  generated with their canonical case.  Other headers are sent in the
  case provided by the user.  Except for control headers (which are sent first),
  headers are sent in arbitrary order.
  
  =back
  
  Despite the limitations listed above, HTTP::Tiny is considered
  feature-complete.  New feature requests should be directed to
  L<HTTP::Tiny::UA>.
  
  =head1 SEE ALSO
  
  =over 4
  
  =item *
  
  L<HTTP::Tiny::UA> - Higher level UA features for HTTP::Tiny
  
  =item *
  
  L<HTTP::Thin> - HTTP::Tiny wrapper with L<HTTP::Request>/L<HTTP::Response> compatibility
  
  =item *
  
  L<HTTP::Tiny::Mech> - Wrap L<WWW::Mechanize> instance in HTTP::Tiny compatible interface
  
  =item *
  
  L<IO::Socket::IP> - Required for IPv6 support
  
  =item *
  
  L<IO::Socket::SSL> - Required for SSL support
  
  =item *
  
  L<LWP::UserAgent> - If HTTP::Tiny isn't enough for you, this is the "standard" way to do things
  
  =item *
  
  L<Mozilla::CA> - Required if you want to validate SSL certificates
  
  =item *
  
  L<Net::SSLeay> - Required for SSL support
  
  =back
  
  =for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan
  
  =head1 SUPPORT
  
  =head2 Bugs / Feature Requests
  
  Please report any bugs or feature requests through the issue tracker
  at L<https://github.com/chansen/p5-http-tiny/issues>.
  You will be notified automatically of any progress on your issue.
  
  =head2 Source Code
  
  This is open source software.  The code repository is available for
  public review and contribution under the terms of the license.
  
  L<https://github.com/chansen/p5-http-tiny>
  
    git clone https://github.com/chansen/p5-http-tiny.git
  
  =head1 AUTHORS
  
  =over 4
  
  =item *
  
  Christian Hansen <chansen@cpan.org>
  
  =item *
  
  David Golden <dagolden@cpan.org>
  
  =back
  
  =head1 CONTRIBUTORS
  
  =for stopwords Alan Gardner Alessandro Ghedini A. Sinan Unur Brad Gilbert brian m. carlson Chris Nehren Weyl Claes Jakobsson Clinton Gormley Craig Berry David Golden Dean Pearce Edward Zborowski James Raspass Jeremy Mates Jess Robinson Karen Etheridge Lukas Eklund Martin J. Evans Martin-Louis Bright Mike Doherty Nicolas Rochelemagne Olaf Alders Olivier Mengué Petr Písař SkyMarshal Sören Kornetzki Steve Grazzini Syohei YOSHIDA Tatsuhiko Miyagawa Tom Hukins Tony Cook
  
  =over 4
  
  =item *
  
  Alan Gardner <gardner@pythian.com>
  
  =item *
  
  Alessandro Ghedini <al3xbio@gmail.com>
  
  =item *
  
  A. Sinan Unur <nanis@cpan.org>
  
  =item *
  
  Brad Gilbert <bgills@cpan.org>
  
  =item *
  
  brian m. carlson <sandals@crustytoothpaste.net>
  
  =item *
  
  Chris Nehren <apeiron@cpan.org>
  
  =item *
  
  Chris Weyl <cweyl@alumni.drew.edu>
  
  =item *
  
  Claes Jakobsson <claes@surfar.nu>
  
  =item *
  
  Clinton Gormley <clint@traveljury.com>
  
  =item *
  
  Craig A. Berry <craigberry@mac.com>
  
  =item *
  
  David Golden <xdg@xdg.me>
  
  =item *
  
  Dean Pearce <pearce@pythian.com>
  
  =item *
  
  Edward Zborowski <ed@rubensteintech.com>
  
  =item *
  
  James Raspass <jraspass@gmail.com>
  
  =item *
  
  Jeremy Mates <jmates@cpan.org>
  
  =item *
  
  Jess Robinson <castaway@desert-island.me.uk>
  
  =item *
  
  Karen Etheridge <ether@cpan.org>
  
  =item *
  
  Lukas Eklund <leklund@gmail.com>
  
  =item *
  
  Martin J. Evans <mjegh@ntlworld.com>
  
  =item *
  
  Martin-Louis Bright <mlbright@gmail.com>
  
  =item *
  
  Mike Doherty <doherty@cpan.org>
  
  =item *
  
  Nicolas Rochelemagne <rochelemagne@cpanel.net>
  
  =item *
  
  Olaf Alders <olaf@wundersolutions.com>
  
  =item *
  
  Olivier Mengué <dolmen@cpan.org>
  
  =item *
  
  Petr Písař <ppisar@redhat.com>
  
  =item *
  
  SkyMarshal <skymarshal1729@gmail.com>
  
  =item *
  
  Sören Kornetzki <soeren.kornetzki@delti.com>
  
  =item *
  
  Steve Grazzini <steve.grazzini@grantstreet.com>
  
  =item *
  
  Syohei YOSHIDA <syohex@gmail.com>
  
  =item *
  
  Tatsuhiko Miyagawa <miyagawa@bulknews.net>
  
  =item *
  
  Tom Hukins <tom@eborcom.com>
  
  =item *
  
  Tony Cook <tony@develop-help.com>
  
  =back
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2016 by Christian Hansen.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
HTTP_TINY

$fatpacked{"IPC/System/Simple.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'IPC_SYSTEM_SIMPLE';
  package IPC::System::Simple;
  
  # ABSTRACT: Run commands simply, with detailed diagnostics
  
  use 5.006;
  use strict;
  use warnings;
  use re 'taint';
  use Carp;
  use List::Util qw(first);
  use Scalar::Util qw(tainted);
  use Config;
  use constant WINDOWS => ($^O eq 'MSWin32');
  use constant VMS     => ($^O eq 'VMS');
  
  BEGIN {
  
      # It would be lovely to use the 'if' module here, but it didn't
      # enter core until 5.6.2, and we want to keep 5.6.0 compatibility.
  
  
      if (WINDOWS) {
  
          ## no critic (ProhibitStringyEval)
  
          eval q{
              use Win32::Process qw(INFINITE NORMAL_PRIORITY_CLASS);
              use File::Spec;
              use Win32;
  
              # This uses the same rules as the core win32.c/get_shell() call.
  
              use constant WINDOWS_SHELL => eval { Win32::IsWinNT() }
                                              ? [ qw(cmd.exe /x/d/c) ]
                                              : [ qw(command.com /c) ];
  
              # These are used when invoking _win32_capture
              use constant NO_SHELL  => 0;
              use constant USE_SHELL => 1;
  
          };
  
          ## use critic
  
          # Die nosily if any of the above broke.
          die $@ if $@;
      }
  }
  
  # Note that we don't use WIFSTOPPED because perl never uses
  # the WUNTRACED flag, and hence will never return early from
  # system() if the child processes is suspended with a SIGSTOP.
  
  use POSIX qw(WIFEXITED WEXITSTATUS WIFSIGNALED WTERMSIG);
  
  use constant FAIL_START     => q{"%s" failed to start: "%s"};
  use constant FAIL_PLUMBING  => q{Error in IPC::System::Simple plumbing: "%s" - "%s"};
  use constant FAIL_CMD_BLANK => q{Entirely blank command passed: "%s"};
  use constant FAIL_INTERNAL  => q{Internal error in IPC::System::Simple: "%s"};
  use constant FAIL_TAINT     => q{%s called with tainted argument "%s"};
  use constant FAIL_TAINT_ENV => q{%s called with tainted environment $ENV{%s}};
  use constant FAIL_SIGNAL    => q{"%s" died to signal "%s" (%d)%s};
  use constant FAIL_BADEXIT   => q{"%s" unexpectedly returned exit value %d};
  
  use constant FAIL_UNDEF     => q{%s called with undefined command};
  
  use constant FAIL_POSIX     => q{IPC::System::Simple does not understand the POSIX error '%s'.  Please check http://search.cpan.org/perldoc?IPC::System::Simple to see if there is an updated version.  If not please report this as a bug to http://rt.cpan.org/Public/Bug/Report.html?Queue=IPC-System-Simple};
  
  # On Perl's older than 5.8.x we can't assume that there'll be a
  # $^{TAINT} for us to check, so we assume that our args may always
  # be tainted.
  use constant ASSUME_TAINTED => ($] < 5.008);
  
  use constant EXIT_ANY_CONST => -1;			# Used internally
  use constant EXIT_ANY       => [ EXIT_ANY_CONST ];	# Exported
  
  use constant UNDEFINED_POSIX_RE => qr{not (?:defined|a valid) POSIX macro|not implemented on this architecture};
  
  require Exporter;
  our @ISA = qw(Exporter);
  
  our @EXPORT_OK = qw( 
      capture  capturex
      run      runx
      system   systemx
      $EXITVAL EXIT_ANY
  );
  
  our $VERSION = '1.25'; # VERSION : From dzil
  our $EXITVAL = -1;
  
  my @Signal_from_number = split(' ', $Config{sig_name});
  
  # Environment variables we don't want to see tainted.
  my @Check_tainted_env = qw(PATH IFS CDPATH ENV BASH_ENV);
  if (WINDOWS) {
  	push(@Check_tainted_env, 'PERL5SHELL');
  }
  if (VMS) {
  	push(@Check_tainted_env, 'DCL$PATH');
  }
  
  # Not all systems implement the WIFEXITED calls, but POSIX
  # will always export them (even if they're just stubs that
  # die with an error).  Test for the presence of a working
  # WIFEXITED and friends, or define our own.
  
  eval { WIFEXITED(0); };
  
  if ($@ =~ UNDEFINED_POSIX_RE) {
          no warnings 'redefine';  ## no critic
  	*WIFEXITED   = sub { not $_[0] & 0xff };
  	*WEXITSTATUS = sub { $_[0] >> 8  };
  	*WIFSIGNALED = sub { $_[0] & 127 };
  	*WTERMSIG    = sub { $_[0] & 127 };
  } elsif ($@) {
  	croak sprintf FAIL_POSIX, $@;
  }
  
  # None of the POSIX modules I've found define WCOREDUMP, although
  # many systems define it.  Check the POSIX module in the hope that
  # it may actually be there.
  
  
  # TODO: Ideally, $NATIVE_WCOREDUMP should be a constant.
  
  my $NATIVE_WCOREDUMP;
  
  eval { POSIX::WCOREDUMP(1); };
  
  if ($@ =~ UNDEFINED_POSIX_RE) {
  	*WCOREDUMP = sub { $_[0] & 128 };
          $NATIVE_WCOREDUMP = 0;
  } elsif ($@) {
  	croak sprintf FAIL_POSIX, $@;
  } else {
  	# POSIX actually has it defined!  Huzzah!
  	*WCOREDUMP = \&POSIX::WCOREDUMP;
          $NATIVE_WCOREDUMP = 1;
  }
  
  sub _native_wcoredump {
      return $NATIVE_WCOREDUMP;
  }
  
  # system simply calls run
  
  *system  = \&run;
  *systemx = \&runx;
  
  # run is our way of running a process with system() semantics
  
  sub run {
  
  	_check_taint(@_);
  
  	my ($valid_returns, $command, @args) = _process_args(@_);
  
          # If we have arguments, we really want to call systemx,
          # so we do so.
  
  	if (@args) {
                  return systemx($valid_returns, $command, @args);
  	}
  
          # Without arguments, we're calling system, and checking
          # the results.
  
  	# We're throwing our own exception on command not found, so
  	# we don't need a warning from Perl.
  
          {
              # silence 'Statement unlikely to be reached' warning
              no warnings 'exec';             ## no critic
              CORE::system($command,@args);
          }
  
  	return _process_child_error($?,$command,$valid_returns);
  }
  
  # runx is just like system/run, but *never* invokes the shell.
  
  sub runx {
      _check_taint(@_);
  
      my ($valid_returns, $command, @args) = _process_args(@_);
  
      if (WINDOWS) {
          our $EXITVAL = -1;
  
          my $pid = _spawn_or_die($command, "$command @args");
  
          $pid->Wait(INFINITE);	# Wait for process exit.
          $pid->GetExitCode($EXITVAL);
          return _check_exit($command,$EXITVAL,$valid_returns);
      }
  
      # If system() fails, we throw our own exception.  We don't
      # need to have perl complain about it too.
  
      no warnings; ## no critic
  
      CORE::system { $command } $command, @args;
  
      return _process_child_error($?, $command, $valid_returns);
  }
  
  # capture is our way of running a process with backticks/qx semantics
  
  sub capture {
  	_check_taint(@_);
  
  	my ($valid_returns, $command, @args) = _process_args(@_);
  
          if (@args) {
              return capturex($valid_returns, $command, @args);
          }
  
          if (WINDOWS) {
              # USE_SHELL really means "You may use the shell if you need it."
              return _win32_capture(USE_SHELL, $valid_returns, $command, @args);
          }
  
  	our $EXITVAL = -1;
  
  	my $wantarray = wantarray();
  
  	# We'll produce our own warnings on failure to execute.
  	no warnings 'exec';	## no critic
  
          if ($wantarray) {
                  my @results = qx($command);
                  _process_child_error($?,$command,$valid_returns);
                  return @results;
          } 
  
          my $results = qx($command);
          _process_child_error($?,$command,$valid_returns);
          return $results;
  }
  
  # _win32_capture implements the capture and capurex commands on Win32.
  # We need to wrap the whole internals of this sub into
  # an if (WINDOWS) block to avoid it being compiled on non-Win32 systems.
  
  sub _win32_capture {
      if (not WINDOWS) {
          croak sprintf(FAIL_INTERNAL, "_win32_capture called when not under Win32");
      } else {
  
          my ($use_shell, $valid_returns, $command, @args) = @_;
  
          my $wantarray = wantarray();
  
          # Perl doesn't support multi-arg open under
          # Windows.  Perl also doesn't provide very good
          # feedback when normal backtails fail, either;
          # it returns exit status from the shell
          # (which is indistinguishable from the command
          # running and producing the same exit status).
  
          # As such, we essentially have to write our own
          # backticks.
  
          # We start by dup'ing STDOUT.
  
          open(my $saved_stdout, '>&', \*STDOUT)  ## no critic
                  or croak sprintf(FAIL_PLUMBING, "Can't dup STDOUT", $!);
  
          # We now open up a pipe that will allow us to	
          # communicate with the new process.
  
          pipe(my ($read_fh, $write_fh))
                  or croak sprintf(FAIL_PLUMBING, "Can't create pipe", $!);
  
          # Allow CRLF sequences to become "\n", since
          # this is what Perl backticks do.
  
          binmode($read_fh, ':crlf');
  
          # Now we re-open our STDOUT to $write_fh...
  
          open(STDOUT, '>&', $write_fh)  ## no critic
                  or croak sprintf(FAIL_PLUMBING, "Can't redirect STDOUT", $!);
  
          # If we have args, or we're told not to use the shell, then
          # we treat $command as our shell.  Otherwise we grub around
          # in our command to look for a command to run.
          #
          # Note that we don't actually *use* the shell (although in
          # a future version we might).  Being told not to use the shell
          # (capturex) means we treat our command as really being a command,
          # and not a command line.
  
          my $exe =   @args                      ? $command :
                      (! $use_shell)             ? $command :
                      $command =~ m{^"([^"]+)"}x ? $1       :
                      $command =~ m{(\S+)     }x ? $1       :
                      croak sprintf(FAIL_CMD_BLANK, $command);
  
          # And now we spawn our new process with inherited
          # filehandles.
  
          my $err;
          my $pid = eval { 
                  _spawn_or_die($exe, "$command @args"); 
          }
          or do {
                  $err = $@;
          };
  
          # Regardless of whether our command ran, we must restore STDOUT.
          # RT #48319
          open(STDOUT, '>&', $saved_stdout)  ## no critic
                  or croak sprintf(FAIL_PLUMBING,"Can't restore STDOUT", $!);
  
          # And now, if there was an actual error , propagate it.
          die $err if defined $err;   # If there's an error from _spawn_or_die
  
          # Clean-up the filehandles we no longer need...
  
          close($write_fh)
                  or croak sprintf(FAIL_PLUMBING,q{Can't close write end of pipe}, $!);
          close($saved_stdout)
                  or croak sprintf(FAIL_PLUMBING,q{Can't close saved STDOUT}, $!);
  
          # Read the data from our child...
  
          my (@results, $result);
  
          if ($wantarray) {
                  @results = <$read_fh>;
          } else {
                  $result = join("",<$read_fh>);
          }
  
          # Tidy up our windows process and we're done!
  
          $pid->Wait(INFINITE);	# Wait for process exit.
          $pid->GetExitCode($EXITVAL);
  
          _check_exit($command,$EXITVAL,$valid_returns);
  
          return $wantarray ? @results : $result;
  
      }
  }
  
  # capturex() is just like backticks/qx, but never invokes the shell.
  
  sub capturex {
  	_check_taint(@_);
  
  	my ($valid_returns, $command, @args) = _process_args(@_);
  
  	our $EXITVAL = -1;
  
  	my $wantarray = wantarray();
  
  	if (WINDOWS) {
              return _win32_capture(NO_SHELL, $valid_returns, $command, @args);
          }
  
  	# We can't use a multi-arg piped open here, since 5.6.x
  	# doesn't like them.  Instead we emulate what 5.8.x does,
  	# which is to create a pipe(), set the close-on-exec flag
  	# on the child, and the fork/exec.  If the exec fails, the
  	# child writes to the pipe.  If the exec succeeds, then
  	# the pipe closes without data.
  
  	pipe(my ($read_fh, $write_fh))
  		or croak sprintf(FAIL_PLUMBING, "Can't create pipe", $!);
  
  	# This next line also does an implicit fork.
  	my $pid = open(my $pipe, '-|');	 ## no critic
  
  	if (not defined $pid) {
  		croak sprintf(FAIL_START, $command, $!);
  	} elsif (not $pid) {
  		# Child process, execs command.
  
  		close($read_fh);
  
  		# TODO: 'no warnings exec' doesn't get rid
  		# of the 'unlikely to be reached' warnings.
  		# This is a bug in perl / perldiag / perllexwarn / warnings.
  
  		no warnings;   ## no critic
  
  		CORE::exec { $command } $command, @args;
  
  		# Oh no, exec fails!  Send the reason why to
  		# the parent.
  
  		print {$write_fh} int($!);
  		exit(-1);
  	}
  
  	{
  		# In parent process.
  
  		close($write_fh);
  
  		# Parent process, check for child error.
  		my $error = <$read_fh>;
  
  		# Tidy up our pipes.
  		close($read_fh);
  
  		# Check for error.
  		if ($error) {
  			# Setting $! to our child error number gives
  			# us nice looking strings when printed.
  			local $! = $error;
  			croak sprintf(FAIL_START, $command, $!);
  		}
  	}
  
  	# Parent process, we don't care about our pid, but we
  	# do go and read our pipe.
  
  	if ($wantarray) {
  		my @results = <$pipe>;
  		close($pipe);
  		_process_child_error($?,$command,$valid_returns);
  		return @results;
  	}
  
  	# NB: We don't check the return status on close(), since
  	# on failure it sets $?, which we then inspect for more
  	# useful information.
  
  	my $results = join("",<$pipe>);
  	close($pipe);
  	_process_child_error($?,$command,$valid_returns);
  	
  	return $results;
  
  }
  
  # Tries really hard to spawn a process under Windows.  Returns
  # the pid on success, or undef on error.
  
  sub _spawn_or_die {
  
  	# We need to wrap practically the entire sub in an
  	# if block to ensure it doesn't get compiled under non-Win32
  	# systems.  Compiling on these systems would not only be a
  	# waste of time, but also results in complaints about
  	# the NORMAL_PRIORITY_CLASS constant.
  
  	if (not WINDOWS) {
  		croak sprintf(FAIL_INTERNAL, "_spawn_or_die called when not under Win32");
  	} else {
  		my ($orig_exe, $cmdline) = @_;
  		my $pid;
  
  		my $exe = $orig_exe;
  
  		# If our command doesn't have an extension, add one.
  		$exe .= $Config{_exe} if ($exe !~ m{\.});
  
  		Win32::Process::Create(
  			$pid, $exe, $cmdline, 1, NORMAL_PRIORITY_CLASS, "."
  		) and return $pid;
  
  		my @path = split(/;/,$ENV{PATH});
  
  		foreach my $dir (@path) {
  			my $fullpath = File::Spec->catfile($dir,$exe);
  
  			# We're using -x here on the assumption that stat()
  			# is faster than spawn, so trying to spawn a process
  			# for each path element will be unacceptably
  			# inefficient.
  
  			if (-x $fullpath) {
  				Win32::Process::Create(
  					$pid, $fullpath, $cmdline, 1,
  					NORMAL_PRIORITY_CLASS, "."
  				) and return $pid;
  			}
  		}
  
  		croak sprintf(FAIL_START, $orig_exe, $^E);
  	}
  }
  
  # Complain on tainted arguments or environment.
  # ASSUME_TAINTED is true for 5.6.x, since it's missing ${^TAINT}
  
  sub _check_taint {
  	return if not (ASSUME_TAINTED or ${^TAINT});
  	my $caller = (caller(1))[3];
  	foreach my $var (@_) {
  		if (tainted $var) {
  			croak sprintf(FAIL_TAINT, $caller, $var);
  		}
  	}
  	foreach my $var (@Check_tainted_env) {
  		if (tainted $ENV{$var} ) {
  			croak sprintf(FAIL_TAINT_ENV, $caller, $var);
  		}
  	}
  
  	return;
  
  }
  
  # This subroutine performs the difficult task of interpreting
  # $?.  It's not intended to be called directly, as it will
  # croak on errors, and its implementation and interface may
  # change in the future.
  
  sub _process_child_error {
  	my ($child_error, $command, $valid_returns) = @_;
  	
  	$EXITVAL = -1;
  
  	my $coredump = WCOREDUMP($child_error);
  
          # There's a bug in perl 5.10.0 where if the system
          # does not provide a native WCOREDUMP, then $? will
          # never contain coredump information.  This code
          # checks to see if we have the bug, and works around
          # it if needed.
  
          if ($] >= 5.010 and not $NATIVE_WCOREDUMP) {
              $coredump ||= WCOREDUMP( ${^CHILD_ERROR_NATIVE} );
          }
  
  	if ($child_error == -1) {
  		croak sprintf(FAIL_START, $command, $!);
  
  	} elsif ( WIFEXITED( $child_error ) ) {
  		$EXITVAL = WEXITSTATUS( $child_error );
  
  		return _check_exit($command,$EXITVAL,$valid_returns);
  
  	} elsif ( WIFSIGNALED( $child_error ) ) {
  		my $signal_no   = WTERMSIG( $child_error );
  		my $signal_name = $Signal_from_number[$signal_no] || "UNKNOWN";
  
  		croak sprintf FAIL_SIGNAL, $command, $signal_name, $signal_no, ($coredump ? " and dumped core" : "");
  
  
  	} 
  
  	croak sprintf(FAIL_INTERNAL, qq{'$command' ran without exit value or signal});
  
  }
  
  # A simple subroutine for checking exit values.  Results in better
  # assurance of consistent error messages, and better forward support
  # for new features in I::S::S.
  
  sub _check_exit {
  	my ($command, $exitval, $valid_returns) = @_;
  
  	# If we have a single-value list consisting of the EXIT_ANY
  	# value, then we're happy with whatever exit value we're given.
  	if (@$valid_returns == 1 and $valid_returns->[0] == EXIT_ANY_CONST) {
  		return $exitval;
  	}
  
  	if (not defined first { $_ == $exitval } @$valid_returns) {
  		croak sprintf FAIL_BADEXIT, $command, $exitval;
  	}	
  	return $exitval;
  }
  
  
  # This subroutine simply determines a list of valid returns, the command
  # name, and any arguments that we need to pass to it.
  
  sub _process_args {
  	my $valid_returns = [ 0 ];
  	my $caller = (caller(1))[3];
  
  	if (not @_) {
  		croak "$caller called with no arguments";
  	}
  
  	if (ref $_[0] eq "ARRAY") {
  		$valid_returns = shift(@_);
  	}
  
  	if (not @_) {
  		croak "$caller called with no command";
  	}
  
  	my $command = shift(@_);
  
          if (not defined $command) {
                  croak sprintf( FAIL_UNDEF, $caller );
          }
  
  	return ($valid_returns,$command,@_);
  
  }
  
  1;
  
  __END__
  
  =head1 NAME
  
  IPC::System::Simple - Run commands simply, with detailed diagnostics
  
  =head1 SYNOPSIS
  
    use IPC::System::Simple qw(system systemx capture capturex);
  
    system("some_command");        # Command succeeds or dies!
  
    system("some_command",@args);  # Succeeds or dies, avoids shell if @args
  
    systemx("some_command",@args); # Succeeds or dies, NEVER uses the shell
  
  
    # Capture the output of a command (just like backticks). Dies on error.
    my $output = capture("some_command");
  
    # Just like backticks in list context.  Dies on error.
    my @output = capture("some_command");
  
    # As above, but avoids the shell if @args is non-empty
    my $output = capture("some_command", @args);
  
    # As above, but NEVER invokes the shell.
    my $output = capturex("some_command", @args);
    my @output = capturex("some_command", @args);
  
  =head1 DESCRIPTION
  
  Calling Perl's in-built C<system()> function is easy, 
  determining if it was successful is I<hard>.  Let's face it,
  C<$?> isn't the nicest variable in the world to play with, and
  even if you I<do> check it, producing a well-formatted error
  string takes a lot of work.
  
  C<IPC::System::Simple> takes the hard work out of calling 
  external commands.  In fact, if you want to be really lazy,
  you can just write:
  
      use IPC::System::Simple qw(system);
  
  and all of your C<system> commands will either succeed (run to
  completion and return a zero exit value), or die with rich diagnostic
  messages.
  
  The C<IPC::System::Simple> module also provides a simple replacement
  to Perl's backticks operator.  Simply write:
  
      use IPC::System::Simple qw(capture);
  
  and then use the L</capture()> command just like you'd use backticks.
  If there's an error, it will die with a detailed description of what
  went wrong.  Better still, you can even use C<capturex()> to run the
  equivalent of backticks, but without the shell:
  
      use IPC::System::Simple qw(capturex);
  
      my $result = capturex($command, @args);
  
  If you want more power than the basic interface, including the
  ability to specify which exit values are acceptable, trap errors,
  or process diagnostics, then read on!
  
  =head1 ADVANCED SYNOPSIS
  
    use IPC::System::Simple qw(
      capture capturex system systemx run runx $EXITVAL EXIT_ANY
    );
  
    # Run a command, throwing exception on failure
  
    run("some_command");
  
    runx("some_command",@args);  # Run a command, avoiding the shell
  
    # Do the same thing, but with the drop-in system replacement.
  
    system("some_command");
  
    systemx("some_command", @args);
  
    # Run a command which must return 0..5, avoid the shell, and get the
    # exit value (we could also look at $EXITVAL)
  
    my $exit_value = runx([0..5], "some_command", @args);
  
    # The same, but any exit value will do.
  
    my $exit_value = runx(EXIT_ANY, "some_command", @args);
  
    # Capture output into $result and throw exception on failure
  
    my $result = capture("some_command");	
  
    # Check exit value from captured command
  
    print "some_command exited with status $EXITVAL\n";
  
    # Captures into @lines, splitting on $/
    my @lines = capture("some_command"); 
  
    # Run a command which must return 0..5, capture the output into
    # @lines, and avoid the shell.
  
    my @lines  = capturex([0..5], "some_command", @args);
  
  =head1 ADVANCED USAGE
  
  =head2 run() and system()
  
  C<IPC::System::Simple> provides a subroutine called
  C<run>, that executes a command using the same semantics is
  Perl's built-in C<system>:
  
      use IPC::System::Simple qw(run);
  
      run("cat *.txt");           # Execute command via the shell
      run("cat","/etc/motd");     # Execute command without shell
  
  The primary difference between Perl's in-built system and
  the C<run> command is that C<run> will throw an exception on
  failure, and allows a list of acceptable exit values to be set.
  See L</Exit values> for further information.
  
  In fact, you can even have C<IPC::System::Simple> replace the
  default C<system> function for your package so it has the
  same behaviour:
  
      use IPC::System::Simple qw(system);
  
      system("cat *.txt");  # system now suceeds or dies!
  
  C<system> and C<run> are aliases to each other.
  
  See also L</runx(), systemx() and capturex()> for variants of
  C<system()> and C<run()> that never invoke the shell, even with
  a single argument.
  
  =head2 capture()
  
  A second subroutine, named C<capture> executes a command with
  the same semantics as Perl's built-in backticks (and C<qx()>):
  
      use IPC::System::Simple qw(capture);
  
      # Capture text while invoking the shell.
      my $file  = capture("cat /etc/motd");
      my @lines = capture("cat /etc/passwd");
  
  However unlike regular backticks, which always use the shell, C<capture>
  will bypass the shell when called with multiple arguments:
  
      # Capture text while avoiding the shell.
      my $file  = capture("cat", "/etc/motd");
      my @lines = capture("cat", "/etc/passwd");
  
  See also L</runx(), systemx() and capturex()> for a variant of
  C<capture()> that never invokes the shell, even with a single
  argument.
  
  =head2 runx(), systemx() and capturex()
  
  The C<runx()>, C<systemx()> and C<capturex()> commands are identical
  to the multi-argument forms of C<run()>, C<system()> and C<capture()>
  respectively, but I<never> invoke the shell, even when called with a
  single argument.  These forms are particularly useful when a command's
  argument list I<might> be empty, for example:
  
      systemx($cmd, @args);
  
  The use of C<systemx()> here guarantees that the shell will I<never>
  be invoked, even if C<@args> is empty.
  
  =head2 Exception handling
  
  In the case where the command returns an unexpected status, both C<run> and
  C<capture> will throw an exception, which if not caught will terminate your
  program with an error.
  
  Capturing the exception is easy:
  
      eval {
          run("cat *.txt");
      };
  
      if ($@) {
          print "Something went wrong - $@\n";
      }
  
  See the diagnostics section below for more details.
  
  =head3 Exception cases
  
  C<IPC::System::Simple> considers the following to be unexpected,
  and worthy of exception:
  
  =over 4
  
  =item *
  
  Failing to start entirely (eg, command not found, permission denied).
  
  =item *
  
  Returning an exit value other than zero (but see below).
  
  =item *
  
  Being killed by a signal.
  
  =item *
  
  Being passed tainted data (in taint mode).
  
  =back
  
  =head2 Exit values
  
  Traditionally, system commands return a zero status for success and a
  non-zero status for failure.  C<IPC::System::Simple> will default to throwing
  an exception if a non-zero exit value is returned.
  
  You may specify a range of values which are considered acceptable exit
  values by passing an I<array reference> as the first argument.  The
  special constant C<EXIT_ANY> can be used to allow I<any> exit value
  to be returned.
  
  	use IPC::System::Simple qw(run system capture EXIT_ANY);
  
  	run( [0..5], "cat *.txt");             # Exit values 0-5 are OK
  
  	system( [0..5], "cat *.txt");          # This works the same way
  
  	my @lines = capture( EXIT_ANY, "cat *.txt"); # Any exit is fine.
  
  The C<run> and replacement C<system> subroutines returns the exit
  value of the process:
  
  	my $exit_value = run( [0..5], "cat *.txt");
  
  	# OR:
  
  	my $exit_value = system( [0..5] "cat *.txt");
  
  	print "Program exited with value $exit_value\n";
  
  =head3 $EXITVAL
  
  The exit value of any command executed by C<IPC::System::Simple>
  can always be retrieved from the C<$IPC::System::Simple::EXITVAL>
  variable:
  
  This is particularly useful when inspecting results from C<capture>,
  which returns the captured text from the command.
  
  	use IPC::System::Simple qw(capture $EXITVAL EXIT_ANY);
  
  	my @enemies_defeated = capture(EXIT_ANY, "defeat_evil", "/dev/mordor");
  
  	print "Program exited with value $EXITVAL\n";
  
  C<$EXITVAL> will be set to C<-1> if the command did not exit normally (eg,
  being terminated by a signal) or did not start.  In this situation an
  exception will also be thrown.
  
  =head2 WINDOWS-SPECIFIC NOTES
  
  As of C<IPC::System::Simple> v0.06, the C<run> subroutine I<when
  called with multiple arguments> will make available the full 32-bit
  exit value on Win32 systems.  This is different from the
  previous versions of C<IPC::System::Simple> and from Perl's
  in-build C<system()> function, which can only handle 8-bit return values.
  
  The C<capture> subroutine always returns the 32-bit exit value under
  Windows.  The C<capture> subroutine also never uses the shell,
  even when passed a single argument.
  
  Versions of C<IPC::System::Simple> before v0.09 would not search
  the C<PATH> environment variable when the multi-argument form of
  C<run()> was called.  Versions from v0.09 onwards correctly search
  the path provided the command is provided including the extension
  (eg, C<notepad.exe> rather than just C<notepad>, or C<gvim.bat> rather
  than just C<gvim>).  If no extension is provided, C<.exe> is
  assumed.
  
  Signals are not supported on Windows systems.  Sending a signal
  to a Windows process will usually cause it to exit with the signal
  number used.
  
  =head1 DIAGNOSTICS
  
  =over 4
  
  =item "%s" failed to start: "%s"
  
  The command specified did not even start.  It may not exist, or
  you may not have permission to use it.  The reason it could not
  start (as determined from C<$!>) will be provided.
  
  =item "%s" unexpectedly returned exit value %d
  
  The command ran successfully, but returned an exit value we did
  not expect.  The value returned is reported.
  
  =item "%s" died to signal "%s" (%d) %s
  
  The command was killed by a signal.  The name of the signal
  will be reported, or C<UNKNOWN> if it cannot be determined.  The
  signal number is always reported.  If we detected that the
  process dumped core, then the string C<and dumped core> is
  appended.
  
  =item IPC::System::Simple::%s called with no arguments
  
  You attempted to call C<run> or C<capture> but did not provide any
  arguments at all.  At the very lease you need to supply a command
  to run.
  
  =item IPC::System::Simple::%s called with no command
  
  You called C<run> or C<capture> with a list of acceptable exit values,
  but no actual command.
  
  =item IPC::System::Simple::%s called with tainted argument "%s"
  
  You called C<run> or C<capture> with tainted (untrusted) arguments, which is
  almost certainly a bad idea.  To untaint your arguments you'll need to pass
  your data through a regular expression and use the resulting match variables.
  See L<perlsec/Laundering and Detecting Tainted Data> for more information.
  
  =item IPC::System::Simple::%s called with tainted environment $ENV{%s}
  
  You called C<run> or C<capture> but part of your environment was tainted
  (untrusted).  You should either delete the named environment
  variable before calling C<run>, or set it to an untainted value
  (usually one set inside your program).  See
  L<perlsec/Cleaning Up Your Path> for more information.
  
  =item Error in IPC::System::Simple plumbing: "%s" - "%s"
  
  Implementing the C<capture> command involves dark and terrible magicks
  involving pipes, and one of them has sprung a leak.  This could be due to a
  lack of file descriptors, although there are other possibilities.
  
  If you are able to reproduce this error, you are encouraged
  to submit a bug report according to the L</Reporting bugs> section below.
  
  =item Internal error in IPC::System::Simple: "%s"
  
  You've found a bug in C<IPC::System::Simple>.  Please check to
  see if an updated version of C<IPC::System::Simple> is available.
  If not, please file a bug report according to the L</Reporting bugs> section
  below.
  
  =item IPC::System::Simple::%s called with undefined command
  
  You've passed the undefined value as a command to be executed.
  While this is a very Zen-like action, it's not supported by
  Perl's current implementation.
  
  =back
  
  =head1 DEPENDENCIES
  
  This module depends upon L<Win32::Process> when used on Win32
  system.  C<Win32::Process> is bundled as a core module in ActivePerl 5.6
  and above.
  
  There are no non-core dependencies on non-Win32 systems.
  
  =head1 COMPARISON TO OTHER APIs
  
  Perl provides a range of in-built functions for handling external
  commands, and CPAN provides even more.  The C<IPC::System::Simple>
  differentiates itself from other options by providing:
  
  =over 4
  
  =item Extremely detailed diagnostics
  
  The diagnostics produced by C<IPC::System::Simple> are designed
  to provide as much information as possible.  Rather than requiring
  the developer to inspect C<$?>, C<IPC::System::Simple> does the
  hard work for you.
  
  If an odd exit status is provided, you're informed of what it is.  If
  a signal kills your process, you are informed of both its name and
  number.  If tainted data or environment prevents your command from
  running, you are informed of exactly which datais 
  
  =item Exceptions on failure
  
  C<IPC::System::Simple> takes an aggressive approach to error handling.
  Rather than allow commands to fail silently, exceptions are thrown
  when unexpected results are seen.  This allows for easy development
  using a try/catch style, and avoids the possibility of accidently
  continuing after a failed command.
  
  =item Easy access to exit status
  
  The C<run>, C<system> and C<capture> commands all set C<$EXITVAL>,
  making it easy to determine the exit status of a command.
  Additionally, the C<system> and C<run> interfaces return the exit
  status.
  
  =item Consistent interfaces
  
  When called with multiple arguments, the C<run>, C<system> and
  C<capture> interfaces I<never> invoke the shell.  This differs
  from the in-built Perl C<system> command which may invoke the
  shell under Windows when called with multiple arguments.  It
  differs from the in-built Perl backticks operator which always
  invokes the shell.
  
  =back
  
  =head1 BUGS
  
  When C<system> is exported, the exotic form C<system { $cmd } @args>
  is not supported.  Attemping to use the exotic form is a syntax
  error.  This affects the calling package I<only>.  Use C<CORE::system>
  if you need it, or consider using the L<autodie> module to replace
  C<system> with lexical scope.
  
  Core dumps are only checked for when a process dies due to a
  signal.  It is not believed there are any systems where processes
  can dump core without dying to a signal.
  
  C<WIFSTOPPED> status is not checked, as perl never spawns processes
  with the C<WUNTRACED> option.
  
  Signals are not supported under Win32 systems, since they don't
  work at all like Unix signals.  Win32 singals cause commands to
  exit with a given exit value, which this modules I<does> capture.
  
  Only 8-bit values are returned when C<run()> or C<system()> 
  is called with a single value under Win32.  Multi-argument calls
  to C<run()> and C<system()>, as well as the C<runx()> and
  C<systemx()> always return the 32-bit Windows return values.
  
  =head2 Reporting bugs
  
  Before reporting a bug, please check to ensure you are using the
  most recent version of C<IPC::System::Simple>.  Your problem may
  have already been fixed in a new release.
  
  You can find the C<IPC::System::Simple> bug-tracker at
  L<http://rt.cpan.org/Public/Dist/Display.html?Name=IPC-System-Simple> .
  Please check to see if your bug has already been reported; if
  in doubt, report yours anyway.
  
  Submitting a patch and/or failing test case will greatly expedite
  the fixing of bugs.
  
  =head1 FEEDBACK
  
  If you find this module useful, please consider rating it on the
  CPAN Ratings service at
  L<http://cpanratings.perl.org/rate/?distribution=IPC-System-Simple> .
  
  The module author loves to hear how C<IPC::System::Simple> has made
  your life better (or worse).  Feedback can be sent to
  E<lt>pjf@perltraining.com.auE<gt>.
  
  =head1 SEE ALSO
  
  L<autodie> uses C<IPC::System::Simple> to provide succeed-or-die
  replacements to C<system> (and other built-ins) with lexical scope.
  
  L<POSIX>, L<IPC::Run::Simple>, L<perlipc>, L<perlport>, L<IPC::Run>,
  L<IPC::Run3>, L<Win32::Process>
  
  =head1 AUTHOR
  
  Paul Fenwick E<lt>pjf@cpan.orgE<gt>
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright (C) 2006-2008 by Paul Fenwick
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself, either Perl version 5.6.0 or,
  at your option, any later version of Perl 5 you may have available.
  
  =for Pod::Coverage WCOREDUMP
  
  =cut
IPC_SYSTEM_SIMPLE

$fatpacked{"JSON/MaybeXS.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'JSON_MAYBEXS';
  package JSON::MaybeXS;
  
  use strict;
  use warnings FATAL => 'all';
  use base qw(Exporter);
  
  our $VERSION = '1.003009';
  $VERSION = eval $VERSION;
  
  sub _choose_json_module {
      return 'Cpanel::JSON::XS' if $INC{'Cpanel/JSON/XS.pm'};
      return 'JSON::XS'         if $INC{'JSON/XS.pm'};
  
      my @err;
  
      return 'Cpanel::JSON::XS' if eval { require Cpanel::JSON::XS; 1; };
      push @err, "Error loading Cpanel::JSON::XS: $@";
  
      return 'JSON::XS' if eval { require JSON::XS; 1; };
      push @err, "Error loading JSON::XS: $@";
  
      return 'JSON::PP' if eval { require JSON::PP; 1 };
      push @err, "Error loading JSON::PP: $@";
  
      die join( "\n", "Couldn't load a JSON module:", @err );
  
  }
  
  BEGIN {
      our $JSON_Class = _choose_json_module();
      $JSON_Class->import(qw(encode_json decode_json));
  }
  
  our @EXPORT = qw(encode_json decode_json JSON);
  my @EXPORT_ALL = qw(is_bool);
  our @EXPORT_OK = qw(is_bool to_json from_json);
  our %EXPORT_TAGS = ( all => [ @EXPORT, @EXPORT_ALL ],
                       legacy => [ @EXPORT, @EXPORT_OK ],
                     );
  
  sub JSON () { our $JSON_Class }
  
  sub new {
    shift;
    my %args = @_ == 1 ? %{$_[0]} : @_;
    my $new = (our $JSON_Class)->new;
    $new->$_($args{$_}) for keys %args;
    return $new;
  }
  
  use Scalar::Util ();
  
  sub is_bool {
    die 'is_bool is not a method' if $_[1];
  
    Scalar::Util::blessed($_[0])
      and ($_[0]->isa('JSON::XS::Boolean')
        or $_[0]->isa('Cpanel::JSON::XS::Boolean')
        or $_[0]->isa('JSON::PP::Boolean'));
  }
  
  # (mostly) CopyPasta from JSON.pm version 2.90
  use Carp ();
  
  sub from_json ($@) {
      if ( ref($_[0]) =~ /^JSON/ or $_[0] =~ /^JSON/ ) {
          Carp::croak "from_json should not be called as a method.";
      }
      my $json = JSON()->new;
  
      if (@_ == 2 and ref $_[1] eq 'HASH') {
          my $opt  = $_[1];
          for my $method (keys %$opt) {
              $json->$method( $opt->{$method} );
          }
      }
  
      return $json->decode( $_[0] );
  }
  
  sub to_json ($@) {
      if (
          ref($_[0]) =~ /^JSON/
          or (@_ > 2 and $_[0] =~ /^JSON/)
            ) {
                 Carp::croak "to_json should not be called as a method.";
      }
      my $json = JSON()->new;
  
      if (@_ == 2 and ref $_[1] eq 'HASH') {
          my $opt  = $_[1];
          for my $method (keys %$opt) {
              $json->$method( $opt->{$method} );
          }
      }
  
      $json->encode($_[0]);
  }
  
  1;
  
  =head1 NAME
  
  JSON::MaybeXS - Use L<Cpanel::JSON::XS> with a fallback to L<JSON::XS> and L<JSON::PP>
  
  =head1 SYNOPSIS
  
    use JSON::MaybeXS;
  
    my $data_structure = decode_json($json_input);
  
    my $json_output = encode_json($data_structure);
  
    my $json = JSON->new;
  
    my $json_with_args = JSON::MaybeXS->new(utf8 => 1); # or { utf8 => 1 }
  
  =head1 DESCRIPTION
  
  This module first checks to see if either L<Cpanel::JSON::XS> or
  L<JSON::XS> is already loaded, in which case it uses that module. Otherwise
  it tries to load L<Cpanel::JSON::XS>, then L<JSON::XS>, then L<JSON::PP>
  in order, and either uses the first module it finds or throws an error.
  
  It then exports the C<encode_json> and C<decode_json> functions from the
  loaded module, along with a C<JSON> constant that returns the class name
  for calling C<new> on.
  
  If you're writing fresh code rather than replacing L<JSON.pm|JSON> usage, you might
  want to pass options as constructor args rather than calling mutators, so
  we provide our own C<new> method that supports that.
  
  =head1 EXPORTS
  
  C<encode_json>, C<decode_json> and C<JSON> are exported by default; C<is_bool>
  is exported on request.
  
  To import only some symbols, specify them on the C<use> line:
  
    use JSON::MaybeXS qw(encode_json decode_json is_bool); # functions only
  
    use JSON::MaybeXS qw(JSON); # JSON constant only
  
  To import all available sensible symbols (C<encode_json>, C<decode_json>, and
  C<is_bool>), use C<:all>:
  
    use JSON::MaybeXS ':all';
  
  To import all symbols including those needed by legacy apps that use L<JSON::PP>:
  
    use JSON::MaybeXS ':legacy';
  
  This imports the C<to_json> and C<from_json> symbols as well as everything in
  C<:all>.  NOTE: This is to support legacy code that makes extensive
  use of C<to_json> and C<from_json> which you are not yet in a position to
  refactor.  DO NOT use this import tag in new code, in order to avoid
  the crawling horrors of getting UTF-8 support subtly wrong.  See the
  documentation for L<JSON> for further details.
  
  =head2 encode_json
  
  This is the C<encode_json> function provided by the selected implementation
  module, and takes a perl data structure which is serialised to JSON text.
  
    my $json_text = encode_json($data_structure);
  
  =head2 decode_json
  
  This is the C<decode_json> function provided by the selected implementation
  module, and takes a string of JSON text to deserialise to a perl data structure.
  
    my $data_structure = decode_json($json_text);
  
  =head2 to_json, from_json
  
  See L<JSON> for details.  These are included to support legacy code
  B<only>.
  
  =head2 JSON
  
  The C<JSON> constant returns the selected implementation module's name for
  use as a class name - so:
  
    my $json_obj = JSON->new; # returns a Cpanel::JSON::XS or JSON::PP object
  
  and that object can then be used normally:
  
    my $data_structure = $json_obj->decode($json_text); # etc.
  
  =head2 is_bool
  
    $is_boolean = is_bool($scalar)
  
  Returns true if the passed scalar represents either C<true> or
  C<false>, two constants that act like C<1> and C<0>, respectively
  and are used to represent JSON C<true> and C<false> values in Perl.
  
  Since this is a bare sub in the various backend classes, it cannot be called as
  a class method like the other interfaces; it must be called as a function, with
  no invocant.  It supports the representation used in all JSON backends.
  
  =head1 CONSTRUCTOR
  
  =head2 new
  
  With L<JSON::PP>, L<JSON::XS> and L<Cpanel::JSON::XS> you are required to call
  mutators to set options, such as:
  
    my $json = $class->new->utf8(1)->pretty(1);
  
  Since this is a trifle irritating and noticeably un-perlish, we also offer:
  
    my $json = JSON::MaybeXS->new(utf8 => 1, pretty => 1);
  
  which works equivalently to the above (and in the usual tradition will accept
  a hashref instead of a hash, should you so desire).
  
  The resulting object is blessed into the underlying backend, which offers (at
  least) the methods C<encode> and C<decode>.
  
  =head1 BOOLEANS
  
  To include JSON-aware booleans (C<true>, C<false>) in your data, just do:
  
      use JSON::MaybeXS;
      my $true = JSON->true;
      my $false = JSON->false;
  
  =head1 CONVERTING FROM JSON::Any
  
  L<JSON::Any> used to be the favoured compatibility layer above the various
  JSON backends, but over time has grown a lot of extra code to deal with legacy
  backends (e.g. L<JSON::Syck>) that are no longer needed.  This is a rough guide of translating such code:
  
  Change code from:
  
      use JSON::Any;
      my $json = JSON::Any->new->objToJson($data);    # or to_json($data), or Dump($data)
  
  to:
  
      use JSON::MaybeXS;
      my $json = encode_json($data);
  
  
  Change code from:
  
      use JSON::Any;
      my $data = JSON::Any->new->jsonToObj($json);    # or from_json($json), or Load($json)
  
  to:
  
      use JSON::MaybeXS;
      my $json = decode_json($data);
  
  =head1 CAVEATS
  
  The C<new()> method in this module is technically a factory, not a
  constructor, because the objects it returns will I<NOT> be blessed into the
  C<JSON::MaybeXS> class.
  
  If you are using an object returned by this module as a Moo(se) attribute,
  this type constraint code:
  
      is 'json' => ( isa => 'JSON::MaybeXS' );
  
  will I<NOT> do what you expect. Instead, either rely on the C<JSON> class
  constant described above, as so:
  
      is 'json' => ( isa => JSON::MaybeXS::JSON() );
  
  Alternatively, you can use duck typing:
  
      use Moose::Util::TypeConstraints 'duck_type';
      is 'json' => ( isa => Object , duck_type([qw/ encode decode /]));
  
  =head1 INSTALLATION
  
  At installation time, F<Makefile.PL> will attempt to determine if you have a
  working compiler available, and therefore whether you are able to run XS code.
  If so, L<Cpanel::JSON::XS> will be added to the prerequisite list, unless
  L<JSON::XS> is already installed at a high enough version. L<JSON::XS> may
  also be upgraded to fix any incompatibility issues.
  
  Because running XS code is not mandatory and L<JSON::PP> (which is in perl
  core) is used as a fallback backend, this module is safe to be used in a suite
  of code that is fatpacked or installed into a restricted-resource environment.
  
  You can also prevent any XS dependencies from being installed by setting
  C<PUREPERL_ONLY=1> in F<Makefile.PL> options (or in the C<PERL_MM_OPT>
  environment variable), or using the C<--pp> or C<--pureperl> flags with the
  L<cpanminus client|cpanm>.
  
  =head1 AUTHOR
  
  mst - Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
  
  =head1 CONTRIBUTORS
  
  =over 4
  
  =item * Clinton Gormley <drtech@cpan.org>
  
  =item * Karen Etheridge <ether@cpan.org>
  
  =item * Kieren Diment <diment@gmail.com>
  
  =back
  
  =head1 COPYRIGHT
  
  Copyright (c) 2013 the C<JSON::MaybeXS> L</AUTHOR> and L</CONTRIBUTORS>
  as listed above.
  
  =head1 LICENSE
  
  This library is free software and may be distributed under the same terms
  as perl itself.
  
  =cut
JSON_MAYBEXS

$fatpacked{"JSON/PP.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'JSON_PP';
  package JSON::PP;
  
  # JSON-2.0
  
  use 5.005;
  use strict;
  
  use Exporter ();
  BEGIN { @JSON::PP::ISA = ('Exporter') }
  
  use overload ();
  use JSON::PP::Boolean;
  
  use Carp ();
  #use Devel::Peek;
  
  $JSON::PP::VERSION = '2.97001';
  
  @JSON::PP::EXPORT = qw(encode_json decode_json from_json to_json);
  
  # instead of hash-access, i tried index-access for speed.
  # but this method is not faster than what i expected. so it will be changed.
  
  use constant P_ASCII                => 0;
  use constant P_LATIN1               => 1;
  use constant P_UTF8                 => 2;
  use constant P_INDENT               => 3;
  use constant P_CANONICAL            => 4;
  use constant P_SPACE_BEFORE         => 5;
  use constant P_SPACE_AFTER          => 6;
  use constant P_ALLOW_NONREF         => 7;
  use constant P_SHRINK               => 8;
  use constant P_ALLOW_BLESSED        => 9;
  use constant P_CONVERT_BLESSED      => 10;
  use constant P_RELAXED              => 11;
  
  use constant P_LOOSE                => 12;
  use constant P_ALLOW_BIGNUM         => 13;
  use constant P_ALLOW_BAREKEY        => 14;
  use constant P_ALLOW_SINGLEQUOTE    => 15;
  use constant P_ESCAPE_SLASH         => 16;
  use constant P_AS_NONBLESSED        => 17;
  
  use constant P_ALLOW_UNKNOWN        => 18;
  
  use constant OLD_PERL => $] < 5.008 ? 1 : 0;
  use constant USE_B => 0;
  
  BEGIN {
  if (USE_B) {
      require B;
  }
  }
  
  BEGIN {
      my @xs_compati_bit_properties = qw(
              latin1 ascii utf8 indent canonical space_before space_after allow_nonref shrink
              allow_blessed convert_blessed relaxed allow_unknown
      );
      my @pp_bit_properties = qw(
              allow_singlequote allow_bignum loose
              allow_barekey escape_slash as_nonblessed
      );
  
      # Perl version check, Unicode handling is enabled?
      # Helper module sets @JSON::PP::_properties.
      if ( OLD_PERL ) {
          my $helper = $] >= 5.006 ? 'JSON::PP::Compat5006' : 'JSON::PP::Compat5005';
          eval qq| require $helper |;
          if ($@) { Carp::croak $@; }
      }
  
      for my $name (@xs_compati_bit_properties, @pp_bit_properties) {
          my $property_id = 'P_' . uc($name);
  
          eval qq/
              sub $name {
                  my \$enable = defined \$_[1] ? \$_[1] : 1;
  
                  if (\$enable) {
                      \$_[0]->{PROPS}->[$property_id] = 1;
                  }
                  else {
                      \$_[0]->{PROPS}->[$property_id] = 0;
                  }
  
                  \$_[0];
              }
  
              sub get_$name {
                  \$_[0]->{PROPS}->[$property_id] ? 1 : '';
              }
          /;
      }
  
  }
  
  
  
  # Functions
  
  my $JSON; # cache
  
  sub encode_json ($) { # encode
      ($JSON ||= __PACKAGE__->new->utf8)->encode(@_);
  }
  
  
  sub decode_json { # decode
      ($JSON ||= __PACKAGE__->new->utf8)->decode(@_);
  }
  
  # Obsoleted
  
  sub to_json($) {
     Carp::croak ("JSON::PP::to_json has been renamed to encode_json.");
  }
  
  
  sub from_json($) {
     Carp::croak ("JSON::PP::from_json has been renamed to decode_json.");
  }
  
  
  # Methods
  
  sub new {
      my $class = shift;
      my $self  = {
          max_depth   => 512,
          max_size    => 0,
          indent_length => 3,
      };
  
      bless $self, $class;
  }
  
  
  sub encode {
      return $_[0]->PP_encode_json($_[1]);
  }
  
  
  sub decode {
      return $_[0]->PP_decode_json($_[1], 0x00000000);
  }
  
  
  sub decode_prefix {
      return $_[0]->PP_decode_json($_[1], 0x00000001);
  }
  
  
  # accessor
  
  
  # pretty printing
  
  sub pretty {
      my ($self, $v) = @_;
      my $enable = defined $v ? $v : 1;
  
      if ($enable) { # indent_length(3) for JSON::XS compatibility
          $self->indent(1)->space_before(1)->space_after(1);
      }
      else {
          $self->indent(0)->space_before(0)->space_after(0);
      }
  
      $self;
  }
  
  # etc
  
  sub max_depth {
      my $max  = defined $_[1] ? $_[1] : 0x80000000;
      $_[0]->{max_depth} = $max;
      $_[0];
  }
  
  
  sub get_max_depth { $_[0]->{max_depth}; }
  
  
  sub max_size {
      my $max  = defined $_[1] ? $_[1] : 0;
      $_[0]->{max_size} = $max;
      $_[0];
  }
  
  
  sub get_max_size { $_[0]->{max_size}; }
  
  
  sub filter_json_object {
      if (defined $_[1] and ref $_[1] eq 'CODE') {
          $_[0]->{cb_object} = $_[1];
      } else {
          delete $_[0]->{cb_object};
      }
      $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
      $_[0];
  }
  
  sub filter_json_single_key_object {
      if (@_ == 1 or @_ > 3) {
          Carp::croak("Usage: JSON::PP::filter_json_single_key_object(self, key, callback = undef)");
      }
      if (defined $_[2] and ref $_[2] eq 'CODE') {
          $_[0]->{cb_sk_object}->{$_[1]} = $_[2];
      } else {
          delete $_[0]->{cb_sk_object}->{$_[1]};
          delete $_[0]->{cb_sk_object} unless %{$_[0]->{cb_sk_object} || {}};
      }
      $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
      $_[0];
  }
  
  sub indent_length {
      if (!defined $_[1] or $_[1] > 15 or $_[1] < 0) {
          Carp::carp "The acceptable range of indent_length() is 0 to 15.";
      }
      else {
          $_[0]->{indent_length} = $_[1];
      }
      $_[0];
  }
  
  sub get_indent_length {
      $_[0]->{indent_length};
  }
  
  sub sort_by {
      $_[0]->{sort_by} = defined $_[1] ? $_[1] : 1;
      $_[0];
  }
  
  sub allow_bigint {
      Carp::carp("allow_bigint() is obsoleted. use allow_bignum() instead.");
      $_[0]->allow_bignum;
  }
  
  ###############################
  
  ###
  ### Perl => JSON
  ###
  
  
  { # Convert
  
      my $max_depth;
      my $indent;
      my $ascii;
      my $latin1;
      my $utf8;
      my $space_before;
      my $space_after;
      my $canonical;
      my $allow_blessed;
      my $convert_blessed;
  
      my $indent_length;
      my $escape_slash;
      my $bignum;
      my $as_nonblessed;
  
      my $depth;
      my $indent_count;
      my $keysort;
  
  
      sub PP_encode_json {
          my $self = shift;
          my $obj  = shift;
  
          $indent_count = 0;
          $depth        = 0;
  
          my $props = $self->{PROPS};
  
          ($ascii, $latin1, $utf8, $indent, $canonical, $space_before, $space_after, $allow_blessed,
              $convert_blessed, $escape_slash, $bignum, $as_nonblessed)
           = @{$props}[P_ASCII .. P_SPACE_AFTER, P_ALLOW_BLESSED, P_CONVERT_BLESSED,
                      P_ESCAPE_SLASH, P_ALLOW_BIGNUM, P_AS_NONBLESSED];
  
          ($max_depth, $indent_length) = @{$self}{qw/max_depth indent_length/};
  
          $keysort = $canonical ? sub { $a cmp $b } : undef;
  
          if ($self->{sort_by}) {
              $keysort = ref($self->{sort_by}) eq 'CODE' ? $self->{sort_by}
                       : $self->{sort_by} =~ /\D+/       ? $self->{sort_by}
                       : sub { $a cmp $b };
          }
  
          encode_error("hash- or arrayref expected (not a simple scalar, use allow_nonref to allow this)")
               if(!ref $obj and !$props->[ P_ALLOW_NONREF ]);
  
          my $str  = $self->object_to_json($obj);
  
          $str .= "\n" if ( $indent ); # JSON::XS 2.26 compatible
  
          unless ($ascii or $latin1 or $utf8) {
              utf8::upgrade($str);
          }
  
          if ($props->[ P_SHRINK ]) {
              utf8::downgrade($str, 1);
          }
  
          return $str;
      }
  
  
      sub object_to_json {
          my ($self, $obj) = @_;
          my $type = ref($obj);
  
          if($type eq 'HASH'){
              return $self->hash_to_json($obj);
          }
          elsif($type eq 'ARRAY'){
              return $self->array_to_json($obj);
          }
          elsif ($type) { # blessed object?
              if (blessed($obj)) {
  
                  return $self->value_to_json($obj) if ( $obj->isa('JSON::PP::Boolean') );
  
                  if ( $convert_blessed and $obj->can('TO_JSON') ) {
                      my $result = $obj->TO_JSON();
                      if ( defined $result and ref( $result ) ) {
                          if ( refaddr( $obj ) eq refaddr( $result ) ) {
                              encode_error( sprintf(
                                  "%s::TO_JSON method returned same object as was passed instead of a new one",
                                  ref $obj
                              ) );
                          }
                      }
  
                      return $self->object_to_json( $result );
                  }
  
                  return "$obj" if ( $bignum and _is_bignum($obj) );
  
                  if ($allow_blessed) {
                      return $self->blessed_to_json($obj) if ($as_nonblessed); # will be removed.
                      return 'null';
                  }
                  encode_error( sprintf("encountered object '%s', but neither allow_blessed "
                      . "nor convert_blessed settings are enabled", $obj)
                  );
              }
              else {
                  return $self->value_to_json($obj);
              }
          }
          else{
              return $self->value_to_json($obj);
          }
      }
  
  
      sub hash_to_json {
          my ($self, $obj) = @_;
          my @res;
  
          encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                           if (++$depth > $max_depth);
  
          my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
          my $del = ($space_before ? ' ' : '') . ':' . ($space_after ? ' ' : '');
  
          for my $k ( _sort( $obj ) ) {
              if ( OLD_PERL ) { utf8::decode($k) } # key for Perl 5.6 / be optimized
              push @res, $self->string_to_json( $k )
                            .  $del
                            . ( ref $obj->{$k} ? $self->object_to_json( $obj->{$k} ) : $self->value_to_json( $obj->{$k} ) );
          }
  
          --$depth;
          $self->_down_indent() if ($indent);
  
          return '{}' unless @res;
          return '{' . $pre . join( ",$pre", @res ) . $post . '}';
      }
  
  
      sub array_to_json {
          my ($self, $obj) = @_;
          my @res;
  
          encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                           if (++$depth > $max_depth);
  
          my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
  
          for my $v (@$obj){
              push @res, ref($v) ? $self->object_to_json($v) : $self->value_to_json($v);
          }
  
          --$depth;
          $self->_down_indent() if ($indent);
  
          return '[]' unless @res;
          return '[' . $pre . join( ",$pre", @res ) . $post . ']';
      }
  
      sub _looks_like_number {
          my $value = shift;
          if (USE_B) {
              my $b_obj = B::svref_2object(\$value);
              my $flags = $b_obj->FLAGS;
              return 1 if $flags & ( B::SVp_IOK() | B::SVp_NOK() ) and !( $flags & B::SVp_POK() );
              return;
          } else {
              no warnings 'numeric';
              # if the utf8 flag is on, it almost certainly started as a string
              return if utf8::is_utf8($value);
              # detect numbers
              # string & "" -> ""
              # number & "" -> 0 (with warning)
              # nan and inf can detect as numbers, so check with * 0
              return unless length((my $dummy = "") & $value);
              return unless 0 + $value eq $value;
              return 1 if $value * 0 == 0;
              return -1; # inf/nan
          }
      }
  
      sub value_to_json {
          my ($self, $value) = @_;
  
          return 'null' if(!defined $value);
  
          my $type = ref($value);
  
          if (!$type) {
              if (_looks_like_number($value)) {
                  return $value;
              }
              return $self->string_to_json($value);
          }
          elsif( blessed($value) and  $value->isa('JSON::PP::Boolean') ){
              return $$value == 1 ? 'true' : 'false';
          }
          else {
              if ((overload::StrVal($value) =~ /=(\w+)/)[0]) {
                  return $self->value_to_json("$value");
              }
  
              if ($type eq 'SCALAR' and defined $$value) {
                  return   $$value eq '1' ? 'true'
                         : $$value eq '0' ? 'false'
                         : $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ? 'null'
                         : encode_error("cannot encode reference to scalar");
              }
  
              if ( $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ) {
                  return 'null';
              }
              else {
                  if ( $type eq 'SCALAR' or $type eq 'REF' ) {
                      encode_error("cannot encode reference to scalar");
                  }
                  else {
                      encode_error("encountered $value, but JSON can only represent references to arrays or hashes");
                  }
              }
  
          }
      }
  
  
      my %esc = (
          "\n" => '\n',
          "\r" => '\r',
          "\t" => '\t',
          "\f" => '\f',
          "\b" => '\b',
          "\"" => '\"',
          "\\" => '\\\\',
          "\'" => '\\\'',
      );
  
  
      sub string_to_json {
          my ($self, $arg) = @_;
  
          $arg =~ s/([\x22\x5c\n\r\t\f\b])/$esc{$1}/g;
          $arg =~ s/\//\\\//g if ($escape_slash);
          $arg =~ s/([\x00-\x08\x0b\x0e-\x1f])/'\\u00' . unpack('H2', $1)/eg;
  
          if ($ascii) {
              $arg = JSON_PP_encode_ascii($arg);
          }
  
          if ($latin1) {
              $arg = JSON_PP_encode_latin1($arg);
          }
  
          if ($utf8) {
              utf8::encode($arg);
          }
  
          return '"' . $arg . '"';
      }
  
  
      sub blessed_to_json {
          my $reftype = reftype($_[1]) || '';
          if ($reftype eq 'HASH') {
              return $_[0]->hash_to_json($_[1]);
          }
          elsif ($reftype eq 'ARRAY') {
              return $_[0]->array_to_json($_[1]);
          }
          else {
              return 'null';
          }
      }
  
  
      sub encode_error {
          my $error  = shift;
          Carp::croak "$error";
      }
  
  
      sub _sort {
          defined $keysort ? (sort $keysort (keys %{$_[0]})) : keys %{$_[0]};
      }
  
  
      sub _up_indent {
          my $self  = shift;
          my $space = ' ' x $indent_length;
  
          my ($pre,$post) = ('','');
  
          $post = "\n" . $space x $indent_count;
  
          $indent_count++;
  
          $pre = "\n" . $space x $indent_count;
  
          return ($pre,$post);
      }
  
  
      sub _down_indent { $indent_count--; }
  
  
      sub PP_encode_box {
          {
              depth        => $depth,
              indent_count => $indent_count,
          };
      }
  
  } # Convert
  
  
  sub _encode_ascii {
      join('',
          map {
              $_ <= 127 ?
                  chr($_) :
              $_ <= 65535 ?
                  sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
          } unpack('U*', $_[0])
      );
  }
  
  
  sub _encode_latin1 {
      join('',
          map {
              $_ <= 255 ?
                  chr($_) :
              $_ <= 65535 ?
                  sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
          } unpack('U*', $_[0])
      );
  }
  
  
  sub _encode_surrogates { # from perlunicode
      my $uni = $_[0] - 0x10000;
      return ($uni / 0x400 + 0xD800, $uni % 0x400 + 0xDC00);
  }
  
  
  sub _is_bignum {
      $_[0]->isa('Math::BigInt') or $_[0]->isa('Math::BigFloat');
  }
  
  
  
  #
  # JSON => Perl
  #
  
  my $max_intsize;
  
  BEGIN {
      my $checkint = 1111;
      for my $d (5..64) {
          $checkint .= 1;
          my $int   = eval qq| $checkint |;
          if ($int =~ /[eE]/) {
              $max_intsize = $d - 1;
              last;
          }
      }
  }
  
  { # PARSE 
  
      my %escapes = ( #  by Jeremy Muhlich <jmuhlich [at] bitflood.org>
          b    => "\x8",
          t    => "\x9",
          n    => "\xA",
          f    => "\xC",
          r    => "\xD",
          '\\' => '\\',
          '"'  => '"',
          '/'  => '/',
      );
  
      my $text; # json data
      my $at;   # offset
      my $ch;   # first character
      my $len;  # text length (changed according to UTF8 or NON UTF8)
      # INTERNAL
      my $depth;          # nest counter
      my $encoding;       # json text encoding
      my $is_valid_utf8;  # temp variable
      my $utf8_len;       # utf8 byte length
      # FLAGS
      my $utf8;           # must be utf8
      my $max_depth;      # max nest number of objects and arrays
      my $max_size;
      my $relaxed;
      my $cb_object;
      my $cb_sk_object;
  
      my $F_HOOK;
  
      my $allow_bignum;   # using Math::BigInt/BigFloat
      my $singlequote;    # loosely quoting
      my $loose;          # 
      my $allow_barekey;  # bareKey
  
      sub _detect_utf_encoding {
          my $text = shift;
          my @octets = unpack('C4', $text);
          return 'unknown' unless defined $octets[3];
          return ( $octets[0] and  $octets[1]) ? 'UTF-8'
               : (!$octets[0] and  $octets[1]) ? 'UTF-16BE'
               : (!$octets[0] and !$octets[1]) ? 'UTF-32BE'
               : ( $octets[2]                ) ? 'UTF-16LE'
               : (!$octets[2]                ) ? 'UTF-32LE'
               : 'unknown';
      }
  
      sub PP_decode_json {
          my ($self, $want_offset);
  
          ($self, $text, $want_offset) = @_;
  
          ($at, $ch, $depth) = (0, '', 0);
  
          if ( !defined $text or ref $text ) {
              decode_error("malformed JSON string, neither array, object, number, string or atom");
          }
  
          my $props = $self->{PROPS};
  
          ($utf8, $relaxed, $loose, $allow_bignum, $allow_barekey, $singlequote)
              = @{$props}[P_UTF8, P_RELAXED, P_LOOSE .. P_ALLOW_SINGLEQUOTE];
  
          if ( $utf8 ) {
              $encoding = _detect_utf_encoding($text);
              if ($encoding ne 'UTF-8' and $encoding ne 'unknown') {
                  require Encode;
                  Encode::from_to($text, $encoding, 'utf-8');
              } else {
                  utf8::downgrade( $text, 1 ) or Carp::croak("Wide character in subroutine entry");
              }
          }
          else {
              utf8::upgrade( $text );
              utf8::encode( $text );
          }
  
          $len = length $text;
  
          ($max_depth, $max_size, $cb_object, $cb_sk_object, $F_HOOK)
               = @{$self}{qw/max_depth  max_size cb_object cb_sk_object F_HOOK/};
  
          if ($max_size > 1) {
              use bytes;
              my $bytes = length $text;
              decode_error(
                  sprintf("attempted decode of JSON text of %s bytes size, but max_size is set to %s"
                      , $bytes, $max_size), 1
              ) if ($bytes > $max_size);
          }
  
          white(); # remove head white space
  
          decode_error("malformed JSON string, neither array, object, number, string or atom") unless defined $ch; # Is there a first character for JSON structure?
  
          my $result = value();
  
          if ( !$props->[ P_ALLOW_NONREF ] and !ref $result ) {
                  decode_error(
                  'JSON text must be an object or array (but found number, string, true, false or null,'
                         . ' use allow_nonref to allow this)', 1);
          }
  
          Carp::croak('something wrong.') if $len < $at; # we won't arrive here.
  
          my $consumed = defined $ch ? $at - 1 : $at; # consumed JSON text length
  
          white(); # remove tail white space
  
          return ( $result, $consumed ) if $want_offset; # all right if decode_prefix
  
          decode_error("garbage after JSON object") if defined $ch;
  
          $result;
      }
  
  
      sub next_chr {
          return $ch = undef if($at >= $len);
          $ch = substr($text, $at++, 1);
      }
  
  
      sub value {
          white();
          return          if(!defined $ch);
          return object() if($ch eq '{');
          return array()  if($ch eq '[');
          return string() if($ch eq '"' or ($singlequote and $ch eq "'"));
          return number() if($ch =~ /[0-9]/ or $ch eq '-');
          return word();
      }
  
      sub string {
          my $utf16;
          my $is_utf8;
  
          ($is_valid_utf8, $utf8_len) = ('', 0);
  
          my $s = ''; # basically UTF8 flag on
  
          if($ch eq '"' or ($singlequote and $ch eq "'")){
              my $boundChar = $ch;
  
              OUTER: while( defined(next_chr()) ){
  
                  if($ch eq $boundChar){
                      next_chr();
  
                      if ($utf16) {
                          decode_error("missing low surrogate character in surrogate pair");
                      }
  
                      utf8::decode($s) if($is_utf8);
  
                      return $s;
                  }
                  elsif($ch eq '\\'){
                      next_chr();
                      if(exists $escapes{$ch}){
                          $s .= $escapes{$ch};
                      }
                      elsif($ch eq 'u'){ # UNICODE handling
                          my $u = '';
  
                          for(1..4){
                              $ch = next_chr();
                              last OUTER if($ch !~ /[0-9a-fA-F]/);
                              $u .= $ch;
                          }
  
                          # U+D800 - U+DBFF
                          if ($u =~ /^[dD][89abAB][0-9a-fA-F]{2}/) { # UTF-16 high surrogate?
                              $utf16 = $u;
                          }
                          # U+DC00 - U+DFFF
                          elsif ($u =~ /^[dD][c-fC-F][0-9a-fA-F]{2}/) { # UTF-16 low surrogate?
                              unless (defined $utf16) {
                                  decode_error("missing high surrogate character in surrogate pair");
                              }
                              $is_utf8 = 1;
                              $s .= JSON_PP_decode_surrogates($utf16, $u) || next;
                              $utf16 = undef;
                          }
                          else {
                              if (defined $utf16) {
                                  decode_error("surrogate pair expected");
                              }
  
                              if ( ( my $hex = hex( $u ) ) > 127 ) {
                                  $is_utf8 = 1;
                                  $s .= JSON_PP_decode_unicode($u) || next;
                              }
                              else {
                                  $s .= chr $hex;
                              }
                          }
  
                      }
                      else{
                          unless ($loose) {
                              $at -= 2;
                              decode_error('illegal backslash escape sequence in string');
                          }
                          $s .= $ch;
                      }
                  }
                  else{
  
                      if ( ord $ch  > 127 ) {
                          unless( $ch = is_valid_utf8($ch) ) {
                              $at -= 1;
                              decode_error("malformed UTF-8 character in JSON string");
                          }
                          else {
                              $at += $utf8_len - 1;
                          }
  
                          $is_utf8 = 1;
                      }
  
                      if (!$loose) {
                          if ($ch =~ /[\x00-\x1f\x22\x5c]/)  { # '/' ok
                              $at--;
                              decode_error('invalid character encountered while parsing JSON string');
                          }
                      }
  
                      $s .= $ch;
                  }
              }
          }
  
          decode_error("unexpected end of string while parsing JSON string");
      }
  
  
      sub white {
          while( defined $ch  ){
              if($ch eq '' or $ch =~ /\A[ \t\r\n]\z/){
                  next_chr();
              }
              elsif($relaxed and $ch eq '/'){
                  next_chr();
                  if(defined $ch and $ch eq '/'){
                      1 while(defined(next_chr()) and $ch ne "\n" and $ch ne "\r");
                  }
                  elsif(defined $ch and $ch eq '*'){
                      next_chr();
                      while(1){
                          if(defined $ch){
                              if($ch eq '*'){
                                  if(defined(next_chr()) and $ch eq '/'){
                                      next_chr();
                                      last;
                                  }
                              }
                              else{
                                  next_chr();
                              }
                          }
                          else{
                              decode_error("Unterminated comment");
                          }
                      }
                      next;
                  }
                  else{
                      $at--;
                      decode_error("malformed JSON string, neither array, object, number, string or atom");
                  }
              }
              else{
                  if ($relaxed and $ch eq '#') { # correctly?
                      pos($text) = $at;
                      $text =~ /\G([^\n]*(?:\r\n|\r|\n|$))/g;
                      $at = pos($text);
                      next_chr;
                      next;
                  }
  
                  last;
              }
          }
      }
  
  
      sub array {
          my $a  = $_[0] || []; # you can use this code to use another array ref object.
  
          decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                      if (++$depth > $max_depth);
  
          next_chr();
          white();
  
          if(defined $ch and $ch eq ']'){
              --$depth;
              next_chr();
              return $a;
          }
          else {
              while(defined($ch)){
                  push @$a, value();
  
                  white();
  
                  if (!defined $ch) {
                      last;
                  }
  
                  if($ch eq ']'){
                      --$depth;
                      next_chr();
                      return $a;
                  }
  
                  if($ch ne ','){
                      last;
                  }
  
                  next_chr();
                  white();
  
                  if ($relaxed and $ch eq ']') {
                      --$depth;
                      next_chr();
                      return $a;
                  }
  
              }
          }
  
          $at-- if defined $ch and $ch ne '';
          decode_error(", or ] expected while parsing array");
      }
  
  
      sub object {
          my $o = $_[0] || {}; # you can use this code to use another hash ref object.
          my $k;
  
          decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                  if (++$depth > $max_depth);
          next_chr();
          white();
  
          if(defined $ch and $ch eq '}'){
              --$depth;
              next_chr();
              if ($F_HOOK) {
                  return _json_object_hook($o);
              }
              return $o;
          }
          else {
              while (defined $ch) {
                  $k = ($allow_barekey and $ch ne '"' and $ch ne "'") ? bareKey() : string();
                  white();
  
                  if(!defined $ch or $ch ne ':'){
                      $at--;
                      decode_error("':' expected");
                  }
  
                  next_chr();
                  $o->{$k} = value();
                  white();
  
                  last if (!defined $ch);
  
                  if($ch eq '}'){
                      --$depth;
                      next_chr();
                      if ($F_HOOK) {
                          return _json_object_hook($o);
                      }
                      return $o;
                  }
  
                  if($ch ne ','){
                      last;
                  }
  
                  next_chr();
                  white();
  
                  if ($relaxed and $ch eq '}') {
                      --$depth;
                      next_chr();
                      if ($F_HOOK) {
                          return _json_object_hook($o);
                      }
                      return $o;
                  }
  
              }
  
          }
  
          $at-- if defined $ch and $ch ne '';
          decode_error(", or } expected while parsing object/hash");
      }
  
  
      sub bareKey { # doesn't strictly follow Standard ECMA-262 3rd Edition
          my $key;
          while($ch =~ /[^\x00-\x23\x25-\x2F\x3A-\x40\x5B-\x5E\x60\x7B-\x7F]/){
              $key .= $ch;
              next_chr();
          }
          return $key;
      }
  
  
      sub word {
          my $word =  substr($text,$at-1,4);
  
          if($word eq 'true'){
              $at += 3;
              next_chr;
              return $JSON::PP::true;
          }
          elsif($word eq 'null'){
              $at += 3;
              next_chr;
              return undef;
          }
          elsif($word eq 'fals'){
              $at += 3;
              if(substr($text,$at,1) eq 'e'){
                  $at++;
                  next_chr;
                  return $JSON::PP::false;
              }
          }
  
          $at--; # for decode_error report
  
          decode_error("'null' expected")  if ($word =~ /^n/);
          decode_error("'true' expected")  if ($word =~ /^t/);
          decode_error("'false' expected") if ($word =~ /^f/);
          decode_error("malformed JSON string, neither array, object, number, string or atom");
      }
  
  
      sub number {
          my $n    = '';
          my $v;
          my $is_dec;
          my $is_exp;
  
          if($ch eq '-'){
              $n = '-';
              next_chr;
              if (!defined $ch or $ch !~ /\d/) {
                  decode_error("malformed number (no digits after initial minus)");
              }
          }
  
          # According to RFC4627, hex or oct digits are invalid.
          if($ch eq '0'){
              my $peek = substr($text,$at,1);
              if($peek =~ /^[0-9a-dfA-DF]/){ # e may be valid (exponential)
                  decode_error("malformed number (leading zero must not be followed by another digit)");
              }
              $n .= $ch;
              next_chr;
          }
  
          while(defined $ch and $ch =~ /\d/){
              $n .= $ch;
              next_chr;
          }
  
          if(defined $ch and $ch eq '.'){
              $n .= '.';
              $is_dec = 1;
  
              next_chr;
              if (!defined $ch or $ch !~ /\d/) {
                  decode_error("malformed number (no digits after decimal point)");
              }
              else {
                  $n .= $ch;
              }
  
              while(defined(next_chr) and $ch =~ /\d/){
                  $n .= $ch;
              }
          }
  
          if(defined $ch and ($ch eq 'e' or $ch eq 'E')){
              $n .= $ch;
              $is_exp = 1;
              next_chr;
  
              if(defined($ch) and ($ch eq '+' or $ch eq '-')){
                  $n .= $ch;
                  next_chr;
                  if (!defined $ch or $ch =~ /\D/) {
                      decode_error("malformed number (no digits after exp sign)");
                  }
                  $n .= $ch;
              }
              elsif(defined($ch) and $ch =~ /\d/){
                  $n .= $ch;
              }
              else {
                  decode_error("malformed number (no digits after exp sign)");
              }
  
              while(defined(next_chr) and $ch =~ /\d/){
                  $n .= $ch;
              }
  
          }
  
          $v .= $n;
  
          if ($is_dec or $is_exp) {
              if ($allow_bignum) {
                  require Math::BigFloat;
                  return Math::BigFloat->new($v);
              }
          } else {
              if (length $v > $max_intsize) {
                  if ($allow_bignum) { # from Adam Sussman
                      require Math::BigInt;
                      return Math::BigInt->new($v);
                  }
                  else {
                      return "$v";
                  }
              }
          }
  
          return $is_dec ? $v/1.0 : 0+$v;
      }
  
  
      sub is_valid_utf8 {
  
          $utf8_len = $_[0] =~ /[\x00-\x7F]/  ? 1
                    : $_[0] =~ /[\xC2-\xDF]/  ? 2
                    : $_[0] =~ /[\xE0-\xEF]/  ? 3
                    : $_[0] =~ /[\xF0-\xF4]/  ? 4
                    : 0
                    ;
  
          return unless $utf8_len;
  
          my $is_valid_utf8 = substr($text, $at - 1, $utf8_len);
  
          return ( $is_valid_utf8 =~ /^(?:
               [\x00-\x7F]
              |[\xC2-\xDF][\x80-\xBF]
              |[\xE0][\xA0-\xBF][\x80-\xBF]
              |[\xE1-\xEC][\x80-\xBF][\x80-\xBF]
              |[\xED][\x80-\x9F][\x80-\xBF]
              |[\xEE-\xEF][\x80-\xBF][\x80-\xBF]
              |[\xF0][\x90-\xBF][\x80-\xBF][\x80-\xBF]
              |[\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF]
              |[\xF4][\x80-\x8F][\x80-\xBF][\x80-\xBF]
          )$/x )  ? $is_valid_utf8 : '';
      }
  
  
      sub decode_error {
          my $error  = shift;
          my $no_rep = shift;
          my $str    = defined $text ? substr($text, $at) : '';
          my $mess   = '';
          my $type   = 'U*';
  
          if ( OLD_PERL ) {
              my $type   =  $] <  5.006           ? 'C*'
                          : utf8::is_utf8( $str ) ? 'U*' # 5.6
                          : 'C*'
                          ;
          }
  
          for my $c ( unpack( $type, $str ) ) { # emulate pv_uni_display() ?
              $mess .=  $c == 0x07 ? '\a'
                      : $c == 0x09 ? '\t'
                      : $c == 0x0a ? '\n'
                      : $c == 0x0d ? '\r'
                      : $c == 0x0c ? '\f'
                      : $c <  0x20 ? sprintf('\x{%x}', $c)
                      : $c == 0x5c ? '\\\\'
                      : $c <  0x80 ? chr($c)
                      : sprintf('\x{%x}', $c)
                      ;
              if ( length $mess >= 20 ) {
                  $mess .= '...';
                  last;
              }
          }
  
          unless ( length $mess ) {
              $mess = '(end of string)';
          }
  
          Carp::croak (
              $no_rep ? "$error" : "$error, at character offset $at (before \"$mess\")"
          );
  
      }
  
  
      sub _json_object_hook {
          my $o    = $_[0];
          my @ks = keys %{$o};
  
          if ( $cb_sk_object and @ks == 1 and exists $cb_sk_object->{ $ks[0] } and ref $cb_sk_object->{ $ks[0] } ) {
              my @val = $cb_sk_object->{ $ks[0] }->( $o->{$ks[0]} );
              if (@val == 1) {
                  return $val[0];
              }
          }
  
          my @val = $cb_object->($o) if ($cb_object);
          if (@val == 0 or @val > 1) {
              return $o;
          }
          else {
              return $val[0];
          }
      }
  
  
      sub PP_decode_box {
          {
              text    => $text,
              at      => $at,
              ch      => $ch,
              len     => $len,
              depth   => $depth,
              encoding      => $encoding,
              is_valid_utf8 => $is_valid_utf8,
          };
      }
  
  } # PARSE
  
  
  sub _decode_surrogates { # from perlunicode
      my $uni = 0x10000 + (hex($_[0]) - 0xD800) * 0x400 + (hex($_[1]) - 0xDC00);
      my $un  = pack('U*', $uni);
      utf8::encode( $un );
      return $un;
  }
  
  
  sub _decode_unicode {
      my $un = pack('U', hex shift);
      utf8::encode( $un );
      return $un;
  }
  
  #
  # Setup for various Perl versions (the code from JSON::PP58)
  #
  
  BEGIN {
  
      unless ( defined &utf8::is_utf8 ) {
         require Encode;
         *utf8::is_utf8 = *Encode::is_utf8;
      }
  
      if ( !OLD_PERL ) {
          *JSON::PP::JSON_PP_encode_ascii      = \&_encode_ascii;
          *JSON::PP::JSON_PP_encode_latin1     = \&_encode_latin1;
          *JSON::PP::JSON_PP_decode_surrogates = \&_decode_surrogates;
          *JSON::PP::JSON_PP_decode_unicode    = \&_decode_unicode;
  
          if ($] < 5.008003) { # join() in 5.8.0 - 5.8.2 is broken.
              package JSON::PP;
              require subs;
              subs->import('join');
              eval q|
                  sub join {
                      return '' if (@_ < 2);
                      my $j   = shift;
                      my $str = shift;
                      for (@_) { $str .= $j . $_; }
                      return $str;
                  }
              |;
          }
      }
  
  
      sub JSON::PP::incr_parse {
          local $Carp::CarpLevel = 1;
          ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_parse( @_ );
      }
  
  
      sub JSON::PP::incr_skip {
          ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_skip;
      }
  
  
      sub JSON::PP::incr_reset {
          ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_reset;
      }
  
      eval q{
          sub JSON::PP::incr_text : lvalue {
              $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new;
  
              if ( $_[0]->{_incr_parser}->{incr_pos} ) {
                  Carp::croak("incr_text cannot be called when the incremental parser already started parsing");
              }
              $_[0]->{_incr_parser}->{incr_text};
          }
      } if ( $] >= 5.006 );
  
  } # Setup for various Perl versions (the code from JSON::PP58)
  
  
  ###############################
  # Utilities
  #
  
  BEGIN {
      eval 'require Scalar::Util';
      unless($@){
          *JSON::PP::blessed = \&Scalar::Util::blessed;
          *JSON::PP::reftype = \&Scalar::Util::reftype;
          *JSON::PP::refaddr = \&Scalar::Util::refaddr;
      }
      else{ # This code is from Scalar::Util.
          # warn $@;
          eval 'sub UNIVERSAL::a_sub_not_likely_to_be_here { ref($_[0]) }';
          *JSON::PP::blessed = sub {
              local($@, $SIG{__DIE__}, $SIG{__WARN__});
              ref($_[0]) ? eval { $_[0]->a_sub_not_likely_to_be_here } : undef;
          };
          require B;
          my %tmap = qw(
              B::NULL   SCALAR
              B::HV     HASH
              B::AV     ARRAY
              B::CV     CODE
              B::IO     IO
              B::GV     GLOB
              B::REGEXP REGEXP
          );
          *JSON::PP::reftype = sub {
              my $r = shift;
  
              return undef unless length(ref($r));
  
              my $t = ref(B::svref_2object($r));
  
              return
                  exists $tmap{$t} ? $tmap{$t}
                : length(ref($$r)) ? 'REF'
                :                    'SCALAR';
          };
          *JSON::PP::refaddr = sub {
            return undef unless length(ref($_[0]));
  
            my $addr;
            if(defined(my $pkg = blessed($_[0]))) {
              $addr .= bless $_[0], 'Scalar::Util::Fake';
              bless $_[0], $pkg;
            }
            else {
              $addr .= $_[0]
            }
  
            $addr =~ /0x(\w+)/;
            local $^W;
            #no warnings 'portable';
            hex($1);
          }
      }
  }
  
  
  # shamelessly copied and modified from JSON::XS code.
  
  $JSON::PP::true  = do { bless \(my $dummy = 1), "JSON::PP::Boolean" };
  $JSON::PP::false = do { bless \(my $dummy = 0), "JSON::PP::Boolean" };
  
  sub is_bool { blessed $_[0] and $_[0]->isa("JSON::PP::Boolean"); }
  
  sub true  { $JSON::PP::true  }
  sub false { $JSON::PP::false }
  sub null  { undef; }
  
  ###############################
  
  package JSON::PP::IncrParser;
  
  use strict;
  
  use constant INCR_M_WS   => 0; # initial whitespace skipping
  use constant INCR_M_STR  => 1; # inside string
  use constant INCR_M_BS   => 2; # inside backslash
  use constant INCR_M_JSON => 3; # outside anything, count nesting
  use constant INCR_M_C0   => 4;
  use constant INCR_M_C1   => 5;
  
  $JSON::PP::IncrParser::VERSION = '1.01';
  
  sub new {
      my ( $class ) = @_;
  
      bless {
          incr_nest    => 0,
          incr_text    => undef,
          incr_pos     => 0,
          incr_mode    => 0,
      }, $class;
  }
  
  
  sub incr_parse {
      my ( $self, $coder, $text ) = @_;
  
      $self->{incr_text} = '' unless ( defined $self->{incr_text} );
  
      if ( defined $text ) {
          if ( utf8::is_utf8( $text ) and !utf8::is_utf8( $self->{incr_text} ) ) {
              utf8::upgrade( $self->{incr_text} ) ;
              utf8::decode( $self->{incr_text} ) ;
          }
          $self->{incr_text} .= $text;
      }
  
      if ( defined wantarray ) {
          my $max_size = $coder->get_max_size;
          my $p = $self->{incr_pos};
          my @ret;
          {
              do {
                  unless ( $self->{incr_nest} <= 0 and $self->{incr_mode} == INCR_M_JSON ) {
                      $self->_incr_parse( $coder );
  
                      if ( $max_size and $self->{incr_pos} > $max_size ) {
                          Carp::croak("attempted decode of JSON text of $self->{incr_pos} bytes size, but max_size is set to $max_size");
                      }
                      unless ( $self->{incr_nest} <= 0 and $self->{incr_mode} == INCR_M_JSON ) {
                          # as an optimisation, do not accumulate white space in the incr buffer
                          if ( $self->{incr_mode} == INCR_M_WS and $self->{incr_pos} ) {
                              $self->{incr_pos} = 0;
                              $self->{incr_text} = '';
                          }
                          last;
                      }
                  }
  
                  my ($obj, $offset) = $coder->PP_decode_json( $self->{incr_text}, 0x00000001 );
                  push @ret, $obj;
                  use bytes;
                  $self->{incr_text} = substr( $self->{incr_text}, $offset || 0 );
                  $self->{incr_pos} = 0;
                  $self->{incr_nest} = 0;
                  $self->{incr_mode} = 0;
                  last unless wantarray;
              } while ( wantarray );
          }
  
          if ( wantarray ) {
              return @ret;
          }
          else { # in scalar context
              return $ret[0] ? $ret[0] : undef;
          }
      }
  }
  
  
  sub _incr_parse {
      my ($self, $coder) = @_;
      my $text = $self->{incr_text};
      my $len = length $text;
      my $p = $self->{incr_pos};
  
  INCR_PARSE:
      while ( $len > $p ) {
          my $s = substr( $text, $p, 1 );
          last INCR_PARSE unless defined $s;
          my $mode = $self->{incr_mode};
  
          if ( $mode == INCR_M_WS ) {
              while ( $len > $p ) {
                  $s = substr( $text, $p, 1 );
                  last INCR_PARSE unless defined $s;
                  if ( ord($s) > 0x20 ) {
                      if ( $s eq '#' ) {
                          $self->{incr_mode} = INCR_M_C0;
                          redo INCR_PARSE;
                      } else {
                          $self->{incr_mode} = INCR_M_JSON;
                          redo INCR_PARSE;
                      }
                  }
                  $p++;
              }
          } elsif ( $mode == INCR_M_BS ) {
              $p++;
              $self->{incr_mode} = INCR_M_STR;
              redo INCR_PARSE;
          } elsif ( $mode == INCR_M_C0 or $mode == INCR_M_C1 ) {
              while ( $len > $p ) {
                  $s = substr( $text, $p, 1 );
                  last INCR_PARSE unless defined $s;
                  if ( $s eq "\n" ) {
                      $self->{incr_mode} = $self->{incr_mode} == INCR_M_C0 ? INCR_M_WS : INCR_M_JSON;
                      last;
                  }
                  $p++;
              }
              next;
          } elsif ( $mode == INCR_M_STR ) {
              while ( $len > $p ) {
                  $s = substr( $text, $p, 1 );
                  last INCR_PARSE unless defined $s;
                  if ( $s eq '"' ) {
                      $p++;
                      $self->{incr_mode} = INCR_M_JSON;
  
                      last INCR_PARSE unless $self->{incr_nest};
                      redo INCR_PARSE;
                  }
                  elsif ( $s eq '\\' ) {
                      $p++;
                      if ( !defined substr($text, $p, 1) ) {
                          $self->{incr_mode} = INCR_M_BS;
                          last INCR_PARSE;
                      }
                  }
                  $p++;
              }
          } elsif ( $mode == INCR_M_JSON ) {
              while ( $len > $p ) {
                  $s = substr( $text, $p++, 1 );
                  if ( $s eq "\x00" ) {
                      $p--;
                      last INCR_PARSE;
                  } elsif ( $s eq "\x09" or $s eq "\x0a" or $s eq "\x0d" or $s eq "\x20" ) {
                      if ( !$self->{incr_nest} ) {
                          $p--; # do not eat the whitespace, let the next round do it
                          last INCR_PARSE;
                      }
                      next;
                  } elsif ( $s eq '"' ) {
                      $self->{incr_mode} = INCR_M_STR;
                      redo INCR_PARSE;
                  } elsif ( $s eq '[' or $s eq '{' ) {
                      if ( ++$self->{incr_nest} > $coder->get_max_depth ) {
                          Carp::croak('json text or perl structure exceeds maximum nesting level (max_depth set too low?)');
                      }
                      next;
                  } elsif ( $s eq ']' or $s eq '}' ) {
                      if ( --$self->{incr_nest} <= 0 ) {
                          last INCR_PARSE;
                      }
                  } elsif ( $s eq '#' ) {
                      $self->{incr_mode} = INCR_M_C1;
                      redo INCR_PARSE;
                  }
              }
          }
      }
  
      $self->{incr_pos} = $p;
      $self->{incr_parsing} = $p ? 1 : 0; # for backward compatibility
  }
  
  
  sub incr_text {
      if ( $_[0]->{incr_pos} ) {
          Carp::croak("incr_text cannot be called when the incremental parser already started parsing");
      }
      $_[0]->{incr_text};
  }
  
  
  sub incr_skip {
      my $self  = shift;
      $self->{incr_text} = substr( $self->{incr_text}, $self->{incr_pos} );
      $self->{incr_pos}     = 0;
      $self->{incr_mode}    = 0;
      $self->{incr_nest}    = 0;
  }
  
  
  sub incr_reset {
      my $self = shift;
      $self->{incr_text}    = undef;
      $self->{incr_pos}     = 0;
      $self->{incr_mode}    = 0;
      $self->{incr_nest}    = 0;
  }
  
  ###############################
  
  
  1;
  __END__
  =pod
  
  =head1 NAME
  
  JSON::PP - JSON::XS compatible pure-Perl module.
  
  =head1 SYNOPSIS
  
   use JSON::PP;
  
   # exported functions, they croak on error
   # and expect/generate UTF-8
  
   $utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;
   $perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;
  
   # OO-interface
  
   $json = JSON::PP->new->ascii->pretty->allow_nonref;
   
   $pretty_printed_json_text = $json->encode( $perl_scalar );
   $perl_scalar = $json->decode( $json_text );
   
   # Note that JSON version 2.0 and above will automatically use
   # JSON::XS or JSON::PP, so you should be able to just:
   
   use JSON;
  
  
  =head1 VERSION
  
      2.97001
  
  =head1 DESCRIPTION
  
  JSON::PP is a pure perl JSON decoder/encoder (as of RFC4627, which
  we know is obsolete but we still stick to; see below for an option
  to support part of RFC7159), and (almost) compatible to much
  faster L<JSON::XS> written by Marc Lehmann in C. JSON::PP works as
  a fallback module when you use L<JSON> module without having
  installed JSON::XS.
  
  Because of this fallback feature of JSON.pm, JSON::PP tries not to
  be more JavaScript-friendly than JSON::XS (i.e. not to escape extra
  characters such as U+2028 and U+2029 nor support RFC7159/ECMA-404),
  in order for you not to lose such JavaScript-friendliness silently
  when you use JSON.pm and install JSON::XS for speed or by accident.
  If you need JavaScript-friendly RFC7159-compliant pure perl module,
  try L<JSON::Tiny>, which is derived from L<Mojolicious> web
  framework and is also smaller and faster than JSON::PP.
  
  JSON::PP has been in the Perl core since Perl 5.14, mainly for
  CPAN toolchain modules to parse META.json.
  
  =head1 FUNCTIONAL INTERFACE
  
  This section is taken from JSON::XS almost verbatim. C<encode_json>
  and C<decode_json> are exported by default.
  
  =head2 encode_json
  
      $json_text = encode_json $perl_scalar
  
  Converts the given Perl data structure to a UTF-8 encoded, binary string
  (that is, the string contains octets only). Croaks on error.
  
  This function call is functionally identical to:
  
      $json_text = JSON::PP->new->utf8->encode($perl_scalar)
  
  Except being faster.
  
  =head2 decode_json
  
      $perl_scalar = decode_json $json_text
  
  The opposite of C<encode_json>: expects an UTF-8 (binary) string and tries
  to parse that as an UTF-8 encoded JSON text, returning the resulting
  reference. Croaks on error.
  
  This function call is functionally identical to:
  
      $perl_scalar = JSON::PP->new->utf8->decode($json_text)
  
  Except being faster.
  
  =head2 JSON::PP::is_bool
  
      $is_boolean = JSON::PP::is_bool($scalar)
  
  Returns true if the passed scalar represents either JSON::PP::true or
  JSON::PP::false, two constants that act like C<1> and C<0> respectively
  and are also used to represent JSON C<true> and C<false> in Perl strings.
  
  See L<MAPPING>, below, for more information on how JSON values are mapped to
  Perl.
  
  =head1 OBJECT-ORIENTED INTERFACE
  
  This section is also taken from JSON::XS.
  
  The object oriented interface lets you configure your own encoding or
  decoding style, within the limits of supported formats.
  
  =head2 new
  
      $json = JSON::PP->new
  
  Creates a new JSON::PP object that can be used to de/encode JSON
  strings. All boolean flags described below are by default I<disabled>.
  
  The mutators for flags all return the JSON::PP object again and thus calls can
  be chained:
  
     my $json = JSON::PP->new->utf8->space_after->encode({a => [1,2]})
     => {"a": [1, 2]}
  
  =head2 ascii
  
      $json = $json->ascii([$enable])
      
      $enabled = $json->get_ascii
  
  If C<$enable> is true (or missing), then the C<encode> method will not
  generate characters outside the code range C<0..127> (which is ASCII). Any
  Unicode characters outside that range will be escaped using either a
  single \uXXXX (BMP characters) or a double \uHHHH\uLLLLL escape sequence,
  as per RFC4627. The resulting encoded JSON text can be treated as a native
  Unicode string, an ascii-encoded, latin1-encoded or UTF-8 encoded string,
  or any other superset of ASCII.
  
  If C<$enable> is false, then the C<encode> method will not escape Unicode
  characters unless required by the JSON syntax or other flags. This results
  in a faster and more compact format.
  
  See also the section I<ENCODING/CODESET FLAG NOTES> later in this document.
  
  The main use for this flag is to produce JSON texts that can be
  transmitted over a 7-bit channel, as the encoded JSON texts will not
  contain any 8 bit characters.
  
    JSON::PP->new->ascii(1)->encode([chr 0x10401])
    => ["\ud801\udc01"]
  
  =head2 latin1
  
      $json = $json->latin1([$enable])
      
      $enabled = $json->get_latin1
  
  If C<$enable> is true (or missing), then the C<encode> method will encode
  the resulting JSON text as latin1 (or iso-8859-1), escaping any characters
  outside the code range C<0..255>. The resulting string can be treated as a
  latin1-encoded JSON text or a native Unicode string. The C<decode> method
  will not be affected in any way by this flag, as C<decode> by default
  expects Unicode, which is a strict superset of latin1.
  
  If C<$enable> is false, then the C<encode> method will not escape Unicode
  characters unless required by the JSON syntax or other flags.
  
  See also the section I<ENCODING/CODESET FLAG NOTES> later in this document.
  
  The main use for this flag is efficiently encoding binary data as JSON
  text, as most octets will not be escaped, resulting in a smaller encoded
  size. The disadvantage is that the resulting JSON text is encoded
  in latin1 (and must correctly be treated as such when storing and
  transferring), a rare encoding for JSON. It is therefore most useful when
  you want to store data structures known to contain binary data efficiently
  in files or databases, not when talking to other JSON encoders/decoders.
  
    JSON::PP->new->latin1->encode (["\x{89}\x{abc}"]
    => ["\x{89}\\u0abc"]    # (perl syntax, U+abc escaped, U+89 not)
  
  =head2 utf8
  
      $json = $json->utf8([$enable])
      
      $enabled = $json->get_utf8
  
  If C<$enable> is true (or missing), then the C<encode> method will encode
  the JSON result into UTF-8, as required by many protocols, while the
  C<decode> method expects to be handled an UTF-8-encoded string.  Please
  note that UTF-8-encoded strings do not contain any characters outside the
  range C<0..255>, they are thus useful for bytewise/binary I/O. In future
  versions, enabling this option might enable autodetection of the UTF-16
  and UTF-32 encoding families, as described in RFC4627.
  
  If C<$enable> is false, then the C<encode> method will return the JSON
  string as a (non-encoded) Unicode string, while C<decode> expects thus a
  Unicode string.  Any decoding or encoding (e.g. to UTF-8 or UTF-16) needs
  to be done yourself, e.g. using the Encode module.
  
  See also the section I<ENCODING/CODESET FLAG NOTES> later in this document.
  
  Example, output UTF-16BE-encoded JSON:
  
    use Encode;
    $jsontext = encode "UTF-16BE", JSON::PP->new->encode ($object);
  
  Example, decode UTF-32LE-encoded JSON:
  
    use Encode;
    $object = JSON::PP->new->decode (decode "UTF-32LE", $jsontext);
  
  =head2 pretty
  
      $json = $json->pretty([$enable])
  
  This enables (or disables) all of the C<indent>, C<space_before> and
  C<space_after> (and in the future possibly more) flags in one call to
  generate the most readable (or most compact) form possible.
  
  =head2 indent
  
      $json = $json->indent([$enable])
      
      $enabled = $json->get_indent
  
  If C<$enable> is true (or missing), then the C<encode> method will use a multiline
  format as output, putting every array member or object/hash key-value pair
  into its own line, indenting them properly.
  
  If C<$enable> is false, no newlines or indenting will be produced, and the
  resulting JSON text is guaranteed not to contain any C<newlines>.
  
  This setting has no effect when decoding JSON texts.
  
  The default indent space length is three.
  You can use C<indent_length> to change the length.
  
  =head2 space_before
  
      $json = $json->space_before([$enable])
      
      $enabled = $json->get_space_before
  
  If C<$enable> is true (or missing), then the C<encode> method will add an extra
  optional space before the C<:> separating keys from values in JSON objects.
  
  If C<$enable> is false, then the C<encode> method will not add any extra
  space at those places.
  
  This setting has no effect when decoding JSON texts. You will also
  most likely combine this setting with C<space_after>.
  
  Example, space_before enabled, space_after and indent disabled:
  
     {"key" :"value"}
  
  =head2 space_after
  
      $json = $json->space_after([$enable])
      
      $enabled = $json->get_space_after
  
  If C<$enable> is true (or missing), then the C<encode> method will add an extra
  optional space after the C<:> separating keys from values in JSON objects
  and extra whitespace after the C<,> separating key-value pairs and array
  members.
  
  If C<$enable> is false, then the C<encode> method will not add any extra
  space at those places.
  
  This setting has no effect when decoding JSON texts.
  
  Example, space_before and indent disabled, space_after enabled:
  
     {"key": "value"}
  
  =head2 relaxed
  
      $json = $json->relaxed([$enable])
      
      $enabled = $json->get_relaxed
  
  If C<$enable> is true (or missing), then C<decode> will accept some
  extensions to normal JSON syntax (see below). C<encode> will not be
  affected in anyway. I<Be aware that this option makes you accept invalid
  JSON texts as if they were valid!>. I suggest only to use this option to
  parse application-specific files written by humans (configuration files,
  resource files etc.)
  
  If C<$enable> is false (the default), then C<decode> will only accept
  valid JSON texts.
  
  Currently accepted extensions are:
  
  =over 4
  
  =item * list items can have an end-comma
  
  JSON I<separates> array elements and key-value pairs with commas. This
  can be annoying if you write JSON texts manually and want to be able to
  quickly append elements, so this extension accepts comma at the end of
  such items not just between them:
  
     [
        1,
        2, <- this comma not normally allowed
     ]
     {
        "k1": "v1",
        "k2": "v2", <- this comma not normally allowed
     }
  
  =item * shell-style '#'-comments
  
  Whenever JSON allows whitespace, shell-style comments are additionally
  allowed. They are terminated by the first carriage-return or line-feed
  character, after which more white-space and comments are allowed.
  
    [
       1, # this comment not allowed in JSON
          # neither this one...
    ]
  
  =item * C-style multiple-line '/* */'-comments (JSON::PP only)
  
  Whenever JSON allows whitespace, C-style multiple-line comments are additionally
  allowed. Everything between C</*> and C<*/> is a comment, after which
  more white-space and comments are allowed.
  
    [
       1, /* this comment not allowed in JSON */
          /* neither this one... */
    ]
  
  =item * C++-style one-line '//'-comments (JSON::PP only)
  
  Whenever JSON allows whitespace, C++-style one-line comments are additionally
  allowed. They are terminated by the first carriage-return or line-feed
  character, after which more white-space and comments are allowed.
  
    [
       1, // this comment not allowed in JSON
          // neither this one...
    ]
  
  =back
  
  =head2 canonical
  
      $json = $json->canonical([$enable])
      
      $enabled = $json->get_canonical
  
  If C<$enable> is true (or missing), then the C<encode> method will output JSON objects
  by sorting their keys. This is adding a comparatively high overhead.
  
  If C<$enable> is false, then the C<encode> method will output key-value
  pairs in the order Perl stores them (which will likely change between runs
  of the same script, and can change even within the same run from 5.18
  onwards).
  
  This option is useful if you want the same data structure to be encoded as
  the same JSON text (given the same overall settings). If it is disabled,
  the same hash might be encoded differently even if contains the same data,
  as key-value pairs have no inherent ordering in Perl.
  
  This setting has no effect when decoding JSON texts.
  
  This setting has currently no effect on tied hashes.
  
  =head2 allow_nonref
  
      $json = $json->allow_nonref([$enable])
      
      $enabled = $json->get_allow_nonref
  
  If C<$enable> is true (or missing), then the C<encode> method can convert a
  non-reference into its corresponding string, number or null JSON value,
  which is an extension to RFC4627. Likewise, C<decode> will accept those JSON
  values instead of croaking.
  
  If C<$enable> is false, then the C<encode> method will croak if it isn't
  passed an arrayref or hashref, as JSON texts must either be an object
  or array. Likewise, C<decode> will croak if given something that is not a
  JSON object or array.
  
  Example, encode a Perl scalar as JSON value with enabled C<allow_nonref>,
  resulting in an invalid JSON text:
  
     JSON::PP->new->allow_nonref->encode ("Hello, World!")
     => "Hello, World!"
  
  =head2 allow_unknown
  
      $json = $json->allow_unknown ([$enable])
      
      $enabled = $json->get_allow_unknown
  
  If C<$enable> is true (or missing), then C<encode> will I<not> throw an
  exception when it encounters values it cannot represent in JSON (for
  example, filehandles) but instead will encode a JSON C<null> value. Note
  that blessed objects are not included here and are handled separately by
  c<allow_blessed>.
  
  If C<$enable> is false (the default), then C<encode> will throw an
  exception when it encounters anything it cannot encode as JSON.
  
  This option does not affect C<decode> in any way, and it is recommended to
  leave it off unless you know your communications partner.
  
  =head2 allow_blessed
  
      $json = $json->allow_blessed([$enable])
      
      $enabled = $json->get_allow_blessed
  
  See L<OBJECT SERIALISATION> for details.
  
  If C<$enable> is true (or missing), then the C<encode> method will not
  barf when it encounters a blessed reference that it cannot convert
  otherwise. Instead, a JSON C<null> value is encoded instead of the object.
  
  If C<$enable> is false (the default), then C<encode> will throw an
  exception when it encounters a blessed object that it cannot convert
  otherwise.
  
  This setting has no effect on C<decode>.
  
  =head2 convert_blessed
  
      $json = $json->convert_blessed([$enable])
      
      $enabled = $json->get_convert_blessed
  
  See L<OBJECT SERIALISATION> for details.
  
  If C<$enable> is true (or missing), then C<encode>, upon encountering a
  blessed object, will check for the availability of the C<TO_JSON> method
  on the object's class. If found, it will be called in scalar context and
  the resulting scalar will be encoded instead of the object.
  
  The C<TO_JSON> method may safely call die if it wants. If C<TO_JSON>
  returns other blessed objects, those will be handled in the same
  way. C<TO_JSON> must take care of not causing an endless recursion cycle
  (== crash) in this case. The name of C<TO_JSON> was chosen because other
  methods called by the Perl core (== not by the user of the object) are
  usually in upper case letters and to avoid collisions with any C<to_json>
  function or method.
  
  If C<$enable> is false (the default), then C<encode> will not consider
  this type of conversion.
  
  This setting has no effect on C<decode>.
  
  =head2 filter_json_object
  
      $json = $json->filter_json_object([$coderef])
  
  When C<$coderef> is specified, it will be called from C<decode> each
  time it decodes a JSON object. The only argument is a reference to the
  newly-created hash. If the code references returns a single scalar (which
  need not be a reference), this value (i.e. a copy of that scalar to avoid
  aliasing) is inserted into the deserialised data structure. If it returns
  an empty list (NOTE: I<not> C<undef>, which is a valid scalar), the
  original deserialised hash will be inserted. This setting can slow down
  decoding considerably.
  
  When C<$coderef> is omitted or undefined, any existing callback will
  be removed and C<decode> will not change the deserialised hash in any
  way.
  
  Example, convert all JSON objects into the integer 5:
  
     my $js = JSON::PP->new->filter_json_object (sub { 5 });
     # returns [5]
     $js->decode ('[{}]'); # the given subroutine takes a hash reference.
     # throw an exception because allow_nonref is not enabled
     # so a lone 5 is not allowed.
     $js->decode ('{"a":1, "b":2}');
  
  =head2 filter_json_single_key_object
  
      $json = $json->filter_json_single_key_object($key [=> $coderef])
  
  Works remotely similar to C<filter_json_object>, but is only called for
  JSON objects having a single key named C<$key>.
  
  This C<$coderef> is called before the one specified via
  C<filter_json_object>, if any. It gets passed the single value in the JSON
  object. If it returns a single value, it will be inserted into the data
  structure. If it returns nothing (not even C<undef> but the empty list),
  the callback from C<filter_json_object> will be called next, as if no
  single-key callback were specified.
  
  If C<$coderef> is omitted or undefined, the corresponding callback will be
  disabled. There can only ever be one callback for a given key.
  
  As this callback gets called less often then the C<filter_json_object>
  one, decoding speed will not usually suffer as much. Therefore, single-key
  objects make excellent targets to serialise Perl objects into, especially
  as single-key JSON objects are as close to the type-tagged value concept
  as JSON gets (it's basically an ID/VALUE tuple). Of course, JSON does not
  support this in any way, so you need to make sure your data never looks
  like a serialised Perl hash.
  
  Typical names for the single object key are C<__class_whatever__>, or
  C<$__dollars_are_rarely_used__$> or C<}ugly_brace_placement>, or even
  things like C<__class_md5sum(classname)__>, to reduce the risk of clashing
  with real hashes.
  
  Example, decode JSON objects of the form C<< { "__widget__" => <id> } >>
  into the corresponding C<< $WIDGET{<id>} >> object:
  
     # return whatever is in $WIDGET{5}:
     JSON::PP
        ->new
        ->filter_json_single_key_object (__widget__ => sub {
              $WIDGET{ $_[0] }
           })
        ->decode ('{"__widget__": 5')
  
     # this can be used with a TO_JSON method in some "widget" class
     # for serialisation to json:
     sub WidgetBase::TO_JSON {
        my ($self) = @_;
  
        unless ($self->{id}) {
           $self->{id} = ..get..some..id..;
           $WIDGET{$self->{id}} = $self;
        }
  
        { __widget__ => $self->{id} }
     }
  
  =head2 shrink
  
      $json = $json->shrink([$enable])
      
      $enabled = $json->get_shrink
  
  If C<$enable> is true (or missing), the string returned by C<encode> will
  be shrunk (i.e. downgraded if possible).
  
  The actual definition of what shrink does might change in future versions,
  but it will always try to save space at the expense of time.
  
  If C<$enable> is false, then JSON::PP does nothing.
  
  =head2 max_depth
  
      $json = $json->max_depth([$maximum_nesting_depth])
      
      $max_depth = $json->get_max_depth
  
  Sets the maximum nesting level (default C<512>) accepted while encoding
  or decoding. If a higher nesting level is detected in JSON text or a Perl
  data structure, then the encoder and decoder will stop and croak at that
  point.
  
  Nesting level is defined by number of hash- or arrayrefs that the encoder
  needs to traverse to reach a given point or the number of C<{> or C<[>
  characters without their matching closing parenthesis crossed to reach a
  given character in a string.
  
  Setting the maximum depth to one disallows any nesting, so that ensures
  that the object is only a single hash/object or array.
  
  If no argument is given, the highest possible setting will be used, which
  is rarely useful.
  
  See L<JSON::XS/SECURITY CONSIDERATIONS> for more info on why this is useful.
  
  =head2 max_size
  
      $json = $json->max_size([$maximum_string_size])
      
      $max_size = $json->get_max_size
  
  Set the maximum length a JSON text may have (in bytes) where decoding is
  being attempted. The default is C<0>, meaning no limit. When C<decode>
  is called on a string that is longer then this many bytes, it will not
  attempt to decode the string but throw an exception. This setting has no
  effect on C<encode> (yet).
  
  If no argument is given, the limit check will be deactivated (same as when
  C<0> is specified).
  
  See L<JSON::XS/SECURITY CONSIDERATIONS> for more info on why this is useful.
  
  =head2 encode
  
      $json_text = $json->encode($perl_scalar)
  
  Converts the given Perl value or data structure to its JSON
  representation. Croaks on error.
  
  =head2 decode
  
      $perl_scalar = $json->decode($json_text)
  
  The opposite of C<encode>: expects a JSON text and tries to parse it,
  returning the resulting simple scalar or reference. Croaks on error.
  
  =head2 decode_prefix
  
      ($perl_scalar, $characters) = $json->decode_prefix($json_text)
  
  This works like the C<decode> method, but instead of raising an exception
  when there is trailing garbage after the first JSON object, it will
  silently stop parsing there and return the number of characters consumed
  so far.
  
  This is useful if your JSON texts are not delimited by an outer protocol
  and you need to know where the JSON text ends.
  
     JSON::PP->new->decode_prefix ("[1] the tail")
     => ([1], 3)
  
  =head1 FLAGS FOR JSON::PP ONLY
  
  The following flags and properties are for JSON::PP only. If you use
  any of these, you can't make your application run faster by replacing
  JSON::PP with JSON::XS. If you need these and also speed boost,
  try L<Cpanel::JSON::XS>, a fork of JSON::XS by Reini Urban, which
  supports some of these.
  
  =head2 allow_singlequote
  
      $json = $json->allow_singlequote([$enable])
      $enabled = $json->get_allow_singlequote
  
  If C<$enable> is true (or missing), then C<decode> will accept
  invalid JSON texts that contain strings that begin and end with
  single quotation marks. C<encode> will not be affected in anyway.
  I<Be aware that this option makes you accept invalid JSON texts
  as if they were valid!>. I suggest only to use this option to
  parse application-specific files written by humans (configuration
  files, resource files etc.)
  
  If C<$enable> is false (the default), then C<decode> will only accept
  valid JSON texts.
  
      $json->allow_singlequote->decode(qq|{"foo":'bar'}|);
      $json->allow_singlequote->decode(qq|{'foo':"bar"}|);
      $json->allow_singlequote->decode(qq|{'foo':'bar'}|);
  
  =head2 allow_barekey
  
      $json = $json->allow_barekey([$enable])
      $enabled = $json->get_allow_barekey
  
  If C<$enable> is true (or missing), then C<decode> will accept
  invalid JSON texts that contain JSON objects whose names don't
  begin and end with quotation marks. C<encode> will not be affected
  in anyway. I<Be aware that this option makes you accept invalid JSON
  texts as if they were valid!>. I suggest only to use this option to
  parse application-specific files written by humans (configuration
  files, resource files etc.)
  
  If C<$enable> is false (the default), then C<decode> will only accept
  valid JSON texts.
  
      $json->allow_barekey->decode(qq|{foo:"bar"}|);
  
  =head2 allow_bignum
  
      $json = $json->allow_bignum([$enable])
      $enabled = $json->get_allow_bignum
  
  If C<$enable> is true (or missing), then C<decode> will convert
  big integers Perl cannot handle as integer into L<Math::BigInt>
  objects and convert floating numbers into L<Math::BigFloat>
  objects. C<encode> will convert C<Math::BigInt> and C<Math::BigFloat>
  objects into JSON numbers.
  
     $json->allow_nonref->allow_bignum;
     $bigfloat = $json->decode('2.000000000000000000000000001');
     print $json->encode($bigfloat);
     # => 2.000000000000000000000000001
  
  See also L<MAPPING>.
  
  =head2 loose
  
      $json = $json->loose([$enable])
      $enabled = $json->get_loose
  
  If C<$enable> is true (or missing), then C<decode> will accept
  invalid JSON texts that contain unescaped [\x00-\x1f\x22\x5c]
  characters. C<encode> will not be affected in anyway.
  I<Be aware that this option makes you accept invalid JSON texts
  as if they were valid!>. I suggest only to use this option to
  parse application-specific files written by humans (configuration
  files, resource files etc.)
  
  If C<$enable> is false (the default), then C<decode> will only accept
  valid JSON texts.
  
      $json->loose->decode(qq|["abc
                                     def"]|);
  
  =head2 escape_slash
  
      $json = $json->escape_slash([$enable])
      $enabled = $json->get_escape_slash
  
  If C<$enable> is true (or missing), then C<encode> will explicitly
  escape I<slash> (solidus; C<U+002F>) characters to reduce the risk of
  XSS (cross site scripting) that may be caused by C<< </script> >>
  in a JSON text, with the cost of bloating the size of JSON texts.
  
  This option may be useful when you embed JSON in HTML, but embedding
  arbitrary JSON in HTML (by some HTML template toolkit or by string
  interpolation) is risky in general. You must escape necessary
  characters in correct order, depending on the context.
  
  C<decode> will not be affected in anyway.
  
  =head2 indent_length
  
      $json = $json->indent_length($number_of_spaces)
      $length = $json->get_indent_length
  
  This option is only useful when you also enable C<indent> or C<pretty>.
  
  JSON::XS indents with three spaces when you C<encode> (if requested
  by C<indent> or C<pretty>), and the number cannot be changed.
  JSON::PP allows you to change/get the number of indent spaces with these
  mutator/accessor. The default number of spaces is three (the same as
  JSON::XS), and the acceptable range is from C<0> (no indentation;
  it'd be better to disable indentation by C<indent(0)>) to C<15>.
  
  =head2 sort_by
  
      $json = $json->sort_by($code_ref)
      $json = $json->sort_by($subroutine_name)
  
  If you just want to sort keys (names) in JSON objects when you
  C<encode>, enable C<canonical> option (see above) that allows you to
  sort object keys alphabetically.
  
  If you do need to sort non-alphabetically for whatever reasons,
  you can give a code reference (or a subroutine name) to C<sort_by>,
  then the argument will be passed to Perl's C<sort> built-in function.
  
  As the sorting is done in the JSON::PP scope, you usually need to
  prepend C<JSON::PP::> to the subroutine name, and the special variables
  C<$a> and C<$b> used in the subrontine used by C<sort> function.
  
  Example:
  
     my %ORDER = (id => 1, class => 2, name => 3);
     $json->sort_by(sub {
         ($ORDER{$JSON::PP::a} // 999) <=> ($ORDER{$JSON::PP::b} // 999)
         or $JSON::PP::a cmp $JSON::PP::b
     });
     print $json->encode([
         {name => 'CPAN', id => 1, href => 'http://cpan.org'}
     ]);
     # [{"id":1,"name":"CPAN","href":"http://cpan.org"}]
  
  Note that C<sort_by> affects all the plain hashes in the data structure.
  If you need finer control, C<tie> necessary hashes with a module that
  implements ordered hash (such as L<Hash::Ordered> and L<Tie::IxHash>).
  C<canonical> and C<sort_by> don't affect the key order in C<tie>d
  hashes.
  
     use Hash::Ordered;
     tie my %hash, 'Hash::Ordered',
         (name => 'CPAN', id => 1, href => 'http://cpan.org');
     print $json->encode([\%hash]);
     # [{"name":"CPAN","id":1,"href":"http://cpan.org"}] # order is kept
  
  =head1 INCREMENTAL PARSING
  
  This section is also taken from JSON::XS.
  
  In some cases, there is the need for incremental parsing of JSON
  texts. While this module always has to keep both JSON text and resulting
  Perl data structure in memory at one time, it does allow you to parse a
  JSON stream incrementally. It does so by accumulating text until it has
  a full JSON object, which it then can decode. This process is similar to
  using C<decode_prefix> to see if a full JSON object is available, but
  is much more efficient (and can be implemented with a minimum of method
  calls).
  
  JSON::PP will only attempt to parse the JSON text once it is sure it
  has enough text to get a decisive result, using a very simple but
  truly incremental parser. This means that it sometimes won't stop as
  early as the full parser, for example, it doesn't detect mismatched
  parentheses. The only thing it guarantees is that it starts decoding as
  soon as a syntactically valid JSON text has been seen. This means you need
  to set resource limits (e.g. C<max_size>) to ensure the parser will stop
  parsing in the presence if syntax errors.
  
  The following methods implement this incremental parser.
  
  =head2 incr_parse
  
      $json->incr_parse( [$string] ) # void context
      
      $obj_or_undef = $json->incr_parse( [$string] ) # scalar context
      
      @obj_or_empty = $json->incr_parse( [$string] ) # list context
  
  This is the central parsing function. It can both append new text and
  extract objects from the stream accumulated so far (both of these
  functions are optional).
  
  If C<$string> is given, then this string is appended to the already
  existing JSON fragment stored in the C<$json> object.
  
  After that, if the function is called in void context, it will simply
  return without doing anything further. This can be used to add more text
  in as many chunks as you want.
  
  If the method is called in scalar context, then it will try to extract
  exactly I<one> JSON object. If that is successful, it will return this
  object, otherwise it will return C<undef>. If there is a parse error,
  this method will croak just as C<decode> would do (one can then use
  C<incr_skip> to skip the erroneous part). This is the most common way of
  using the method.
  
  And finally, in list context, it will try to extract as many objects
  from the stream as it can find and return them, or the empty list
  otherwise. For this to work, there must be no separators (other than
  whitespace) between the JSON objects or arrays, instead they must be
  concatenated back-to-back. If an error occurs, an exception will be
  raised as in the scalar context case. Note that in this case, any
  previously-parsed JSON texts will be lost.
  
  Example: Parse some JSON arrays/objects in a given string and return
  them.
  
      my @objs = JSON::PP->new->incr_parse ("[5][7][1,2]");
  
  =head2 incr_text
  
      $lvalue_string = $json->incr_text
  
  This method returns the currently stored JSON fragment as an lvalue, that
  is, you can manipulate it. This I<only> works when a preceding call to
  C<incr_parse> in I<scalar context> successfully returned an object. Under
  all other circumstances you must not call this function (I mean it.
  although in simple tests it might actually work, it I<will> fail under
  real world conditions). As a special exception, you can also call this
  method before having parsed anything.
  
  That means you can only use this function to look at or manipulate text
  before or after complete JSON objects, not while the parser is in the
  middle of parsing a JSON object.
  
  This function is useful in two cases: a) finding the trailing text after a
  JSON object or b) parsing multiple JSON objects separated by non-JSON text
  (such as commas).
  
  =head2 incr_skip
  
      $json->incr_skip
  
  This will reset the state of the incremental parser and will remove
  the parsed text from the input buffer so far. This is useful after
  C<incr_parse> died, in which case the input buffer and incremental parser
  state is left unchanged, to skip the text parsed so far and to reset the
  parse state.
  
  The difference to C<incr_reset> is that only text until the parse error
  occurred is removed.
  
  =head2 incr_reset
  
      $json->incr_reset
  
  This completely resets the incremental parser, that is, after this call,
  it will be as if the parser had never parsed anything.
  
  This is useful if you want to repeatedly parse JSON objects and want to
  ignore any trailing data, which means you have to reset the parser after
  each successful decode.
  
  =head1 MAPPING
  
  Most of this section is also taken from JSON::XS.
  
  This section describes how JSON::PP maps Perl values to JSON values and
  vice versa. These mappings are designed to "do the right thing" in most
  circumstances automatically, preserving round-tripping characteristics
  (what you put in comes out as something equivalent).
  
  For the more enlightened: note that in the following descriptions,
  lowercase I<perl> refers to the Perl interpreter, while uppercase I<Perl>
  refers to the abstract Perl language itself.
  
  =head2 JSON -> PERL
  
  =over 4
  
  =item object
  
  A JSON object becomes a reference to a hash in Perl. No ordering of object
  keys is preserved (JSON does not preserve object key ordering itself).
  
  =item array
  
  A JSON array becomes a reference to an array in Perl.
  
  =item string
  
  A JSON string becomes a string scalar in Perl - Unicode codepoints in JSON
  are represented by the same codepoints in the Perl string, so no manual
  decoding is necessary.
  
  =item number
  
  A JSON number becomes either an integer, numeric (floating point) or
  string scalar in perl, depending on its range and any fractional parts. On
  the Perl level, there is no difference between those as Perl handles all
  the conversion details, but an integer may take slightly less memory and
  might represent more values exactly than floating point numbers.
  
  If the number consists of digits only, JSON::PP will try to represent
  it as an integer value. If that fails, it will try to represent it as
  a numeric (floating point) value if that is possible without loss of
  precision. Otherwise it will preserve the number as a string value (in
  which case you lose roundtripping ability, as the JSON number will be
  re-encoded to a JSON string).
  
  Numbers containing a fractional or exponential part will always be
  represented as numeric (floating point) values, possibly at a loss of
  precision (in which case you might lose perfect roundtripping ability, but
  the JSON number will still be re-encoded as a JSON number).
  
  Note that precision is not accuracy - binary floating point values cannot
  represent most decimal fractions exactly, and when converting from and to
  floating point, JSON::PP only guarantees precision up to but not including
  the least significant bit.
  
  When C<allow_bignum> is enabled, big integer values and any numeric
  values will be converted into L<Math::BigInt> and L<Math::BigFloat>
  objects respectively, without becoming string scalars or losing
  precision.
  
  =item true, false
  
  These JSON atoms become C<JSON::PP::true> and C<JSON::PP::false>,
  respectively. They are overloaded to act almost exactly like the numbers
  C<1> and C<0>. You can check whether a scalar is a JSON boolean by using
  the C<JSON::PP::is_bool> function.
  
  =item null
  
  A JSON null atom becomes C<undef> in Perl.
  
  =item shell-style comments (C<< # I<text> >>)
  
  As a nonstandard extension to the JSON syntax that is enabled by the
  C<relaxed> setting, shell-style comments are allowed. They can start
  anywhere outside strings and go till the end of the line.
  
  =back
  
  
  =head2 PERL -> JSON
  
  The mapping from Perl to JSON is slightly more difficult, as Perl is a
  truly typeless language, so we can only guess which JSON type is meant by
  a Perl value.
  
  =over 4
  
  =item hash references
  
  Perl hash references become JSON objects. As there is no inherent
  ordering in hash keys (or JSON objects), they will usually be encoded
  in a pseudo-random order. JSON::PP can optionally sort the hash keys
  (determined by the I<canonical> flag and/or I<sort_by> property), so
  the same data structure will serialise to the same JSON text (given
  same settings and version of JSON::PP), but this incurs a runtime
  overhead and is only rarely useful, e.g. when you want to compare some
  JSON text against another for equality.
  
  =item array references
  
  Perl array references become JSON arrays.
  
  =item other references
  
  Other unblessed references are generally not allowed and will cause an
  exception to be thrown, except for references to the integers C<0> and
  C<1>, which get turned into C<false> and C<true> atoms in JSON. You can
  also use C<JSON::PP::false> and C<JSON::PP::true> to improve
  readability.
  
     to_json [\0, JSON::PP::true]      # yields [false,true]
  
  =item JSON::PP::true, JSON::PP::false
  
  These special values become JSON true and JSON false values,
  respectively. You can also use C<\1> and C<\0> directly if you want.
  
  =item JSON::PP::null
  
  This special value becomes JSON null.
  
  =item blessed objects
  
  Blessed objects are not directly representable in JSON, but C<JSON::PP>
  allows various ways of handling objects. See L<OBJECT SERIALISATION>,
  below, for details.
  
  =item simple scalars
  
  Simple Perl scalars (any scalar that is not a reference) are the most
  difficult objects to encode: JSON::PP will encode undefined scalars as
  JSON C<null> values, scalars that have last been used in a string context
  before encoding as JSON strings, and anything else as number value:
  
     # dump as number
     encode_json [2]                      # yields [2]
     encode_json [-3.0e17]                # yields [-3e+17]
     my $value = 5; encode_json [$value]  # yields [5]
  
     # used as string, so dump as string
     print $value;
     encode_json [$value]                 # yields ["5"]
  
     # undef becomes null
     encode_json [undef]                  # yields [null]
  
  You can force the type to be a string by stringifying it:
  
     my $x = 3.1; # some variable containing a number
     "$x";        # stringified
     $x .= "";    # another, more awkward way to stringify
     print $x;    # perl does it for you, too, quite often
                  # (but for older perls)
  
  You can force the type to be a number by numifying it:
  
     my $x = "3"; # some variable containing a string
     $x += 0;     # numify it, ensuring it will be dumped as a number
     $x *= 1;     # same thing, the choice is yours.
  
  You cannot currently force the type in other, less obscure, ways.
  
  Note that numerical precision has the same meaning as under Perl (so
  binary to decimal conversion follows the same rules as in Perl, which
  can differ to other languages). Also, your perl interpreter might expose
  extensions to the floating point numbers of your platform, such as
  infinities or NaN's - these cannot be represented in JSON, and it is an
  error to pass those in.
  
  JSON::PP (and JSON::XS) trusts what you pass to C<encode> method
  (or C<encode_json> function) is a clean, validated data structure with
  values that can be represented as valid JSON values only, because it's
  not from an external data source (as opposed to JSON texts you pass to
  C<decode> or C<decode_json>, which JSON::PP considers tainted and
  doesn't trust). As JSON::PP doesn't know exactly what you and consumers
  of your JSON texts want the unexpected values to be (you may want to
  convert them into null, or to stringify them with or without
  normalisation (string representation of infinities/NaN may vary
  depending on platforms), or to croak without conversion), you're advised
  to do what you and your consumers need before you encode, and also not
  to numify values that may start with values that look like a number
  (including infinities/NaN), without validating.
  
  =back
  
  =head2 OBJECT SERIALISATION
  
  As for Perl objects, JSON::PP only supports a pure JSON representation (without the ability to deserialise the object automatically again).
  
  =head3 SERIALISATION
  
  What happens when C<JSON::PP> encounters a Perl object depends on the
  C<allow_blessed>, C<convert_blessed> and C<allow_bignum> settings, which are
  used in this order:
  
  =over 4
  
  =item 1. C<convert_blessed> is enabled and the object has a C<TO_JSON> method.
  
  In this case, the C<TO_JSON> method of the object is invoked in scalar
  context. It must return a single scalar that can be directly encoded into
  JSON. This scalar replaces the object in the JSON text.
  
  For example, the following C<TO_JSON> method will convert all L<URI>
  objects to JSON strings when serialised. The fact that these values
  originally were L<URI> objects is lost.
  
     sub URI::TO_JSON {
        my ($uri) = @_;
        $uri->as_string
     }
  
  =item 2. C<allow_bignum> is enabled and the object is a C<Math::BigInt> or C<Math::BigFloat>.
  
  The object will be serialised as a JSON number value.
  
  =item 3. C<allow_blessed> is enabled.
  
  The object will be serialised as a JSON null value.
  
  =item 4. none of the above
  
  If none of the settings are enabled or the respective methods are missing,
  C<JSON::PP> throws an exception.
  
  =back
  
  =head1 ENCODING/CODESET FLAG NOTES
  
  This section is taken from JSON::XS.
  
  The interested reader might have seen a number of flags that signify
  encodings or codesets - C<utf8>, C<latin1> and C<ascii>. There seems to be
  some confusion on what these do, so here is a short comparison:
  
  C<utf8> controls whether the JSON text created by C<encode> (and expected
  by C<decode>) is UTF-8 encoded or not, while C<latin1> and C<ascii> only
  control whether C<encode> escapes character values outside their respective
  codeset range. Neither of these flags conflict with each other, although
  some combinations make less sense than others.
  
  Care has been taken to make all flags symmetrical with respect to
  C<encode> and C<decode>, that is, texts encoded with any combination of
  these flag values will be correctly decoded when the same flags are used
  - in general, if you use different flag settings while encoding vs. when
  decoding you likely have a bug somewhere.
  
  Below comes a verbose discussion of these flags. Note that a "codeset" is
  simply an abstract set of character-codepoint pairs, while an encoding
  takes those codepoint numbers and I<encodes> them, in our case into
  octets. Unicode is (among other things) a codeset, UTF-8 is an encoding,
  and ISO-8859-1 (= latin 1) and ASCII are both codesets I<and> encodings at
  the same time, which can be confusing.
  
  =over 4
  
  =item C<utf8> flag disabled
  
  When C<utf8> is disabled (the default), then C<encode>/C<decode> generate
  and expect Unicode strings, that is, characters with high ordinal Unicode
  values (> 255) will be encoded as such characters, and likewise such
  characters are decoded as-is, no changes to them will be done, except
  "(re-)interpreting" them as Unicode codepoints or Unicode characters,
  respectively (to Perl, these are the same thing in strings unless you do
  funny/weird/dumb stuff).
  
  This is useful when you want to do the encoding yourself (e.g. when you
  want to have UTF-16 encoded JSON texts) or when some other layer does
  the encoding for you (for example, when printing to a terminal using a
  filehandle that transparently encodes to UTF-8 you certainly do NOT want
  to UTF-8 encode your data first and have Perl encode it another time).
  
  =item C<utf8> flag enabled
  
  If the C<utf8>-flag is enabled, C<encode>/C<decode> will encode all
  characters using the corresponding UTF-8 multi-byte sequence, and will
  expect your input strings to be encoded as UTF-8, that is, no "character"
  of the input string must have any value > 255, as UTF-8 does not allow
  that.
  
  The C<utf8> flag therefore switches between two modes: disabled means you
  will get a Unicode string in Perl, enabled means you get an UTF-8 encoded
  octet/binary string in Perl.
  
  =item C<latin1> or C<ascii> flags enabled
  
  With C<latin1> (or C<ascii>) enabled, C<encode> will escape characters
  with ordinal values > 255 (> 127 with C<ascii>) and encode the remaining
  characters as specified by the C<utf8> flag.
  
  If C<utf8> is disabled, then the result is also correctly encoded in those
  character sets (as both are proper subsets of Unicode, meaning that a
  Unicode string with all character values < 256 is the same thing as a
  ISO-8859-1 string, and a Unicode string with all character values < 128 is
  the same thing as an ASCII string in Perl).
  
  If C<utf8> is enabled, you still get a correct UTF-8-encoded string,
  regardless of these flags, just some more characters will be escaped using
  C<\uXXXX> then before.
  
  Note that ISO-8859-1-I<encoded> strings are not compatible with UTF-8
  encoding, while ASCII-encoded strings are. That is because the ISO-8859-1
  encoding is NOT a subset of UTF-8 (despite the ISO-8859-1 I<codeset> being
  a subset of Unicode), while ASCII is.
  
  Surprisingly, C<decode> will ignore these flags and so treat all input
  values as governed by the C<utf8> flag. If it is disabled, this allows you
  to decode ISO-8859-1- and ASCII-encoded strings, as both strict subsets of
  Unicode. If it is enabled, you can correctly decode UTF-8 encoded strings.
  
  So neither C<latin1> nor C<ascii> are incompatible with the C<utf8> flag -
  they only govern when the JSON output engine escapes a character or not.
  
  The main use for C<latin1> is to relatively efficiently store binary data
  as JSON, at the expense of breaking compatibility with most JSON decoders.
  
  The main use for C<ascii> is to force the output to not contain characters
  with values > 127, which means you can interpret the resulting string
  as UTF-8, ISO-8859-1, ASCII, KOI8-R or most about any character set and
  8-bit-encoding, and still get the same data structure back. This is useful
  when your channel for JSON transfer is not 8-bit clean or the encoding
  might be mangled in between (e.g. in mail), and works because ASCII is a
  proper subset of most 8-bit and multibyte encodings in use in the world.
  
  =back
  
  =head1 SEE ALSO
  
  The F<json_pp> command line utility for quick experiments.
  
  L<JSON::XS>, L<Cpanel::JSON::XS>, and L<JSON::Tiny> for faster alternatives.
  L<JSON> and L<JSON::MaybeXS> for easy migration.
  
  L<JSON::PP::Compat5005> and L<JSON::PP::Compat5006> for older perl users.
  
  RFC4627 (L<http://www.ietf.org/rfc/rfc4627.txt>)
  
  =head1 AUTHOR
  
  Makamaka Hannyaharamitu, E<lt>makamaka[at]cpan.orgE<gt>
  
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright 2007-2016 by Makamaka Hannyaharamitu
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself. 
  
  =cut
JSON_PP

$fatpacked{"JSON/PP/Boolean.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'JSON_PP_BOOLEAN';
  package JSON::PP::Boolean;
  
  use strict;
  use overload (
      "0+"     => sub { ${$_[0]} },
      "++"     => sub { $_[0] = ${$_[0]} + 1 },
      "--"     => sub { $_[0] = ${$_[0]} - 1 },
      fallback => 1,
  );
  
  $JSON::PP::Boolean::VERSION = '2.97001';
  
  1;
  
  __END__
  
  =head1 NAME
  
  JSON::PP::Boolean - dummy module providing JSON::PP::Boolean
  
  =head1 SYNOPSIS
  
   # do not "use" yourself
  
  =head1 DESCRIPTION
  
  This module exists only to provide overload resolution for Storable and similar modules. See
  L<JSON::PP> for more info about this class.
  
  =head1 AUTHOR
  
  This idea is from L<JSON::XS::Boolean> written by Marc Lehmann <schmorp[at]schmorp.de>
  
  =cut
  
JSON_PP_BOOLEAN

$fatpacked{"Memoize.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE';
  # -*- mode: perl; perl-indent-level: 2; -*-
  # Memoize.pm
  #
  # Transparent memoization of idempotent functions
  #
  # Copyright 1998, 1999, 2000, 2001, 2012 M. J. Dominus.
  # You may copy and distribute this program under the
  # same terms as Perl itself.  If in doubt, 
  # write to mjd-perl-memoize+@plover.com for a license.
  
  package Memoize;
  $VERSION = '1.03';
  
  # Compile-time constants
  sub SCALAR () { 0 } 
  sub LIST () { 1 } 
  
  
  #
  # Usage memoize(functionname/ref,
  #               { NORMALIZER => coderef, INSTALL => name,
  #                 LIST_CACHE => descriptor, SCALAR_CACHE => descriptor }
  #
  
  use Carp;
  use Exporter;
  use vars qw($DEBUG);
  use Config;                     # Dammit.
  @ISA = qw(Exporter);
  @EXPORT = qw(memoize);
  @EXPORT_OK = qw(unmemoize flush_cache);
  use strict;
  
  my %memotable;
  my %revmemotable;
  my @CONTEXT_TAGS = qw(MERGE TIE MEMORY FAULT HASH);
  my %IS_CACHE_TAG = map {($_ => 1)} @CONTEXT_TAGS;
  
  # Raise an error if the user tries to specify one of thesepackage as a
  # tie for LIST_CACHE
  
  my %scalar_only = map {($_ => 1)} qw(DB_File GDBM_File SDBM_File ODBM_File NDBM_File);
  
  sub memoize {
    my $fn = shift;
    my %options = @_;
    my $options = \%options;
    
    unless (defined($fn) && 
  	  (ref $fn eq 'CODE' || ref $fn eq '')) {
      croak "Usage: memoize 'functionname'|coderef {OPTIONS}";
    }
  
    my $uppack = caller;		# TCL me Elmo!
    my $cref;			# Code reference to original function
    my $name = (ref $fn ? undef : $fn);
  
    # Convert function names to code references
    $cref = &_make_cref($fn, $uppack);
  
    # Locate function prototype, if any
    my $proto = prototype $cref;
    if (defined $proto) { $proto = "($proto)" }
    else { $proto = "" }
  
    # I would like to get rid of the eval, but there seems not to be any
    # other way to set the prototype properly.  The switch here for
    # 'usethreads' works around a bug in threadperl having to do with
    # magic goto.  It would be better to fix the bug and use the magic
    # goto version everywhere.
    my $wrapper = 
        $Config{usethreads} 
          ? eval "sub $proto { &_memoizer(\$cref, \@_); }" 
          : eval "sub $proto { unshift \@_, \$cref; goto &_memoizer; }";
  
    my $normalizer = $options{NORMALIZER};
    if (defined $normalizer  && ! ref $normalizer) {
      $normalizer = _make_cref($normalizer, $uppack);
    }
    
    my $install_name;
    if (defined $options->{INSTALL}) {
      # INSTALL => name
      $install_name = $options->{INSTALL};
    } elsif (! exists $options->{INSTALL}) {
      # No INSTALL option provided; use original name if possible
      $install_name = $name;
    } else {
      # INSTALL => undef  means don't install
    }
  
    if (defined $install_name) {
      $install_name = $uppack . '::' . $install_name
  	unless $install_name =~ /::/;
      no strict;
      local($^W) = 0;	       # ``Subroutine $install_name redefined at ...''
      *{$install_name} = $wrapper; # Install memoized version
    }
  
    $revmemotable{$wrapper} = "" . $cref; # Turn code ref into hash key
  
    # These will be the caches
    my %caches;
    for my $context (qw(SCALAR LIST)) {
      # suppress subsequent 'uninitialized value' warnings
      $options{"${context}_CACHE"} ||= ''; 
  
      my $cache_opt = $options{"${context}_CACHE"};
      my @cache_opt_args;
      if (ref $cache_opt) {
        @cache_opt_args = @$cache_opt;
        $cache_opt = shift @cache_opt_args;
      }
      if ($cache_opt eq 'FAULT') { # no cache
        $caches{$context} = undef;
      } elsif ($cache_opt eq 'HASH') { # user-supplied hash
        my $cache = $cache_opt_args[0];
        my $package = ref(tied %$cache);
        if ($context eq 'LIST' && $scalar_only{$package}) {
          croak("You can't use $package for LIST_CACHE because it can only store scalars");
        }
        $caches{$context} = $cache;
      } elsif ($cache_opt eq '' ||  $IS_CACHE_TAG{$cache_opt}) {
        # default is that we make up an in-memory hash
        $caches{$context} = {};
        # (this might get tied later, or MERGEd away)
      } else {
        croak "Unrecognized option to `${context}_CACHE': `$cache_opt' should be one of (@CONTEXT_TAGS); aborting";
      }
    }
  
    # Perhaps I should check here that you didn't supply *both* merge
    # options.  But if you did, it does do something reasonable: They
    # both get merged to the same in-memory hash.
    if ($options{SCALAR_CACHE} eq 'MERGE' || $options{LIST_CACHE} eq 'MERGE') {
      $options{MERGED} = 1;
      $caches{SCALAR} = $caches{LIST};
    }
  
    # Now deal with the TIE options
    {
      my $context;
      foreach $context (qw(SCALAR LIST)) {
        # If the relevant option wasn't `TIE', this call does nothing.
        _my_tie($context, $caches{$context}, $options);  # Croaks on failure
      }
    }
    
    # We should put some more stuff in here eventually.
    # We've been saying that for serveral versions now.
    # And you know what?  More stuff keeps going in!
    $memotable{$cref} = 
    {
      O => $options,  # Short keys here for things we need to access frequently
      N => $normalizer,
      U => $cref,
      MEMOIZED => $wrapper,
      PACKAGE => $uppack,
      NAME => $install_name,
      S => $caches{SCALAR},
      L => $caches{LIST},
    };
  
    $wrapper			# Return just memoized version
  }
  
  # This function tries to load a tied hash class and tie the hash to it.
  sub _my_tie {
    my ($context, $hash, $options) = @_;
    my $fullopt = $options->{"${context}_CACHE"};
  
    # We already checked to make sure that this works.
    my $shortopt = (ref $fullopt) ? $fullopt->[0] : $fullopt;
    
    return unless defined $shortopt && $shortopt eq 'TIE';
    carp("TIE option to memoize() is deprecated; use HASH instead")
        if $^W;
  
    my @args = ref $fullopt ? @$fullopt : ();
    shift @args;
    my $module = shift @args;
    if ($context eq 'LIST' && $scalar_only{$module}) {
      croak("You can't use $module for LIST_CACHE because it can only store scalars");
    }
    my $modulefile = $module . '.pm';
    $modulefile =~ s{::}{/}g;
    eval { require $modulefile };
    if ($@) {
      croak "Memoize: Couldn't load hash tie module `$module': $@; aborting";
    }
    my $rc = (tie %$hash => $module, @args);
    unless ($rc) {
      croak "Memoize: Couldn't tie hash to `$module': $!; aborting";
    }
    1;
  }
  
  sub flush_cache {
    my $func = _make_cref($_[0], scalar caller);
    my $info = $memotable{$revmemotable{$func}};
    die "$func not memoized" unless defined $info;
    for my $context (qw(S L)) {
      my $cache = $info->{$context};
      if (tied %$cache && ! (tied %$cache)->can('CLEAR')) {
        my $funcname = defined($info->{NAME}) ? 
            "function $info->{NAME}" : "anonymous function $func";
        my $context = {S => 'scalar', L => 'list'}->{$context};
        croak "Tied cache hash for $context-context $funcname does not support flushing";
      } else {
        %$cache = ();
      }
    }
  }
  
  # This is the function that manages the memo tables.
  sub _memoizer {
    my $orig = shift;		# stringized version of ref to original func.
    my $info = $memotable{$orig};
    my $normalizer = $info->{N};
    
    my $argstr;
    my $context = (wantarray() ? LIST : SCALAR);
  
    if (defined $normalizer) { 
      no strict;
      if ($context == SCALAR) {
        $argstr = &{$normalizer}(@_);
      } elsif ($context == LIST) {
        ($argstr) = &{$normalizer}(@_);
      } else {
        croak "Internal error \#41; context was neither LIST nor SCALAR\n";
      }
    } else {                      # Default normalizer
      local $^W = 0;
      $argstr = join chr(28),@_;  
    }
  
    if ($context == SCALAR) {
      my $cache = $info->{S};
      _crap_out($info->{NAME}, 'scalar') unless $cache;
      if (exists $cache->{$argstr}) { 
        return $info->{O}{MERGED}
          ? $cache->{$argstr}[0] : $cache->{$argstr};
      } else {
        my $val = &{$info->{U}}(@_);
        # Scalars are considered to be lists; store appropriately
        if ($info->{O}{MERGED}) {
  	$cache->{$argstr} = [$val];
        } else {
  	$cache->{$argstr} = $val;
        }
        $val;
      }
    } elsif ($context == LIST) {
      my $cache = $info->{L};
      _crap_out($info->{NAME}, 'list') unless $cache;
      if (exists $cache->{$argstr}) {
        return @{$cache->{$argstr}};
      } else {
        my @q = &{$info->{U}}(@_);
        $cache->{$argstr} = \@q;
        @q;
      }
    } else {
      croak "Internal error \#42; context was neither LIST nor SCALAR\n";
    }
  }
  
  sub unmemoize {
    my $f = shift;
    my $uppack = caller;
    my $cref = _make_cref($f, $uppack);
  
    unless (exists $revmemotable{$cref}) {
      croak "Could not unmemoize function `$f', because it was not memoized to begin with";
    }
    
    my $tabent = $memotable{$revmemotable{$cref}};
    unless (defined $tabent) {
      croak "Could not figure out how to unmemoize function `$f'";
    }
    my $name = $tabent->{NAME};
    if (defined $name) {
      no strict;
      local($^W) = 0;	       # ``Subroutine $install_name redefined at ...''
      *{$name} = $tabent->{U}; # Replace with original function
    }
    undef $memotable{$revmemotable{$cref}};
    undef $revmemotable{$cref};
  
    # This removes the last reference to the (possibly tied) memo tables
    # my ($old_function, $memotabs) = @{$tabent}{'U','S','L'};
    # undef $tabent; 
  
  #  # Untie the memo tables if they were tied.
  #  my $i;
  #  for $i (0,1) {
  #    if (tied %{$memotabs->[$i]}) {
  #      warn "Untying hash #$i\n";
  #      untie %{$memotabs->[$i]};
  #    }
  #  }
  
    $tabent->{U};
  }
  
  sub _make_cref {
    my $fn = shift;
    my $uppack = shift;
    my $cref;
    my $name;
  
    if (ref $fn eq 'CODE') {
      $cref = $fn;
    } elsif (! ref $fn) {
      if ($fn =~ /::/) {
        $name = $fn;
      } else {
        $name = $uppack . '::' . $fn;
      }
      no strict;
      if (defined $name and !defined(&$name)) {
        croak "Cannot operate on nonexistent function `$fn'";
      }
  #    $cref = \&$name;
      $cref = *{$name}{CODE};
    } else {
      my $parent = (caller(1))[3]; # Function that called _make_cref
      croak "Usage: argument 1 to `$parent' must be a function name or reference.\n";
    }
    $DEBUG and warn "${name}($fn) => $cref in _make_cref\n";
    $cref;
  }
  
  sub _crap_out {
    my ($funcname, $context) = @_;
    if (defined $funcname) {
      croak "Function `$funcname' called in forbidden $context context; faulting";
    } else {
      croak "Anonymous function called in forbidden $context context; faulting";
    }
  }
  
  1;
  
  
  
  
  
  =head1 NAME
  
  Memoize - Make functions faster by trading space for time
  
  =head1 SYNOPSIS
  
          # This is the documentation for Memoize 1.03
  	use Memoize;
  	memoize('slow_function');
  	slow_function(arguments);    # Is faster than it was before
  
  
  This is normally all you need to know.  However, many options are available:
  
  	memoize(function, options...);
  
  Options include:
  
  	NORMALIZER => function
  	INSTALL => new_name
  
  	SCALAR_CACHE => 'MEMORY'
          SCALAR_CACHE => ['HASH', \%cache_hash ]
  	SCALAR_CACHE => 'FAULT'
  	SCALAR_CACHE => 'MERGE'
  
  	LIST_CACHE => 'MEMORY'
          LIST_CACHE => ['HASH', \%cache_hash ]
  	LIST_CACHE => 'FAULT'
  	LIST_CACHE => 'MERGE'
  
  =head1 DESCRIPTION
  
  `Memoizing' a function makes it faster by trading space for time.  It
  does this by caching the return values of the function in a table.
  If you call the function again with the same arguments, C<memoize>
  jumps in and gives you the value out of the table, instead of letting
  the function compute the value all over again.
  
  Here is an extreme example.  Consider the Fibonacci sequence, defined
  by the following function:
  
  	# Compute Fibonacci numbers
  	sub fib {
  	  my $n = shift;
  	  return $n if $n < 2;
  	  fib($n-1) + fib($n-2);
  	}
  
  This function is very slow.  Why?  To compute fib(14), it first wants
  to compute fib(13) and fib(12), and add the results.  But to compute
  fib(13), it first has to compute fib(12) and fib(11), and then it
  comes back and computes fib(12) all over again even though the answer
  is the same.  And both of the times that it wants to compute fib(12),
  it has to compute fib(11) from scratch, and then it has to do it
  again each time it wants to compute fib(13).  This function does so
  much recomputing of old results that it takes a really long time to
  run---fib(14) makes 1,200 extra recursive calls to itself, to compute
  and recompute things that it already computed.
  
  This function is a good candidate for memoization.  If you memoize the
  `fib' function above, it will compute fib(14) exactly once, the first
  time it needs to, and then save the result in a table.  Then if you
  ask for fib(14) again, it gives you the result out of the table.
  While computing fib(14), instead of computing fib(12) twice, it does
  it once; the second time it needs the value it gets it from the table.
  It doesn't compute fib(11) four times; it computes it once, getting it
  from the table the next three times.  Instead of making 1,200
  recursive calls to `fib', it makes 15.  This makes the function about
  150 times faster.
  
  You could do the memoization yourself, by rewriting the function, like
  this:
  
  	# Compute Fibonacci numbers, memoized version
  	{ my @fib;
    	  sub fib {
  	    my $n = shift;
  	    return $fib[$n] if defined $fib[$n];
  	    return $fib[$n] = $n if $n < 2;
  	    $fib[$n] = fib($n-1) + fib($n-2);
  	  }
          }
  
  Or you could use this module, like this:
  
  	use Memoize;
  	memoize('fib');
  
  	# Rest of the fib function just like the original version.
  
  This makes it easy to turn memoizing on and off.
  
  Here's an even simpler example: I wrote a simple ray tracer; the
  program would look in a certain direction, figure out what it was
  looking at, and then convert the `color' value (typically a string
  like `red') of that object to a red, green, and blue pixel value, like
  this:
  
      for ($direction = 0; $direction < 300; $direction++) {
        # Figure out which object is in direction $direction
        $color = $object->{color};
        ($r, $g, $b) = @{&ColorToRGB($color)};
        ...
      }
  
  Since there are relatively few objects in a picture, there are only a
  few colors, which get looked up over and over again.  Memoizing
  C<ColorToRGB> sped up the program by several percent.
  
  =head1 DETAILS
  
  This module exports exactly one function, C<memoize>.  The rest of the
  functions in this package are None of Your Business.
  
  You should say
  
  	memoize(function)
  
  where C<function> is the name of the function you want to memoize, or
  a reference to it.  C<memoize> returns a reference to the new,
  memoized version of the function, or C<undef> on a non-fatal error.
  At present, there are no non-fatal errors, but there might be some in
  the future.
  
  If C<function> was the name of a function, then C<memoize> hides the
  old version and installs the new memoized version under the old name,
  so that C<&function(...)> actually invokes the memoized version.
  
  =head1 OPTIONS
  
  There are some optional options you can pass to C<memoize> to change
  the way it behaves a little.  To supply options, invoke C<memoize>
  like this:
  
  	memoize(function, NORMALIZER => function,
  			  INSTALL => newname,
                            SCALAR_CACHE => option,
  	                  LIST_CACHE => option
  			 );
  
  Each of these options is optional; you can include some, all, or none
  of them.
  
  =head2 INSTALL
  
  If you supply a function name with C<INSTALL>, memoize will install
  the new, memoized version of the function under the name you give.
  For example, 
  
  	memoize('fib', INSTALL => 'fastfib')
  
  installs the memoized version of C<fib> as C<fastfib>; without the
  C<INSTALL> option it would have replaced the old C<fib> with the
  memoized version.  
  
  To prevent C<memoize> from installing the memoized version anywhere, use
  C<INSTALL =E<gt> undef>.
  
  =head2 NORMALIZER
  
  Suppose your function looks like this:
  
  	# Typical call: f('aha!', A => 11, B => 12);
  	sub f {
  	  my $a = shift;
  	  my %hash = @_;
  	  $hash{B} ||= 2;  # B defaults to 2
  	  $hash{C} ||= 7;  # C defaults to 7
  
  	  # Do something with $a, %hash
  	}
  
  Now, the following calls to your function are all completely equivalent:
  
  	f(OUCH);
  	f(OUCH, B => 2);
  	f(OUCH, C => 7);
  	f(OUCH, B => 2, C => 7);
  	f(OUCH, C => 7, B => 2);
  	(etc.)
  
  However, unless you tell C<Memoize> that these calls are equivalent,
  it will not know that, and it will compute the values for these
  invocations of your function separately, and store them separately.
  
  To prevent this, supply a C<NORMALIZER> function that turns the
  program arguments into a string in a way that equivalent arguments
  turn into the same string.  A C<NORMALIZER> function for C<f> above
  might look like this:
  
  	sub normalize_f {
  	  my $a = shift;
  	  my %hash = @_;
  	  $hash{B} ||= 2;
  	  $hash{C} ||= 7;
  
  	  join(',', $a, map ($_ => $hash{$_}) sort keys %hash);
  	}
  
  Each of the argument lists above comes out of the C<normalize_f>
  function looking exactly the same, like this:
  
  	OUCH,B,2,C,7
  
  You would tell C<Memoize> to use this normalizer this way:
  
  	memoize('f', NORMALIZER => 'normalize_f');
  
  C<memoize> knows that if the normalized version of the arguments is
  the same for two argument lists, then it can safely look up the value
  that it computed for one argument list and return it as the result of
  calling the function with the other argument list, even if the
  argument lists look different.
  
  The default normalizer just concatenates the arguments with character
  28 in between.  (In ASCII, this is called FS or control-\.)  This
  always works correctly for functions with only one string argument,
  and also when the arguments never contain character 28.  However, it
  can confuse certain argument lists:
  
  	normalizer("a\034", "b")
  	normalizer("a", "\034b")
  	normalizer("a\034\034b")
  
  for example.
  
  Since hash keys are strings, the default normalizer will not
  distinguish between C<undef> and the empty string.  It also won't work
  when the function's arguments are references.  For example, consider a
  function C<g> which gets two arguments: A number, and a reference to
  an array of numbers:
  
  	g(13, [1,2,3,4,5,6,7]);
  
  The default normalizer will turn this into something like
  C<"13\034ARRAY(0x436c1f)">.  That would be all right, except that a
  subsequent array of numbers might be stored at a different location
  even though it contains the same data.  If this happens, C<Memoize>
  will think that the arguments are different, even though they are
  equivalent.  In this case, a normalizer like this is appropriate:
  
  	sub normalize { join ' ', $_[0], @{$_[1]} }
  
  For the example above, this produces the key "13 1 2 3 4 5 6 7".
  
  Another use for normalizers is when the function depends on data other
  than those in its arguments.  Suppose you have a function which
  returns a value which depends on the current hour of the day:
  
  	sub on_duty {
            my ($problem_type) = @_;
  	  my $hour = (localtime)[2];
            open my $fh, "$DIR/$problem_type" or die...;
            my $line;
            while ($hour-- > 0)
              $line = <$fh>;
            } 
  	  return $line;
  	}
  
  At 10:23, this function generates the 10th line of a data file; at
  3:45 PM it generates the 15th line instead.  By default, C<Memoize>
  will only see the $problem_type argument.  To fix this, include the
  current hour in the normalizer:
  
          sub normalize { join ' ', (localtime)[2], @_ }
  
  The calling context of the function (scalar or list context) is
  propagated to the normalizer.  This means that if the memoized
  function will treat its arguments differently in list context than it
  would in scalar context, you can have the normalizer function select
  its behavior based on the results of C<wantarray>.  Even if called in
  a list context, a normalizer should still return a single string.
  
  =head2 C<SCALAR_CACHE>, C<LIST_CACHE>
  
  Normally, C<Memoize> caches your function's return values into an
  ordinary Perl hash variable.  However, you might like to have the
  values cached on the disk, so that they persist from one run of your
  program to the next, or you might like to associate some other
  interesting semantics with the cached values.
  
  There's a slight complication under the hood of C<Memoize>: There are
  actually I<two> caches, one for scalar values and one for list values.
  When your function is called in scalar context, its return value is
  cached in one hash, and when your function is called in list context,
  its value is cached in the other hash.  You can control the caching
  behavior of both contexts independently with these options.
  
  The argument to C<LIST_CACHE> or C<SCALAR_CACHE> must either be one of
  the following four strings:
  
  	MEMORY
  	FAULT
  	MERGE
          HASH
  
  or else it must be a reference to an array whose first element is one of
  these four strings, such as C<[HASH, arguments...]>.
  
  =over 4
  
  =item C<MEMORY>
  
  C<MEMORY> means that return values from the function will be cached in
  an ordinary Perl hash variable.  The hash variable will not persist
  after the program exits.  This is the default.
  
  =item C<HASH>
  
  C<HASH> allows you to specify that a particular hash that you supply
  will be used as the cache.  You can tie this hash beforehand to give
  it any behavior you want.
  
  A tied hash can have any semantics at all.  It is typically tied to an
  on-disk database, so that cached values are stored in the database and
  retrieved from it again when needed, and the disk file typically
  persists after your program has exited.  See C<perltie> for more
  complete details about C<tie>.
  
  A typical example is:
  
          use DB_File;
          tie my %cache => 'DB_File', $filename, O_RDWR|O_CREAT, 0666;
          memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  This has the effect of storing the cache in a C<DB_File> database
  whose name is in C<$filename>.  The cache will persist after the
  program has exited.  Next time the program runs, it will find the
  cache already populated from the previous run of the program.  Or you
  can forcibly populate the cache by constructing a batch program that
  runs in the background and populates the cache file.  Then when you
  come to run your real program the memoized function will be fast
  because all its results have been precomputed.
  
  Another reason to use C<HASH> is to provide your own hash variable.
  You can then inspect or modify the contents of the hash to gain finer
  control over the cache management.
  
  =item C<TIE>
  
  This option is no longer supported.  It is still documented only to
  aid in the debugging of old programs that use it.  Old programs should
  be converted to use the C<HASH> option instead.
  
          memoize ... ['TIE', PACKAGE, ARGS...]
  
  is merely a shortcut for
  
          require PACKAGE;
  	{ tie my %cache, PACKAGE, ARGS...;
            memoize ... [HASH => \%cache];
          }
  
  =item C<FAULT>
  
  C<FAULT> means that you never expect to call the function in scalar
  (or list) context, and that if C<Memoize> detects such a call, it
  should abort the program.  The error message is one of
  
  	`foo' function called in forbidden list context at line ...
  	`foo' function called in forbidden scalar context at line ...
  
  =item C<MERGE>
  
  C<MERGE> normally means that the memoized function does not
  distinguish between list and sclar context, and that return values in
  both contexts should be stored together.  Both C<LIST_CACHE =E<gt>
  MERGE> and C<SCALAR_CACHE =E<gt> MERGE> mean the same thing.
  
  Consider this function:
  
  	sub complicated {
            # ... time-consuming calculation of $result
            return $result;
          }
  
  The C<complicated> function will return the same numeric C<$result>
  regardless of whether it is called in list or in scalar context.
  
  Normally, the following code will result in two calls to C<complicated>, even
  if C<complicated> is memoized:
  
      $x = complicated(142);
      ($y) = complicated(142);
      $z = complicated(142);
  
  The first call will cache the result, say 37, in the scalar cache; the
  second will cach the list C<(37)> in the list cache.  The third call
  doesn't call the real C<complicated> function; it gets the value 37
  from the scalar cache.
  
  Obviously, the second call to C<complicated> is a waste of time, and
  storing its return value is a waste of space.  Specifying C<LIST_CACHE
  =E<gt> MERGE> will make C<memoize> use the same cache for scalar and
  list context return values, so that the second call uses the scalar
  cache that was populated by the first call.  C<complicated> ends up
  being called only once, and both subsequent calls return C<3> from the
  cache, regardless of the calling context.
  
  =head3 List values in scalar context
  
  Consider this function:
  
      sub iota { return reverse (1..$_[0]) }
  
  This function normally returns a list.  Suppose you memoize it and
  merge the caches:
  
      memoize 'iota', SCALAR_CACHE => 'MERGE';
  
      @i7 = iota(7);
      $i7 = iota(7);
  
  Here the first call caches the list (1,2,3,4,5,6,7).  The second call
  does not really make sense. C<Memoize> cannot guess what behavior
  C<iota> should have in scalar context without actually calling it in
  scalar context.  Normally C<Memoize> I<would> call C<iota> in scalar
  context and cache the result, but the C<SCALAR_CACHE =E<gt> 'MERGE'>
  option says not to do that, but to use the cache list-context value
  instead. But it cannot return a list of seven elements in a scalar
  context. In this case C<$i7> will receive the B<first element> of the
  cached list value, namely 7.
  
  =head3 Merged disk caches
  
  Another use for C<MERGE> is when you want both kinds of return values
  stored in the same disk file; this saves you from having to deal with
  two disk files instead of one.  You can use a normalizer function to
  keep the two sets of return values separate.  For example:
  
          tie my %cache => 'MLDBM', 'DB_File', $filename, ...;
  
  	memoize 'myfunc',
  	  NORMALIZER => 'n',
  	  SCALAR_CACHE => [HASH => \%cache],
  	  LIST_CACHE => 'MERGE',
  	;
  
  	sub n {
  	  my $context = wantarray() ? 'L' : 'S';
  	  # ... now compute the hash key from the arguments ...
  	  $hashkey = "$context:$hashkey";
  	}
  
  This normalizer function will store scalar context return values in
  the disk file under keys that begin with C<S:>, and list context
  return values under keys that begin with C<L:>.
  
  =back
  
  =head1 OTHER FACILITIES
  
  =head2 C<unmemoize>
  
  There's an C<unmemoize> function that you can import if you want to.
  Why would you want to?  Here's an example: Suppose you have your cache
  tied to a DBM file, and you want to make sure that the cache is
  written out to disk if someone interrupts the program.  If the program
  exits normally, this will happen anyway, but if someone types
  control-C or something then the program will terminate immediately
  without synchronizing the database.  So what you can do instead is
  
      $SIG{INT} = sub { unmemoize 'function' };
  
  C<unmemoize> accepts a reference to, or the name of a previously
  memoized function, and undoes whatever it did to provide the memoized
  version in the first place, including making the name refer to the
  unmemoized version if appropriate.  It returns a reference to the
  unmemoized version of the function.
  
  If you ask it to unmemoize a function that was never memoized, it
  croaks.
  
  =head2 C<flush_cache>
  
  C<flush_cache(function)> will flush out the caches, discarding I<all>
  the cached data.  The argument may be a function name or a reference
  to a function.  For finer control over when data is discarded or
  expired, see the documentation for C<Memoize::Expire>, included in
  this package.
  
  Note that if the cache is a tied hash, C<flush_cache> will attempt to
  invoke the C<CLEAR> method on the hash.  If there is no C<CLEAR>
  method, this will cause a run-time error.
  
  An alternative approach to cache flushing is to use the C<HASH> option
  (see above) to request that C<Memoize> use a particular hash variable
  as its cache.  Then you can examine or modify the hash at any time in
  any way you desire.  You may flush the cache by using C<%hash = ()>. 
  
  =head1 CAVEATS
  
  Memoization is not a cure-all:
  
  =over 4
  
  =item *
  
  Do not memoize a function whose behavior depends on program
  state other than its own arguments, such as global variables, the time
  of day, or file input.  These functions will not produce correct
  results when memoized.  For a particularly easy example:
  
  	sub f {
  	  time;
  	}
  
  This function takes no arguments, and as far as C<Memoize> is
  concerned, it always returns the same result.  C<Memoize> is wrong, of
  course, and the memoized version of this function will call C<time> once
  to get the current time, and it will return that same time
  every time you call it after that.
  
  =item *
  
  Do not memoize a function with side effects.
  
  	sub f {
  	  my ($a, $b) = @_;
            my $s = $a + $b;
  	  print "$a + $b = $s.\n";
  	}
  
  This function accepts two arguments, adds them, and prints their sum.
  Its return value is the numuber of characters it printed, but you
  probably didn't care about that.  But C<Memoize> doesn't understand
  that.  If you memoize this function, you will get the result you
  expect the first time you ask it to print the sum of 2 and 3, but
  subsequent calls will return 1 (the return value of
  C<print>) without actually printing anything.
  
  =item *
  
  Do not memoize a function that returns a data structure that is
  modified by its caller.
  
  Consider these functions:  C<getusers> returns a list of users somehow,
  and then C<main> throws away the first user on the list and prints the
  rest:
  
  	sub main {
  	  my $userlist = getusers();
  	  shift @$userlist;
  	  foreach $u (@$userlist) {
  	    print "User $u\n";
  	  }
  	}
  
  	sub getusers {
  	  my @users;
  	  # Do something to get a list of users;
  	  \@users;  # Return reference to list.
  	}
  
  If you memoize C<getusers> here, it will work right exactly once.  The
  reference to the users list will be stored in the memo table.  C<main>
  will discard the first element from the referenced list.  The next
  time you invoke C<main>, C<Memoize> will not call C<getusers>; it will
  just return the same reference to the same list it got last time.  But
  this time the list has already had its head removed; C<main> will
  erroneously remove another element from it.  The list will get shorter
  and shorter every time you call C<main>.
  
  Similarly, this:
  
  	$u1 = getusers();    
  	$u2 = getusers();    
  	pop @$u1;
  
  will modify $u2 as well as $u1, because both variables are references
  to the same array.  Had C<getusers> not been memoized, $u1 and $u2
  would have referred to different arrays.
  
  =item * 
  
  Do not memoize a very simple function.
  
  Recently someone mentioned to me that the Memoize module made his
  program run slower instead of faster.  It turned out that he was
  memoizing the following function:
  
      sub square {
        $_[0] * $_[0];
      }
  
  I pointed out that C<Memoize> uses a hash, and that looking up a
  number in the hash is necessarily going to take a lot longer than a
  single multiplication.  There really is no way to speed up the
  C<square> function.
  
  Memoization is not magical.
  
  =back
  
  =head1 PERSISTENT CACHE SUPPORT
  
  You can tie the cache tables to any sort of tied hash that you want
  to, as long as it supports C<TIEHASH>, C<FETCH>, C<STORE>, and
  C<EXISTS>.  For example,
  
          tie my %cache => 'GDBM_File', $filename, O_RDWR|O_CREAT, 0666;
          memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  works just fine.  For some storage methods, you need a little glue.
  
  C<SDBM_File> doesn't supply an C<EXISTS> method, so included in this
  package is a glue module called C<Memoize::SDBM_File> which does
  provide one.  Use this instead of plain C<SDBM_File> to store your
  cache table on disk in an C<SDBM_File> database:
  
          tie my %cache => 'Memoize::SDBM_File', $filename, O_RDWR|O_CREAT, 0666;
          memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  C<NDBM_File> has the same problem and the same solution.  (Use
  C<Memoize::NDBM_File instead of plain NDBM_File.>)
  
  C<Storable> isn't a tied hash class at all.  You can use it to store a
  hash to disk and retrieve it again, but you can't modify the hash while
  it's on the disk.  So if you want to store your cache table in a
  C<Storable> database, use C<Memoize::Storable>, which puts a hashlike
  front-end onto C<Storable>.  The hash table is actually kept in
  memory, and is loaded from your C<Storable> file at the time you
  memoize the function, and stored back at the time you unmemoize the
  function (or when your program exits):
  
          tie my %cache => 'Memoize::Storable', $filename;
  	memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
          tie my %cache => 'Memoize::Storable', $filename, 'nstore';
  	memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  Include the `nstore' option to have the C<Storable> database written
  in `network order'.  (See L<Storable> for more details about this.)
  
  The C<flush_cache()> function will raise a run-time error unless the
  tied package provides a C<CLEAR> method.
  
  =head1 EXPIRATION SUPPORT
  
  See Memoize::Expire, which is a plug-in module that adds expiration
  functionality to Memoize.  If you don't like the kinds of policies
  that Memoize::Expire implements, it is easy to write your own plug-in
  module to implement whatever policy you desire.  Memoize comes with
  several examples.  An expiration manager that implements a LRU policy
  is available on CPAN as Memoize::ExpireLRU.
  
  =head1 BUGS
  
  The test suite is much better, but always needs improvement.
  
  There is some problem with the way C<goto &f> works under threaded
  Perl, perhaps because of the lexical scoping of C<@_>.  This is a bug
  in Perl, and until it is resolved, memoized functions will see a
  slightly different C<caller()> and will perform a little more slowly
  on threaded perls than unthreaded perls.
  
  Some versions of C<DB_File> won't let you store data under a key of
  length 0.  That means that if you have a function C<f> which you
  memoized and the cache is in a C<DB_File> database, then the value of
  C<f()> (C<f> called with no arguments) will not be memoized.  If this
  is a big problem, you can supply a normalizer function that prepends
  C<"x"> to every key.
  
  =head1 MAILING LIST
  
  To join a very low-traffic mailing list for announcements about
  C<Memoize>, send an empty note to C<mjd-perl-memoize-request@plover.com>.
  
  =head1 AUTHOR
  
  Mark-Jason Dominus (C<mjd-perl-memoize+@plover.com>), Plover Systems co.
  
  See the C<Memoize.pm> Page at http://perl.plover.com/Memoize/
  for news and upgrades.  Near this page, at
  http://perl.plover.com/MiniMemoize/ there is an article about
  memoization and about the internals of Memoize that appeared in The
  Perl Journal, issue #13.  (This article is also included in the
  Memoize distribution as `article.html'.)
  
  The author's book I<Higher-Order Perl> (2005, ISBN 1558607013, published
  by Morgan Kaufmann) discusses memoization (and many other 
  topics) in tremendous detail. It is available on-line for free.
  For more information, visit http://hop.perl.plover.com/ .
  
  To join a mailing list for announcements about C<Memoize>, send an
  empty message to C<mjd-perl-memoize-request@plover.com>.  This mailing
  list is for announcements only and has extremely low traffic---fewer than
  two messages per year.
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright 1998, 1999, 2000, 2001, 2012  by Mark Jason Dominus
  
  This library is free software; you may redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =head1 THANK YOU
  
  Many thanks to Florian Ragwitz for administration and packaging
  assistance, to John Tromp for bug reports, to Jonathan Roy for bug reports
  and suggestions, to Michael Schwern for other bug reports and patches,
  to Mike Cariaso for helping me to figure out the Right Thing to Do
  About Expiration, to Joshua Gerth, Joshua Chamas, Jonathan Roy
  (again), Mark D. Anderson, and Andrew Johnson for more suggestions
  about expiration, to Brent Powers for the Memoize::ExpireLRU module,
  to Ariel Scolnicov for delightful messages about the Fibonacci
  function, to Dion Almaer for thought-provoking suggestions about the
  default normalizer, to Walt Mankowski and Kurt Starsinic for much help
  investigating problems under threaded Perl, to Alex Dudkevich for
  reporting the bug in prototyped functions and for checking my patch,
  to Tony Bass for many helpful suggestions, to Jonathan Roy (again) for
  finding a use for C<unmemoize()>, to Philippe Verdret for enlightening
  discussion of C<Hook::PrePostCall>, to Nat Torkington for advice I
  ignored, to Chris Nandor for portability advice, to Randal Schwartz
  for suggesting the 'C<flush_cache> function, and to Jenda Krynicky for
  being a light in the world.
  
  Special thanks to Jarkko Hietaniemi, the 5.8.0 pumpking, for including
  this module in the core and for his patient and helpful guidance
  during the integration process.
  
  =cut
MEMOIZE

$fatpacked{"Memoize/AnyDBM_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_ANYDBM_FILE';
  package Memoize::AnyDBM_File;
  
  =head1 NAME
  
  Memoize::AnyDBM_File - glue to provide EXISTS for AnyDBM_File for Storable use
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use vars qw(@ISA $VERSION);
  $VERSION = '1.03';
  @ISA = qw(DB_File GDBM_File Memoize::NDBM_File Memoize::SDBM_File ODBM_File) unless @ISA;
  
  my $verbose = 1;
  
  my $mod;
  for $mod (@ISA) {
  #  (my $truemod = $mod) =~ s/^Memoize:://;
  #  my $file = "$mod.pm";
  #  $file =~ s{::}{/}g;
    if (eval "require $mod") {
      print STDERR "AnyDBM_File => Selected $mod.\n" if $Verbose;
      @ISA = ($mod);	# if we leave @ISA alone, warnings abound
      return 1;
    }
  }
  
  die "No DBM package was successfully found or installed";
MEMOIZE_ANYDBM_FILE

$fatpacked{"Memoize/Expire.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_EXPIRE';
  
  package Memoize::Expire;
  # require 5.00556;
  use Carp;
  $DEBUG = 0;
  $VERSION = '1.03';
  
  # This package will implement expiration by prepending a fixed-length header
  # to the font of the cached data.  The format of the header will be:
  # (4-byte number of last-access-time)  (For LRU when I implement it)
  # (4-byte expiration time: unsigned seconds-since-unix-epoch)
  # (2-byte number-of-uses-before-expire)
  
  sub _header_fmt () { "N N n" }
  sub _header_size () { length(_header_fmt) }
  
  # Usage:  memoize func 
  #         TIE => [Memoize::Expire, LIFETIME => sec, NUM_USES => n,
  #                 TIE => [...] ]
  
  BEGIN {
    eval {require Time::HiRes};
    unless ($@) {
      Time::HiRes->import('time');
    }
  }
  
  sub TIEHASH {
    my ($package, %args) = @_;
    my %cache;
    if ($args{TIE}) {
      my ($module, @opts) = @{$args{TIE}};
      my $modulefile = $module . '.pm';
      $modulefile =~ s{::}{/}g;
      eval { require $modulefile };
      if ($@) {
        croak "Memoize::Expire: Couldn't load hash tie module `$module': $@; aborting";
      }
      my $rc = (tie %cache => $module, @opts);
      unless ($rc) {
        croak "Memoize::Expire: Couldn't tie hash to `$module': $@; aborting";
      }
    }
    $args{LIFETIME} ||= 0;
    $args{NUM_USES} ||= 0;
    $args{C} = \%cache;
    bless \%args => $package;
  }
  
  sub STORE {
    $DEBUG and print STDERR " >> Store $_[1] $_[2]\n";
    my ($self, $key, $value) = @_;
    my $expire_time = $self->{LIFETIME} > 0 ? $self->{LIFETIME} + time : 0;
    # The call that results in a value to store into the cache is the
    # first of the NUM_USES allowed calls.
    my $header = _make_header(time, $expire_time, $self->{NUM_USES}-1);
    $self->{C}{$key} = $header . $value;
    $value;
  }
  
  sub FETCH {
    $DEBUG and print STDERR " >> Fetch cached value for $_[1]\n";
    my ($data, $last_access, $expire_time, $num_uses_left) = _get_item($_[0]{C}{$_[1]});
    $DEBUG and print STDERR " >>   (ttl: ", ($expire_time-time()), ", nuses: $num_uses_left)\n";
    $num_uses_left--;
    $last_access = time;
    _set_header(@_, $data, $last_access, $expire_time, $num_uses_left);
    $data;
  }
  
  sub EXISTS {
    $DEBUG and print STDERR " >> Exists $_[1]\n";
    unless (exists $_[0]{C}{$_[1]}) {
      $DEBUG and print STDERR "    Not in underlying hash at all.\n";
      return 0;
    }
    my $item = $_[0]{C}{$_[1]};
    my ($last_access, $expire_time, $num_uses_left) = _get_header($item);
    my $ttl = $expire_time - time;
    if ($DEBUG) {
      $_[0]{LIFETIME} and print STDERR "    Time to live for this item: $ttl\n";
      $_[0]{NUM_USES} and print STDERR "    Uses remaining: $num_uses_left\n";
    }
    if (   (! $_[0]{LIFETIME} || $expire_time > time)
        && (! $_[0]{NUM_USES} || $num_uses_left > 0 )) {
  	    $DEBUG and print STDERR "    (Still good)\n";
      return 1;
    } else {
      $DEBUG and print STDERR "    (Expired)\n";
      return 0;
    }
  }
  
  # Arguments: last access time, expire time, number of uses remaining
  sub _make_header {
    pack "N N n", @_;
  }
  
  sub _strip_header {
    substr($_[0], 10);
  }
  
  # Arguments: last access time, expire time, number of uses remaining
  sub _set_header {
    my ($self, $key, $data, @header) = @_;
    $self->{C}{$key} = _make_header(@header) . $data;
  }
  
  sub _get_item {
    my $data = substr($_[0], 10);
    my @header = unpack "N N n", substr($_[0], 0, 10);
  #  print STDERR " >> _get_item: $data => $data @header\n";
    ($data, @header);
  }
  
  # Return last access time, expire time, number of uses remaining
  sub _get_header  {
    unpack "N N n", substr($_[0], 0, 10);
  }
  
  1;
  
  =head1 NAME 
  
  Memoize::Expire - Plug-in module for automatic expiration of memoized values
  
  =head1 SYNOPSIS
  
    use Memoize;
    use Memoize::Expire;
    tie my %cache => 'Memoize::Expire',
  	  	     LIFETIME => $lifetime,    # In seconds
  		     NUM_USES => $n_uses;
  
    memoize 'function', SCALAR_CACHE => [HASH => \%cache ];
  
  =head1 DESCRIPTION
  
  Memoize::Expire is a plug-in module for Memoize.  It allows the cached
  values for memoized functions to expire automatically.  This manual
  assumes you are already familiar with the Memoize module.  If not, you
  should study that manual carefully first, paying particular attention
  to the HASH feature.
  
  Memoize::Expire is a layer of software that you can insert in between
  Memoize itself and whatever underlying package implements the cache.
  The layer presents a hash variable whose values expire whenever they
  get too old, have been used too often, or both. You tell C<Memoize> to
  use this forgetful hash as its cache instead of the default, which is
  an ordinary hash.
  
  To specify a real-time timeout, supply the C<LIFETIME> option with a
  numeric value.  Cached data will expire after this many seconds, and
  will be looked up afresh when it expires.  When a data item is looked
  up afresh, its lifetime is reset.
  
  If you specify C<NUM_USES> with an argument of I<n>, then each cached
  data item will be discarded and looked up afresh after the I<n>th time
  you access it.  When a data item is looked up afresh, its number of
  uses is reset.
  
  If you specify both arguments, data will be discarded from the cache
  when either expiration condition holds.
  
  Memoize::Expire uses a real hash internally to store the cached data.
  You can use the C<HASH> option to Memoize::Expire to supply a tied
  hash in place of the ordinary hash that Memoize::Expire will normally
  use.  You can use this feature to add Memoize::Expire as a layer in
  between a persistent disk hash and Memoize.  If you do this, you get a
  persistent disk cache whose entries expire automatically.  For
  example:
  
    #   Memoize
    #      |
    #   Memoize::Expire  enforces data expiration policy
    #      |
    #   DB_File  implements persistence of data in a disk file
    #      |
    #   Disk file
  
    use Memoize;
    use Memoize::Expire;
    use DB_File;
  
    # Set up persistence
    tie my %disk_cache => 'DB_File', $filename, O_CREAT|O_RDWR, 0666];
  
    # Set up expiration policy, supplying persistent hash as a target
    tie my %cache => 'Memoize::Expire', 
  	  	     LIFETIME => $lifetime,    # In seconds
  		     NUM_USES => $n_uses,
                       HASH => \%disk_cache; 
  
    # Set up memoization, supplying expiring persistent hash for cache
    memoize 'function', SCALAR_CACHE => [ HASH => \%cache ];
  
  =head1 INTERFACE
  
  There is nothing special about Memoize::Expire.  It is just an
  example.  If you don't like the policy that it implements, you are
  free to write your own expiration policy module that implements
  whatever policy you desire.  Here is how to do that.  Let us suppose
  that your module will be named MyExpirePolicy.
  
  Short summary: You need to create a package that defines four methods:
  
  =over 4
  
  =item 
  TIEHASH
  
  Construct and return cache object.
  
  =item 
  EXISTS
  
  Given a function argument, is the corresponding function value in the
  cache, and if so, is it fresh enough to use?
  
  =item
  FETCH
  
  Given a function argument, look up the corresponding function value in
  the cache and return it.
  
  =item 
  STORE
  
  Given a function argument and the corresponding function value, store
  them into the cache.
  
  =item
  CLEAR
  
  (Optional.)  Flush the cache completely.
  
  =back
  
  The user who wants the memoization cache to be expired according to
  your policy will say so by writing
  
    tie my %cache => 'MyExpirePolicy', args...;
    memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  This will invoke C<< MyExpirePolicy->TIEHASH(args) >>.
  MyExpirePolicy::TIEHASH should do whatever is appropriate to set up
  the cache, and it should return the cache object to the caller.
  
  For example, MyExpirePolicy::TIEHASH might create an object that
  contains a regular Perl hash (which it will to store the cached
  values) and some extra information about the arguments and how old the
  data is and things like that.  Let us call this object `C'.
  
  When Memoize needs to check to see if an entry is in the cache
  already, it will invoke C<< C->EXISTS(key) >>.  C<key> is the normalized
  function argument.  MyExpirePolicy::EXISTS should return 0 if the key
  is not in the cache, or if it has expired, and 1 if an unexpired value
  is in the cache.  It should I<not> return C<undef>, because there is a
  bug in some versions of Perl that will cause a spurious FETCH if the
  EXISTS method returns C<undef>.
  
  If your EXISTS function returns true, Memoize will try to fetch the
  cached value by invoking C<< C->FETCH(key) >>.  MyExpirePolicy::FETCH should
  return the cached value.  Otherwise, Memoize will call the memoized
  function to compute the appropriate value, and will store it into the
  cache by calling C<< C->STORE(key, value) >>.
  
  Here is a very brief example of a policy module that expires each
  cache item after ten seconds.
  
  	package Memoize::TenSecondExpire;
  
  	sub TIEHASH {
  	  my ($package, %args) = @_;
            my $cache = $args{HASH} || {};
  	  bless $cache => $package;
  	}
  
  	sub EXISTS {
  	  my ($cache, $key) = @_;
  	  if (exists $cache->{$key} && 
                $cache->{$key}{EXPIRE_TIME} > time) {
  	    return 1
  	  } else {
  	    return 0;  # Do NOT return `undef' here.
  	  }
  	}
  
  	sub FETCH {
  	  my ($cache, $key) = @_;
  	  return $cache->{$key}{VALUE};
  	}
  
  	sub STORE {
  	  my ($cache, $key, $newvalue) = @_;
  	  $cache->{$key}{VALUE} = $newvalue;
  	  $cache->{$key}{EXPIRE_TIME} = time + 10;
  	}
  
  To use this expiration policy, the user would say
  
  	use Memoize;
          tie my %cache10sec => 'Memoize::TenSecondExpire';
  	memoize 'function', SCALAR_CACHE => [HASH => \%cache10sec];
  
  Memoize would then call C<function> whenever a cached value was
  entirely absent or was older than ten seconds.
  
  You should always support a C<HASH> argument to C<TIEHASH> that ties
  the underlying cache so that the user can specify that the cache is
  also persistent or that it has some other interesting semantics.  The
  example above demonstrates how to do this, as does C<Memoize::Expire>.
  
  Another sample module, L<Memoize::Saves>, is available in a separate
  distribution on CPAN.  It implements a policy that allows you to
  specify that certain function values would always be looked up afresh.
  See the documentation for details.
  
  =head1 ALTERNATIVES
  
  Brent Powers has a C<Memoize::ExpireLRU> module that was designed to
  work with Memoize and provides expiration of least-recently-used data.
  The cache is held at a fixed number of entries, and when new data
  comes in, the least-recently used data is expired.  See
  L<http://search.cpan.org/search?mode=module&query=ExpireLRU>.
  
  Joshua Chamas's Tie::Cache module may be useful as an expiration
  manager.  (If you try this, let me know how it works out.)
  
  If you develop any useful expiration managers that you think should be
  distributed with Memoize, please let me know.
  
  =head1 CAVEATS
  
  This module is experimental, and may contain bugs.  Please report bugs
  to the address below.
  
  Number-of-uses is stored as a 16-bit unsigned integer, so can't exceed
  65535.
  
  Because of clock granularity, expiration times may occur up to one
  second sooner than you expect.  For example, suppose you store a value
  with a lifetime of ten seconds, and you store it at 12:00:00.998 on a
  certain day.  Memoize will look at the clock and see 12:00:00.  Then
  9.01 seconds later, at 12:00:10.008 you try to read it back.  Memoize
  will look at the clock and see 12:00:10 and conclude that the value
  has expired.  This will probably not occur if you have
  C<Time::HiRes> installed.
  
  =head1 AUTHOR
  
  Mark-Jason Dominus (mjd-perl-memoize+@plover.com)
  
  Mike Cariaso provided valuable insight into the best way to solve this
  problem.
  
  =head1 SEE ALSO
  
  perl(1)
  
  The Memoize man page.
  
  http://www.plover.com/~mjd/perl/Memoize/  (for news and updates)
  
  I maintain a mailing list on which I occasionally announce new
  versions of Memoize.  The list is for announcements only, not
  discussion.  To join, send an empty message to
  mjd-perl-memoize-request@Plover.com.
  
  =cut
MEMOIZE_EXPIRE

$fatpacked{"Memoize/ExpireFile.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_EXPIREFILE';
  package Memoize::ExpireFile;
  
  =head1 NAME
  
  Memoize::ExpireFile - test for Memoize expiration semantics
  
  =head1 DESCRIPTION
  
  See L<Memoize::Expire>.
  
  =cut
  
  $VERSION = '1.03';
  use Carp;
  
  my $Zero = pack("N", 0);
  
  sub TIEHASH {
    my ($package, %args) = @_;
    my $cache = $args{HASH} || {};
    bless {ARGS => \%args, C => $cache} => $package;
  }
  
  
  sub STORE {
  #  print "Expiry manager STORE handler\n";
    my ($self, $key, $data) = @_;
    my $cache = $self->{C};
    my $cur_date = pack("N", (stat($key))[9]);
    $cache->{"C$key"} = $data;
    $cache->{"T$key"} = $cur_date;
  }
  
  sub FETCH {
    my ($self, $key) = @_;
    $self->{C}{"C$key"};
  }
  
  sub EXISTS {
  #  print "Expiry manager EXISTS handler\n";
    my ($self, $key) = @_;
    my $cache_date = $self->{C}{"T$key"} || $Zero;
    my $file_date = pack("N", (stat($key))[9]);#
  #  if ($self->{ARGS}{CHECK_DATE} && $old_date gt $cur_date) {
  #    return $self->{ARGS}{CHECK_DATE}->($key, $old_date, $cur_date);
  #  } 
    my $res = $cache_date ge $file_date;
  #  print $res ? "... still good\n" : "... expired\n";
    $res;
  }
  
  1;
MEMOIZE_EXPIREFILE

$fatpacked{"Memoize/ExpireTest.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_EXPIRETEST';
  package Memoize::ExpireTest;
  
  =head1 NAME
  
  Memoize::ExpireTest - test for Memoize expiration semantics
  
  =head1 DESCRIPTION
  
  This module is just for testing expiration semantics.  It's not a very
  good example of how to write an expiration module.
  
  If you are looking for an example, I recommend that you look at the
  simple example in the Memoize::Expire documentation, or at the code
  for Memoize::Expire itself.
  
  If you have questions, I will be happy to answer them if you send them
  to mjd-perl-memoize+@plover.com.
  
  =cut
  
  $VERSION = '1.03';
  my %cache;
  
  sub TIEHASH {	
    my ($pack) = @_;
    bless \%cache => $pack;
  }
  
  sub EXISTS {
    my ($cache, $key) = @_;
    exists $cache->{$key} ? 1 : 0;
  }
  
  sub FETCH {
    my ($cache, $key) = @_;
    $cache->{$key};
  }
  
  sub STORE {
    my ($cache, $key, $val) = @_;
    $cache->{$key} = $val;
  }
  
  sub expire {
    my ($key) = @_;
    delete $cache{$key};
  }
  
  1;
MEMOIZE_EXPIRETEST

$fatpacked{"Memoize/NDBM_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_NDBM_FILE';
  package Memoize::NDBM_File;
  
  =head1 NAME
  
  Memoize::NDBM_File - glue to provide EXISTS for NDBM_File for Storable use
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use NDBM_File;
  @ISA = qw(NDBM_File);
  $VERSION = '1.03';
  
  $Verbose = 0;
  
  sub AUTOLOAD {
    warn "Nonexistent function $AUTOLOAD invoked in Memoize::NDBM_File\n";
  }
  
  sub import {
    warn "Importing Memoize::NDBM_File\n" if $Verbose;
  }
  
  
  my %keylist;
  
  # This is so ridiculous...
  sub _backhash {
    my $self = shift;
    my %fakehash;
    my $k; 
    for ($k = $self->FIRSTKEY(); defined $k; $k = $self->NEXTKEY($k)) {
      $fakehash{$k} = undef;
    }
    $keylist{$self} = \%fakehash;
  }
  
  sub EXISTS {
    warn "Memoize::NDBM_File EXISTS (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    my $r = exists $keylist{$self}{$_[0]};
    warn "Memoize::NDBM_File EXISTS (@_) ==> $r\n" if $Verbose;
    $r;
  }
  
  sub DEFINED {
    warn "Memoize::NDBM_File DEFINED (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    defined $keylist{$self}{$_[0]};
  }
  
  sub DESTROY {
    warn "Memoize::NDBM_File DESTROY (@_)\n" if $Verbose;
    my $self = shift;
    delete $keylist{$self};   # So much for reference counting...
    $self->SUPER::DESTROY(@_);
  }
  
  # Maybe establish the keylist at TIEHASH time instead?
  
  sub STORE {
    warn "Memoize::NDBM_File STORE (@_)\n" if $VERBOSE;
    my $self = shift;
    $keylist{$self}{$_[0]} = undef;
    $self->SUPER::STORE(@_);
  }
  
  
  
  # Inherit FETCH and TIEHASH
  
  1;
MEMOIZE_NDBM_FILE

$fatpacked{"Memoize/SDBM_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_SDBM_FILE';
  package Memoize::SDBM_File;
  
  =head1 NAME
  
  Memoize::SDBM_File - glue to provide EXISTS for SDBM_File for Storable use
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use SDBM_File;
  @ISA = qw(SDBM_File);
  $VERSION = '1.03';
  
  $Verbose = 0;
  
  sub AUTOLOAD {
    warn "Nonexistent function $AUTOLOAD invoked in Memoize::SDBM_File\n";
  }
  
  sub import {
    warn "Importing Memoize::SDBM_File\n" if $Verbose;
  }
  
  
  my %keylist;
  
  # This is so ridiculous...
  sub _backhash {
    my $self = shift;
    my %fakehash;
    my $k; 
    for ($k = $self->FIRSTKEY(); defined $k; $k = $self->NEXTKEY($k)) {
      $fakehash{$k} = undef;
    }
    $keylist{$self} = \%fakehash;
  }
  
  sub EXISTS {
    warn "Memoize::SDBM_File EXISTS (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    my $r = exists $keylist{$self}{$_[0]};
    warn "Memoize::SDBM_File EXISTS (@_) ==> $r\n" if $Verbose;
    $r;
  }
  
  sub DEFINED {
    warn "Memoize::SDBM_File DEFINED (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    defined $keylist{$self}{$_[0]};
  }
  
  sub DESTROY {
    warn "Memoize::SDBM_File DESTROY (@_)\n" if $Verbose;
    my $self = shift;
    delete $keylist{$self};   # So much for reference counting...
    $self->SUPER::DESTROY(@_);
  }
  
  # Maybe establish the keylist at TIEHASH time instead?
  
  sub STORE {
    warn "Memoize::SDBM_File STORE (@_)\n" if $VERBOSE;
    my $self = shift;
    $keylist{$self}{$_[0]} = undef;
    $self->SUPER::STORE(@_);
  }
  
  # Inherit FETCH and TIEHASH
  
  1;
MEMOIZE_SDBM_FILE

$fatpacked{"Memoize/Storable.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_STORABLE';
  package Memoize::Storable;
  
  =head1 NAME
  
  Memoize::Storable - store Memoized data in Storable database
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use Storable ();
  $VERSION = '1.03';
  $Verbose = 0;
  
  sub TIEHASH {
    require Carp if $Verbose;
    my $package = shift;
    my $filename = shift;
    my $truehash = (-e $filename) ? Storable::retrieve($filename) : {};
    my %options;
    print STDERR "Memoize::Storable::TIEHASH($filename, @_)\n" if $Verbose;
    @options{@_} = ();
    my $self = 
      {FILENAME => $filename, 
       H => $truehash, 
       OPTIONS => \%options
      };
    bless $self => $package;
  }
  
  sub STORE {
    require Carp if $Verbose;
    my $self = shift;
    print STDERR "Memoize::Storable::STORE(@_)\n" if $Verbose;
    $self->{H}{$_[0]} = $_[1];
  }
  
  sub FETCH {
    require Carp if $Verbose;
    my $self = shift;
    print STDERR "Memoize::Storable::FETCH(@_)\n" if $Verbose;
    $self->{H}{$_[0]};
  }
  
  sub EXISTS {
    require Carp if $Verbose;
    my $self = shift;
    print STDERR "Memoize::Storable::EXISTS(@_)\n" if $Verbose;
    exists $self->{H}{$_[0]};
  }
  
  sub DESTROY {
    require Carp if $Verbose;
    my $self= shift;
    print STDERR "Memoize::Storable::DESTROY(@_)\n" if $Verbose;
    if ($self->{OPTIONS}{'nstore'}) {
      Storable::nstore($self->{H}, $self->{FILENAME});
    } else {
      Storable::store($self->{H}, $self->{FILENAME});
    }
  }
  
  sub FIRSTKEY {
    'Fake hash from Memoize::Storable';
  }
  
  sub NEXTKEY {
    undef;
  }
  1;
MEMOIZE_STORABLE

$fatpacked{"Module/CoreList.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_CORELIST';
  package Module::CoreList;
  use strict;
  
  our ( %released, %version, %families, %upstream, %bug_tracker, %deprecated, %delta );
  
  use version;
  our $VERSION = '5.20180120';
  
  sub PKG_PATTERN () { q#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z# }
  sub _looks_like_invocant ($) { local $@; !!eval { $_[0]->isa(__PACKAGE__) } }
  
  sub _undelta {
      my ($delta) = @_;
      my (%expanded, $delta_from, $base, $changed, $removed);
      for my $v (sort keys %$delta) {
          ($delta_from, $changed, $removed) = @{$delta->{$v}}{qw( delta_from changed removed )};
          $base = $delta_from ? $expanded{$delta_from} : {};
          my %full = ( %$base, %{$changed || {}} );
          delete @full{ keys %$removed };
          $expanded{$v} = \%full;
      }
      return %expanded;
  }
  
  sub _released_order {   # Sort helper, to make '?' sort after everything else
      (substr($released{$a}, 0, 1) eq "?")
      ? ((substr($released{$b}, 0, 1) eq "?")
          ? 0
          : 1)
      : ((substr($released{$b}, 0, 1) eq "?")
          ? -1
          : $released{$a} cmp $released{$b} )
  }
  
  my $dumpinc = 0;
  sub import {
      my $self = shift;
      my $what = shift || '';
      if ($what eq 'dumpinc') {
          $dumpinc = 1;
      }
  }
  
  END {
      print "---INC---\n", join "\n" => keys %INC
        if $dumpinc;
  }
  
  
  sub first_release_raw {
      shift if defined $_[1] and $_[1] =~ PKG_PATTERN and _looks_like_invocant $_[0];
      my $module = shift;
      my $version = shift;
  
      my @perls = $version
          ? grep { defined $version{$_}{ $module } &&
                          $version{$_}{ $module } ge $version } keys %version
          : grep { exists $version{$_}{ $module }             } keys %version;
  
      return @perls;
  }
  
  sub first_release_by_date {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort _released_order @perls)[0];
  }
  
  sub first_release {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort { $a cmp $b } @perls)[0];
  }
  
  sub find_modules {
      shift if _looks_like_invocant $_[0];
      my $regex = shift;
      my @perls = @_ ? @_ : keys %version;
  
      my %mods;
      foreach (@perls) {
          while (my ($k, $v) = each %{$version{$_}}) {
              $mods{$k}++ if $k =~ $regex;
          }
      }
      return sort keys %mods
  }
  
  sub find_version {
      shift if _looks_like_invocant $_[0];
      my $v = shift;
      return $version{$v} if defined $v and defined $version{$v};
      return;
  }
  
  sub is_deprecated {
      shift if defined $_[1] and $_[1] =~ PKG_PATTERN and _looks_like_invocant $_[0];
      my $module = shift;
      my $perl_version = shift || $];
      return unless $module && exists $deprecated{$perl_version}{$module};
      return $deprecated{$perl_version}{$module};
  }
  
  sub deprecated_in {
      shift if defined $_[1] and $_[1] =~ PKG_PATTERN and _looks_like_invocant $_[0];
      my $module = shift or return;
      my @perls = grep { exists $deprecated{$_}{$module} } keys %deprecated;
      return unless @perls;
      require List::Util;
      return List::Util::minstr(@perls);
  }
  
  sub removed_from {
    my @perls = &removed_raw;
    return shift @perls;
  }
  
  sub removed_from_by_date {
    my @perls = sort _released_order &removed_raw;
    return shift @perls;
  }
  
  sub removed_raw {
    shift if defined $_[1] and $_[1] =~ PKG_PATTERN and _looks_like_invocant $_[0];
    my $mod = shift;
    return unless my @perls = sort { $a cmp $b } first_release_raw($mod);
    my $last = pop @perls;
    my @removed = grep { $_ > $last } sort { $a cmp $b } keys %version;
    return @removed;
  }
  
  sub changes_between {
    shift if _looks_like_invocant $_[0];
    my $left_ver = shift;
    my $right_ver = shift;
  
    my $left  = $version{ $left_ver };
    my $right = $version{ $right_ver };
  
    my %uniq = (%$left, %$right);
  
    my %changes;
    for my $lib (keys %uniq) {
        my $lhs = exists $left->{ $lib }
                ? (defined $left->{ $lib } ? $left->{ $lib } : '(undef)')
                : '(absent)';
        my $rhs = exists $right->{ $lib }
                ? (defined $right->{ $lib } ? $right->{ $lib } : '(undef)')
                : '(absent)';
  
        next if $lhs eq $rhs;
  
        my $change = {
          (exists $left->{$lib}  ? (left  => $left->{$lib})  : ()),
          (exists $right->{$lib} ? (right => $right->{$lib}) : ()),
        };
  
        $changes{$lib} = $change;
    }
  
    return %changes;
  }
  
  # When things escaped.
  # NB. If you put version numbers with trailing zeroes here, you
  # should also add an alias for the numerical ($]) version; see
  # just before the __END__ of this module.
  %released = (
      5.000    => '1994-10-17',
      5.001    => '1995-03-14',
      5.002    => '1996-02-29',
      5.00307  => '1996-10-10',
      5.004    => '1997-05-15',
      5.005    => '1998-07-22',
      5.00503  => '1999-03-28',
      5.00405  => '1999-04-29',
      5.006    => '2000-03-22',
      5.006001 => '2001-04-08',
      5.007003 => '2002-03-05',
      5.008    => '2002-07-19',
      5.008001 => '2003-09-25',
      5.009    => '2003-10-27',
      5.008002 => '2003-11-05',
      5.006002 => '2003-11-15',
      5.008003 => '2004-01-14',
      5.00504  => '2004-02-23',
      5.009001 => '2004-03-16',
      5.008004 => '2004-04-21',
      5.008005 => '2004-07-19',
      5.008006 => '2004-11-27',
      5.009002 => '2005-04-01',
      5.008007 => '2005-05-30',
      5.009003 => '2006-01-28',
      5.008008 => '2006-01-31',
      5.009004 => '2006-08-15',
      5.009005 => '2007-07-07',
      5.010000 => '2007-12-18',
      5.008009 => '2008-12-14',
      5.010001 => '2009-08-22',
      5.011000 => '2009-10-02',
      5.011001 => '2009-10-20',
      5.011002 => '2009-11-20',
      5.011003 => '2009-12-20',
      5.011004 => '2010-01-20',
      5.011005 => '2010-02-20',
      5.012000 => '2010-04-12',
      5.013000 => '2010-04-20',
      5.012001 => '2010-05-16',
      5.013001 => '2010-05-20',
      5.013002 => '2010-06-22',
      5.013003 => '2010-07-20',
      5.013004 => '2010-08-20',
      5.012002 => '2010-09-06',
      5.013005 => '2010-09-19',
      5.013006 => '2010-10-20',
      5.013007 => '2010-11-20',
      5.013008 => '2010-12-20',
      5.012003 => '2011-01-21',
      5.013009 => '2011-01-20',
      5.013010 => '2011-02-20',
      5.013011 => '2011-03-20',
      5.014000 => '2011-05-14',
      5.012004 => '2011-06-20',
      5.012005 => '2012-11-10',
      5.014001 => '2011-06-16',
      5.015000 => '2011-06-20',
      5.015001 => '2011-07-20',
      5.015002 => '2011-08-20',
      5.014002 => '2011-09-26',
      5.015003 => '2011-09-20',
      5.015004 => '2011-10-20',
      5.015005 => '2011-11-20',
      5.015006 => '2011-12-20',
      5.015007 => '2012-01-20',
      5.015008 => '2012-02-20',
      5.015009 => '2012-03-20',
      5.016000 => '2012-05-20',
      5.016001 => '2012-08-08',
      5.016002 => '2012-11-01',
      5.017000 => '2012-05-26',
      5.017001 => '2012-06-20',
      5.017002 => '2012-07-20',
      5.017003 => '2012-08-20',
      5.017004 => '2012-09-20',
      5.014003 => '2012-10-12',
      5.017005 => '2012-10-20',
      5.017006 => '2012-11-20',
      5.017007 => '2012-12-18',
      5.017008 => '2013-01-20',
      5.017009 => '2013-02-20',
      5.014004 => '2013-03-10',
      5.016003 => '2013-03-11',
      5.017010 => '2013-03-21',
      5.017011 => '2013-04-20',
      5.018000 => '2013-05-18',
      5.019000 => '2013-05-20',
      5.019001 => '2013-06-21',
      5.019002 => '2013-07-22',
      5.018001 => '2013-08-12',
      5.019003 => '2013-08-20',
      5.019004 => '2013-09-20',
      5.019005 => '2013-10-20',
      5.019006 => '2013-11-20',
      5.019007 => '2013-12-20',
      5.018002 => '2014-01-06',
      5.018003 => '2014-10-01',
      5.018004 => '2014-10-01',
      5.019008 => '2014-01-20',
      5.019009 => '2014-02-20',
      5.01901  => '2014-03-20',
      5.019011 => '2014-04-20',
      5.020000 => '2014-05-27',
      5.021000 => '2014-05-27',
      5.021001 => '2014-06-20',
      5.021002 => '2014-07-20',
      5.021003 => '2014-08-20',
      5.020001 => '2014-09-14',
      5.021004 => '2014-09-20',
      5.021005 => '2014-10-20',
      5.021006 => '2014-11-20',
      5.021007 => '2014-12-20',
      5.021008 => '2015-01-20',
      5.020002 => '2015-02-14',
      5.021009 => '2015-02-21',
      5.021010 => '2015-03-20',
      5.021011 => '2015-04-20',
      5.022000 => '2015-06-01',
      5.023000 => '2015-06-20',
      5.023001 => '2015-07-20',
      5.023002 => '2015-08-20',
      5.020003 => '2015-09-12',
      5.023003 => '2015-09-20',
      5.023004 => '2015-10-20',
      5.023005 => '2015-11-20',
      5.022001 => '2015-12-13',
      5.023006 => '2015-12-21',
      5.023007 => '2016-01-20',
      5.023008 => '2016-02-20',
      5.023009 => '2016-03-20',
      5.022002 => '2016-04-29',
      5.024000 => '2016-05-09',
      5.025000 => '2016-05-09',
      5.025001 => '2016-05-20',
      5.025002 => '2016-06-20',
      5.025003 => '2016-07-20',
      5.025004 => '2016-08-20',
      5.025005 => '2016-09-20',
      5.025006 => '2016-10-20',
      5.025007 => '2016-11-20',
      5.025008 => '2016-12-20',
      5.022003 => '2017-01-14',
      5.024001 => '2017-01-14',
      5.025009 => '2017-01-20',
      5.025010 => '2017-02-20',
      5.025011 => '2017-03-20',
      5.025012 => '2017-04-20',
      5.026000 => '2017-05-30',
      5.027000 => '2017-05-31',
      5.027001 => '2017-06-20',
      5.022004 => '2017-07-15',
      5.024002 => '2017-07-15',
      5.027002 => '2017-07-20',
      5.027003 => '2017-08-21',
      5.027004 => '2017-09-20',
      5.024003 => '2017-09-22',
      5.026001 => '2017-09-22',
      5.027005 => '2017-10-20',
      5.027006 => '2017-11-20',
      5.027007 => '2017-12-20',
      5.027008 => '2018-01-20',
    );
  
  for my $version ( sort { $a <=> $b } keys %released ) {
      my $family = int ($version * 1000) / 1000;
      push @{ $families{ $family }} , $version;
  }
  
  %delta = (
      5 => {
          changed => {
              'AnyDBM_File'           => undef,
              'AutoLoader'            => undef,
              'AutoSplit'             => undef,
              'Benchmark'             => undef,
              'Carp'                  => undef,
              'Cwd'                   => undef,
              'DB_File'               => undef,
              'DynaLoader'            => undef,
              'English'               => undef,
              'Env'                   => undef,
              'Exporter'              => undef,
              'ExtUtils::MakeMaker'   => undef,
              'Fcntl'                 => undef,
              'File::Basename'        => undef,
              'File::CheckTree'       => undef,
              'File::Find'            => undef,
              'FileHandle'            => undef,
              'GDBM_File'             => undef,
              'Getopt::Long'          => undef,
              'Getopt::Std'           => undef,
              'I18N::Collate'         => undef,
              'IPC::Open2'            => undef,
              'IPC::Open3'            => undef,
              'Math::BigFloat'        => undef,
              'Math::BigInt'          => undef,
              'Math::Complex'         => undef,
              'NDBM_File'             => undef,
              'Net::Ping'             => undef,
              'ODBM_File'             => undef,
              'POSIX'                 => undef,
              'SDBM_File'             => undef,
              'Search::Dict'          => undef,
              'Shell'                 => undef,
              'Socket'                => undef,
              'Sys::Hostname'         => undef,
              'Sys::Syslog'           => undef,
              'Term::Cap'             => undef,
              'Term::Complete'        => undef,
              'Test::Harness'         => undef,
              'Text::Abbrev'          => undef,
              'Text::ParseWords'      => undef,
              'Text::Soundex'         => undef,
              'Text::Tabs'            => undef,
              'TieHash'               => undef,
              'Time::Local'           => undef,
              'integer'               => undef,
              'less'                  => undef,
              'sigtrap'               => undef,
              'strict'                => undef,
              'subs'                  => undef,
          },
          removed => {
          }
      },
      5.001 => {
          delta_from => 5,
          changed => {
              'ExtUtils::Liblist'     => undef,
              'ExtUtils::Manifest'    => undef,
              'ExtUtils::Mkbootstrap' => undef,
              'File::Path'            => undef,
              'SubstrHash'            => undef,
              'lib'                   => undef,
          },
          removed => {
          }
      },
      5.002 => {
          delta_from => 5.001,
          changed => {
              'DB_File'               => '1.01',
              'Devel::SelfStubber'    => '1.01',
              'DirHandle'             => undef,
              'DynaLoader'            => '1.00',
              'ExtUtils::Install'     => undef,
              'ExtUtils::MM_OS2'      => undef,
              'ExtUtils::MM_Unix'     => undef,
              'ExtUtils::MM_VMS'      => undef,
              'ExtUtils::MakeMaker'   => '5.21',
              'ExtUtils::Manifest'    => '1.22',
              'ExtUtils::Mksymlists'  => '1.00',
              'Fcntl'                 => '1.00',
              'File::Copy'            => '1.5',
              'File::Path'            => '1.01',
              'FileCache'             => undef,
              'FileHandle'            => '1.00',
              'GDBM_File'             => '1.00',
              'Getopt::Long'          => '2.01',
              'NDBM_File'             => '1.00',
              'Net::Ping'             => '1',
              'ODBM_File'             => '1.00',
              'POSIX'                 => '1.00',
              'Pod::Functions'        => undef,
              'Pod::Text'             => undef,
              'SDBM_File'             => '1.00',
              'Safe'                  => '1.00',
              'SelectSaver'           => undef,
              'SelfLoader'            => '1.06',
              'Socket'                => '1.5',
              'Symbol'                => undef,
              'Term::ReadLine'        => undef,
              'Test::Harness'         => '1.07',
              'Text::Wrap'            => undef,
              'Tie::Hash'             => undef,
              'Tie::Scalar'           => undef,
              'Tie::SubstrHash'       => undef,
              'diagnostics'           => undef,
              'overload'              => undef,
              'vars'                  => undef,
          },
          removed => {
              'SubstrHash'            => 1,
              'TieHash'               => 1,
          }
      },
      5.00307 => {
          delta_from => 5.002,
          changed => {
              'Config'                => undef,
              'DB_File'               => '1.03',
              'ExtUtils::Embed'       => '1.18',
              'ExtUtils::Install'     => '1.15',
              'ExtUtils::Liblist'     => '1.20',
              'ExtUtils::MM_Unix'     => '1.107',
              'ExtUtils::MakeMaker'   => '5.38',
              'ExtUtils::Manifest'    => '1.27',
              'ExtUtils::Mkbootstrap' => '1.13',
              'ExtUtils::Mksymlists'  => '1.12',
              'ExtUtils::testlib'     => '1.11',
              'Fatal'                 => undef,
              'File::Basename'        => '2.4',
              'FindBin'               => '1.04',
              'Getopt::Long'          => '2.04',
              'IO'                    => undef,
              'IO::File'              => '1.05',
              'IO::Handle'            => '1.12',
              'IO::Pipe'              => '1.07',
              'IO::Seekable'          => '1.05',
              'IO::Select'            => '1.09',
              'IO::Socket'            => '1.13',
              'Net::Ping'             => '1.01',
              'OS2::ExtAttr'          => '0.01',
              'OS2::PrfDB'            => '0.02',
              'OS2::Process'          => undef,
              'OS2::REXX'             => undef,
              'Opcode'                => '1.01',
              'Safe'                  => '2.06',
              'Test::Harness'         => '1.13',
              'Text::Tabs'            => '96.051501',
              'Text::Wrap'            => '96.041801',
              'UNIVERSAL'             => undef,
              'VMS::Filespec'         => undef,
              'VMS::Stdio'            => '2.0',
              'ops'                   => undef,
              'sigtrap'               => '1.01',
          },
          removed => {
          }
      },
      5.004 => {
          delta_from => 5.00307,
          changed => {
              'Bundle::CPAN'          => '0.02',
              'CGI'                   => '2.36',
              'CGI::Apache'           => '1.01',
              'CGI::Carp'             => '1.06',
              'CGI::Fast'             => '1.00a',
              'CGI::Push'             => '1.00',
              'CGI::Switch'           => '0.05',
              'CPAN'                  => '1.2401',
              'CPAN::FirstTime'       => '1.18',
              'CPAN::Nox'             => undef,
              'Class::Struct'         => undef,
              'Cwd'                   => '2.00',
              'DB_File'               => '1.14',
              'DynaLoader'            => '1.02',
              'ExtUtils::Command'     => '1.00',
              'ExtUtils::Embed'       => '1.2501',
              'ExtUtils::Install'     => '1.16',
              'ExtUtils::Liblist'     => '1.2201',
              'ExtUtils::MM_Unix'     => '1.114',
              'ExtUtils::MM_Win32'    => undef,
              'ExtUtils::MakeMaker'   => '5.4002',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Mksymlists'  => '1.13',
              'ExtUtils::XSSymSet'    => '1.0',
              'Fcntl'                 => '1.03',
              'File::Basename'        => '2.5',
              'File::Compare'         => '1.1001',
              'File::Copy'            => '2.02',
              'File::Path'            => '1.04',
              'File::stat'            => undef,
              'FileHandle'            => '2.00',
              'Getopt::Long'          => '2.10',
              'IO::File'              => '1.0602',
              'IO::Handle'            => '1.1504',
              'IO::Pipe'              => '1.0901',
              'IO::Seekable'          => '1.06',
              'IO::Select'            => '1.10',
              'IO::Socket'            => '1.1602',
              'IPC::Open2'            => '1.01',
              'IPC::Open3'            => '1.0101',
              'Math::Complex'         => '1.01',
              'Math::Trig'            => '1',
              'Net::Ping'             => '2.02',
              'Net::hostent'          => undef,
              'Net::netent'           => undef,
              'Net::protoent'         => undef,
              'Net::servent'          => undef,
              'Opcode'                => '1.04',
              'POSIX'                 => '1.02',
              'Pod::Html'             => undef,
              'Pod::Text'             => '1.0203',
              'SelfLoader'            => '1.07',
              'Socket'                => '1.6',
              'Symbol'                => '1.02',
              'Test::Harness'         => '1.1502',
              'Text::Tabs'            => '96.121201',
              'Text::Wrap'            => '97.011701',
              'Tie::RefHash'          => undef,
              'Time::gmtime'          => '1.01',
              'Time::localtime'       => '1.01',
              'Time::tm'              => undef,
              'User::grent'           => undef,
              'User::pwent'           => undef,
              'VMS::DCLsym'           => '1.01',
              'VMS::Stdio'            => '2.02',
              'autouse'               => '1.01',
              'blib'                  => undef,
              'constant'              => '1.00',
              'locale'                => undef,
              'sigtrap'               => '1.02',
              'vmsish'                => undef,
          },
          removed => {
              'Fatal'                 => 1,
          }
      },
      5.00405 => {
          delta_from => 5.004,
          changed => {
              'AutoLoader'            => '5.56',
              'AutoSplit'             => '1.0303',
              'Bundle::CPAN'          => '0.03',
              'CGI'                   => '2.42',
              'CGI::Apache'           => '1.1',
              'CGI::Carp'             => '1.10',
              'CGI::Cookie'           => '1.06',
              'CGI::Push'             => '1.01',
              'CGI::Switch'           => '0.06',
              'CPAN'                  => '1.40',
              'CPAN::FirstTime'       => '1.30',
              'Cwd'                   => '2.01',
              'DB_File'               => '1.15',
              'DynaLoader'            => '1.03',
              'ExtUtils::Command'     => '1.01',
              'ExtUtils::Embed'       => '1.2505',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.25',
              'ExtUtils::MM_Unix'     => '1.118',
              'ExtUtils::MakeMaker'   => '5.42',
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.16',
              'File::Basename'        => '2.6',
              'File::DosGlob'         => undef,
              'File::Path'            => '1.0402',
              'File::Spec'            => '0.6',
              'File::Spec::Mac'       => '1.0',
              'File::Spec::OS2'       => undef,
              'File::Spec::Unix'      => undef,
              'File::Spec::VMS'       => undef,
              'File::Spec::Win32'     => undef,
              'FindBin'               => '1.41',
              'Getopt::Long'          => '2.19',
              'IO::File'              => '1.06021',
              'IO::Socket'            => '1.1603',
              'IPC::Open3'            => '1.0103',
              'Math::Complex'         => '1.25',
              'NDBM_File'             => '1.01',
              'Pod::Html'             => '1.0101',
              'Pod::Text'             => '1.0204',
              'SelfLoader'            => '1.08',
              'Socket'                => '1.7',
              'Test'                  => '1.04',
              'Test::Harness'         => '1.1602',
              'Text::ParseWords'      => '3.1001',
              'Text::Wrap'            => '98.112902',
              'Tie::Handle'           => undef,
              'attrs'                 => '0.1',
              'base'                  => undef,
              'blib'                  => '1.00',
              're'                    => undef,
              'strict'                => '1.01',
          },
          removed => {
          }
      },
      5.005 => {
          delta_from => 5.00405,
          changed => {
              'AutoLoader'            => undef,
              'AutoSplit'             => '1.0302',
              'B'                     => undef,
              'B::Asmdata'            => undef,
              'B::Assembler'          => undef,
              'B::Bblock'             => undef,
              'B::Bytecode'           => undef,
              'B::C'                  => undef,
              'B::CC'                 => undef,
              'B::Debug'              => undef,
              'B::Deparse'            => '0.56',
              'B::Disassembler'       => undef,
              'B::Lint'               => undef,
              'B::Showlex'            => undef,
              'B::Stackobj'           => undef,
              'B::Terse'              => undef,
              'B::Xref'               => undef,
              'CGI::Carp'             => '1.101',
              'CPAN'                  => '1.3901',
              'CPAN::FirstTime'       => '1.29',
              'DB_File'               => '1.60',
              'Data::Dumper'          => '2.09',
              'Errno'                 => '1.09',
              'ExtUtils::Installed'   => '0.02',
              'ExtUtils::MM_Unix'     => '1.12601',
              'ExtUtils::MakeMaker'   => '5.4301',
              'ExtUtils::Mkbootstrap' => '1.13',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::Packlist'    => '0.03',
              'Fatal'                 => '1.02',
              'File::Path'            => '1.0401',
              'Getopt::Long'          => '2.17',
              'IO::Handle'            => '1.1505',
              'IPC::Msg'              => '1.00',
              'IPC::Open3'            => '1.0102',
              'IPC::Semaphore'        => '1.00',
              'IPC::SysV'             => '1.03',
              'O'                     => undef,
              'OS2::Process'          => '0.2',
              'Pod::Html'             => '1.01',
              'Pod::Text'             => '1.0203',
              'Text::ParseWords'      => '3.1',
              'Text::Wrap'            => '97.02',
              'Thread'                => '1.0',
              'Thread::Queue'         => undef,
              'Thread::Semaphore'     => undef,
              'Thread::Signal'        => undef,
              'Thread::Specific'      => undef,
              'Tie::Array'            => '1.00',
              'VMS::Stdio'            => '2.1',
              'attrs'                 => '1.0',
              'fields'                => '0.02',
              're'                    => '0.02',
          },
          removed => {
              'Bundle::CPAN'          => 1,
          }
      },
      5.00503 => {
          delta_from => 5.005,
          changed => {
              'AutoSplit'             => '1.0303',
              'CGI'                   => '2.46',
              'CGI::Carp'             => '1.13',
              'CGI::Fast'             => '1.01',
              'CPAN'                  => '1.48',
              'CPAN::FirstTime'       => '1.36',
              'CPAN::Nox'             => '1.00',
              'DB_File'               => '1.65',
              'Data::Dumper'          => '2.101',
              'Dumpvalue'             => undef,
              'Errno'                 => '1.111',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.25',
              'ExtUtils::MM_Unix'     => '1.12602',
              'ExtUtils::MakeMaker'   => '5.4302',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::testlib'     => '1.11',
              'FindBin'               => '1.42',
              'Getopt::Long'          => '2.19',
              'Getopt::Std'           => '1.01',
              'IO::Pipe'              => '1.0902',
              'IPC::Open3'            => '1.0103',
              'Math::Complex'         => '1.26',
              'Test'                  => '1.122',
              'Text::Wrap'            => '98.112902',
          },
          removed => {
          }
      },
      5.00504 => {
          delta_from => 5.00503,
          changed => {
              'CPAN::FirstTime'       => '1.36',
              'DB_File'               => '1.807',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.25',
              'ExtUtils::MM_Unix'     => '1.12602',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Miniperl'    => undef,
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::testlib'     => '1.11',
              'File::Compare'         => '1.1002',
              'File::Spec'            => '0.8',
              'File::Spec::Functions' => undef,
              'File::Spec::Mac'       => undef,
              'Getopt::Long'          => '2.20',
              'Pod::Html'             => '1.02',
          },
          removed => {
          }
      },
      5.006 => {
          delta_from => 5.00504,
          changed => {
              'AutoLoader'            => '5.57',
              'AutoSplit'             => '1.0305',
              'B::Deparse'            => '0.59',
              'B::Stash'              => undef,
              'Benchmark'             => '1',
              'ByteLoader'            => '0.03',
              'CGI'                   => '2.56',
              'CGI::Apache'           => undef,
              'CGI::Carp'             => '1.14',
              'CGI::Cookie'           => '1.12',
              'CGI::Fast'             => '1.02',
              'CGI::Pretty'           => '1.03',
              'CGI::Switch'           => undef,
              'CPAN'                  => '1.52',
              'CPAN::FirstTime'       => '1.38',
              'Carp::Heavy'           => undef,
              'Class::Struct'         => '0.58',
              'Cwd'                   => '2.02',
              'DB'                    => '1.0',
              'DB_File'               => '1.72',
              'Devel::DProf'          => '20000000.00_00',
              'Devel::Peek'           => '1.00_01',
              'DynaLoader'            => '1.04',
              'Exporter'              => '5.562',
              'Exporter::Heavy'       => undef,
              'ExtUtils::MM_Cygwin'   => undef,
              'ExtUtils::MM_Unix'     => '1.12603',
              'ExtUtils::MakeMaker'   => '5.45',
              'File::Copy'            => '2.03',
              'File::Glob'            => '0.991',
              'File::Path'            => '1.0403',
              'GDBM_File'             => '1.03',
              'Getopt::Long'          => '2.23',
              'Getopt::Std'           => '1.02',
              'IO'                    => '1.20',
              'IO::Dir'               => '1.03',
              'IO::File'              => '1.08',
              'IO::Handle'            => '1.21',
              'IO::Pipe'              => '1.121',
              'IO::Poll'              => '0.01',
              'IO::Seekable'          => '1.08',
              'IO::Select'            => '1.14',
              'IO::Socket'            => '1.26',
              'IO::Socket::INET'      => '1.25',
              'IO::Socket::UNIX'      => '1.20',
              'JNI'                   => '0.01',
              'JPL::AutoLoader'       => undef,
              'JPL::Class'            => undef,
              'JPL::Compile'          => undef,
              'NDBM_File'             => '1.03',
              'ODBM_File'             => '1.02',
              'OS2::DLL'              => undef,
              'POSIX'                 => '1.03',
              'Pod::Checker'          => '1.098',
              'Pod::Find'             => '0.12',
              'Pod::Html'             => '1.03',
              'Pod::InputObjects'     => '1.12',
              'Pod::Man'              => '1.02',
              'Pod::ParseUtils'       => '0.2',
              'Pod::Parser'           => '1.12',
              'Pod::Plainer'          => '0.01',
              'Pod::Select'           => '1.12',
              'Pod::Text'             => '2.03',
              'Pod::Text::Color'      => '0.05',
              'Pod::Text::Termcap'    => '0.04',
              'Pod::Usage'            => '1.12',
              'SDBM_File'             => '1.02',
              'SelfLoader'            => '1.0901',
              'Shell'                 => '0.2',
              'Socket'                => '1.72',
              'Sys::Hostname'         => '1.1',
              'Sys::Syslog'           => '0.01',
              'Term::ANSIColor'       => '1.01',
              'Test'                  => '1.13',
              'Test::Harness'         => '1.1604',
              'Text::ParseWords'      => '3.2',
              'Text::Soundex'         => '1.0',
              'Text::Tabs'            => '98.112801',
              'Tie::Array'            => '1.01',
              'Tie::Handle'           => '1.0',
              'VMS::Stdio'            => '2.2',
              'XSLoader'              => '0.01',
              'attributes'            => '0.03',
              'autouse'               => '1.02',
              'base'                  => '1.01',
              'bytes'                 => undef,
              'charnames'             => undef,
              'constant'              => '1.02',
              'diagnostics'           => '1.0',
              'fields'                => '1.01',
              'filetest'              => undef,
              'lib'                   => '0.5564',
              'open'                  => undef,
              'utf8'                  => undef,
              'warnings'              => undef,
              'warnings::register'    => undef,
          },
          removed => {
          }
      },
      5.006001 => {
          delta_from => 5.006,
          changed => {
              'AutoLoader'            => '5.58',
              'B::Assembler'          => '0.02',
              'B::Concise'            => '0.51',
              'B::Deparse'            => '0.6',
              'ByteLoader'            => '0.04',
              'CGI'                   => '2.752',
              'CGI::Carp'             => '1.20',
              'CGI::Cookie'           => '1.18',
              'CGI::Pretty'           => '1.05',
              'CGI::Push'             => '1.04',
              'CGI::Util'             => '1.1',
              'CPAN'                  => '1.59_54',
              'CPAN::FirstTime'       => '1.53',
              'Class::Struct'         => '0.59',
              'Cwd'                   => '2.04',
              'DB_File'               => '1.75',
              'Data::Dumper'          => '2.102',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.26',
              'ExtUtils::MM_Unix'     => '1.12603',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::testlib'     => '1.11',
              'File::Path'            => '1.0404',
              'File::Spec'            => '0.82',
              'File::Spec::Epoc'      => undef,
              'File::Spec::Functions' => '1.1',
              'File::Spec::Mac'       => '1.2',
              'File::Spec::OS2'       => '1.1',
              'File::Spec::Unix'      => '1.2',
              'File::Spec::VMS'       => '1.1',
              'File::Spec::Win32'     => '1.2',
              'File::Temp'            => '0.12',
              'GDBM_File'             => '1.05',
              'Getopt::Long'          => '2.25',
              'IO::Poll'              => '0.05',
              'JNI'                   => '0.1',
              'Math::BigFloat'        => '0.02',
              'Math::BigInt'          => '0.01',
              'Math::Complex'         => '1.31',
              'NDBM_File'             => '1.04',
              'ODBM_File'             => '1.03',
              'OS2::REXX'             => '1.00',
              'Pod::Checker'          => '1.2',
              'Pod::Find'             => '0.21',
              'Pod::InputObjects'     => '1.13',
              'Pod::LaTeX'            => '0.53',
              'Pod::Man'              => '1.15',
              'Pod::ParseUtils'       => '0.22',
              'Pod::Parser'           => '1.13',
              'Pod::Select'           => '1.13',
              'Pod::Text'             => '2.08',
              'Pod::Text::Color'      => '0.06',
              'Pod::Text::Overstrike' => '1.01',
              'Pod::Text::Termcap'    => '1',
              'Pod::Usage'            => '1.14',
              'SDBM_File'             => '1.03',
              'SelfLoader'            => '1.0902',
              'Shell'                 => '0.3',
              'Term::ANSIColor'       => '1.03',
              'Test'                  => '1.15',
              'Text::Wrap'            => '2001.0131',
              'Tie::Handle'           => '4.0',
              'Tie::RefHash'          => '1.3',
          },
          removed => {
          }
      },
      5.006002 => {
          delta_from => 5.006001,
          changed => {
              'CPAN::FirstTime'       => '1.53',
              'DB_File'               => '1.806',
              'Data::Dumper'          => '2.121',
              'ExtUtils::Command'     => '1.05',
              'ExtUtils::Command::MM' => '0.03',
              'ExtUtils::Install'     => '1.32',
              'ExtUtils::Installed'   => '0.08',
              'ExtUtils::Liblist'     => '1.01',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM'          => '0.04',
              'ExtUtils::MM_Any'      => '0.07',
              'ExtUtils::MM_BeOS'     => '1.04',
              'ExtUtils::MM_Cygwin'   => '1.06',
              'ExtUtils::MM_DOS'      => '0.02',
              'ExtUtils::MM_MacOS'    => '1.07',
              'ExtUtils::MM_NW5'      => '2.06',
              'ExtUtils::MM_OS2'      => '1.04',
              'ExtUtils::MM_UWIN'     => '0.02',
              'ExtUtils::MM_Unix'     => '1.42',
              'ExtUtils::MM_VMS'      => '5.70',
              'ExtUtils::MM_Win32'    => '1.09',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MY'          => '0.01',
              'ExtUtils::MakeMaker'   => '6.17',
              'ExtUtils::MakeMaker::bytes'=> '0.01',
              'ExtUtils::MakeMaker::vmsish'=> '0.01',
              'ExtUtils::Manifest'    => '1.42',
              'ExtUtils::Mkbootstrap' => '1.15',
              'ExtUtils::Mksymlists'  => '1.19',
              'ExtUtils::Packlist'    => '0.04',
              'ExtUtils::testlib'     => '1.15',
              'File::Spec'            => '0.86',
              'File::Spec::Cygwin'    => '1.1',
              'File::Spec::Epoc'      => '1.1',
              'File::Spec::Functions' => '1.3',
              'File::Spec::Mac'       => '1.4',
              'File::Spec::OS2'       => '1.2',
              'File::Spec::Unix'      => '1.5',
              'File::Spec::VMS'       => '1.4',
              'File::Spec::Win32'     => '1.4',
              'File::Temp'            => '0.14',
              'Safe'                  => '2.10',
              'Test'                  => '1.24',
              'Test::Builder'         => '0.17',
              'Test::Harness'         => '2.30',
              'Test::Harness::Assert' => '0.01',
              'Test::Harness::Iterator'=> '0.01',
              'Test::Harness::Straps' => '0.15',
              'Test::More'            => '0.47',
              'Test::Simple'          => '0.47',
              'Unicode'               => '3.0.1',
              'if'                    => '0.03',
              'ops'                   => '1.00',
          },
          removed => {
          }
      },
      5.007003 => {
          delta_from => 5.006001,
          changed => {
              'AnyDBM_File'           => '1.00',
              'Attribute::Handlers'   => '0.76',
              'AutoLoader'            => '5.59',
              'AutoSplit'             => '1.0307',
              'B'                     => '1.00',
              'B::Asmdata'            => '1.00',
              'B::Assembler'          => '0.04',
              'B::Bblock'             => '1.00',
              'B::Bytecode'           => '1.00',
              'B::C'                  => '1.01',
              'B::CC'                 => '1.00',
              'B::Concise'            => '0.52',
              'B::Debug'              => '1.00',
              'B::Deparse'            => '0.63',
              'B::Disassembler'       => '1.01',
              'B::Lint'               => '1.00',
              'B::Showlex'            => '1.00',
              'B::Stackobj'           => '1.00',
              'B::Stash'              => '1.00',
              'B::Terse'              => '1.00',
              'B::Xref'               => '1.00',
              'Benchmark'             => '1.04',
              'CGI'                   => '2.80',
              'CGI::Apache'           => '1.00',
              'CGI::Carp'             => '1.22',
              'CGI::Cookie'           => '1.20',
              'CGI::Fast'             => '1.04',
              'CGI::Pretty'           => '1.05_00',
              'CGI::Switch'           => '1.00',
              'CGI::Util'             => '1.3',
              'CPAN'                  => '1.59_56',
              'CPAN::FirstTime'       => '1.54',
              'CPAN::Nox'             => '1.00_01',
              'Carp'                  => '1.01',
              'Carp::Heavy'           => '1.01',
              'Class::ISA'            => '0.32',
              'Class::Struct'         => '0.61',
              'Cwd'                   => '2.06',
              'DB_File'               => '1.804',
              'Data::Dumper'          => '2.12',
              'Devel::DProf'          => '20000000.00_01',
              'Devel::PPPort'         => '2.0002',
              'Devel::Peek'           => '1.00_03',
              'Devel::SelfStubber'    => '1.03',
              'Digest'                => '1.00',
              'Digest::MD5'           => '2.16',
              'DirHandle'             => '1.00',
              'Dumpvalue'             => '1.10',
              'Encode'                => '0.40',
              'Encode::CN'            => '0.02',
              'Encode::CN::HZ'        => undef,
              'Encode::Encoding'      => '0.02',
              'Encode::Internal'      => '0.30',
              'Encode::JP'            => '0.02',
              'Encode::JP::Constants' => '1.02',
              'Encode::JP::H2Z'       => '0.77',
              'Encode::JP::ISO_2022_JP'=> undef,
              'Encode::JP::JIS'       => undef,
              'Encode::JP::Tr'        => '0.77',
              'Encode::KR'            => '0.02',
              'Encode::TW'            => '0.02',
              'Encode::Tcl'           => '1.01',
              'Encode::Tcl::Escape'   => '1.01',
              'Encode::Tcl::Extended' => '1.01',
              'Encode::Tcl::HanZi'    => '1.01',
              'Encode::Tcl::Table'    => '1.01',
              'Encode::Unicode'       => '0.30',
              'Encode::XS'            => '0.40',
              'Encode::iso10646_1'    => '0.30',
              'Encode::usc2_le'       => '0.30',
              'Encode::utf8'          => '0.30',
              'English'               => '1.00',
              'Env'                   => '1.00',
              'Exporter'              => '5.566',
              'Exporter::Heavy'       => '5.562',
              'ExtUtils::Command'     => '1.02',
              'ExtUtils::Constant'    => '0.11',
              'ExtUtils::Embed'       => '1.250601',
              'ExtUtils::Install'     => '1.29',
              'ExtUtils::Installed'   => '0.04',
              'ExtUtils::Liblist'     => '1.2701',
              'ExtUtils::MM_BeOS'     => '1.00',
              'ExtUtils::MM_Cygwin'   => '1.00',
              'ExtUtils::MM_OS2'      => '1.00',
              'ExtUtils::MM_Unix'     => '1.12607',
              'ExtUtils::MM_VMS'      => '5.56',
              'ExtUtils::MM_Win32'    => '1.00_02',
              'ExtUtils::MakeMaker'   => '5.48_03',
              'ExtUtils::Manifest'    => '1.35',
              'ExtUtils::Mkbootstrap' => '1.1401',
              'ExtUtils::Mksymlists'  => '1.18',
              'ExtUtils::Packlist'    => '0.04',
              'ExtUtils::testlib'     => '1.1201',
              'Fatal'                 => '1.03',
              'Fcntl'                 => '1.04',
              'File::Basename'        => '2.71',
              'File::CheckTree'       => '4.1',
              'File::Compare'         => '1.1003',
              'File::Copy'            => '2.05',
              'File::DosGlob'         => '1.00',
              'File::Find'            => '1.04',
              'File::Glob'            => '1.01',
              'File::Path'            => '1.05',
              'File::Spec'            => '0.83',
              'File::Spec::Cygwin'    => '1.0',
              'File::Spec::Epoc'      => '1.00',
              'File::Spec::Functions' => '1.2',
              'File::Spec::Mac'       => '1.3',
              'File::Spec::Unix'      => '1.4',
              'File::Spec::VMS'       => '1.2',
              'File::Spec::Win32'     => '1.3',
              'File::Temp'            => '0.13',
              'File::stat'            => '1.00',
              'FileCache'             => '1.00',
              'FileHandle'            => '2.01',
              'Filter::Simple'        => '0.77',
              'Filter::Util::Call'    => '1.06',
              'FindBin'               => '1.43',
              'GDBM_File'             => '1.06',
              'Getopt::Long'          => '2.28',
              'Getopt::Std'           => '1.03',
              'I18N::Collate'         => '1.00',
              'I18N::LangTags'        => '0.27',
              'I18N::LangTags::List'  => '0.25',
              'I18N::Langinfo'        => '0.01',
              'IO::Dir'               => '1.03_00',
              'IO::File'              => '1.09',
              'IO::Handle'            => '1.21_00',
              'IO::Pipe'              => '1.122',
              'IO::Poll'              => '0.06',
              'IO::Seekable'          => '1.08_00',
              'IO::Select'            => '1.15',
              'IO::Socket'            => '1.27',
              'IO::Socket::INET'      => '1.26',
              'IO::Socket::UNIX'      => '1.20_00',
              'IPC::Msg'              => '1.00_00',
              'IPC::Open3'            => '1.0104',
              'IPC::Semaphore'        => '1.00_00',
              'IPC::SysV'             => '1.03_00',
              'List::Util'            => '1.06_00',
              'Locale::Constants'     => '2.01',
              'Locale::Country'       => '2.01',
              'Locale::Currency'      => '2.01',
              'Locale::Language'      => '2.01',
              'Locale::Maketext'      => '1.03',
              'Locale::Script'        => '2.01',
              'MIME::Base64'          => '2.12',
              'MIME::QuotedPrint'     => '2.03',
              'Math::BigFloat'        => '1.30',
              'Math::BigInt'          => '1.54',
              'Math::BigInt::Calc'    => '0.25',
              'Math::Complex'         => '1.34',
              'Math::Trig'            => '1.01',
              'Memoize'               => '0.66',
              'Memoize::AnyDBM_File'  => '0.65',
              'Memoize::Expire'       => '0.66',
              'Memoize::ExpireFile'   => '0.65',
              'Memoize::ExpireTest'   => '0.65',
              'Memoize::NDBM_File'    => '0.65',
              'Memoize::SDBM_File'    => '0.65',
              'Memoize::Storable'     => '0.65',
              'NEXT'                  => '0.50',
              'Net::Cmd'              => '2.21',
              'Net::Config'           => '1.10',
              'Net::Domain'           => '2.17',
              'Net::FTP'              => '2.64',
              'Net::FTP::A'           => '1.15',
              'Net::FTP::E'           => '0.01',
              'Net::FTP::I'           => '1.12',
              'Net::FTP::L'           => '0.01',
              'Net::FTP::dataconn'    => '0.10',
              'Net::NNTP'             => '2.21',
              'Net::Netrc'            => '2.12',
              'Net::POP3'             => '2.23',
              'Net::Ping'             => '2.12',
              'Net::SMTP'             => '2.21',
              'Net::Time'             => '2.09',
              'Net::hostent'          => '1.00',
              'Net::netent'           => '1.00',
              'Net::protoent'         => '1.00',
              'Net::servent'          => '1.00',
              'O'                     => '1.00',
              'OS2::DLL'              => '1.00',
              'OS2::Process'          => '1.0',
              'OS2::REXX'             => '1.01',
              'Opcode'                => '1.05',
              'POSIX'                 => '1.05',
              'PerlIO'                => '1.00',
              'PerlIO::Scalar'        => '0.01',
              'PerlIO::Via'           => '0.01',
              'Pod::Checker'          => '1.3',
              'Pod::Find'             => '0.22',
              'Pod::Functions'        => '1.01',
              'Pod::Html'             => '1.04',
              'Pod::LaTeX'            => '0.54',
              'Pod::Man'              => '1.32',
              'Pod::ParseLink'        => '1.05',
              'Pod::Text'             => '2.18',
              'Pod::Text::Color'      => '1.03',
              'Pod::Text::Overstrike' => '1.08',
              'Pod::Text::Termcap'    => '1.09',
              'Safe'                  => '2.07',
              'Scalar::Util'          => '1.06_00',
              'Search::Dict'          => '1.02',
              'SelectSaver'           => '1.00',
              'SelfLoader'            => '1.0903',
              'Shell'                 => '0.4',
              'Socket'                => '1.75',
              'Storable'              => '1.015',
              'Switch'                => '2.06',
              'Symbol'                => '1.04',
              'Sys::Syslog'           => '0.02',
              'Term::ANSIColor'       => '1.04',
              'Term::Cap'             => '1.07',
              'Term::Complete'        => '1.4',
              'Term::ReadLine'        => '1.00',
              'Test'                  => '1.18',
              'Test::Builder'         => '0.11',
              'Test::Harness'         => '2.01',
              'Test::Harness::Assert' => '0.01',
              'Test::Harness::Iterator'=> '0.01',
              'Test::Harness::Straps' => '0.08',
              'Test::More'            => '0.41',
              'Test::Simple'          => '0.41',
              'Text::Abbrev'          => '1.00',
              'Text::Balanced'        => '1.89',
              'Text::ParseWords'      => '3.21',
              'Text::Soundex'         => '1.01',
              'Text::Wrap'            => '2001.0929',
              'Thread'                => '2.00',
              'Thread::Queue'         => '1.00',
              'Thread::Semaphore'     => '1.00',
              'Thread::Signal'        => '1.00',
              'Thread::Specific'      => '1.00',
              'Tie::Array'            => '1.02',
              'Tie::File'             => '0.17',
              'Tie::Handle'           => '4.1',
              'Tie::Hash'             => '1.00',
              'Tie::Memoize'          => '1.0',
              'Tie::RefHash'          => '1.3_00',
              'Tie::Scalar'           => '1.00',
              'Tie::SubstrHash'       => '1.00',
              'Time::HiRes'           => '1.20_00',
              'Time::Local'           => '1.04',
              'Time::gmtime'          => '1.02',
              'Time::localtime'       => '1.02',
              'Time::tm'              => '1.00',
              'UNIVERSAL'             => '1.00',
              'Unicode::Collate'      => '0.10',
              'Unicode::Normalize'    => '0.14',
              'Unicode::UCD'          => '0.2',
              'User::grent'           => '1.00',
              'User::pwent'           => '1.00',
              'VMS::DCLsym'           => '1.02',
              'VMS::Filespec'         => '1.1',
              'VMS::Stdio'            => '2.3',
              'XS::Typemap'           => '0.01',
              'attributes'            => '0.04_01',
              'attrs'                 => '1.01',
              'autouse'               => '1.03',
              'base'                  => '1.02',
              'blib'                  => '1.01',
              'bytes'                 => '1.00',
              'charnames'             => '1.01',
              'constant'              => '1.04',
              'diagnostics'           => '1.1',
              'encoding'              => '1.00',
              'fields'                => '1.02',
              'filetest'              => '1.00',
              'if'                    => '0.01',
              'integer'               => '1.00',
              'less'                  => '0.01',
              'locale'                => '1.00',
              'open'                  => '1.01',
              'ops'                   => '1.00',
              'overload'              => '1.00',
              're'                    => '0.03',
              'sort'                  => '1.00',
              'strict'                => '1.02',
              'subs'                  => '1.00',
              'threads'               => '0.05',
              'threads::shared'       => '0.90',
              'utf8'                  => '1.00',
              'vars'                  => '1.01',
              'vmsish'                => '1.00',
              'warnings'              => '1.00',
              'warnings::register'    => '1.00',
          },
          removed => {
          }
      },
      5.008 => {
          delta_from => 5.007003,
          changed => {
              'Attribute::Handlers'   => '0.77',
              'B'                     => '1.01',
              'B::Lint'               => '1.01',
              'B::Xref'               => '1.01',
              'CGI'                   => '2.81',
              'CGI::Carp'             => '1.23',
              'CPAN'                  => '1.61',
              'CPAN::FirstTime'       => '1.56',
              'CPAN::Nox'             => '1.02',
              'Digest::MD5'           => '2.20',
              'Dumpvalue'             => '1.11',
              'Encode'                => '1.75',
              'Encode::Alias'         => '1.32',
              'Encode::Byte'          => '1.22',
              'Encode::CJKConstants'  => '1.00',
              'Encode::CN'            => '1.24',
              'Encode::CN::HZ'        => '1.04',
              'Encode::Config'        => '1.06',
              'Encode::EBCDIC'        => '1.21',
              'Encode::Encoder'       => '0.05',
              'Encode::Encoding'      => '1.30',
              'Encode::Guess'         => '1.06',
              'Encode::JP'            => '1.25',
              'Encode::JP::H2Z'       => '1.02',
              'Encode::JP::JIS7'      => '1.08',
              'Encode::KR'            => '1.22',
              'Encode::KR::2022_KR'   => '1.05',
              'Encode::MIME::Header'  => '1.05',
              'Encode::Symbol'        => '1.22',
              'Encode::TW'            => '1.26',
              'Encode::Unicode'       => '1.37',
              'Exporter::Heavy'       => '5.566',
              'ExtUtils::Command'     => '1.04',
              'ExtUtils::Command::MM' => '0.01',
              'ExtUtils::Constant'    => '0.12',
              'ExtUtils::Installed'   => '0.06',
              'ExtUtils::Liblist'     => '1.00',
              'ExtUtils::Liblist::Kid'=> '1.29',
              'ExtUtils::MM'          => '0.04',
              'ExtUtils::MM_Any'      => '0.04',
              'ExtUtils::MM_BeOS'     => '1.03',
              'ExtUtils::MM_Cygwin'   => '1.04',
              'ExtUtils::MM_DOS'      => '0.01',
              'ExtUtils::MM_MacOS'    => '1.03',
              'ExtUtils::MM_NW5'      => '2.05',
              'ExtUtils::MM_OS2'      => '1.03',
              'ExtUtils::MM_UWIN'     => '0.01',
              'ExtUtils::MM_Unix'     => '1.33',
              'ExtUtils::MM_VMS'      => '5.65',
              'ExtUtils::MM_Win32'    => '1.05',
              'ExtUtils::MM_Win95'    => '0.02',
              'ExtUtils::MY'          => '0.01',
              'ExtUtils::MakeMaker'   => '6.03',
              'ExtUtils::Manifest'    => '1.38',
              'ExtUtils::Mkbootstrap' => '1.15',
              'ExtUtils::Mksymlists'  => '1.19',
              'ExtUtils::testlib'     => '1.15',
              'File::CheckTree'       => '4.2',
              'FileCache'             => '1.021',
              'Filter::Simple'        => '0.78',
              'Getopt::Long'          => '2.32',
              'Hash::Util'            => '0.04',
              'List::Util'            => '1.07_00',
              'Locale::Country'       => '2.04',
              'Math::BigFloat'        => '1.35',
              'Math::BigFloat::Trace' => '0.01',
              'Math::BigInt'          => '1.60',
              'Math::BigInt::Calc'    => '0.30',
              'Math::BigInt::Trace'   => '0.01',
              'Math::BigRat'          => '0.07',
              'Memoize'               => '1.01',
              'Memoize::Expire'       => '1.00',
              'Memoize::ExpireFile'   => '1.01',
              'Net::FTP'              => '2.65',
              'Net::FTP::dataconn'    => '0.11',
              'Net::Ping'             => '2.19',
              'Net::SMTP'             => '2.24',
              'PerlIO'                => '1.01',
              'PerlIO::encoding'      => '0.06',
              'PerlIO::scalar'        => '0.01',
              'PerlIO::via'           => '0.01',
              'PerlIO::via::QuotedPrint'=> '0.04',
              'Pod::Man'              => '1.33',
              'Pod::Text'             => '2.19',
              'Scalar::Util'          => '1.07_00',
              'Storable'              => '2.04',
              'Switch'                => '2.09',
              'Sys::Syslog'           => '0.03',
              'Test'                  => '1.20',
              'Test::Builder'         => '0.15',
              'Test::Harness'         => '2.26',
              'Test::Harness::Straps' => '0.14',
              'Test::More'            => '0.45',
              'Test::Simple'          => '0.45',
              'Thread::Queue'         => '2.00',
              'Thread::Semaphore'     => '2.00',
              'Tie::File'             => '0.93',
              'Tie::RefHash'          => '1.30',
              'Unicode'               => '3.2.0',
              'Unicode::Collate'      => '0.12',
              'Unicode::Normalize'    => '0.17',
              'XS::APItest'           => '0.01',
              'attributes'            => '0.05',
              'base'                  => '1.03',
              'bigint'                => '0.02',
              'bignum'                => '0.11',
              'bigrat'                => '0.04',
              'blib'                  => '1.02',
              'encoding'              => '1.35',
              'sort'                  => '1.01',
              'threads'               => '0.99',
          },
          removed => {
              'Encode::Internal'      => 1,
              'Encode::JP::Constants' => 1,
              'Encode::JP::ISO_2022_JP'=> 1,
              'Encode::JP::JIS'       => 1,
              'Encode::JP::Tr'        => 1,
              'Encode::Tcl'           => 1,
              'Encode::Tcl::Escape'   => 1,
              'Encode::Tcl::Extended' => 1,
              'Encode::Tcl::HanZi'    => 1,
              'Encode::Tcl::Table'    => 1,
              'Encode::XS'            => 1,
              'Encode::iso10646_1'    => 1,
              'Encode::usc2_le'       => 1,
              'Encode::utf8'          => 1,
              'PerlIO::Scalar'        => 1,
              'PerlIO::Via'           => 1,
          }
      },
      5.008001 => {
          delta_from => 5.008,
          changed => {
              'Attribute::Handlers'   => '0.78',
              'AutoLoader'            => '5.60',
              'AutoSplit'             => '1.04',
              'B'                     => '1.02',
              'B::Asmdata'            => '1.01',
              'B::Assembler'          => '0.06',
              'B::Bblock'             => '1.02',
              'B::Bytecode'           => '1.01',
              'B::C'                  => '1.02',
              'B::Concise'            => '0.56',
              'B::Debug'              => '1.01',
              'B::Deparse'            => '0.64',
              'B::Disassembler'       => '1.03',
              'B::Lint'               => '1.02',
              'B::Terse'              => '1.02',
              'Benchmark'             => '1.051',
              'ByteLoader'            => '0.05',
              'CGI'                   => '3.00',
              'CGI::Carp'             => '1.26',
              'CGI::Cookie'           => '1.24',
              'CGI::Fast'             => '1.041',
              'CGI::Pretty'           => '1.07_00',
              'CGI::Util'             => '1.31',
              'CPAN'                  => '1.76_01',
              'CPAN::FirstTime'       => '1.60',
              'CPAN::Nox'             => '1.03',
              'Class::Struct'         => '0.63',
              'Cwd'                   => '2.08',
              'DB_File'               => '1.806',
              'Data::Dumper'          => '2.121',
              'Devel::DProf'          => '20030813.00',
              'Devel::PPPort'         => '2.007',
              'Devel::Peek'           => '1.01',
              'Digest'                => '1.02',
              'Digest::MD5'           => '2.27',
              'Encode'                => '1.9801',
              'Encode::Alias'         => '1.38',
              'Encode::Byte'          => '1.23',
              'Encode::CJKConstants'  => '1.02',
              'Encode::CN::HZ'        => '1.05',
              'Encode::Config'        => '1.07',
              'Encode::Encoder'       => '0.07',
              'Encode::Encoding'      => '1.33',
              'Encode::Guess'         => '1.09',
              'Encode::JP::JIS7'      => '1.12',
              'Encode::KR'            => '1.23',
              'Encode::KR::2022_KR'   => '1.06',
              'Encode::MIME::Header'  => '1.09',
              'Encode::Unicode'       => '1.40',
              'Encode::Unicode::UTF7' => '0.02',
              'English'               => '1.01',
              'Errno'                 => '1.09_00',
              'Exporter'              => '5.567',
              'Exporter::Heavy'       => '5.567',
              'ExtUtils::Command'     => '1.05',
              'ExtUtils::Command::MM' => '0.03',
              'ExtUtils::Constant'    => '0.14',
              'ExtUtils::Install'     => '1.32',
              'ExtUtils::Installed'   => '0.08',
              'ExtUtils::Liblist'     => '1.01',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM_Any'      => '0.07',
              'ExtUtils::MM_BeOS'     => '1.04',
              'ExtUtils::MM_Cygwin'   => '1.06',
              'ExtUtils::MM_DOS'      => '0.02',
              'ExtUtils::MM_MacOS'    => '1.07',
              'ExtUtils::MM_NW5'      => '2.06',
              'ExtUtils::MM_OS2'      => '1.04',
              'ExtUtils::MM_UWIN'     => '0.02',
              'ExtUtils::MM_Unix'     => '1.42',
              'ExtUtils::MM_VMS'      => '5.70',
              'ExtUtils::MM_Win32'    => '1.09',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MakeMaker'   => '6.17',
              'ExtUtils::MakeMaker::bytes'=> '0.01',
              'ExtUtils::MakeMaker::vmsish'=> '0.01',
              'ExtUtils::Manifest'    => '1.42',
              'Fcntl'                 => '1.05',
              'File::Basename'        => '2.72',
              'File::Copy'            => '2.06',
              'File::Find'            => '1.05',
              'File::Glob'            => '1.02',
              'File::Path'            => '1.06',
              'File::Spec'            => '0.86',
              'File::Spec::Cygwin'    => '1.1',
              'File::Spec::Epoc'      => '1.1',
              'File::Spec::Functions' => '1.3',
              'File::Spec::Mac'       => '1.4',
              'File::Spec::OS2'       => '1.2',
              'File::Spec::Unix'      => '1.5',
              'File::Spec::VMS'       => '1.4',
              'File::Spec::Win32'     => '1.4',
              'File::Temp'            => '0.14',
              'FileCache'             => '1.03',
              'Filter::Util::Call'    => '1.0601',
              'GDBM_File'             => '1.07',
              'Getopt::Long'          => '2.34',
              'Getopt::Std'           => '1.04',
              'Hash::Util'            => '0.05',
              'I18N::LangTags'        => '0.28',
              'I18N::LangTags::List'  => '0.26',
              'I18N::Langinfo'        => '0.02',
              'IO'                    => '1.21',
              'IO::Dir'               => '1.04',
              'IO::File'              => '1.10',
              'IO::Handle'            => '1.23',
              'IO::Seekable'          => '1.09',
              'IO::Select'            => '1.16',
              'IO::Socket'            => '1.28',
              'IO::Socket::INET'      => '1.27',
              'IO::Socket::UNIX'      => '1.21',
              'IPC::Msg'              => '1.02',
              'IPC::Open3'            => '1.0105',
              'IPC::Semaphore'        => '1.02',
              'IPC::SysV'             => '1.04',
              'JNI'                   => '0.2',
              'List::Util'            => '1.13',
              'Locale::Country'       => '2.61',
              'Locale::Currency'      => '2.21',
              'Locale::Language'      => '2.21',
              'Locale::Maketext'      => '1.06',
              'Locale::Maketext::Guts'=> undef,
              'Locale::Maketext::GutsLoader'=> undef,
              'Locale::Script'        => '2.21',
              'MIME::Base64'          => '2.20',
              'MIME::QuotedPrint'     => '2.20',
              'Math::BigFloat'        => '1.40',
              'Math::BigInt'          => '1.66',
              'Math::BigInt::Calc'    => '0.36',
              'Math::BigInt::Scalar'  => '0.11',
              'Math::BigRat'          => '0.10',
              'Math::Trig'            => '1.02',
              'NDBM_File'             => '1.05',
              'NEXT'                  => '0.60',
              'Net::Cmd'              => '2.24',
              'Net::Domain'           => '2.18',
              'Net::FTP'              => '2.71',
              'Net::FTP::A'           => '1.16',
              'Net::NNTP'             => '2.22',
              'Net::POP3'             => '2.24',
              'Net::Ping'             => '2.31',
              'Net::SMTP'             => '2.26',
              'Net::hostent'          => '1.01',
              'Net::servent'          => '1.01',
              'ODBM_File'             => '1.04',
              'OS2::DLL'              => '1.01',
              'OS2::ExtAttr'          => '0.02',
              'OS2::PrfDB'            => '0.03',
              'OS2::Process'          => '1.01',
              'OS2::REXX'             => '1.02',
              'POSIX'                 => '1.06',
              'PerlIO'                => '1.02',
              'PerlIO::encoding'      => '0.07',
              'PerlIO::scalar'        => '0.02',
              'PerlIO::via'           => '0.02',
              'PerlIO::via::QuotedPrint'=> '0.05',
              'Pod::Checker'          => '1.41',
              'Pod::Find'             => '0.24',
              'Pod::Functions'        => '1.02',
              'Pod::Html'             => '1.0501',
              'Pod::InputObjects'     => '1.14',
              'Pod::LaTeX'            => '0.55',
              'Pod::Man'              => '1.37',
              'Pod::ParseLink'        => '1.06',
              'Pod::ParseUtils'       => '0.3',
              'Pod::Perldoc'          => '3.10',
              'Pod::Perldoc::BaseTo'  => undef,
              'Pod::Perldoc::GetOptsOO'=> undef,
              'Pod::Perldoc::ToChecker'=> undef,
              'Pod::Perldoc::ToMan'   => undef,
              'Pod::Perldoc::ToNroff' => undef,
              'Pod::Perldoc::ToPod'   => undef,
              'Pod::Perldoc::ToRtf'   => undef,
              'Pod::Perldoc::ToText'  => undef,
              'Pod::Perldoc::ToTk'    => undef,
              'Pod::Perldoc::ToXml'   => undef,
              'Pod::PlainText'        => '2.01',
              'Pod::Text'             => '2.21',
              'Pod::Text::Color'      => '1.04',
              'Pod::Text::Overstrike' => '1.1',
              'Pod::Text::Termcap'    => '1.11',
              'Pod::Usage'            => '1.16',
              'SDBM_File'             => '1.04',
              'Safe'                  => '2.10',
              'Scalar::Util'          => '1.13',
              'SelfLoader'            => '1.0904',
              'Shell'                 => '0.5',
              'Socket'                => '1.76',
              'Storable'              => '2.08',
              'Switch'                => '2.10',
              'Symbol'                => '1.05',
              'Sys::Hostname'         => '1.11',
              'Sys::Syslog'           => '0.04',
              'Term::ANSIColor'       => '1.07',
              'Term::Cap'             => '1.08',
              'Term::Complete'        => '1.401',
              'Term::ReadLine'        => '1.01',
              'Test'                  => '1.24',
              'Test::Builder'         => '0.17',
              'Test::Harness'         => '2.30',
              'Test::Harness::Straps' => '0.15',
              'Test::More'            => '0.47',
              'Test::Simple'          => '0.47',
              'Text::Abbrev'          => '1.01',
              'Text::Balanced'        => '1.95',
              'Text::Wrap'            => '2001.09291',
              'Thread::Semaphore'     => '2.01',
              'Tie::Array'            => '1.03',
              'Tie::File'             => '0.97',
              'Tie::RefHash'          => '1.31',
              'Time::HiRes'           => '1.51',
              'Time::Local'           => '1.07',
              'UNIVERSAL'             => '1.01',
              'Unicode'               => '4.0.0',
              'Unicode::Collate'      => '0.28',
              'Unicode::Normalize'    => '0.23',
              'Unicode::UCD'          => '0.21',
              'VMS::Filespec'         => '1.11',
              'XS::APItest'           => '0.02',
              'XSLoader'              => '0.02',
              'attributes'            => '0.06',
              'base'                  => '2.03',
              'bigint'                => '0.04',
              'bignum'                => '0.14',
              'bigrat'                => '0.06',
              'bytes'                 => '1.01',
              'charnames'             => '1.02',
              'diagnostics'           => '1.11',
              'encoding'              => '1.47',
              'fields'                => '2.03',
              'filetest'              => '1.01',
              'if'                    => '0.03',
              'lib'                   => '0.5565',
              'open'                  => '1.02',
              'overload'              => '1.01',
              're'                    => '0.04',
              'sort'                  => '1.02',
              'strict'                => '1.03',
              'threads'               => '1.00',
              'threads::shared'       => '0.91',
              'utf8'                  => '1.02',
              'vmsish'                => '1.01',
              'warnings'              => '1.03',
          },
          removed => {
          }
      },
      5.008002 => {
          delta_from => 5.008001,
          changed => {
              'DB_File'               => '1.807',
              'Devel::PPPort'         => '2.009',
              'Digest::MD5'           => '2.30',
              'I18N::LangTags'        => '0.29',
              'I18N::LangTags::List'  => '0.29',
              'MIME::Base64'          => '2.21',
              'MIME::QuotedPrint'     => '2.21',
              'Net::Domain'           => '2.19',
              'Net::FTP'              => '2.72',
              'Pod::Perldoc'          => '3.11',
              'Time::HiRes'           => '1.52',
              'Unicode::Collate'      => '0.30',
              'Unicode::Normalize'    => '0.25',
          },
          removed => {
          }
      },
      5.008003 => {
          delta_from => 5.008002,
          changed => {
              'Benchmark'             => '1.052',
              'CGI'                   => '3.01',
              'CGI::Carp'             => '1.27',
              'CGI::Fast'             => '1.05',
              'CGI::Pretty'           => '1.08',
              'CGI::Util'             => '1.4',
              'Cwd'                   => '2.12',
              'DB_File'               => '1.808',
              'Devel::PPPort'         => '2.011',
              'Digest'                => '1.05',
              'Digest::MD5'           => '2.33',
              'Digest::base'          => '1.00',
              'Encode'                => '1.99',
              'Exporter'              => '5.57',
              'File::CheckTree'       => '4.3',
              'File::Copy'            => '2.07',
              'File::Find'            => '1.06',
              'File::Spec'            => '0.87',
              'FindBin'               => '1.44',
              'Getopt::Std'           => '1.05',
              'Math::BigFloat'        => '1.42',
              'Math::BigInt'          => '1.68',
              'Math::BigInt::Calc'    => '0.38',
              'Math::BigInt::CalcEmu' => '0.02',
              'OS2::DLL'              => '1.02',
              'POSIX'                 => '1.07',
              'PerlIO'                => '1.03',
              'PerlIO::via::QuotedPrint'=> '0.06',
              'Pod::Html'             => '1.0502',
              'Pod::Parser'           => '1.14',
              'Pod::Perldoc'          => '3.12',
              'Pod::PlainText'        => '2.02',
              'Storable'              => '2.09',
              'Test::Harness'         => '2.40',
              'Test::Harness::Assert' => '0.02',
              'Test::Harness::Iterator'=> '0.02',
              'Test::Harness::Straps' => '0.19',
              'Tie::Hash'             => '1.01',
              'Unicode::Collate'      => '0.33',
              'Unicode::Normalize'    => '0.28',
              'XS::APItest'           => '0.03',
              'base'                  => '2.04',
              'diagnostics'           => '1.12',
              'encoding'              => '1.48',
              'threads'               => '1.01',
              'threads::shared'       => '0.92',
          },
          removed => {
              'Math::BigInt::Scalar'  => 1,
          }
      },
      5.008004 => {
          delta_from => 5.008003,
          changed => {
              'Attribute::Handlers'   => '0.78_01',
              'B::Assembler'          => '0.07',
              'B::Concise'            => '0.60',
              'B::Deparse'            => '0.66',
              'Benchmark'             => '1.06',
              'CGI'                   => '3.04',
              'Carp'                  => '1.02',
              'Cwd'                   => '2.17',
              'DBM_Filter'            => '0.01',
              'DBM_Filter::compress'  => '0.01',
              'DBM_Filter::encode'    => '0.01',
              'DBM_Filter::int32'     => '0.01',
              'DBM_Filter::null'      => '0.01',
              'DBM_Filter::utf8'      => '0.01',
              'Digest'                => '1.06',
              'DynaLoader'            => '1.05',
              'Encode'                => '1.99_01',
              'Encode::CN::HZ'        => '1.0501',
              'Exporter'              => '5.58',
              'Exporter::Heavy'       => '5.57',
              'ExtUtils::Liblist::Kid'=> '1.3001',
              'ExtUtils::MM_NW5'      => '2.07_02',
              'ExtUtils::MM_Win95'    => '0.0301',
              'File::Find'            => '1.07',
              'IO::Handle'            => '1.24',
              'IO::Pipe'              => '1.123',
              'IPC::Open3'            => '1.0106',
              'Locale::Maketext'      => '1.08',
              'MIME::Base64'          => '3.01',
              'MIME::QuotedPrint'     => '3.01',
              'Math::BigFloat'        => '1.44',
              'Math::BigInt'          => '1.70',
              'Math::BigInt::Calc'    => '0.40',
              'Math::BigInt::CalcEmu' => '0.04',
              'Math::BigRat'          => '0.12',
              'ODBM_File'             => '1.05',
              'POSIX'                 => '1.08',
              'Shell'                 => '0.5.2',
              'Socket'                => '1.77',
              'Storable'              => '2.12',
              'Sys::Syslog'           => '0.05',
              'Term::ANSIColor'       => '1.08',
              'Time::HiRes'           => '1.59',
              'Unicode'               => '4.0.1',
              'Unicode::UCD'          => '0.22',
              'Win32'                 => '0.23',
              'base'                  => '2.05',
              'bigint'                => '0.05',
              'bignum'                => '0.15',
              'charnames'             => '1.03',
              'open'                  => '1.03',
              'threads'               => '1.03',
              'utf8'                  => '1.03',
          },
          removed => {
          }
      },
      5.008005 => {
          delta_from => 5.008004,
          changed => {
              'B::Concise'            => '0.61',
              'B::Deparse'            => '0.67',
              'CGI'                   => '3.05',
              'CGI::Carp'             => '1.28',
              'CGI::Util'             => '1.5',
              'Carp'                  => '1.03',
              'Carp::Heavy'           => '1.03',
              'Cwd'                   => '2.19',
              'DB_File'               => '1.809',
              'Digest'                => '1.08',
              'Encode'                => '2.01',
              'Encode::Alias'         => '2.00',
              'Encode::Byte'          => '2.00',
              'Encode::CJKConstants'  => '2.00',
              'Encode::CN'            => '2.00',
              'Encode::CN::HZ'        => '2.01',
              'Encode::Config'        => '2.00',
              'Encode::EBCDIC'        => '2.00',
              'Encode::Encoder'       => '2.00',
              'Encode::Encoding'      => '2.00',
              'Encode::Guess'         => '2.00',
              'Encode::JP'            => '2.00',
              'Encode::JP::H2Z'       => '2.00',
              'Encode::JP::JIS7'      => '2.00',
              'Encode::KR'            => '2.00',
              'Encode::KR::2022_KR'   => '2.00',
              'Encode::MIME::Header'  => '2.00',
              'Encode::Symbol'        => '2.00',
              'Encode::TW'            => '2.00',
              'Encode::Unicode'       => '2.00',
              'Encode::Unicode::UTF7' => '2.01',
              'File::Basename'        => '2.73',
              'File::Copy'            => '2.08',
              'File::Glob'            => '1.03',
              'FileCache'             => '1.04_01',
              'I18N::LangTags'        => '0.33',
              'I18N::LangTags::Detect'=> '1.03',
              'List::Util'            => '1.14',
              'Locale::Constants'     => '2.07',
              'Locale::Country'       => '2.07',
              'Locale::Currency'      => '2.07',
              'Locale::Language'      => '2.07',
              'Locale::Maketext'      => '1.09',
              'Locale::Script'        => '2.07',
              'Net::Cmd'              => '2.26',
              'Net::FTP'              => '2.75',
              'Net::NNTP'             => '2.23',
              'Net::POP3'             => '2.28',
              'Net::SMTP'             => '2.29',
              'Net::Time'             => '2.10',
              'Pod::Checker'          => '1.42',
              'Pod::Find'             => '0.2401',
              'Pod::LaTeX'            => '0.56',
              'Pod::ParseUtils'       => '1.2',
              'Pod::Perldoc'          => '3.13',
              'Safe'                  => '2.11',
              'Scalar::Util'          => '1.14',
              'Shell'                 => '0.6',
              'Storable'              => '2.13',
              'Term::Cap'             => '1.09',
              'Test'                  => '1.25',
              'Test::Harness'         => '2.42',
              'Text::ParseWords'      => '3.22',
              'Text::Wrap'            => '2001.09292',
              'Time::Local'           => '1.10',
              'Unicode::Collate'      => '0.40',
              'Unicode::Normalize'    => '0.30',
              'XS::APItest'           => '0.04',
              'autouse'               => '1.04',
              'base'                  => '2.06',
              'charnames'             => '1.04',
              'diagnostics'           => '1.13',
              'encoding'              => '2.00',
              'threads'               => '1.05',
              'utf8'                  => '1.04',
          },
          removed => {
          }
      },
      5.008006 => {
          delta_from => 5.008005,
          changed => {
              'B'                     => '1.07',
              'B::C'                  => '1.04',
              'B::Concise'            => '0.64',
              'B::Debug'              => '1.02',
              'B::Deparse'            => '0.69',
              'B::Lint'               => '1.03',
              'B::Showlex'            => '1.02',
              'Cwd'                   => '3.01',
              'DB_File'               => '1.810',
              'Data::Dumper'          => '2.121_02',
              'Devel::PPPort'         => '3.03',
              'Devel::Peek'           => '1.02',
              'Encode'                => '2.08',
              'Encode::Alias'         => '2.02',
              'Encode::Encoding'      => '2.02',
              'Encode::JP'            => '2.01',
              'Encode::Unicode'       => '2.02',
              'Exporter::Heavy'       => '5.58',
              'ExtUtils::Constant'    => '0.1401',
              'File::Spec'            => '3.01',
              'File::Spec::Win32'     => '1.5',
              'I18N::LangTags'        => '0.35',
              'I18N::LangTags::List'  => '0.35',
              'MIME::Base64'          => '3.05',
              'MIME::QuotedPrint'     => '3.03',
              'Math::BigFloat'        => '1.47',
              'Math::BigInt'          => '1.73',
              'Math::BigInt::Calc'    => '0.43',
              'Math::BigRat'          => '0.13',
              'Text::ParseWords'      => '3.23',
              'Time::HiRes'           => '1.65',
              'XS::APItest'           => '0.05',
              'diagnostics'           => '1.14',
              'encoding'              => '2.01',
              'open'                  => '1.04',
              'overload'              => '1.02',
          },
          removed => {
          }
      },
      5.008007 => {
          delta_from => 5.008006,
          changed => {
              'B'                     => '1.09',
              'B::Concise'            => '0.65',
              'B::Deparse'            => '0.7',
              'B::Disassembler'       => '1.04',
              'B::Terse'              => '1.03',
              'Benchmark'             => '1.07',
              'CGI'                   => '3.10',
              'CGI::Carp'             => '1.29',
              'CGI::Cookie'           => '1.25',
              'Carp'                  => '1.04',
              'Carp::Heavy'           => '1.04',
              'Class::ISA'            => '0.33',
              'Cwd'                   => '3.05',
              'DB_File'               => '1.811',
              'Data::Dumper'          => '2.121_04',
              'Devel::DProf'          => '20050310.00',
              'Devel::PPPort'         => '3.06',
              'Digest'                => '1.10',
              'Digest::file'          => '0.01',
              'Encode'                => '2.10',
              'Encode::Alias'         => '2.03',
              'Errno'                 => '1.09_01',
              'ExtUtils::Constant'    => '0.16',
              'ExtUtils::Constant::Base'=> '0.01',
              'ExtUtils::Constant::Utils'=> '0.01',
              'ExtUtils::Constant::XS'=> '0.01',
              'File::Find'            => '1.09',
              'File::Glob'            => '1.04',
              'File::Path'            => '1.07',
              'File::Spec'            => '3.05',
              'File::Temp'            => '0.16',
              'FileCache'             => '1.05',
              'IO::File'              => '1.11',
              'IO::Socket::INET'      => '1.28',
              'Math::BigFloat'        => '1.51',
              'Math::BigInt'          => '1.77',
              'Math::BigInt::Calc'    => '0.47',
              'Math::BigInt::CalcEmu' => '0.05',
              'Math::BigRat'          => '0.15',
              'Pod::Find'             => '1.3',
              'Pod::Html'             => '1.0503',
              'Pod::InputObjects'     => '1.3',
              'Pod::LaTeX'            => '0.58',
              'Pod::ParseUtils'       => '1.3',
              'Pod::Parser'           => '1.3',
              'Pod::Perldoc'          => '3.14',
              'Pod::Select'           => '1.3',
              'Pod::Usage'            => '1.3',
              'SelectSaver'           => '1.01',
              'Symbol'                => '1.06',
              'Sys::Syslog'           => '0.06',
              'Term::ANSIColor'       => '1.09',
              'Term::Complete'        => '1.402',
              'Test::Builder'         => '0.22',
              'Test::Harness'         => '2.48',
              'Test::Harness::Point'  => '0.01',
              'Test::Harness::Straps' => '0.23',
              'Test::More'            => '0.54',
              'Test::Simple'          => '0.54',
              'Text::ParseWords'      => '3.24',
              'Text::Wrap'            => '2001.09293',
              'Tie::RefHash'          => '1.32',
              'Time::HiRes'           => '1.66',
              'Time::Local'           => '1.11',
              'Unicode'               => '4.1.0',
              'Unicode::Normalize'    => '0.32',
              'Unicode::UCD'          => '0.23',
              'Win32'                 => '0.24',
              'XS::APItest'           => '0.06',
              'base'                  => '2.07',
              'bigint'                => '0.07',
              'bignum'                => '0.17',
              'bigrat'                => '0.08',
              'bytes'                 => '1.02',
              'constant'              => '1.05',
              'overload'              => '1.03',
              'threads::shared'       => '0.93',
              'utf8'                  => '1.05',
          },
          removed => {
              'JNI'                   => 1,
              'JPL::AutoLoader'       => 1,
              'JPL::Class'            => 1,
              'JPL::Compile'          => 1,
          }
      },
      5.008008 => {
          delta_from => 5.008007,
          changed => {
              'Attribute::Handlers'   => '0.78_02',
              'B'                     => '1.09_01',
              'B::Bblock'             => '1.02_01',
              'B::Bytecode'           => '1.01_01',
              'B::C'                  => '1.04_01',
              'B::CC'                 => '1.00_01',
              'B::Concise'            => '0.66',
              'B::Debug'              => '1.02_01',
              'B::Deparse'            => '0.71',
              'B::Disassembler'       => '1.05',
              'B::Terse'              => '1.03_01',
              'ByteLoader'            => '0.06',
              'CGI'                   => '3.15',
              'CGI::Cookie'           => '1.26',
              'CPAN'                  => '1.76_02',
              'Cwd'                   => '3.12',
              'DB'                    => '1.01',
              'DB_File'               => '1.814',
              'Data::Dumper'          => '2.121_08',
              'Devel::DProf'          => '20050603.00',
              'Devel::PPPort'         => '3.06_01',
              'Devel::Peek'           => '1.03',
              'Digest'                => '1.14',
              'Digest::MD5'           => '2.36',
              'Digest::file'          => '1.00',
              'Dumpvalue'             => '1.12',
              'Encode'                => '2.12',
              'Encode::Alias'         => '2.04',
              'Encode::Config'        => '2.01',
              'Encode::MIME::Header'  => '2.01',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.01',
              'English'               => '1.02',
              'ExtUtils::Command'     => '1.09',
              'ExtUtils::Command::MM' => '0.05',
              'ExtUtils::Constant'    => '0.17',
              'ExtUtils::Embed'       => '1.26',
              'ExtUtils::Install'     => '1.33',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM'          => '0.05',
              'ExtUtils::MM_AIX'      => '0.03',
              'ExtUtils::MM_Any'      => '0.13',
              'ExtUtils::MM_BeOS'     => '1.05',
              'ExtUtils::MM_Cygwin'   => '1.08',
              'ExtUtils::MM_MacOS'    => '1.08',
              'ExtUtils::MM_NW5'      => '2.08',
              'ExtUtils::MM_OS2'      => '1.05',
              'ExtUtils::MM_QNX'      => '0.02',
              'ExtUtils::MM_Unix'     => '1.50',
              'ExtUtils::MM_VMS'      => '5.73',
              'ExtUtils::MM_VOS'      => '0.02',
              'ExtUtils::MM_Win32'    => '1.12',
              'ExtUtils::MM_Win95'    => '0.04',
              'ExtUtils::MakeMaker'   => '6.30',
              'ExtUtils::MakeMaker::Config'=> '0.02',
              'ExtUtils::Manifest'    => '1.46',
              'File::Basename'        => '2.74',
              'File::Copy'            => '2.09',
              'File::Find'            => '1.10',
              'File::Glob'            => '1.05',
              'File::Path'            => '1.08',
              'File::Spec'            => '3.12',
              'File::Spec::Win32'     => '1.6',
              'FileCache'             => '1.06',
              'Filter::Simple'        => '0.82',
              'FindBin'               => '1.47',
              'GDBM_File'             => '1.08',
              'Getopt::Long'          => '2.35',
              'IO'                    => '1.22',
              'IO::Dir'               => '1.05',
              'IO::File'              => '1.13',
              'IO::Handle'            => '1.25',
              'IO::Pipe'              => '1.13',
              'IO::Poll'              => '0.07',
              'IO::Seekable'          => '1.10',
              'IO::Select'            => '1.17',
              'IO::Socket'            => '1.29',
              'IO::Socket::INET'      => '1.29',
              'IO::Socket::UNIX'      => '1.22',
              'IPC::Open2'            => '1.02',
              'IPC::Open3'            => '1.02',
              'List::Util'            => '1.18',
              'MIME::Base64'          => '3.07',
              'MIME::QuotedPrint'     => '3.07',
              'Math::Complex'         => '1.35',
              'Math::Trig'            => '1.03',
              'NDBM_File'             => '1.06',
              'ODBM_File'             => '1.06',
              'OS2::PrfDB'            => '0.04',
              'OS2::Process'          => '1.02',
              'OS2::REXX'             => '1.03',
              'Opcode'                => '1.06',
              'POSIX'                 => '1.09',
              'PerlIO'                => '1.04',
              'PerlIO::encoding'      => '0.09',
              'PerlIO::scalar'        => '0.04',
              'PerlIO::via'           => '0.03',
              'Pod::Checker'          => '1.43',
              'Pod::Find'             => '1.34',
              'Pod::Functions'        => '1.03',
              'Pod::Html'             => '1.0504',
              'Pod::ParseUtils'       => '1.33',
              'Pod::Parser'           => '1.32',
              'Pod::Usage'            => '1.33',
              'SDBM_File'             => '1.05',
              'Safe'                  => '2.12',
              'Scalar::Util'          => '1.18',
              'Socket'                => '1.78',
              'Storable'              => '2.15',
              'Switch'                => '2.10_01',
              'Sys::Syslog'           => '0.13',
              'Term::ANSIColor'       => '1.10',
              'Term::ReadLine'        => '1.02',
              'Test::Builder'         => '0.32',
              'Test::Builder::Module' => '0.02',
              'Test::Builder::Tester' => '1.02',
              'Test::Builder::Tester::Color'=> undef,
              'Test::Harness'         => '2.56',
              'Test::Harness::Straps' => '0.26',
              'Test::More'            => '0.62',
              'Test::Simple'          => '0.62',
              'Text::Tabs'            => '2005.0824',
              'Text::Wrap'            => '2005.082401',
              'Tie::Hash'             => '1.02',
              'Time::HiRes'           => '1.86',
              'Unicode::Collate'      => '0.52',
              'Unicode::UCD'          => '0.24',
              'User::grent'           => '1.01',
              'Win32'                 => '0.2601',
              'XS::APItest'           => '0.08',
              'XS::Typemap'           => '0.02',
              'XSLoader'              => '0.06',
              'attrs'                 => '1.02',
              'autouse'               => '1.05',
              'blib'                  => '1.03',
              'charnames'             => '1.05',
              'diagnostics'           => '1.15',
              'encoding'              => '2.02',
              'if'                    => '0.05',
              'open'                  => '1.05',
              'ops'                   => '1.01',
              'overload'              => '1.04',
              're'                    => '0.05',
              'threads'               => '1.07',
              'threads::shared'       => '0.94',
              'utf8'                  => '1.06',
              'vmsish'                => '1.02',
              'warnings'              => '1.05',
              'warnings::register'    => '1.01',
          },
          removed => {
          }
      },
      5.008009 => {
          delta_from => 5.008008,
          changed => {
              'Attribute::Handlers'   => '0.78_03',
              'AutoLoader'            => '5.67',
              'AutoSplit'             => '1.06',
              'B'                     => '1.19',
              'B::Asmdata'            => '1.02',
              'B::Assembler'          => '0.08',
              'B::C'                  => '1.05',
              'B::Concise'            => '0.76',
              'B::Debug'              => '1.05',
              'B::Deparse'            => '0.87',
              'B::Lint'               => '1.11',
              'B::Lint::Debug'        => undef,
              'B::Terse'              => '1.05',
              'Benchmark'             => '1.1',
              'CGI'                   => '3.42',
              'CGI::Carp'             => '1.30_01',
              'CGI::Cookie'           => '1.29',
              'CGI::Fast'             => '1.07',
              'CGI::Util'             => '1.5_01',
              'CPAN'                  => '1.9301',
              'CPAN::Debug'           => '5.5',
              'CPAN::DeferedCode'     => '5.50',
              'CPAN::Distroprefs'     => '6',
              'CPAN::FirstTime'       => '5.5_01',
              'CPAN::HandleConfig'    => '5.5',
              'CPAN::Kwalify'         => '5.50',
              'CPAN::Nox'             => '5.50',
              'CPAN::Queue'           => '5.5',
              'CPAN::Tarzip'          => '5.5',
              'CPAN::Version'         => '5.5',
              'Carp'                  => '1.10',
              'Carp::Heavy'           => '1.10',
              'Cwd'                   => '3.29',
              'DBM_Filter'            => '0.02',
              'DBM_Filter::compress'  => '0.02',
              'DBM_Filter::encode'    => '0.02',
              'DBM_Filter::int32'     => '0.02',
              'DBM_Filter::null'      => '0.02',
              'DBM_Filter::utf8'      => '0.02',
              'DB_File'               => '1.817',
              'Data::Dumper'          => '2.121_17',
              'Devel::DProf'          => '20080331.00',
              'Devel::InnerPackage'   => '0.3',
              'Devel::PPPort'         => '3.14',
              'Devel::Peek'           => '1.04',
              'Digest'                => '1.15',
              'Digest::MD5'           => '2.37',
              'DirHandle'             => '1.02',
              'DynaLoader'            => '1.09',
              'Encode'                => '2.26',
              'Encode::Alias'         => '2.10',
              'Encode::Byte'          => '2.03',
              'Encode::CJKConstants'  => '2.02',
              'Encode::CN'            => '2.02',
              'Encode::CN::HZ'        => '2.05',
              'Encode::Config'        => '2.05',
              'Encode::EBCDIC'        => '2.02',
              'Encode::Encoder'       => '2.01',
              'Encode::Encoding'      => '2.05',
              'Encode::GSM0338'       => '2.01',
              'Encode::Guess'         => '2.02',
              'Encode::JP'            => '2.03',
              'Encode::JP::H2Z'       => '2.02',
              'Encode::JP::JIS7'      => '2.04',
              'Encode::KR'            => '2.02',
              'Encode::KR::2022_KR'   => '2.02',
              'Encode::MIME::Header'  => '2.05',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.03',
              'Encode::MIME::Name'    => '1.01',
              'Encode::Symbol'        => '2.02',
              'Encode::TW'            => '2.02',
              'Encode::Unicode'       => '2.05',
              'Encode::Unicode::UTF7' => '2.04',
              'English'               => '1.03',
              'Errno'                 => '1.10',
              'Exporter'              => '5.63',
              'Exporter::Heavy'       => '5.63',
              'ExtUtils::Command'     => '1.15',
              'ExtUtils::Command::MM' => '6.48',
              'ExtUtils::Constant'    => '0.21',
              'ExtUtils::Constant::Base'=> '0.04',
              'ExtUtils::Constant::ProxySubs'=> '0.06',
              'ExtUtils::Constant::Utils'=> '0.02',
              'ExtUtils::Constant::XS'=> '0.02',
              'ExtUtils::Embed'       => '1.28',
              'ExtUtils::Install'     => '1.50_01',
              'ExtUtils::Installed'   => '1.43',
              'ExtUtils::Liblist'     => '6.48',
              'ExtUtils::Liblist::Kid'=> '6.48',
              'ExtUtils::MM'          => '6.48',
              'ExtUtils::MM_AIX'      => '6.48',
              'ExtUtils::MM_Any'      => '6.48',
              'ExtUtils::MM_BeOS'     => '6.48',
              'ExtUtils::MM_Cygwin'   => '6.48',
              'ExtUtils::MM_DOS'      => '6.48',
              'ExtUtils::MM_Darwin'   => '6.48',
              'ExtUtils::MM_MacOS'    => '6.48',
              'ExtUtils::MM_NW5'      => '6.48',
              'ExtUtils::MM_OS2'      => '6.48',
              'ExtUtils::MM_QNX'      => '6.48',
              'ExtUtils::MM_UWIN'     => '6.48',
              'ExtUtils::MM_Unix'     => '6.48',
              'ExtUtils::MM_VMS'      => '6.48',
              'ExtUtils::MM_VOS'      => '6.48',
              'ExtUtils::MM_Win32'    => '6.48',
              'ExtUtils::MM_Win95'    => '6.48',
              'ExtUtils::MY'          => '6.48',
              'ExtUtils::MakeMaker'   => '6.48',
              'ExtUtils::MakeMaker::Config'=> '6.48',
              'ExtUtils::MakeMaker::bytes'=> '6.48',
              'ExtUtils::MakeMaker::vmsish'=> '6.48',
              'ExtUtils::Manifest'    => '1.55',
              'ExtUtils::Mkbootstrap' => '6.48',
              'ExtUtils::Mksymlists'  => '6.48',
              'ExtUtils::Packlist'    => '1.43',
              'ExtUtils::ParseXS'     => '2.19',
              'ExtUtils::XSSymSet'    => '1.1',
              'ExtUtils::testlib'     => '6.48',
              'Fatal'                 => '1.06',
              'Fcntl'                 => '1.06',
              'File::Basename'        => '2.77',
              'File::CheckTree'       => '4.4',
              'File::Compare'         => '1.1005',
              'File::Copy'            => '2.13',
              'File::DosGlob'         => '1.01',
              'File::Find'            => '1.13',
              'File::Glob'            => '1.06',
              'File::Path'            => '2.07_02',
              'File::Spec'            => '3.29',
              'File::Spec::Cygwin'    => '3.29',
              'File::Spec::Epoc'      => '3.29',
              'File::Spec::Functions' => '3.29',
              'File::Spec::Mac'       => '3.29',
              'File::Spec::OS2'       => '3.29',
              'File::Spec::Unix'      => '3.29',
              'File::Spec::VMS'       => '3.29',
              'File::Spec::Win32'     => '3.29',
              'File::Temp'            => '0.20',
              'File::stat'            => '1.01',
              'FileCache'             => '1.07',
              'Filter::Simple'        => '0.83',
              'Filter::Util::Call'    => '1.07',
              'FindBin'               => '1.49',
              'GDBM_File'             => '1.09',
              'Getopt::Long'          => '2.37',
              'Getopt::Std'           => '1.06',
              'Hash::Util'            => '0.06',
              'IO'                    => '1.23',
              'IO::Dir'               => '1.06',
              'IO::File'              => '1.14',
              'IO::Handle'            => '1.27',
              'IO::Socket'            => '1.30',
              'IO::Socket::INET'      => '1.31',
              'IO::Socket::UNIX'      => '1.23',
              'IPC::Msg'              => '2.00',
              'IPC::Open2'            => '1.03',
              'IPC::Open3'            => '1.03',
              'IPC::Semaphore'        => '2.00',
              'IPC::SharedMem'        => '2.00',
              'IPC::SysV'             => '2.00',
              'List::Util'            => '1.19',
              'Locale::Maketext'      => '1.13',
              'Locale::Maketext::Guts'=> '1.13',
              'Locale::Maketext::GutsLoader'=> '1.13',
              'Math::BigFloat'        => '1.60',
              'Math::BigInt'          => '1.89',
              'Math::BigInt::Calc'    => '0.52',
              'Math::BigRat'          => '0.22',
              'Math::Complex'         => '1.54',
              'Math::Trig'            => '1.18',
              'Module::CoreList'      => '2.17',
              'Module::Pluggable'     => '3.8',
              'Module::Pluggable::Object'=> '3.6',
              'NDBM_File'             => '1.07',
              'NEXT'                  => '0.61',
              'Net::Cmd'              => '2.29',
              'Net::Config'           => '1.11',
              'Net::Domain'           => '2.20',
              'Net::FTP'              => '2.77',
              'Net::FTP::A'           => '1.18',
              'Net::NNTP'             => '2.24',
              'Net::POP3'             => '2.29',
              'Net::Ping'             => '2.35',
              'Net::SMTP'             => '2.31',
              'O'                     => '1.01',
              'ODBM_File'             => '1.07',
              'OS2::DLL'              => '1.03',
              'OS2::Process'          => '1.03',
              'Opcode'                => '1.0601',
              'POSIX'                 => '1.15',
              'PerlIO'                => '1.05',
              'PerlIO::encoding'      => '0.11',
              'PerlIO::scalar'        => '0.06',
              'PerlIO::via'           => '0.05',
              'Pod::Html'             => '1.09',
              'Pod::ParseUtils'       => '1.35',
              'Pod::Parser'           => '1.35',
              'Pod::Select'           => '1.35',
              'Pod::Usage'            => '1.35',
              'SDBM_File'             => '1.06',
              'Safe'                  => '2.16',
              'Scalar::Util'          => '1.19',
              'SelfLoader'            => '1.17',
              'Shell'                 => '0.72',
              'Socket'                => '1.81',
              'Storable'              => '2.19',
              'Switch'                => '2.13',
              'Sys::Syslog'           => '0.27',
              'Sys::Syslog::win32::Win32'=> undef,
              'Term::ANSIColor'       => '1.12',
              'Term::Cap'             => '1.12',
              'Term::ReadLine'        => '1.03',
              'Test::Builder'         => '0.80',
              'Test::Builder::Module' => '0.80',
              'Test::Builder::Tester' => '1.13',
              'Test::Harness'         => '2.64',
              'Test::Harness::Results'=> '0.01_01',
              'Test::Harness::Straps' => '0.26_01',
              'Test::Harness::Util'   => '0.01',
              'Test::More'            => '0.80',
              'Test::Simple'          => '0.80',
              'Text::Balanced'        => '1.98',
              'Text::ParseWords'      => '3.27',
              'Text::Soundex'         => '3.03',
              'Text::Tabs'            => '2007.1117',
              'Text::Wrap'            => '2006.1117',
              'Thread'                => '2.01',
              'Thread::Queue'         => '2.11',
              'Thread::Semaphore'     => '2.09',
              'Tie::Handle'           => '4.2',
              'Tie::Hash'             => '1.03',
              'Tie::Memoize'          => '1.1',
              'Tie::RefHash'          => '1.38',
              'Tie::Scalar'           => '1.01',
              'Tie::StdHandle'        => '4.2',
              'Time::HiRes'           => '1.9715',
              'Time::Local'           => '1.1901',
              'Time::gmtime'          => '1.03',
              'Unicode'               => '5.1.0',
              'Unicode::Normalize'    => '1.02',
              'Unicode::UCD'          => '0.25',
              'VMS::DCLsym'           => '1.03',
              'VMS::Stdio'            => '2.4',
              'Win32'                 => '0.38',
              'Win32API::File'        => '0.1001_01',
              'Win32API::File::ExtUtils::Myconst2perl'=> '1',
              'Win32CORE'             => '0.02',
              'XS::APItest'           => '0.15',
              'XS::Typemap'           => '0.03',
              'XSLoader'              => '0.10',
              'attributes'            => '0.09',
              'autouse'               => '1.06',
              'base'                  => '2.13',
              'bigint'                => '0.23',
              'bignum'                => '0.23',
              'bigrat'                => '0.23',
              'blib'                  => '1.04',
              'charnames'             => '1.06',
              'constant'              => '1.17',
              'diagnostics'           => '1.16',
              'encoding'              => '2.6_01',
              'fields'                => '2.12',
              'filetest'              => '1.02',
              'lib'                   => '0.61',
              'open'                  => '1.06',
              'ops'                   => '1.02',
              'overload'              => '1.06',
              're'                    => '0.0601',
              'sigtrap'               => '1.04',
              'threads'               => '1.71',
              'threads::shared'       => '1.27',
              'utf8'                  => '1.07',
              'warnings'              => '1.05_01',
          },
          removed => {
          }
      },
      5.009 => {
          delta_from => 5.008002,
          changed => {
              'B'                     => '1.03',
              'B::C'                  => '1.03',
              'B::Concise'            => '0.57',
              'B::Deparse'            => '0.65',
              'DB_File'               => '1.806',
              'Devel::PPPort'         => '2.008',
              'English'               => '1.02',
              'Fatal'                 => '1.04',
              'OS2::DLL'              => '1.02',
              'Opcode'                => '1.06',
              'Time::HiRes'           => '1.51',
              'Unicode::Collate'      => '0.28',
              'Unicode::Normalize'    => '0.23',
              'XSLoader'              => '0.03',
              'assertions'            => '0.01',
              'assertions::activate'  => '0.01',
              'overload'              => '1.02',
              'version'               => '0.29',
          },
          removed => {
          }
      },
      5.009001 => {
          delta_from => 5.008004,
          changed => {
              'B'                     => '1.05',
              'B::Assembler'          => '0.06',
              'B::C'                  => '1.04',
              'B::Concise'            => '0.59',
              'B::Debug'              => '1.02',
              'B::Deparse'            => '0.65',
              'DB_File'               => '1.808_01',
              'Devel::PPPort'         => '2.011_01',
              'Digest'                => '1.05',
              'DynaLoader'            => '1.04',
              'English'               => '1.02',
              'Exporter::Heavy'       => '5.567',
              'ExtUtils::Command'     => '1.07',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM_Any'      => '0.0901',
              'ExtUtils::MM_Cygwin'   => '1.07',
              'ExtUtils::MM_NW5'      => '2.07_01',
              'ExtUtils::MM_Unix'     => '1.45_01',
              'ExtUtils::MM_VMS'      => '5.71_01',
              'ExtUtils::MM_Win32'    => '1.10_01',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MakeMaker'   => '6.21_02',
              'ExtUtils::Manifest'    => '1.43',
              'Fatal'                 => '1.04',
              'Getopt::Long'          => '2.3401',
              'IO::Handle'            => '1.23',
              'IO::Pipe'              => '1.122',
              'IPC::Open3'            => '1.0105',
              'MIME::Base64'          => '3.00_01',
              'MIME::QuotedPrint'     => '3.00',
              'Memoize'               => '1.01_01',
              'ODBM_File'             => '1.04',
              'Opcode'                => '1.06',
              'POSIX'                 => '1.07',
              'Storable'              => '2.11',
              'Time::HiRes'           => '1.56',
              'Time::Local'           => '1.07_94',
              'UNIVERSAL'             => '1.02',
              'Unicode'               => '4.0.0',
              'Unicode::UCD'          => '0.21',
              'XSLoader'              => '0.03',
              'assertions'            => '0.01',
              'assertions::activate'  => '0.01',
              'base'                  => '2.04',
              'if'                    => '0.0401',
              'open'                  => '1.02',
              'overload'              => '1.02',
              'threads'               => '1.02',
              'utf8'                  => '1.02',
              'version'               => '0.36',
          },
          removed => {
          }
      },
      5.009002 => {
          delta_from => 5.008007,
          changed => {
              'B'                     => '1.07',
              'B::Concise'            => '0.64',
              'B::Deparse'            => '0.69',
              'B::Disassembler'       => '1.03',
              'B::Terse'              => '1.02',
              'CGI'                   => '3.07',
              'Config::Extensions'    => '0.01',
              'Devel::DProf'          => '20030813.00',
              'DynaLoader'            => '1.07',
              'Encode'                => '2.09',
              'Encode::Alias'         => '2.02',
              'English'               => '1.03',
              'Exporter'              => '5.59',
              'Exporter::Heavy'       => '5.59',
              'ExtUtils::Command'     => '1.07',
              'ExtUtils::Command::MM' => '0.03_01',
              'ExtUtils::Embed'       => '1.26',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM_Any'      => '0.10',
              'ExtUtils::MM_Cygwin'   => '1.07',
              'ExtUtils::MM_MacOS'    => '1.08',
              'ExtUtils::MM_NW5'      => '2.07',
              'ExtUtils::MM_Unix'     => '1.46_01',
              'ExtUtils::MM_VMS'      => '5.71',
              'ExtUtils::MM_Win32'    => '1.10',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MakeMaker'   => '6.25',
              'ExtUtils::Manifest'    => '1.44',
              'Fatal'                 => '1.04',
              'File::Path'            => '1.06',
              'FileCache'             => '1.04_01',
              'Getopt::Long'          => '2.3401',
              'IO::File'              => '1.10',
              'IO::Socket::INET'      => '1.27',
              'Math::BigFloat'        => '1.49',
              'Math::BigInt'          => '1.75',
              'Math::BigInt::Calc'    => '0.45',
              'Math::BigRat'          => '0.14',
              'Memoize'               => '1.01_01',
              'Module::CoreList'      => '1.99',
              'NEXT'                  => '0.60_01',
              'Opcode'                => '1.06',
              'Pod::Html'             => '1.0502',
              'Scalar::Util'          => '1.14_1',
              'Storable'              => '2.14',
              'Symbol'                => '1.05',
              'Test::Harness'         => '2.46',
              'Test::Harness::Straps' => '0.20_01',
              'Text::Balanced'        => '1.95_01',
              'Text::Wrap'            => '2001.09292',
              'UNIVERSAL'             => '1.02',
              'Unicode'               => '4.0.1',
              'Unicode::Normalize'    => '0.30',
              'Unicode::UCD'          => '0.22',
              'Win32'                 => '0.23',
              'XS::APItest'           => '0.05',
              'XSLoader'              => '0.03',
              'assertions'            => '0.01',
              'assertions::activate'  => '0.01',
              'base'                  => '2.06',
              'bigint'                => '0.06',
              'bignum'                => '0.16',
              'bigrat'                => '0.07',
              'bytes'                 => '1.01',
              'encoding::warnings'    => '0.05',
              'if'                    => '0.0401',
              're'                    => '0.05',
              'threads::shared'       => '0.92',
              'utf8'                  => '1.04',
              'version'               => '0.42',
              'warnings'              => '1.04',
          },
          removed => {
              'Test::Harness::Point'  => 1,
          }
      },
      5.009003 => {
          delta_from => 5.008008,
          changed => {
              'Archive::Tar'          => '1.26_01',
              'Archive::Tar::Constant'=> '0.02',
              'Archive::Tar::File'    => '0.02',
              'AutoSplit'             => '1.04_01',
              'B'                     => '1.10',
              'B::Bblock'             => '1.02',
              'B::Bytecode'           => '1.01',
              'B::C'                  => '1.04',
              'B::CC'                 => '1.00',
              'B::Concise'            => '0.67',
              'B::Debug'              => '1.02',
              'B::Deparse'            => '0.73',
              'B::Lint'               => '1.04',
              'B::Terse'              => '1.03',
              'CGI'                   => '3.15_01',
              'CPAN'                  => '1.83_58',
              'CPAN::Debug'           => '4.44',
              'CPAN::FirstTime'       => '4.50',
              'CPAN::HandleConfig'    => '4.31',
              'CPAN::Nox'             => '2.31',
              'CPAN::Tarzip'          => '3.36',
              'CPAN::Version'         => '2.55',
              'Carp'                  => '1.05',
              'Carp::Heavy'           => '1.05',
              'Compress::Zlib'        => '2.000_07',
              'Compress::Zlib::Common'=> '2.000_07',
              'Compress::Zlib::Compress::Gzip::Constants'=> '2.000_07',
              'Compress::Zlib::Compress::Zip::Constants'=> '1.00',
              'Compress::Zlib::CompressPlugin::Deflate'=> '2.000_05',
              'Compress::Zlib::CompressPlugin::Identity'=> '2.000_05',
              'Compress::Zlib::File::GlobMapper'=> '0.000_02',
              'Compress::Zlib::FileConstants'=> '2.000_07',
              'Compress::Zlib::IO::Compress::Base'=> '2.000_05',
              'Compress::Zlib::IO::Compress::Deflate'=> '2.000_07',
              'Compress::Zlib::IO::Compress::Gzip'=> '2.000_07',
              'Compress::Zlib::IO::Compress::RawDeflate'=> '2.000_07',
              'Compress::Zlib::IO::Compress::Zip'=> '2.000_04',
              'Compress::Zlib::IO::Uncompress::AnyInflate'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::AnyUncompress'=> '2.000_05',
              'Compress::Zlib::IO::Uncompress::Base'=> '2.000_05',
              'Compress::Zlib::IO::Uncompress::Gunzip'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::Inflate'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::RawInflate'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::Unzip'=> '2.000_05',
              'Compress::Zlib::ParseParameters'=> '2.000_07',
              'Compress::Zlib::UncompressPlugin::Identity'=> '2.000_05',
              'Compress::Zlib::UncompressPlugin::Inflate'=> '2.000_05',
              'Config::Extensions'    => '0.01',
              'Cwd'                   => '3.15',
              'Devel::PPPort'         => '3.08',
              'Digest::SHA'           => '5.32',
              'DirHandle'             => '1.01',
              'DynaLoader'            => '1.07',
              'Encode'                => '2.14',
              'Encode::CN::HZ'        => '2.02',
              'Encode::MIME::Header'  => '2.02',
              'English'               => '1.04',
              'Exporter'              => '5.59',
              'Exporter::Heavy'       => '5.59',
              'ExtUtils::CBuilder'    => '0.15',
              'ExtUtils::CBuilder::Base'=> '0.12',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.12',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.12',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.12',
              'ExtUtils::CBuilder::Platform::aix'=> '0.12',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.12',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.12',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.01',
              'ExtUtils::CBuilder::Platform::os2'=> '0.13',
              'ExtUtils::Command::MM' => '0.05_01',
              'ExtUtils::Constant'    => '0.2',
              'ExtUtils::Constant::Base'=> '0.02',
              'ExtUtils::Constant::ProxySubs'=> '0.01',
              'ExtUtils::Constant::XS'=> '0.02',
              'ExtUtils::MM_Any'      => '0.13_01',
              'ExtUtils::MM_Unix'     => '1.50_01',
              'ExtUtils::MakeMaker'   => '6.30_01',
              'ExtUtils::ParseXS'     => '2.15_02',
              'Fatal'                 => '1.04',
              'File::Compare'         => '1.1005',
              'File::Spec'            => '3.15',
              'File::Temp'            => '0.16_01',
              'IO::File'              => '1.13_01',
              'IO::Handle'            => '1.26',
              'IO::Socket'            => '1.29_01',
              'IO::Socket::INET'      => '1.29_02',
              'IO::Socket::UNIX'      => '1.22_01',
              'IO::Zlib'              => '1.04_02',
              'Locale::Maketext'      => '1.10_01',
              'Math::BigInt::FastCalc'=> '0.10',
              'Memoize'               => '1.01_01',
              'Module::CoreList'      => '2.02',
              'Moped::Msg'            => '0.01',
              'NEXT'                  => '0.60_01',
              'Net::Cmd'              => '2.26_01',
              'Net::Domain'           => '2.19_01',
              'Net::Ping'             => '2.31_04',
              'Opcode'                => '1.08',
              'POSIX'                 => '1.10',
              'Pod::Escapes'          => '1.04',
              'Pod::Man'              => '2.04',
              'Pod::Perldoc'          => '3.14_01',
              'Pod::Simple'           => '3.04',
              'Pod::Simple::BlackBox' => undef,
              'Pod::Simple::Checker'  => '2.02',
              'Pod::Simple::Debug'    => undef,
              'Pod::Simple::DumpAsText'=> '2.02',
              'Pod::Simple::DumpAsXML'=> '2.02',
              'Pod::Simple::HTML'     => '3.03',
              'Pod::Simple::HTMLBatch'=> '3.02',
              'Pod::Simple::HTMLLegacy'=> '5.01',
              'Pod::Simple::LinkSection'=> undef,
              'Pod::Simple::Methody'  => '2.02',
              'Pod::Simple::Progress' => '1.01',
              'Pod::Simple::PullParser'=> '2.02',
              'Pod::Simple::PullParserEndToken'=> undef,
              'Pod::Simple::PullParserStartToken'=> undef,
              'Pod::Simple::PullParserTextToken'=> undef,
              'Pod::Simple::PullParserToken'=> '2.02',
              'Pod::Simple::RTF'      => '2.02',
              'Pod::Simple::Search'   => '3.04',
              'Pod::Simple::SimpleTree'=> '2.02',
              'Pod::Simple::Text'     => '2.02',
              'Pod::Simple::TextContent'=> '2.02',
              'Pod::Simple::TiedOutFH'=> undef,
              'Pod::Simple::Transcode'=> undef,
              'Pod::Simple::TranscodeDumb'=> '2.02',
              'Pod::Simple::TranscodeSmart'=> undef,
              'Pod::Simple::XMLOutStream'=> '2.02',
              'Pod::Text'             => '3.01',
              'Pod::Text::Color'      => '2.01',
              'Pod::Text::Overstrike' => '2',
              'Pod::Text::Termcap'    => '2.01',
              'Pod::Usage'            => '1.33_01',
              'SelfLoader'            => '1.0905',
              'Storable'              => '2.15_02',
              'Test::Builder::Module' => '0.03',
              'Text::Balanced'        => '1.95_01',
              'Tie::File'             => '0.97_01',
              'UNIVERSAL'             => '1.03',
              'XS::APItest'           => '0.09',
              'assertions'            => '0.02',
              'assertions::activate'  => '0.02',
              'assertions::compat'    => undef,
              'constant'              => '1.07',
              'encoding::warnings'    => '0.05',
              'feature'               => '1.00',
              're'                    => '0.06',
              'sort'                  => '2.00',
              'version'               => '0.53',
          },
          removed => {
          }
      },
      5.009004 => {
          delta_from => 5.009003,
          changed => {
              'Archive::Tar'          => '1.30_01',
              'AutoLoader'            => '5.61',
              'B'                     => '1.11',
              'B::Bytecode'           => '1.02',
              'B::C'                  => '1.05',
              'B::Concise'            => '0.69',
              'B::Deparse'            => '0.76',
              'B::Lint'               => '1.08',
              'Benchmark'             => '1.08',
              'CGI'                   => '3.20',
              'CGI::Cookie'           => '1.27',
              'CGI::Fast'             => '1.07',
              'CPAN'                  => '1.87_55',
              'CPAN::Debug'           => '5.400561',
              'CPAN::FirstTime'       => '5.400742',
              'CPAN::HandleConfig'    => '5.400740',
              'CPAN::Nox'             => '5.400561',
              'CPAN::Tarzip'          => '5.400714',
              'CPAN::Version'         => '5.400561',
              'Compress::Raw::Zlib'   => '2.000_13',
              'Compress::Zlib'        => '2.000_13',
              'Cwd'                   => '3.19',
              'Devel::PPPort'         => '3.10',
              'Digest'                => '1.15',
              'Digest::SHA'           => '5.43',
              'Encode'                => '2.18_01',
              'Encode::Alias'         => '2.06',
              'Encode::Byte'          => '2.02',
              'Encode::CJKConstants'  => '2.02',
              'Encode::CN'            => '2.02',
              'Encode::CN::HZ'        => '2.04',
              'Encode::Config'        => '2.03',
              'Encode::EBCDIC'        => '2.02',
              'Encode::Encoder'       => '2.01',
              'Encode::Encoding'      => '2.04',
              'Encode::Guess'         => '2.02',
              'Encode::JP'            => '2.03',
              'Encode::JP::H2Z'       => '2.02',
              'Encode::JP::JIS7'      => '2.02',
              'Encode::KR'            => '2.02',
              'Encode::KR::2022_KR'   => '2.02',
              'Encode::MIME::Header'  => '2.04',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.03',
              'Encode::Symbol'        => '2.02',
              'Encode::TW'            => '2.02',
              'Encode::Unicode'       => '2.03',
              'Encode::Unicode::UTF7' => '2.04',
              'ExtUtils::CBuilder'    => '0.18',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.12_01',
              'ExtUtils::Constant::Base'=> '0.03',
              'ExtUtils::Constant::ProxySubs'=> '0.03',
              'ExtUtils::Install'     => '1.41',
              'ExtUtils::Installed'   => '1.41',
              'ExtUtils::MM_Any'      => '0.13_02',
              'ExtUtils::MM_NW5'      => '2.08_01',
              'ExtUtils::MM_Unix'     => '1.5003',
              'ExtUtils::MM_VMS'      => '5.73_03',
              'ExtUtils::MM_Win32'    => '1.12_02',
              'ExtUtils::MM_Win95'    => '0.04_01',
              'ExtUtils::MakeMaker'   => '6.30_02',
              'ExtUtils::Manifest'    => '1.46_01',
              'ExtUtils::Mkbootstrap' => '1.15_01',
              'ExtUtils::Mksymlists'  => '1.19_01',
              'ExtUtils::Packlist'    => '1.41',
              'File::Basename'        => '2.75',
              'File::Find'            => '1.11',
              'File::GlobMapper'      => '0.000_02',
              'File::Spec'            => '3.19',
              'FileCache'             => '1.07',
              'Getopt::Long'          => '2.3501',
              'Hash::Util'            => '0.07',
              'Hash::Util::FieldHash' => '0.01',
              'IO'                    => '1.23_01',
              'IO::Compress::Adapter::Deflate'=> '2.000_13',
              'IO::Compress::Adapter::Identity'=> '2.000_13',
              'IO::Compress::Base'    => '2.000_13',
              'IO::Compress::Base::Common'=> '2.000_13',
              'IO::Compress::Deflate' => '2.000_13',
              'IO::Compress::Gzip'    => '2.000_13',
              'IO::Compress::Gzip::Constants'=> '2.000_13',
              'IO::Compress::RawDeflate'=> '2.000_13',
              'IO::Compress::Zip'     => '2.000_13',
              'IO::Compress::Zip::Constants'=> '2.000_13',
              'IO::Compress::Zlib::Constants'=> '2.000_13',
              'IO::Compress::Zlib::Extra'=> '2.000_13',
              'IO::Dir'               => '1.06',
              'IO::File'              => '1.14',
              'IO::Handle'            => '1.27',
              'IO::Socket'            => '1.30_01',
              'IO::Socket::INET'      => '1.31',
              'IO::Socket::UNIX'      => '1.23',
              'IO::Uncompress::Adapter::Identity'=> '2.000_13',
              'IO::Uncompress::Adapter::Inflate'=> '2.000_13',
              'IO::Uncompress::AnyInflate'=> '2.000_13',
              'IO::Uncompress::AnyUncompress'=> '2.000_13',
              'IO::Uncompress::Base'  => '2.000_13',
              'IO::Uncompress::Gunzip'=> '2.000_13',
              'IO::Uncompress::Inflate'=> '2.000_13',
              'IO::Uncompress::RawInflate'=> '2.000_13',
              'IO::Uncompress::Unzip' => '2.000_13',
              'MIME::Base64'          => '3.07_01',
              'Math::Complex'         => '1.36',
              'Math::Trig'            => '1.04',
              'Module::Build'         => '0.2805',
              'Module::Build::Base'   => undef,
              'Module::Build::Compat' => '0.03',
              'Module::Build::ConfigData'=> undef,
              'Module::Build::Cookbook'=> undef,
              'Module::Build::ModuleInfo'=> undef,
              'Module::Build::Notes'  => undef,
              'Module::Build::PPMMaker'=> undef,
              'Module::Build::Platform::Amiga'=> undef,
              'Module::Build::Platform::Default'=> undef,
              'Module::Build::Platform::EBCDIC'=> undef,
              'Module::Build::Platform::MPEiX'=> undef,
              'Module::Build::Platform::MacOS'=> undef,
              'Module::Build::Platform::RiscOS'=> undef,
              'Module::Build::Platform::Unix'=> undef,
              'Module::Build::Platform::VMS'=> undef,
              'Module::Build::Platform::VOS'=> undef,
              'Module::Build::Platform::Windows'=> undef,
              'Module::Build::Platform::aix'=> undef,
              'Module::Build::Platform::cygwin'=> undef,
              'Module::Build::Platform::darwin'=> undef,
              'Module::Build::Platform::os2'=> undef,
              'Module::Build::PodParser'=> undef,
              'Module::Build::Version'=> '0',
              'Module::Build::YAML'   => '0.50',
              'Module::CoreList'      => '2.08',
              'Module::Load'          => '0.10',
              'Module::Loaded'        => '0.01',
              'Package::Constants'    => '0.01',
              'Pod::Html'             => '1.07',
              'Pod::Man'              => '2.09',
              'Pod::Text'             => '3.07',
              'Pod::Text::Color'      => '2.03',
              'Pod::Text::Termcap'    => '2.03',
              'SDBM_File'             => '1.06',
              'Shell'                 => '0.7',
              'Sys::Syslog'           => '0.17',
              'Term::ANSIColor'       => '1.11',
              'Test::Builder'         => '0.33',
              'Test::Builder::Tester' => '1.04',
              'Test::Harness'         => '2.62',
              'Test::Harness::Util'   => '0.01',
              'Test::More'            => '0.64',
              'Test::Simple'          => '0.64',
              'Text::Balanced'        => '1.98_01',
              'Text::ParseWords'      => '3.25',
              'Text::Tabs'            => '2007.071101',
              'Text::Wrap'            => '2006.0711',
              'Tie::RefHash'          => '1.34_01',
              'Time::HiRes'           => '1.87',
              'Time::Local'           => '1.13',
              'Time::gmtime'          => '1.03',
              'UNIVERSAL'             => '1.04',
              'Unicode::Normalize'    => '1.01',
              'Win32API::File'        => '0.1001',
              'Win32API::File::ExtUtils::Myconst2perl'=> '1',
              'assertions'            => '0.03',
              'assertions::compat'    => '0.02',
              'autouse'               => '1.06',
              'diagnostics'           => '1.16',
              'encoding'              => '2.04',
              'encoding::warnings'    => '0.10',
              'feature'               => '1.01',
              're'                    => '0.0601',
              'threads'               => '1.38',
              'threads::shared'       => '0.94_01',
              'version'               => '0.67',
          },
          removed => {
              'Compress::Zlib::Common'=> 1,
              'Compress::Zlib::Compress::Gzip::Constants'=> 1,
              'Compress::Zlib::Compress::Zip::Constants'=> 1,
              'Compress::Zlib::CompressPlugin::Deflate'=> 1,
              'Compress::Zlib::CompressPlugin::Identity'=> 1,
              'Compress::Zlib::File::GlobMapper'=> 1,
              'Compress::Zlib::FileConstants'=> 1,
              'Compress::Zlib::IO::Compress::Base'=> 1,
              'Compress::Zlib::IO::Compress::Deflate'=> 1,
              'Compress::Zlib::IO::Compress::Gzip'=> 1,
              'Compress::Zlib::IO::Compress::RawDeflate'=> 1,
              'Compress::Zlib::IO::Compress::Zip'=> 1,
              'Compress::Zlib::IO::Uncompress::AnyInflate'=> 1,
              'Compress::Zlib::IO::Uncompress::AnyUncompress'=> 1,
              'Compress::Zlib::IO::Uncompress::Base'=> 1,
              'Compress::Zlib::IO::Uncompress::Gunzip'=> 1,
              'Compress::Zlib::IO::Uncompress::Inflate'=> 1,
              'Compress::Zlib::IO::Uncompress::RawInflate'=> 1,
              'Compress::Zlib::IO::Uncompress::Unzip'=> 1,
              'Compress::Zlib::ParseParameters'=> 1,
              'Compress::Zlib::UncompressPlugin::Identity'=> 1,
              'Compress::Zlib::UncompressPlugin::Inflate'=> 1,
          }
      },
      5.009005 => {
          delta_from => 5.009004,
          changed => {
              'Archive::Extract'      => '0.22_01',
              'Archive::Tar'          => '1.32',
              'Attribute::Handlers'   => '0.78_06',
              'AutoLoader'            => '5.63',
              'AutoSplit'             => '1.05',
              'B'                     => '1.16',
              'B::Concise'            => '0.72',
              'B::Debug'              => '1.05',
              'B::Deparse'            => '0.82',
              'B::Lint'               => '1.09',
              'B::Terse'              => '1.05',
              'Benchmark'             => '1.1',
              'CGI'                   => '3.29',
              'CGI::Cookie'           => '1.28',
              'CGI::Util'             => '1.5_01',
              'CPAN'                  => '1.9102',
              'CPAN::Debug'           => '5.400955',
              'CPAN::FirstTime'       => '5.401669',
              'CPAN::HandleConfig'    => '5.401744',
              'CPAN::Kwalify'         => '5.401418',
              'CPAN::Nox'             => '5.400844',
              'CPAN::Queue'           => '5.401704',
              'CPAN::Tarzip'          => '5.401717',
              'CPAN::Version'         => '5.401387',
              'CPANPLUS'              => '0.81_01',
              'CPANPLUS::Backend'     => undef,
              'CPANPLUS::Backend::RV' => undef,
              'CPANPLUS::Config'      => undef,
              'CPANPLUS::Configure'   => undef,
              'CPANPLUS::Configure::Setup'=> undef,
              'CPANPLUS::Dist'        => undef,
              'CPANPLUS::Dist::Base'  => '0.01',
              'CPANPLUS::Dist::Build' => '0.06_01',
              'CPANPLUS::Dist::Build::Constants'=> '0.01',
              'CPANPLUS::Dist::MM'    => undef,
              'CPANPLUS::Dist::Sample'=> undef,
              'CPANPLUS::Error'       => undef,
              'CPANPLUS::Internals'   => '0.81_01',
              'CPANPLUS::Internals::Constants'=> '0.01',
              'CPANPLUS::Internals::Constants::Report'=> '0.01',
              'CPANPLUS::Internals::Extract'=> undef,
              'CPANPLUS::Internals::Fetch'=> undef,
              'CPANPLUS::Internals::Report'=> undef,
              'CPANPLUS::Internals::Search'=> undef,
              'CPANPLUS::Internals::Source'=> undef,
              'CPANPLUS::Internals::Utils'=> undef,
              'CPANPLUS::Internals::Utils::Autoflush'=> undef,
              'CPANPLUS::Module'      => undef,
              'CPANPLUS::Module::Author'=> undef,
              'CPANPLUS::Module::Author::Fake'=> undef,
              'CPANPLUS::Module::Checksums'=> undef,
              'CPANPLUS::Module::Fake'=> undef,
              'CPANPLUS::Module::Signature'=> undef,
              'CPANPLUS::Selfupdate'  => undef,
              'CPANPLUS::Shell'       => undef,
              'CPANPLUS::Shell::Classic'=> '0.0562',
              'CPANPLUS::Shell::Default'=> '0.81_01',
              'CPANPLUS::Shell::Default::Plugins::Remote'=> undef,
              'CPANPLUS::Shell::Default::Plugins::Source'=> undef,
              'CPANPLUS::inc'         => undef,
              'Carp'                  => '1.07',
              'Carp::Heavy'           => '1.07',
              'Compress::Raw::Zlib'   => '2.005',
              'Compress::Zlib'        => '2.005',
              'Cwd'                   => '3.25',
              'DBM_Filter'            => '0.02',
              'DB_File'               => '1.815',
              'Data::Dumper'          => '2.121_13',
              'Devel::InnerPackage'   => '0.3',
              'Devel::PPPort'         => '3.11_01',
              'Digest::MD5'           => '2.36_01',
              'Digest::SHA'           => '5.44',
              'DynaLoader'            => '1.08',
              'Encode'                => '2.23',
              'Encode::Alias'         => '2.07',
              'Encode::Byte'          => '2.03',
              'Encode::Config'        => '2.04',
              'Encode::Encoding'      => '2.05',
              'Encode::GSM0338'       => '2.00',
              'Encode::JP::JIS7'      => '2.03',
              'Encode::MIME::Header'  => '2.05',
              'Encode::MIME::Name'    => '1.01',
              'Encode::Unicode'       => '2.05',
              'Errno'                 => '1.10',
              'Exporter'              => '5.60',
              'Exporter::Heavy'       => '5.60',
              'ExtUtils::CBuilder'    => '0.19',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.13',
              'ExtUtils::Command'     => '1.13',
              'ExtUtils::Command::MM' => '0.07',
              'ExtUtils::Constant::Base'=> '0.04',
              'ExtUtils::Install'     => '1.41_01',
              'ExtUtils::Liblist'     => '1.03',
              'ExtUtils::Liblist::Kid'=> '1.33',
              'ExtUtils::MM'          => '0.07',
              'ExtUtils::MM_AIX'      => '0.05',
              'ExtUtils::MM_Any'      => '0.15',
              'ExtUtils::MM_BeOS'     => '1.07',
              'ExtUtils::MM_Cygwin'   => '1.1',
              'ExtUtils::MM_DOS'      => '0.04',
              'ExtUtils::MM_MacOS'    => '1.1',
              'ExtUtils::MM_NW5'      => '2.1',
              'ExtUtils::MM_OS2'      => '1.07',
              'ExtUtils::MM_QNX'      => '0.04',
              'ExtUtils::MM_UWIN'     => '0.04',
              'ExtUtils::MM_Unix'     => '1.54_01',
              'ExtUtils::MM_VMS'      => '5.76',
              'ExtUtils::MM_VOS'      => '0.04',
              'ExtUtils::MM_Win32'    => '1.15',
              'ExtUtils::MM_Win95'    => '0.06',
              'ExtUtils::MY'          => '0.03',
              'ExtUtils::MakeMaker'   => '6.36',
              'ExtUtils::MakeMaker::Config'=> '0.04',
              'ExtUtils::MakeMaker::bytes'=> '0.03',
              'ExtUtils::MakeMaker::vmsish'=> '0.03',
              'ExtUtils::Manifest'    => '1.51_01',
              'ExtUtils::Mkbootstrap' => '1.17',
              'ExtUtils::Mksymlists'  => '1.21',
              'ExtUtils::ParseXS'     => '2.18',
              'ExtUtils::XSSymSet'    => '1.1',
              'ExtUtils::testlib'     => '1.17',
              'Fatal'                 => '1.05',
              'Fcntl'                 => '1.06',
              'File::Basename'        => '2.76',
              'File::Copy'            => '2.10',
              'File::Fetch'           => '0.10',
              'File::Glob'            => '1.06',
              'File::Path'            => '2.01',
              'File::Spec'            => '3.25',
              'File::Spec::Cygwin'    => '1.1_01',
              'File::Spec::VMS'       => '1.4_01',
              'File::Temp'            => '0.18',
              'Filter::Util::Call'    => '1.0602',
              'FindBin'               => '1.49',
              'Getopt::Long'          => '2.36',
              'Hash::Util::FieldHash' => '1.01',
              'IO::Compress::Adapter::Deflate'=> '2.005',
              'IO::Compress::Adapter::Identity'=> '2.005',
              'IO::Compress::Base'    => '2.005',
              'IO::Compress::Base::Common'=> '2.005',
              'IO::Compress::Deflate' => '2.005',
              'IO::Compress::Gzip'    => '2.005',
              'IO::Compress::Gzip::Constants'=> '2.005',
              'IO::Compress::RawDeflate'=> '2.005',
              'IO::Compress::Zip'     => '2.005',
              'IO::Compress::Zip::Constants'=> '2.005',
              'IO::Compress::Zlib::Constants'=> '2.005',
              'IO::Compress::Zlib::Extra'=> '2.005',
              'IO::Uncompress::Adapter::Identity'=> '2.005',
              'IO::Uncompress::Adapter::Inflate'=> '2.005',
              'IO::Uncompress::AnyInflate'=> '2.005',
              'IO::Uncompress::AnyUncompress'=> '2.005',
              'IO::Uncompress::Base'  => '2.005',
              'IO::Uncompress::Gunzip'=> '2.005',
              'IO::Uncompress::Inflate'=> '2.005',
              'IO::Uncompress::RawInflate'=> '2.005',
              'IO::Uncompress::Unzip' => '2.005',
              'IO::Zlib'              => '1.05_01',
              'IPC::Cmd'              => '0.36_01',
              'List::Util'            => '1.19',
              'Locale::Maketext::Simple'=> '0.18',
              'Log::Message'          => '0.01',
              'Log::Message::Config'  => '0.01',
              'Log::Message::Handlers'=> undef,
              'Log::Message::Item'    => undef,
              'Log::Message::Simple'  => '0.0201',
              'Math::BigFloat'        => '1.58',
              'Math::BigInt'          => '1.87',
              'Math::BigInt::Calc'    => '0.51',
              'Math::BigInt::FastCalc'=> '0.15_01',
              'Math::BigRat'          => '0.19',
              'Math::Complex'         => '1.37',
              'Memoize'               => '1.01_02',
              'Module::Build'         => '0.2808',
              'Module::Build::Config' => undef,
              'Module::Build::Version'=> '0.7203',
              'Module::CoreList'      => '2.12',
              'Module::Load::Conditional'=> '0.16',
              'Module::Pluggable'     => '3.6',
              'Module::Pluggable::Object'=> '3.6',
              'NDBM_File'             => '1.07',
              'Net::Cmd'              => '2.28',
              'Net::Config'           => '1.11',
              'Net::Domain'           => '2.20',
              'Net::FTP'              => '2.77',
              'Net::FTP::A'           => '1.18',
              'Net::NNTP'             => '2.24',
              'Net::POP3'             => '2.29',
              'Net::SMTP'             => '2.31',
              'ODBM_File'             => '1.07',
              'OS2::DLL'              => '1.03',
              'Object::Accessor'      => '0.32',
              'Opcode'                => '1.09',
              'POSIX'                 => '1.13',
              'Params::Check'         => '0.26',
              'PerlIO::encoding'      => '0.10',
              'PerlIO::scalar'        => '0.05',
              'PerlIO::via'           => '0.04',
              'Pod::Html'             => '1.08',
              'Pod::Man'              => '2.12',
              'Pod::ParseUtils'       => '1.35',
              'Pod::Parser'           => '1.35',
              'Pod::Select'           => '1.35',
              'Pod::Simple'           => '3.05',
              'Pod::Text'             => '3.08',
              'Pod::Usage'            => '1.35',
              'Scalar::Util'          => '1.19',
              'SelfLoader'            => '1.11',
              'Shell'                 => '0.72_01',
              'Socket'                => '1.79',
              'Storable'              => '2.16',
              'Switch'                => '2.13',
              'Sys::Syslog'           => '0.18_01',
              'Term::ANSIColor'       => '1.12',
              'Term::UI'              => '0.14_01',
              'Term::UI::History'     => undef,
              'Test::Builder'         => '0.70',
              'Test::Builder::Module' => '0.68',
              'Test::Builder::Tester' => '1.07',
              'Test::Harness'         => '2.64',
              'Test::Harness::Results'=> '0.01',
              'Test::More'            => '0.70',
              'Test::Simple'          => '0.70',
              'Text::Balanced'        => '2.0.0',
              'Text::Soundex'         => '3.02',
              'Text::Tabs'            => '2007.1117',
              'Text::Wrap'            => '2006.1117',
              'Thread'                => '3.02',
              'Tie::File'             => '0.97_02',
              'Tie::Hash::NamedCapture'=> '0.06',
              'Tie::Memoize'          => '1.1',
              'Tie::RefHash'          => '1.37',
              'Time::HiRes'           => '1.9707',
              'Time::Local'           => '1.17',
              'Time::Piece'           => '1.11_02',
              'Time::Seconds'         => undef,
              'Unicode'               => '5.0.0',
              'Unicode::Normalize'    => '1.02',
              'Unicode::UCD'          => '0.25',
              'VMS::DCLsym'           => '1.03',
              'Win32'                 => '0.30',
              'Win32API::File'        => '0.1001_01',
              'Win32CORE'             => '0.02',
              'XS::APItest'           => '0.12',
              'XSLoader'              => '0.08',
              'attributes'            => '0.08',
              'base'                  => '2.12',
              'bigint'                => '0.22',
              'bignum'                => '0.22',
              'bigrat'                => '0.22',
              'bytes'                 => '1.03',
              'charnames'             => '1.06',
              'constant'              => '1.10',
              'diagnostics'           => '1.17',
              'encoding'              => '2.06',
              'encoding::warnings'    => '0.11',
              'feature'               => '1.10',
              'fields'                => '2.12',
              'less'                  => '0.02',
              'mro'                   => '1.00',
              'overload'              => '1.06',
              're'                    => '0.08',
              'sigtrap'               => '1.04',
              'sort'                  => '2.01',
              'strict'                => '1.04',
              'threads'               => '1.63',
              'threads::shared'       => '1.12',
              'utf8'                  => '1.07',
              'version'               => '0.7203',
              'warnings'              => '1.06',
          },
          removed => {
              'B::Asmdata'            => 1,
              'B::Assembler'          => 1,
              'B::Bblock'             => 1,
              'B::Bytecode'           => 1,
              'B::C'                  => 1,
              'B::CC'                 => 1,
              'B::Disassembler'       => 1,
              'B::Stackobj'           => 1,
              'B::Stash'              => 1,
              'ByteLoader'            => 1,
              'Thread::Signal'        => 1,
              'Thread::Specific'      => 1,
              'assertions'            => 1,
              'assertions::activate'  => 1,
              'assertions::compat'    => 1,
          }
      },
      5.01 => {
          delta_from => 5.009005,
          changed => {
              'Archive::Extract'      => '0.24',
              'Archive::Tar'          => '1.38',
              'Attribute::Handlers'   => '0.79',
              'B'                     => '1.17',
              'B::Concise'            => '0.74',
              'B::Deparse'            => '0.83',
              'CPAN'                  => '1.9205',
              'CPAN::API::HOWTO'      => undef,
              'CPAN::Debug'           => '5.402212',
              'CPAN::DeferedCode'     => '5.50',
              'CPAN::FirstTime'       => '5.402229',
              'CPAN::HandleConfig'    => '5.402212',
              'CPAN::Nox'             => '5.402411',
              'CPAN::Queue'           => '5.402212',
              'CPAN::Tarzip'          => '5.402213',
              'CPAN::Version'         => '5.5',
              'CPANPLUS'              => '0.84',
              'CPANPLUS::Dist::Build' => '0.06_02',
              'CPANPLUS::Internals'   => '0.84',
              'CPANPLUS::Shell::Default'=> '0.84',
              'CPANPLUS::Shell::Default::Plugins::CustomSource'=> undef,
              'Carp'                  => '1.08',
              'Carp::Heavy'           => '1.08',
              'Compress::Raw::Zlib'   => '2.008',
              'Compress::Zlib'        => '2.008',
              'Cwd'                   => '3.2501',
              'DB_File'               => '1.816_1',
              'Data::Dumper'          => '2.121_14',
              'Devel::PPPort'         => '3.13',
              'Digest::SHA'           => '5.45',
              'Exporter'              => '5.62',
              'Exporter::Heavy'       => '5.62',
              'ExtUtils::CBuilder'    => '0.21',
              'ExtUtils::CBuilder::Base'=> '0.21',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.21',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.22',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.21',
              'ExtUtils::CBuilder::Platform::aix'=> '0.21',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.21',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.21',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.21',
              'ExtUtils::CBuilder::Platform::os2'=> '0.21',
              'ExtUtils::Command::MM' => '6.42',
              'ExtUtils::Constant::ProxySubs'=> '0.05',
              'ExtUtils::Embed'       => '1.27',
              'ExtUtils::Install'     => '1.44',
              'ExtUtils::Installed'   => '1.43',
              'ExtUtils::Liblist'     => '6.42',
              'ExtUtils::Liblist::Kid'=> '6.42',
              'ExtUtils::MM'          => '6.42',
              'ExtUtils::MM_AIX'      => '6.42',
              'ExtUtils::MM_Any'      => '6.42',
              'ExtUtils::MM_BeOS'     => '6.42',
              'ExtUtils::MM_Cygwin'   => '6.42',
              'ExtUtils::MM_DOS'      => '6.42',
              'ExtUtils::MM_MacOS'    => '6.42',
              'ExtUtils::MM_NW5'      => '6.42',
              'ExtUtils::MM_OS2'      => '6.42',
              'ExtUtils::MM_QNX'      => '6.42',
              'ExtUtils::MM_UWIN'     => '6.42',
              'ExtUtils::MM_Unix'     => '6.42',
              'ExtUtils::MM_VMS'      => '6.42',
              'ExtUtils::MM_VOS'      => '6.42',
              'ExtUtils::MM_Win32'    => '6.42',
              'ExtUtils::MM_Win95'    => '6.42',
              'ExtUtils::MY'          => '6.42',
              'ExtUtils::MakeMaker'   => '6.42',
              'ExtUtils::MakeMaker::Config'=> '6.42',
              'ExtUtils::MakeMaker::bytes'=> '6.42',
              'ExtUtils::MakeMaker::vmsish'=> '6.42',
              'ExtUtils::Mkbootstrap' => '6.42',
              'ExtUtils::Mksymlists'  => '6.42',
              'ExtUtils::Packlist'    => '1.43',
              'ExtUtils::ParseXS'     => '2.18_02',
              'ExtUtils::testlib'     => '6.42',
              'File::Copy'            => '2.11',
              'File::Fetch'           => '0.14',
              'File::Find'            => '1.12',
              'File::Path'            => '2.04',
              'File::Spec'            => '3.2501',
              'File::Spec::Cygwin'    => '3.2501',
              'File::Spec::Epoc'      => '3.2501',
              'File::Spec::Functions' => '3.2501',
              'File::Spec::Mac'       => '3.2501',
              'File::Spec::OS2'       => '3.2501',
              'File::Spec::Unix'      => '3.2501',
              'File::Spec::VMS'       => '3.2501',
              'File::Spec::Win32'     => '3.2501',
              'Filter::Util::Call'    => '1.07',
              'Getopt::Long'          => '2.37',
              'Hash::Util::FieldHash' => '1.03',
              'IO::Compress::Adapter::Deflate'=> '2.008',
              'IO::Compress::Adapter::Identity'=> '2.008',
              'IO::Compress::Base'    => '2.008',
              'IO::Compress::Base::Common'=> '2.008',
              'IO::Compress::Deflate' => '2.008',
              'IO::Compress::Gzip'    => '2.008',
              'IO::Compress::Gzip::Constants'=> '2.008',
              'IO::Compress::RawDeflate'=> '2.008',
              'IO::Compress::Zip'     => '2.008',
              'IO::Compress::Zip::Constants'=> '2.008',
              'IO::Compress::Zlib::Constants'=> '2.008',
              'IO::Compress::Zlib::Extra'=> '2.008',
              'IO::Uncompress::Adapter::Identity'=> '2.008',
              'IO::Uncompress::Adapter::Inflate'=> '2.008',
              'IO::Uncompress::AnyInflate'=> '2.008',
              'IO::Uncompress::AnyUncompress'=> '2.008',
              'IO::Uncompress::Base'  => '2.008',
              'IO::Uncompress::Gunzip'=> '2.008',
              'IO::Uncompress::Inflate'=> '2.008',
              'IO::Uncompress::RawInflate'=> '2.008',
              'IO::Uncompress::Unzip' => '2.008',
              'IO::Zlib'              => '1.07',
              'IPC::Cmd'              => '0.40_1',
              'IPC::SysV'             => '1.05',
              'Locale::Maketext'      => '1.12',
              'Log::Message::Simple'  => '0.04',
              'Math::BigFloat'        => '1.59',
              'Math::BigInt'          => '1.88',
              'Math::BigInt::Calc'    => '0.52',
              'Math::BigInt::FastCalc'=> '0.16',
              'Math::BigRat'          => '0.21',
              'Module::Build'         => '0.2808_01',
              'Module::Build::Base'   => '0.2808_01',
              'Module::Build::Compat' => '0.2808_01',
              'Module::Build::Config' => '0.2808_01',
              'Module::Build::Dumper' => undef,
              'Module::Build::ModuleInfo'=> '0.2808_01',
              'Module::Build::Notes'  => '0.2808_01',
              'Module::Build::PPMMaker'=> '0.2808_01',
              'Module::Build::Platform::Amiga'=> '0.2808_01',
              'Module::Build::Platform::Default'=> '0.2808_01',
              'Module::Build::Platform::EBCDIC'=> '0.2808_01',
              'Module::Build::Platform::MPEiX'=> '0.2808_01',
              'Module::Build::Platform::MacOS'=> '0.2808_01',
              'Module::Build::Platform::RiscOS'=> '0.2808_01',
              'Module::Build::Platform::Unix'=> '0.2808_01',
              'Module::Build::Platform::VMS'=> '0.2808_01',
              'Module::Build::Platform::VOS'=> '0.2808_01',
              'Module::Build::Platform::Windows'=> '0.2808_01',
              'Module::Build::Platform::aix'=> '0.2808_01',
              'Module::Build::Platform::cygwin'=> '0.2808_01',
              'Module::Build::Platform::darwin'=> '0.2808_01',
              'Module::Build::Platform::os2'=> '0.2808_01',
              'Module::Build::PodParser'=> '0.2808_01',
              'Module::CoreList'      => '2.13',
              'Module::Load'          => '0.12',
              'Module::Load::Conditional'=> '0.22',
              'Net::Cmd'              => '2.29',
              'Net::Ping'             => '2.33',
              'Opcode'                => '1.11',
              'Pod::Checker'          => '1.43_01',
              'Pod::Man'              => '2.16',
              'Pod::Perldoc'          => '3.14_02',
              'Socket'                => '1.80',
              'Storable'              => '2.18',
              'Sys::Syslog'           => '0.22',
              'Sys::Syslog::win32::Win32'=> undef,
              'Term::Cap'             => '1.12',
              'Term::ReadLine'        => '1.03',
              'Term::UI'              => '0.18',
              'Test::Builder'         => '0.72',
              'Test::Builder::Module' => '0.72',
              'Test::Builder::Tester' => '1.09',
              'Test::Harness::Straps' => '0.26_01',
              'Test::More'            => '0.72',
              'Test::Simple'          => '0.72',
              'Text::ParseWords'      => '3.26',
              'Text::Soundex'         => '3.03',
              'Tie::StdHandle'        => undef,
              'Time::HiRes'           => '1.9711',
              'Time::Local'           => '1.18',
              'Time::Piece'           => '1.12',
              'VMS::Filespec'         => '1.12',
              'Win32'                 => '0.34',
              'base'                  => '2.13',
              'constant'              => '1.13',
              'feature'               => '1.11',
              'fields'                => '2.13',
              'filetest'              => '1.02',
              'open'                  => '1.06',
              'threads'               => '1.67',
              'threads::shared'       => '1.14',
              'version'               => '0.74',
          },
          removed => {
          }
      },
      5.010001 => {
          delta_from => 5.01,
          changed => {
              'App::Prove'            => '3.17',
              'App::Prove::State'     => '3.17',
              'App::Prove::State::Result'=> '3.17',
              'App::Prove::State::Result::Test'=> '3.17',
              'Archive::Extract'      => '0.34',
              'Archive::Tar'          => '1.52',
              'Attribute::Handlers'   => '0.85',
              'AutoLoader'            => '5.68',
              'AutoSplit'             => '1.06',
              'B'                     => '1.22',
              'B::Concise'            => '0.76',
              'B::Debug'              => '1.11',
              'B::Deparse'            => '0.89',
              'B::Lint'               => '1.11',
              'B::Lint::Debug'        => undef,
              'B::Xref'               => '1.02',
              'Benchmark'             => '1.11',
              'CGI'                   => '3.43',
              'CGI::Carp'             => '1.30_01',
              'CGI::Cookie'           => '1.29',
              'CPAN'                  => '1.9402',
              'CPAN::Author'          => '5.5',
              'CPAN::Bundle'          => '5.5',
              'CPAN::CacheMgr'        => '5.5',
              'CPAN::Complete'        => '5.5',
              'CPAN::Debug'           => '5.5',
              'CPAN::DeferredCode'    => '5.50',
              'CPAN::Distribution'    => '1.93',
              'CPAN::Distroprefs'     => '6',
              'CPAN::Distrostatus'    => '5.5',
              'CPAN::Exception::RecursiveDependency'=> '5.5',
              'CPAN::Exception::blocked_urllist'=> '1.0',
              'CPAN::Exception::yaml_not_installed'=> '5.5',
              'CPAN::FTP'             => '5.5001',
              'CPAN::FTP::netrc'      => '1.00',
              'CPAN::FirstTime'       => '5.53',
              'CPAN::HandleConfig'    => '5.5',
              'CPAN::Index'           => '1.93',
              'CPAN::InfoObj'         => '5.5',
              'CPAN::Kwalify'         => '5.50',
              'CPAN::LWP::UserAgent'  => '1.00',
              'CPAN::Module'          => '5.5',
              'CPAN::Nox'             => '5.50',
              'CPAN::Prompt'          => '5.5',
              'CPAN::Queue'           => '5.5',
              'CPAN::Shell'           => '5.5',
              'CPAN::Tarzip'          => '5.501',
              'CPAN::URL'             => '5.5',
              'CPANPLUS'              => '0.88',
              'CPANPLUS::Dist::Autobundle'=> undef,
              'CPANPLUS::Dist::Base'  => undef,
              'CPANPLUS::Dist::Build' => '0.36',
              'CPANPLUS::Dist::Build::Constants'=> '0.36',
              'CPANPLUS::Internals'   => '0.88',
              'CPANPLUS::Internals::Constants'=> undef,
              'CPANPLUS::Internals::Constants::Report'=> undef,
              'CPANPLUS::Internals::Source::Memory'=> undef,
              'CPANPLUS::Internals::Source::SQLite'=> undef,
              'CPANPLUS::Internals::Source::SQLite::Tie'=> undef,
              'CPANPLUS::Shell::Default'=> '0.88',
              'Carp'                  => '1.11',
              'Carp::Heavy'           => '1.11',
              'Compress::Raw::Bzip2'  => '2.020',
              'Compress::Raw::Zlib'   => '2.020',
              'Compress::Zlib'        => '2.020',
              'Cwd'                   => '3.30',
              'DB'                    => '1.02',
              'DBM_Filter::compress'  => '0.02',
              'DBM_Filter::encode'    => '0.02',
              'DBM_Filter::int32'     => '0.02',
              'DBM_Filter::null'      => '0.02',
              'DBM_Filter::utf8'      => '0.02',
              'DB_File'               => '1.820',
              'Data::Dumper'          => '2.124',
              'Devel::DProf'          => '20080331.00',
              'Devel::PPPort'         => '3.19',
              'Devel::Peek'           => '1.04',
              'Digest'                => '1.16',
              'Digest::MD5'           => '2.39',
              'Digest::SHA'           => '5.47',
              'Digest::base'          => '1.16',
              'Digest::file'          => '1.16',
              'DirHandle'             => '1.03',
              'Dumpvalue'             => '1.13',
              'DynaLoader'            => '1.10',
              'Encode'                => '2.35',
              'Encode::Alias'         => '2.12',
              'Encode::CN::HZ'        => '2.05',
              'Encode::Config'        => '2.05',
              'Encode::GSM0338'       => '2.01',
              'Encode::Guess'         => '2.03',
              'Encode::JP::JIS7'      => '2.04',
              'Encode::MIME::Header'  => '2.11',
              'Encode::Unicode'       => '2.06',
              'Errno'                 => '1.11',
              'Exporter'              => '5.63',
              'Exporter::Heavy'       => '5.63',
              'ExtUtils::CBuilder'    => '0.2602',
              'ExtUtils::CBuilder::Base'=> '0.2602',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.2602',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.2602',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.2602',
              'ExtUtils::CBuilder::Platform::aix'=> '0.2602',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.2602',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.2602',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.2602',
              'ExtUtils::CBuilder::Platform::os2'=> '0.2602',
              'ExtUtils::Command'     => '1.16',
              'ExtUtils::Command::MM' => '6.55_02',
              'ExtUtils::Constant'    => '0.22',
              'ExtUtils::Constant::ProxySubs'=> '0.06',
              'ExtUtils::Constant::Utils'=> '0.02',
              'ExtUtils::Constant::XS'=> '0.03',
              'ExtUtils::Embed'       => '1.28',
              'ExtUtils::Install'     => '1.54',
              'ExtUtils::Installed'   => '1.999_001',
              'ExtUtils::Liblist'     => '6.55_02',
              'ExtUtils::Liblist::Kid'=> '6.5502',
              'ExtUtils::MM'          => '6.55_02',
              'ExtUtils::MM_AIX'      => '6.55_02',
              'ExtUtils::MM_Any'      => '6.55_02',
              'ExtUtils::MM_BeOS'     => '6.55_02',
              'ExtUtils::MM_Cygwin'   => '6.55_02',
              'ExtUtils::MM_DOS'      => '6.5502',
              'ExtUtils::MM_Darwin'   => '6.55_02',
              'ExtUtils::MM_MacOS'    => '6.5502',
              'ExtUtils::MM_NW5'      => '6.55_02',
              'ExtUtils::MM_OS2'      => '6.55_02',
              'ExtUtils::MM_QNX'      => '6.55_02',
              'ExtUtils::MM_UWIN'     => '6.5502',
              'ExtUtils::MM_Unix'     => '6.55_02',
              'ExtUtils::MM_VMS'      => '6.55_02',
              'ExtUtils::MM_VOS'      => '6.55_02',
              'ExtUtils::MM_Win32'    => '6.55_02',
              'ExtUtils::MM_Win95'    => '6.55_02',
              'ExtUtils::MY'          => '6.5502',
              'ExtUtils::MakeMaker'   => '6.55_02',
              'ExtUtils::MakeMaker::Config'=> '6.55_02',
              'ExtUtils::Manifest'    => '1.56',
              'ExtUtils::Mkbootstrap' => '6.55_02',
              'ExtUtils::Mksymlists'  => '6.55_02',
              'ExtUtils::ParseXS'     => '2.2002',
              'ExtUtils::testlib'     => '6.5502',
              'Fatal'                 => '2.06_01',
              'File::Basename'        => '2.77',
              'File::CheckTree'       => '4.4',
              'File::Compare'         => '1.1006',
              'File::Copy'            => '2.14',
              'File::DosGlob'         => '1.01',
              'File::Fetch'           => '0.20',
              'File::Find'            => '1.14',
              'File::GlobMapper'      => '1.000',
              'File::Path'            => '2.07_03',
              'File::Spec'            => '3.30',
              'File::Spec::Cygwin'    => '3.30',
              'File::Spec::Epoc'      => '3.30',
              'File::Spec::Functions' => '3.30',
              'File::Spec::Mac'       => '3.30',
              'File::Spec::OS2'       => '3.30',
              'File::Spec::Unix'      => '3.30',
              'File::Spec::VMS'       => '3.30',
              'File::Spec::Win32'     => '3.30',
              'File::Temp'            => '0.22',
              'File::stat'            => '1.01',
              'FileCache'             => '1.08',
              'FileHandle'            => '2.02',
              'Filter::Simple'        => '0.84',
              'Filter::Util::Call'    => '1.08',
              'FindBin'               => '1.50',
              'GDBM_File'             => '1.09',
              'Getopt::Long'          => '2.38',
              'Getopt::Std'           => '1.06',
              'Hash::Util::FieldHash' => '1.04',
              'I18N::Collate'         => '1.01',
              'IO'                    => '1.25',
              'IO::Compress::Adapter::Bzip2'=> '2.020',
              'IO::Compress::Adapter::Deflate'=> '2.020',
              'IO::Compress::Adapter::Identity'=> '2.020',
              'IO::Compress::Base'    => '2.020',
              'IO::Compress::Base::Common'=> '2.020',
              'IO::Compress::Bzip2'   => '2.020',
              'IO::Compress::Deflate' => '2.020',
              'IO::Compress::Gzip'    => '2.020',
              'IO::Compress::Gzip::Constants'=> '2.020',
              'IO::Compress::RawDeflate'=> '2.020',
              'IO::Compress::Zip'     => '2.020',
              'IO::Compress::Zip::Constants'=> '2.020',
              'IO::Compress::Zlib::Constants'=> '2.020',
              'IO::Compress::Zlib::Extra'=> '2.020',
              'IO::Dir'               => '1.07',
              'IO::Handle'            => '1.28',
              'IO::Socket'            => '1.31',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.020',
              'IO::Uncompress::Adapter::Identity'=> '2.020',
              'IO::Uncompress::Adapter::Inflate'=> '2.020',
              'IO::Uncompress::AnyInflate'=> '2.020',
              'IO::Uncompress::AnyUncompress'=> '2.020',
              'IO::Uncompress::Base'  => '2.020',
              'IO::Uncompress::Bunzip2'=> '2.020',
              'IO::Uncompress::Gunzip'=> '2.020',
              'IO::Uncompress::Inflate'=> '2.020',
              'IO::Uncompress::RawInflate'=> '2.020',
              'IO::Uncompress::Unzip' => '2.020',
              'IO::Zlib'              => '1.09',
              'IPC::Cmd'              => '0.46',
              'IPC::Msg'              => '2.01',
              'IPC::Open2'            => '1.03',
              'IPC::Open3'            => '1.04',
              'IPC::Semaphore'        => '2.01',
              'IPC::SharedMem'        => '2.01',
              'IPC::SysV'             => '2.01',
              'List::Util'            => '1.21',
              'List::Util::PP'        => '1.21',
              'List::Util::XS'        => '1.21',
              'Locale::Maketext'      => '1.13',
              'Locale::Maketext::Guts'=> '1.13',
              'Locale::Maketext::GutsLoader'=> '1.13',
              'Log::Message'          => '0.02',
              'MIME::Base64'          => '3.08',
              'MIME::QuotedPrint'     => '3.08',
              'Math::BigFloat'        => '1.60',
              'Math::BigInt'          => '1.89',
              'Math::BigInt::FastCalc'=> '0.19',
              'Math::BigRat'          => '0.22',
              'Math::Complex'         => '1.56',
              'Math::Trig'            => '1.2',
              'Memoize'               => '1.01_03',
              'Module::Build'         => '0.340201',
              'Module::Build::Base'   => '0.340201',
              'Module::Build::Compat' => '0.340201',
              'Module::Build::Config' => '0.340201',
              'Module::Build::Cookbook'=> '0.340201',
              'Module::Build::Dumper' => '0.340201',
              'Module::Build::ModuleInfo'=> '0.340201',
              'Module::Build::Notes'  => '0.340201',
              'Module::Build::PPMMaker'=> '0.340201',
              'Module::Build::Platform::Amiga'=> '0.340201',
              'Module::Build::Platform::Default'=> '0.340201',
              'Module::Build::Platform::EBCDIC'=> '0.340201',
              'Module::Build::Platform::MPEiX'=> '0.340201',
              'Module::Build::Platform::MacOS'=> '0.340201',
              'Module::Build::Platform::RiscOS'=> '0.340201',
              'Module::Build::Platform::Unix'=> '0.340201',
              'Module::Build::Platform::VMS'=> '0.340201',
              'Module::Build::Platform::VOS'=> '0.340201',
              'Module::Build::Platform::Windows'=> '0.340201',
              'Module::Build::Platform::aix'=> '0.340201',
              'Module::Build::Platform::cygwin'=> '0.340201',
              'Module::Build::Platform::darwin'=> '0.340201',
              'Module::Build::Platform::os2'=> '0.340201',
              'Module::Build::PodParser'=> '0.340201',
              'Module::Build::Version'=> '0.77',
              'Module::CoreList'      => '2.18',
              'Module::Load'          => '0.16',
              'Module::Load::Conditional'=> '0.30',
              'Module::Loaded'        => '0.02',
              'Module::Pluggable'     => '3.9',
              'Module::Pluggable::Object'=> '3.9',
              'NDBM_File'             => '1.08',
              'NEXT'                  => '0.64',
              'Net::Ping'             => '2.36',
              'O'                     => '1.01',
              'OS2::Process'          => '1.03',
              'OS2::REXX'             => '1.04',
              'Object::Accessor'      => '0.34',
              'POSIX'                 => '1.17',
              'Package::Constants'    => '0.02',
              'Parse::CPAN::Meta'     => '1.39',
              'PerlIO'                => '1.06',
              'PerlIO::encoding'      => '0.11',
              'PerlIO::scalar'        => '0.07',
              'PerlIO::via'           => '0.07',
              'Pod::Checker'          => '1.45',
              'Pod::Find'             => '1.35',
              'Pod::Html'             => '1.09',
              'Pod::InputObjects'     => '1.31',
              'Pod::Man'              => '2.22',
              'Pod::ParseLink'        => '1.09',
              'Pod::ParseUtils'       => '1.36',
              'Pod::Parser'           => '1.37',
              'Pod::Perldoc'          => '3.14_04',
              'Pod::PlainText'        => '2.04',
              'Pod::Select'           => '1.36',
              'Pod::Simple'           => '3.07',
              'Pod::Simple::XHTML'    => '3.04',
              'Pod::Text'             => '3.13',
              'Pod::Text::Color'      => '2.05',
              'Pod::Text::Overstrike' => '2.03',
              'Pod::Text::Termcap'    => '2.05',
              'Pod::Usage'            => '1.36',
              'Safe'                  => '2.18',
              'Scalar::Util'          => '1.21',
              'Scalar::Util::PP'      => '1.21',
              'SelectSaver'           => '1.02',
              'SelfLoader'            => '1.17',
              'Socket'                => '1.82',
              'Storable'              => '2.20',
              'Switch'                => '2.14',
              'Symbol'                => '1.07',
              'Sys::Syslog'           => '0.27',
              'TAP::Base'             => '3.17',
              'TAP::Formatter::Base'  => '3.17',
              'TAP::Formatter::Color' => '3.17',
              'TAP::Formatter::Console'=> '3.17',
              'TAP::Formatter::Console::ParallelSession'=> '3.17',
              'TAP::Formatter::Console::Session'=> '3.17',
              'TAP::Formatter::File'  => '3.17',
              'TAP::Formatter::File::Session'=> '3.17',
              'TAP::Formatter::Session'=> '3.17',
              'TAP::Harness'          => '3.17',
              'TAP::Object'           => '3.17',
              'TAP::Parser'           => '3.17',
              'TAP::Parser::Aggregator'=> '3.17',
              'TAP::Parser::Grammar'  => '3.17',
              'TAP::Parser::Iterator' => '3.17',
              'TAP::Parser::Iterator::Array'=> '3.17',
              'TAP::Parser::Iterator::Process'=> '3.17',
              'TAP::Parser::Iterator::Stream'=> '3.17',
              'TAP::Parser::IteratorFactory'=> '3.17',
              'TAP::Parser::Multiplexer'=> '3.17',
              'TAP::Parser::Result'   => '3.17',
              'TAP::Parser::Result::Bailout'=> '3.17',
              'TAP::Parser::Result::Comment'=> '3.17',
              'TAP::Parser::Result::Plan'=> '3.17',
              'TAP::Parser::Result::Pragma'=> '3.17',
              'TAP::Parser::Result::Test'=> '3.17',
              'TAP::Parser::Result::Unknown'=> '3.17',
              'TAP::Parser::Result::Version'=> '3.17',
              'TAP::Parser::Result::YAML'=> '3.17',
              'TAP::Parser::ResultFactory'=> '3.17',
              'TAP::Parser::Scheduler'=> '3.17',
              'TAP::Parser::Scheduler::Job'=> '3.17',
              'TAP::Parser::Scheduler::Spinner'=> '3.17',
              'TAP::Parser::Source'   => '3.17',
              'TAP::Parser::Source::Perl'=> '3.17',
              'TAP::Parser::Utils'    => '3.17',
              'TAP::Parser::YAMLish::Reader'=> '3.17',
              'TAP::Parser::YAMLish::Writer'=> '3.17',
              'Term::ANSIColor'       => '2.00',
              'Term::ReadLine'        => '1.04',
              'Term::UI'              => '0.20',
              'Test'                  => '1.25_02',
              'Test::Builder'         => '0.92',
              'Test::Builder::Module' => '0.92',
              'Test::Builder::Tester' => '1.18',
              'Test::Builder::Tester::Color'=> '1.18',
              'Test::Harness'         => '3.17',
              'Test::More'            => '0.92',
              'Test::Simple'          => '0.92',
              'Text::ParseWords'      => '3.27',
              'Text::Tabs'            => '2009.0305',
              'Text::Wrap'            => '2009.0305',
              'Thread::Queue'         => '2.11',
              'Thread::Semaphore'     => '2.09',
              'Tie::Handle'           => '4.2',
              'Tie::Hash'             => '1.03',
              'Tie::RefHash'          => '1.38',
              'Tie::Scalar'           => '1.01',
              'Tie::StdHandle'        => '4.2',
              'Time::HiRes'           => '1.9719',
              'Time::Local'           => '1.1901',
              'Time::Piece'           => '1.15',
              'UNIVERSAL'             => '1.05',
              'Unicode'               => '5.1.0',
              'Unicode::Normalize'    => '1.03',
              'Unicode::UCD'          => '0.27',
              'VMS::Stdio'            => '2.4',
              'Win32'                 => '0.39',
              'Win32API::File'        => '0.1101',
              'XS::APItest'           => '0.15',
              'XS::Typemap'           => '0.03',
              'XSLoader'              => '0.10',
              'attributes'            => '0.09',
              'attrs'                 => '1.03',
              'autodie'               => '2.06_01',
              'autodie::exception'    => '2.06_01',
              'autodie::exception::system'=> '2.06_01',
              'autodie::hints'        => '2.06_01',
              'base'                  => '2.14',
              'bigint'                => '0.23',
              'bignum'                => '0.23',
              'bigrat'                => '0.23',
              'blib'                  => '1.04',
              'charnames'             => '1.07',
              'constant'              => '1.17',
              'encoding'              => '2.6_01',
              'feature'               => '1.13',
              'fields'                => '2.14',
              'lib'                   => '0.62',
              'mro'                   => '1.01',
              'open'                  => '1.07',
              'ops'                   => '1.02',
              'overload'              => '1.07',
              'overload::numbers'     => undef,
              'overloading'           => '0.01',
              'parent'                => '0.221',
              're'                    => '0.09',
              'threads'               => '1.72',
              'threads::shared'       => '1.29',
              'version'               => '0.77',
          },
          removed => {
              'CPAN::API::HOWTO'      => 1,
              'CPAN::DeferedCode'     => 1,
              'CPANPLUS::inc'         => 1,
              'ExtUtils::MakeMaker::bytes'=> 1,
              'ExtUtils::MakeMaker::vmsish'=> 1,
              'Test::Harness::Assert' => 1,
              'Test::Harness::Iterator'=> 1,
              'Test::Harness::Point'  => 1,
              'Test::Harness::Results'=> 1,
              'Test::Harness::Straps' => 1,
              'Test::Harness::Util'   => 1,
          }
      },
      5.011 => {
          delta_from => 5.010001,
          changed => {
              'Archive::Tar'          => '1.54',
              'Attribute::Handlers'   => '0.87',
              'AutoLoader'            => '5.70',
              'B::Deparse'            => '0.91',
              'B::Lint'               => '1.11_01',
              'B::Lint::Debug'        => '0.01',
              'CGI'                   => '3.45',
              'CGI::Apache'           => '1.01',
              'CGI::Carp'             => '3.45',
              'CGI::Pretty'           => '3.44',
              'CGI::Switch'           => '1.01',
              'CGI::Util'             => '3.45',
              'CPAN'                  => '1.94_51',
              'CPAN::Distribution'    => '1.94',
              'CPAN::FTP'             => '5.5002',
              'CPAN::Index'           => '1.94',
              'CPAN::LWP::UserAgent'  => '1.94',
              'CPANPLUS::Dist::Build' => '0.40',
              'CPANPLUS::Dist::Build::Constants'=> '0.40',
              'Carp'                  => '1.12',
              'Carp::Heavy'           => '1.12',
              'Class::ISA'            => '0.36',
              'Compress::Raw::Bzip2'  => '2.021',
              'Compress::Raw::Zlib'   => '2.021',
              'Compress::Zlib'        => '2.021',
              'Cwd'                   => '3.3002',
              'Data::Dumper'          => '2.125',
              'Encode'                => '2.37',
              'Exporter'              => '5.64',
              'Exporter::Heavy'       => '5.64',
              'ExtUtils::ParseXS'     => '2.200403',
              'File::Basename'        => '2.78',
              'File::Copy'            => '2.16',
              'File::stat'            => '1.02',
              'IO'                    => '1.25_01',
              'IO::Compress::Adapter::Bzip2'=> '2.021',
              'IO::Compress::Adapter::Deflate'=> '2.021',
              'IO::Compress::Adapter::Identity'=> '2.021',
              'IO::Compress::Base'    => '2.021',
              'IO::Compress::Base::Common'=> '2.021',
              'IO::Compress::Bzip2'   => '2.021',
              'IO::Compress::Deflate' => '2.021',
              'IO::Compress::Gzip'    => '2.021',
              'IO::Compress::Gzip::Constants'=> '2.021',
              'IO::Compress::RawDeflate'=> '2.021',
              'IO::Compress::Zip'     => '2.021',
              'IO::Compress::Zip::Constants'=> '2.021',
              'IO::Compress::Zlib::Constants'=> '2.021',
              'IO::Compress::Zlib::Extra'=> '2.021',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.021',
              'IO::Uncompress::Adapter::Identity'=> '2.021',
              'IO::Uncompress::Adapter::Inflate'=> '2.021',
              'IO::Uncompress::AnyInflate'=> '2.021',
              'IO::Uncompress::AnyUncompress'=> '2.021',
              'IO::Uncompress::Base'  => '2.021',
              'IO::Uncompress::Bunzip2'=> '2.021',
              'IO::Uncompress::Gunzip'=> '2.021',
              'IO::Uncompress::Inflate'=> '2.021',
              'IO::Uncompress::RawInflate'=> '2.021',
              'IO::Uncompress::Unzip' => '2.021',
              'IO::Zlib'              => '1.10',
              'IPC::Cmd'              => '0.50',
              'IPC::Open3'            => '1.05',
              'Locale::Maketext::Simple'=> '0.21',
              'Log::Message::Simple'  => '0.06',
              'Math::BigInt'          => '1.89_01',
              'Math::BigRat'          => '0.24',
              'Module::Build'         => '0.35',
              'Module::Build::Base'   => '0.35',
              'Module::Build::Compat' => '0.35',
              'Module::Build::Config' => '0.35',
              'Module::Build::Cookbook'=> '0.35',
              'Module::Build::Dumper' => '0.35',
              'Module::Build::ModuleInfo'=> '0.35',
              'Module::Build::Notes'  => '0.35',
              'Module::Build::PPMMaker'=> '0.35',
              'Module::Build::Platform::Amiga'=> '0.35',
              'Module::Build::Platform::Default'=> '0.35',
              'Module::Build::Platform::EBCDIC'=> '0.35',
              'Module::Build::Platform::MPEiX'=> '0.35',
              'Module::Build::Platform::MacOS'=> '0.35',
              'Module::Build::Platform::RiscOS'=> '0.35',
              'Module::Build::Platform::Unix'=> '0.35',
              'Module::Build::Platform::VMS'=> '0.35',
              'Module::Build::Platform::VOS'=> '0.35',
              'Module::Build::Platform::Windows'=> '0.35',
              'Module::Build::Platform::aix'=> '0.35',
              'Module::Build::Platform::cygwin'=> '0.35',
              'Module::Build::Platform::darwin'=> '0.35',
              'Module::Build::Platform::os2'=> '0.35',
              'Module::Build::PodParser'=> '0.35',
              'Module::CoreList'      => '2.19',
              'Module::Loaded'        => '0.06',
              'Opcode'                => '1.13',
              'PerlIO::via'           => '0.08',
              'Pod::Perldoc'          => '3.15_01',
              'Pod::Plainer'          => '1.01',
              'Safe'                  => '2.19',
              'Socket'                => '1.84',
              'Switch'                => '2.14_01',
              'Term::ANSIColor'       => '2.02',
              'Term::ReadLine'        => '1.05',
              'Text::Balanced'        => '2.02',
              'Text::Soundex'         => '3.03_01',
              'Time::Local'           => '1.1901_01',
              'Unicode::Collate'      => '0.52_01',
              'attributes'            => '0.12',
              'constant'              => '1.19',
              'deprecate'             => '0.01',
              'overload'              => '1.08',
              'parent'                => '0.223',
              're'                    => '0.10',
              'threads'               => '1.74',
              'threads::shared'       => '1.31',
              'warnings'              => '1.07',
          },
          removed => {
              'attrs'                 => 1,
          }
      },
      5.011001 => {
          delta_from => 5.011,
          changed => {
              'B'                     => '1.23',
              'B::Concise'            => '0.77',
              'B::Deparse'            => '0.92',
              'CGI'                   => '3.48',
              'CGI::Pretty'           => '3.46',
              'CGI::Util'             => '3.48',
              'CPANPLUS'              => '0.89_03',
              'CPANPLUS::Internals'   => '0.89_03',
              'CPANPLUS::Shell::Default'=> '0.89_03',
              'Carp'                  => '1.13',
              'Carp::Heavy'           => '1.13',
              'ExtUtils::CBuilder'    => '0.260301',
              'ExtUtils::CBuilder::Base'=> '0.260301',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.260301',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.260301',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.260301',
              'ExtUtils::CBuilder::Platform::aix'=> '0.260301',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.260301',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.260301',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.260301',
              'ExtUtils::CBuilder::Platform::os2'=> '0.260301',
              'ExtUtils::Install'     => '1.55',
              'ExtUtils::Manifest'    => '1.57',
              'ExtUtils::Packlist'    => '1.44',
              'ExtUtils::ParseXS'     => '2.21',
              'File::Glob'            => '1.07',
              'File::Path'            => '2.08',
              'IO'                    => '1.25_02',
              'Module::CoreList'      => '2.21',
              'OS2::DLL'              => '1.04',
              'OS2::Process'          => '1.04',
              'Object::Accessor'      => '0.36',
              'Opcode'                => '1.15',
              'POSIX'                 => '1.18',
              'Parse::CPAN::Meta'     => '1.40',
              'PerlIO::via'           => '0.09',
              'Pod::Simple'           => '3.08',
              'Socket'                => '1.85',
              'Storable'              => '2.22',
              'Switch'                => '2.15',
              'Test::Builder'         => '0.94',
              'Test::Builder::Module' => '0.94',
              'Test::More'            => '0.94',
              'Test::Simple'          => '0.94',
              'XS::APItest'           => '0.16',
              'mro'                   => '1.02',
              'overload'              => '1.09',
              'threads::shared'       => '1.32',
          },
          removed => {
          }
      },
      5.011002 => {
          delta_from => 5.011001,
          changed => {
              'B::Concise'            => '0.78',
              'B::Deparse'            => '0.93',
              'CPANPLUS'              => '0.89_09',
              'CPANPLUS::Dist::Build' => '0.44',
              'CPANPLUS::Dist::Build::Constants'=> '0.44',
              'CPANPLUS::Internals'   => '0.89_09',
              'CPANPLUS::Shell::Default'=> '0.89_09',
              'Carp'                  => '1.14',
              'Carp::Heavy'           => '1.14',
              'Compress::Zlib'        => '2.022',
              'DBM_Filter'            => '0.03',
              'Encode'                => '2.38',
              'Encode::Byte'          => '2.04',
              'Encode::CN'            => '2.03',
              'Encode::JP'            => '2.04',
              'Encode::KR'            => '2.03',
              'Encode::TW'            => '2.03',
              'Encode::Unicode'       => '2.07',
              'Env'                   => '1.01',
              'Exporter'              => '5.64_01',
              'Exporter::Heavy'       => '5.64_01',
              'ExtUtils::CBuilder'    => '0.27',
              'ExtUtils::CBuilder::Base'=> '0.27',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.27',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.27',
              'ExtUtils::CBuilder::Platform::aix'=> '0.27',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.27',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.27',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.27',
              'ExtUtils::CBuilder::Platform::os2'=> '0.27',
              'File::Fetch'           => '0.22',
              'I18N::LangTags::Detect'=> '1.04',
              'I18N::Langinfo'        => '0.03',
              'IO::Compress::Adapter::Bzip2'=> '2.022',
              'IO::Compress::Adapter::Deflate'=> '2.022',
              'IO::Compress::Adapter::Identity'=> '2.022',
              'IO::Compress::Base'    => '2.022',
              'IO::Compress::Base::Common'=> '2.022',
              'IO::Compress::Bzip2'   => '2.022',
              'IO::Compress::Deflate' => '2.022',
              'IO::Compress::Gzip'    => '2.022',
              'IO::Compress::Gzip::Constants'=> '2.022',
              'IO::Compress::RawDeflate'=> '2.022',
              'IO::Compress::Zip'     => '2.022',
              'IO::Compress::Zip::Constants'=> '2.022',
              'IO::Compress::Zlib::Constants'=> '2.022',
              'IO::Compress::Zlib::Extra'=> '2.022',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.022',
              'IO::Uncompress::Adapter::Identity'=> '2.022',
              'IO::Uncompress::Adapter::Inflate'=> '2.022',
              'IO::Uncompress::AnyInflate'=> '2.022',
              'IO::Uncompress::AnyUncompress'=> '2.022',
              'IO::Uncompress::Base'  => '2.022',
              'IO::Uncompress::Bunzip2'=> '2.022',
              'IO::Uncompress::Gunzip'=> '2.022',
              'IO::Uncompress::Inflate'=> '2.022',
              'IO::Uncompress::RawInflate'=> '2.022',
              'IO::Uncompress::Unzip' => '2.022',
              'IPC::Cmd'              => '0.54',
              'List::Util'            => '1.22',
              'List::Util::PP'        => '1.22',
              'List::Util::XS'        => '1.22',
              'Locale::Maketext'      => '1.14',
              'Module::Build'         => '0.35_09',
              'Module::Build::Base'   => '0.35_09',
              'Module::Build::Compat' => '0.35_09',
              'Module::Build::Config' => '0.35_09',
              'Module::Build::Cookbook'=> '0.35_09',
              'Module::Build::Dumper' => '0.35_09',
              'Module::Build::ModuleInfo'=> '0.35_09',
              'Module::Build::Notes'  => '0.35_09',
              'Module::Build::PPMMaker'=> '0.35_09',
              'Module::Build::Platform::Amiga'=> '0.35_09',
              'Module::Build::Platform::Default'=> '0.35_09',
              'Module::Build::Platform::EBCDIC'=> '0.35_09',
              'Module::Build::Platform::MPEiX'=> '0.35_09',
              'Module::Build::Platform::MacOS'=> '0.35_09',
              'Module::Build::Platform::RiscOS'=> '0.35_09',
              'Module::Build::Platform::Unix'=> '0.35_09',
              'Module::Build::Platform::VMS'=> '0.35_09',
              'Module::Build::Platform::VOS'=> '0.35_09',
              'Module::Build::Platform::Windows'=> '0.35_09',
              'Module::Build::Platform::aix'=> '0.35_09',
              'Module::Build::Platform::cygwin'=> '0.35_09',
              'Module::Build::Platform::darwin'=> '0.35_09',
              'Module::Build::Platform::os2'=> '0.35_09',
              'Module::Build::PodParser'=> '0.35_09',
              'Module::Build::YAML'   => '1.40',
              'Module::CoreList'      => '2.23',
              'Module::Load::Conditional'=> '0.34',
              'Pod::Simple'           => '3.10',
              'Pod::Simple::XHTML'    => '3.10',
              'Scalar::Util'          => '1.22',
              'Scalar::Util::PP'      => '1.22',
              'Switch'                => '2.16',
              'XS::APItest'           => '0.17',
              'XS::APItest::KeywordRPN'=> '0.003',
              'base'                  => '2.15',
              'diagnostics'           => '1.18',
              'fields'                => '2.15',
              'inc::latest'           => '0.35_09',
              'legacy'                => '1.00',
              'overload'              => '1.10',
          },
          removed => {
          }
      },
      5.011003 => {
          delta_from => 5.011002,
          changed => {
              'App::Cpan'             => '1.570001',
              'Archive::Extract'      => '0.36',
              'CPAN'                  => '1.94_5301',
              'CPAN::FTP'             => '5.5004',
              'CPAN::FirstTime'       => '5.530001',
              'CPAN::Mirrors'         => '1.770001',
              'CPANPLUS'              => '0.90',
              'CPANPLUS::Internals'   => '0.90',
              'CPANPLUS::Shell::Default'=> '0.90',
              'Cwd'                   => '3.31',
              'Encode'                => '2.39',
              'ExtUtils::Command::MM' => '6.56',
              'ExtUtils::Liblist'     => '6.56',
              'ExtUtils::Liblist::Kid'=> '6.56',
              'ExtUtils::MM'          => '6.56',
              'ExtUtils::MM_AIX'      => '6.56',
              'ExtUtils::MM_Any'      => '6.56',
              'ExtUtils::MM_BeOS'     => '6.56',
              'ExtUtils::MM_Cygwin'   => '6.56',
              'ExtUtils::MM_DOS'      => '6.56',
              'ExtUtils::MM_Darwin'   => '6.56',
              'ExtUtils::MM_MacOS'    => '6.56',
              'ExtUtils::MM_NW5'      => '6.56',
              'ExtUtils::MM_OS2'      => '6.56',
              'ExtUtils::MM_QNX'      => '6.56',
              'ExtUtils::MM_UWIN'     => '6.56',
              'ExtUtils::MM_Unix'     => '6.56',
              'ExtUtils::MM_VMS'      => '6.56',
              'ExtUtils::MM_VOS'      => '6.56',
              'ExtUtils::MM_Win32'    => '6.56',
              'ExtUtils::MM_Win95'    => '6.56',
              'ExtUtils::MY'          => '6.56',
              'ExtUtils::MakeMaker'   => '6.56',
              'ExtUtils::MakeMaker::Config'=> '6.56',
              'ExtUtils::Mkbootstrap' => '6.56',
              'ExtUtils::Mksymlists'  => '6.56',
              'ExtUtils::testlib'     => '6.56',
              'File::Find'            => '1.15',
              'File::Path'            => '2.08_01',
              'File::Spec'            => '3.31',
              'Module::Build'         => '0.36',
              'Module::Build::Base'   => '0.36',
              'Module::Build::Compat' => '0.36',
              'Module::Build::Config' => '0.36',
              'Module::Build::Cookbook'=> '0.36',
              'Module::Build::Dumper' => '0.36',
              'Module::Build::ModuleInfo'=> '0.36',
              'Module::Build::Notes'  => '0.36',
              'Module::Build::PPMMaker'=> '0.36',
              'Module::Build::Platform::Amiga'=> '0.36',
              'Module::Build::Platform::Default'=> '0.36',
              'Module::Build::Platform::EBCDIC'=> '0.36',
              'Module::Build::Platform::MPEiX'=> '0.36',
              'Module::Build::Platform::MacOS'=> '0.36',
              'Module::Build::Platform::RiscOS'=> '0.36',
              'Module::Build::Platform::Unix'=> '0.36',
              'Module::Build::Platform::VMS'=> '0.36',
              'Module::Build::Platform::VOS'=> '0.36',
              'Module::Build::Platform::Windows'=> '0.36',
              'Module::Build::Platform::aix'=> '0.36',
              'Module::Build::Platform::cygwin'=> '0.36',
              'Module::Build::Platform::darwin'=> '0.36',
              'Module::Build::Platform::os2'=> '0.36',
              'Module::Build::PodParser'=> '0.36',
              'Module::CoreList'      => '2.24',
              'POSIX'                 => '1.19',
              'Pod::Simple'           => '3.13',
              'Pod::Simple::BlackBox' => '3.13',
              'Pod::Simple::Checker'  => '3.13',
              'Pod::Simple::Debug'    => '3.13',
              'Pod::Simple::DumpAsText'=> '3.13',
              'Pod::Simple::DumpAsXML'=> '3.13',
              'Pod::Simple::HTML'     => '3.13',
              'Pod::Simple::HTMLBatch'=> '3.13',
              'Pod::Simple::LinkSection'=> '3.13',
              'Pod::Simple::Methody'  => '3.13',
              'Pod::Simple::Progress' => '3.13',
              'Pod::Simple::PullParser'=> '3.13',
              'Pod::Simple::PullParserEndToken'=> '3.13',
              'Pod::Simple::PullParserStartToken'=> '3.13',
              'Pod::Simple::PullParserTextToken'=> '3.13',
              'Pod::Simple::PullParserToken'=> '3.13',
              'Pod::Simple::RTF'      => '3.13',
              'Pod::Simple::Search'   => '3.13',
              'Pod::Simple::SimpleTree'=> '3.13',
              'Pod::Simple::Text'     => '3.13',
              'Pod::Simple::TextContent'=> '3.13',
              'Pod::Simple::TiedOutFH'=> '3.13',
              'Pod::Simple::Transcode'=> '3.13',
              'Pod::Simple::TranscodeDumb'=> '3.13',
              'Pod::Simple::TranscodeSmart'=> '3.13',
              'Pod::Simple::XHTML'    => '3.13',
              'Pod::Simple::XMLOutStream'=> '3.13',
              'Safe'                  => '2.20',
              'Unicode'               => '5.2.0',
              'constant'              => '1.20',
              'diagnostics'           => '1.19',
              'feature'               => '1.14',
              'inc::latest'           => '0.36',
              'threads'               => '1.75',
              'warnings'              => '1.08',
          },
          removed => {
              'legacy'                => 1,
          }
      },
      5.011004 => {
          delta_from => 5.011003,
          changed => {
              'App::Cpan'             => '1.5701',
              'Archive::Extract'      => '0.38',
              'B::Deparse'            => '0.94',
              'CPAN'                  => '1.94_54',
              'CPAN::FirstTime'       => '5.53',
              'CPAN::Mirrors'         => '1.77',
              'Carp'                  => '1.15',
              'Carp::Heavy'           => '1.15',
              'Compress::Raw::Bzip2'  => '2.024',
              'Compress::Raw::Zlib'   => '2.024',
              'Compress::Zlib'        => '2.024',
              'File::Copy'            => '2.17',
              'File::Fetch'           => '0.24',
              'GDBM_File'             => '1.10',
              'IO::Compress::Adapter::Bzip2'=> '2.024',
              'IO::Compress::Adapter::Deflate'=> '2.024',
              'IO::Compress::Adapter::Identity'=> '2.024',
              'IO::Compress::Base'    => '2.024',
              'IO::Compress::Base::Common'=> '2.024',
              'IO::Compress::Bzip2'   => '2.024',
              'IO::Compress::Deflate' => '2.024',
              'IO::Compress::Gzip'    => '2.024',
              'IO::Compress::Gzip::Constants'=> '2.024',
              'IO::Compress::RawDeflate'=> '2.024',
              'IO::Compress::Zip'     => '2.024',
              'IO::Compress::Zip::Constants'=> '2.024',
              'IO::Compress::Zlib::Constants'=> '2.024',
              'IO::Compress::Zlib::Extra'=> '2.024',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.024',
              'IO::Uncompress::Adapter::Identity'=> '2.024',
              'IO::Uncompress::Adapter::Inflate'=> '2.024',
              'IO::Uncompress::AnyInflate'=> '2.024',
              'IO::Uncompress::AnyUncompress'=> '2.024',
              'IO::Uncompress::Base'  => '2.024',
              'IO::Uncompress::Bunzip2'=> '2.024',
              'IO::Uncompress::Gunzip'=> '2.024',
              'IO::Uncompress::Inflate'=> '2.024',
              'IO::Uncompress::RawInflate'=> '2.024',
              'IO::Uncompress::Unzip' => '2.024',
              'Module::Build'         => '0.3603',
              'Module::Build::Base'   => '0.3603',
              'Module::Build::Compat' => '0.3603',
              'Module::Build::Config' => '0.3603',
              'Module::Build::Cookbook'=> '0.3603',
              'Module::Build::Dumper' => '0.3603',
              'Module::Build::ModuleInfo'=> '0.3603',
              'Module::Build::Notes'  => '0.3603',
              'Module::Build::PPMMaker'=> '0.3603',
              'Module::Build::Platform::Amiga'=> '0.3603',
              'Module::Build::Platform::Default'=> '0.3603',
              'Module::Build::Platform::EBCDIC'=> '0.3603',
              'Module::Build::Platform::MPEiX'=> '0.3603',
              'Module::Build::Platform::MacOS'=> '0.3603',
              'Module::Build::Platform::RiscOS'=> '0.3603',
              'Module::Build::Platform::Unix'=> '0.3603',
              'Module::Build::Platform::VMS'=> '0.3603',
              'Module::Build::Platform::VOS'=> '0.3603',
              'Module::Build::Platform::Windows'=> '0.3603',
              'Module::Build::Platform::aix'=> '0.3603',
              'Module::Build::Platform::cygwin'=> '0.3603',
              'Module::Build::Platform::darwin'=> '0.3603',
              'Module::Build::Platform::os2'=> '0.3603',
              'Module::Build::PodParser'=> '0.3603',
              'Module::CoreList'      => '2.25',
              'PerlIO::encoding'      => '0.12',
              'Safe'                  => '2.21',
              'UNIVERSAL'             => '1.06',
              'feature'               => '1.15',
              'inc::latest'           => '0.3603',
              'less'                  => '0.03',
              're'                    => '0.11',
              'version'               => '0.81',
              'warnings'              => '1.09',
          },
          removed => {
          }
      },
      5.011005 => {
          delta_from => 5.011004,
          changed => {
              'B::Debug'              => '1.12',
              'CPAN'                  => '1.94_56',
              'CPAN::Debug'           => '5.5001',
              'CPAN::Distribution'    => '1.9456',
              'CPAN::FirstTime'       => '5.5301',
              'CPAN::HandleConfig'    => '5.5001',
              'CPAN::Shell'           => '5.5001',
              'CPAN::Tarzip'          => '5.5011',
              'CPANPLUS::Dist::Build' => '0.46',
              'CPANPLUS::Dist::Build::Constants'=> '0.46',
              'Module::CoreList'      => '2.26',
              'Pod::Man'              => '2.23',
              'Pod::ParseLink'        => '1.10',
              'Pod::Perldoc'          => '3.15_02',
              'Pod::Plainer'          => '1.02',
              'Pod::Text'             => '3.14',
              'Pod::Text::Color'      => '2.06',
              'Pod::Text::Overstrike' => '2.04',
              'Pod::Text::Termcap'    => '2.06',
              'Safe'                  => '2.22',
              'Socket'                => '1.86',
              'version'               => '0.82',
          },
          removed => {
          }
      },
      5.012 => {
          delta_from => 5.011005,
          changed => {
              'B::Deparse'            => '0.96',
              'CPAN::Distribution'    => '1.9456_01',
              'Module::CoreList'      => '2.29',
              'Safe'                  => '2.25',
              'Socket'                => '1.87',
              'Tie::Scalar'           => '1.02',
              'Time::Piece'           => '1.15_01',
              'bytes'                 => '1.04',
              'feature'               => '1.16',
              'utf8'                  => '1.08',
          },
          removed => {
          }
      },
      5.012001 => {
          delta_from => 5.012,
          changed => {
              'B::Deparse'            => '0.97',
              'CGI'                   => '3.49',
              'CGI::Fast'             => '1.08',
              'Carp'                  => '1.16',
              'Carp::Heavy'           => '1.16',
              'File::Copy'            => '2.18',
              'Module::CoreList'      => '2.32',
              'Pod::Functions'        => '1.04',
              'Pod::Simple'           => '3.14',
              'Pod::Simple::BlackBox' => '3.14',
              'Pod::Simple::Checker'  => '3.14',
              'Pod::Simple::Debug'    => '3.14',
              'Pod::Simple::DumpAsText'=> '3.14',
              'Pod::Simple::DumpAsXML'=> '3.14',
              'Pod::Simple::HTML'     => '3.14',
              'Pod::Simple::HTMLBatch'=> '3.14',
              'Pod::Simple::LinkSection'=> '3.14',
              'Pod::Simple::Methody'  => '3.14',
              'Pod::Simple::Progress' => '3.14',
              'Pod::Simple::PullParser'=> '3.14',
              'Pod::Simple::PullParserEndToken'=> '3.14',
              'Pod::Simple::PullParserStartToken'=> '3.14',
              'Pod::Simple::PullParserTextToken'=> '3.14',
              'Pod::Simple::PullParserToken'=> '3.14',
              'Pod::Simple::RTF'      => '3.14',
              'Pod::Simple::Search'   => '3.14',
              'Pod::Simple::SimpleTree'=> '3.14',
              'Pod::Simple::Text'     => '3.14',
              'Pod::Simple::TextContent'=> '3.14',
              'Pod::Simple::TiedOutFH'=> '3.14',
              'Pod::Simple::Transcode'=> '3.14',
              'Pod::Simple::TranscodeDumb'=> '3.14',
              'Pod::Simple::TranscodeSmart'=> '3.14',
              'Pod::Simple::XHTML'    => '3.14',
              'Pod::Simple::XMLOutStream'=> '3.14',
              'Safe'                  => '2.27',
          },
          removed => {
          }
      },
      5.012002 => {
          delta_from => 5.012001,
          changed => {
              'Carp'                  => '1.17',
              'Carp::Heavy'           => '1.17',
              'File::Spec'            => '3.31_01',
              'Module::CoreList'      => '2.38',
              'Module::Load::Conditional'=> '0.38',
              'PerlIO::scalar'        => '0.08',
          },
          removed => {
          }
      },
      5.012003 => {
          delta_from => 5.012002,
          changed => {
              'B::Deparse'            => '0.9701',
              'Module::Build::Platform::cygwin'=> '0.360301',
              'Module::CoreList'      => '2.43',
              'Socket'                => '1.87_01',
          },
          removed => {
          }
      },
      5.012004 => {
          delta_from => 5.012003,
          changed => {
              'Module::CoreList'      => '2.50',
          },
          removed => {
          }
      },
      5.012005 => {
          delta_from => 5.012004,
          changed => {
              'B::Concise'            => '0.78_01',
              'Encode'                => '2.39_01',
              'File::Glob'            => '1.07_01',
              'Module::CoreList'      => '2.50_02',
              'Unicode::UCD'          => '0.29',
              'charnames'             => '1.07_01',
          },
          removed => {
          }
      },
      5.013 => {
          delta_from => 5.012,
          changed => {
              'CGI'                   => '3.49',
              'CGI::Fast'             => '1.08',
              'Data::Dumper'          => '2.126',
              'ExtUtils::MM_Unix'     => '6.5601',
              'ExtUtils::MakeMaker'   => '6.5601',
              'File::Copy'            => '2.18',
              'IPC::Open3'            => '1.06',
              'MIME::Base64'          => '3.09',
              'MIME::QuotedPrint'     => '3.09',
              'Module::CoreList'      => '2.31',
              'Pod::Functions'        => '1.04',
              'XS::APItest'           => '0.18',
              'XS::APItest::KeywordRPN'=> '0.004',
              'feature'               => '1.17',
              'threads'               => '1.77_01',
              'threads::shared'       => '1.33',
          },
          removed => {
          }
      },
      5.013001 => {
          delta_from => 5.012001,
          changed => {
              'Data::Dumper'          => '2.126',
              'Dumpvalue'             => '1.14',
              'Errno'                 => '1.12',
              'ExtUtils::MM_Unix'     => '6.5601',
              'ExtUtils::MakeMaker'   => '6.5601',
              'ExtUtils::ParseXS'     => '2.2205',
              'File::Find'            => '1.16',
              'IPC::Cmd'              => '0.58',
              'IPC::Open3'            => '1.06',
              'List::Util'            => '1.23',
              'List::Util::PP'        => '1.23',
              'List::Util::XS'        => '1.23',
              'Locale::Codes'         => '3.12',
              'Locale::Codes::Country'=> '3.12',
              'Locale::Codes::Currency'=> '3.12',
              'Locale::Codes::Language'=> '3.12',
              'Locale::Codes::Script' => '3.12',
              'Locale::Constants'     => '3.12',
              'Locale::Country'       => '3.12',
              'Locale::Currency'      => '3.12',
              'Locale::Language'      => '3.12',
              'Locale::Script'        => '3.12',
              'MIME::Base64'          => '3.09',
              'MIME::QuotedPrint'     => '3.09',
              'Module::Build::Platform::cygwin'=> '0.360301',
              'Module::CoreList'      => '2.34',
              'Module::Load::Conditional'=> '0.38',
              'PerlIO::scalar'        => '0.08',
              'Scalar::Util'          => '1.23',
              'Scalar::Util::PP'      => '1.23',
              'Socket'                => '1.88',
              'Term::ReadLine'        => '1.06',
              'Unicode::UCD'          => '0.28',
              'XS::APItest'           => '0.19',
              'XS::APItest::KeywordRPN'=> '0.004',
              'charnames'             => '1.08',
              'feature'               => '1.17',
              'threads'               => '1.77_01',
              'threads::shared'       => '1.33',
          },
          removed => {
              'Class::ISA'            => 1,
              'Pod::Plainer'          => 1,
              'Switch'                => 1,
          }
      },
      5.013002 => {
          delta_from => 5.013001,
          changed => {
              'B::Concise'            => '0.79',
              'B::Deparse'            => '0.98',
              'CPAN'                  => '1.94_57',
              'CPAN::Distribution'    => '1.9600',
              'Exporter'              => '5.64_02',
              'Exporter::Heavy'       => '5.64_02',
              'File::Copy'            => '2.19',
              'Hash::Util'            => '0.08',
              'IO::Socket'            => '1.32',
              'Locale::Codes'         => '3.13',
              'Locale::Codes::Country'=> '3.13',
              'Locale::Codes::Currency'=> '3.13',
              'Locale::Codes::Language'=> '3.13',
              'Locale::Codes::Script' => '3.13',
              'Locale::Constants'     => '3.13',
              'Locale::Country'       => '3.13',
              'Locale::Currency'      => '3.13',
              'Locale::Language'      => '3.13',
              'Locale::Script'        => '3.13',
              'Search::Dict'          => '1.03',
              'Socket'                => '1.89',
              'Thread::Semaphore'     => '2.11',
              'UNIVERSAL'             => '1.07',
              'VMS::DCLsym'           => '1.04',
              'mro'                   => '1.03',
              'threads'               => '1.77_02',
              'threads::shared'       => '1.33_01',
          },
          removed => {
          }
      },
      5.013003 => {
          delta_from => 5.013002,
          changed => {
              'App::Prove'            => '3.21',
              'App::Prove::State'     => '3.21',
              'App::Prove::State::Result'=> '3.21',
              'App::Prove::State::Result::Test'=> '3.21',
              'Archive::Extract'      => '0.42',
              'Archive::Tar'          => '1.64',
              'Archive::Tar::Constant'=> '1.64',
              'Archive::Tar::File'    => '1.64',
              'Attribute::Handlers'   => '0.88',
              'CPANPLUS'              => '0.9007',
              'CPANPLUS::Internals'   => '0.9007',
              'CPANPLUS::Shell::Default'=> '0.9007',
              'Compress::Raw::Bzip2'  => '2.027',
              'Compress::Raw::Zlib'   => '2.027_01',
              'Compress::Zlib'        => '2.027',
              'DB'                    => '1.03',
              'Digest::MD5'           => '2.40',
              'Digest::SHA'           => '5.48',
              'Exporter'              => '5.64_03',
              'Exporter::Heavy'       => '5.64_03',
              'ExtUtils::CBuilder'    => '0.2703',
              'ExtUtils::CBuilder::Base'=> '0.2703_01',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.2703',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.2703',
              'ExtUtils::CBuilder::Platform::aix'=> '0.2703',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.2703',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.2703',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.2703',
              'ExtUtils::CBuilder::Platform::os2'=> '0.2703',
              'ExtUtils::Manifest'    => '1.58',
              'ExtUtils::ParseXS'     => '2.2206',
              'Fatal'                 => '2.10',
              'File::Basename'        => '2.79',
              'File::Copy'            => '2.20',
              'File::DosGlob'         => '1.02',
              'File::Find'            => '1.17',
              'File::Glob'            => '1.08',
              'File::stat'            => '1.03',
              'I18N::LangTags'        => '0.35_01',
              'I18N::LangTags::List'  => '0.35_01',
              'IO::Compress::Adapter::Bzip2'=> '2.027',
              'IO::Compress::Adapter::Deflate'=> '2.027',
              'IO::Compress::Adapter::Identity'=> '2.027',
              'IO::Compress::Base'    => '2.027',
              'IO::Compress::Base::Common'=> '2.027',
              'IO::Compress::Bzip2'   => '2.027',
              'IO::Compress::Deflate' => '2.027',
              'IO::Compress::Gzip'    => '2.027',
              'IO::Compress::Gzip::Constants'=> '2.027',
              'IO::Compress::RawDeflate'=> '2.027',
              'IO::Compress::Zip'     => '2.027',
              'IO::Compress::Zip::Constants'=> '2.027',
              'IO::Compress::Zlib::Constants'=> '2.027',
              'IO::Compress::Zlib::Extra'=> '2.027',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.027',
              'IO::Uncompress::Adapter::Identity'=> '2.027',
              'IO::Uncompress::Adapter::Inflate'=> '2.027',
              'IO::Uncompress::AnyInflate'=> '2.027',
              'IO::Uncompress::AnyUncompress'=> '2.027',
              'IO::Uncompress::Base'  => '2.027',
              'IO::Uncompress::Bunzip2'=> '2.027',
              'IO::Uncompress::Gunzip'=> '2.027',
              'IO::Uncompress::Inflate'=> '2.027',
              'IO::Uncompress::RawInflate'=> '2.027',
              'IO::Uncompress::Unzip' => '2.027',
              'IPC::Cmd'              => '0.60',
              'IPC::Msg'              => '2.03',
              'IPC::Semaphore'        => '2.03',
              'IPC::SharedMem'        => '2.03',
              'IPC::SysV'             => '2.03',
              'Locale::Maketext'      => '1.15',
              'Locale::Maketext::Guts'=> undef,
              'Locale::Maketext::GutsLoader'=> undef,
              'Module::Build'         => '0.3607',
              'Module::Build::Base'   => '0.3607',
              'Module::Build::Compat' => '0.3607',
              'Module::Build::Config' => '0.3607',
              'Module::Build::Cookbook'=> '0.3607',
              'Module::Build::Dumper' => '0.3607',
              'Module::Build::ModuleInfo'=> '0.3607',
              'Module::Build::Notes'  => '0.3607',
              'Module::Build::PPMMaker'=> '0.3607',
              'Module::Build::Platform::Amiga'=> '0.3607',
              'Module::Build::Platform::Default'=> '0.3607',
              'Module::Build::Platform::EBCDIC'=> '0.3607',
              'Module::Build::Platform::MPEiX'=> '0.3607',
              'Module::Build::Platform::MacOS'=> '0.3607',
              'Module::Build::Platform::RiscOS'=> '0.3607',
              'Module::Build::Platform::Unix'=> '0.3607',
              'Module::Build::Platform::VMS'=> '0.3607',
              'Module::Build::Platform::VOS'=> '0.3607',
              'Module::Build::Platform::Windows'=> '0.3607',
              'Module::Build::Platform::aix'=> '0.3607',
              'Module::Build::Platform::cygwin'=> '0.3607',
              'Module::Build::Platform::darwin'=> '0.3607',
              'Module::Build::Platform::os2'=> '0.3607',
              'Module::Build::PodParser'=> '0.3607',
              'Module::CoreList'      => '2.36',
              'Module::Load'          => '0.18',
              'TAP::Base'             => '3.21',
              'TAP::Formatter::Base'  => '3.21',
              'TAP::Formatter::Color' => '3.21',
              'TAP::Formatter::Console'=> '3.21',
              'TAP::Formatter::Console::ParallelSession'=> '3.21',
              'TAP::Formatter::Console::Session'=> '3.21',
              'TAP::Formatter::File'  => '3.21',
              'TAP::Formatter::File::Session'=> '3.21',
              'TAP::Formatter::Session'=> '3.21',
              'TAP::Harness'          => '3.21',
              'TAP::Object'           => '3.21',
              'TAP::Parser'           => '3.21',
              'TAP::Parser::Aggregator'=> '3.21',
              'TAP::Parser::Grammar'  => '3.21',
              'TAP::Parser::Iterator' => '3.21',
              'TAP::Parser::Iterator::Array'=> '3.21',
              'TAP::Parser::Iterator::Process'=> '3.21',
              'TAP::Parser::Iterator::Stream'=> '3.21',
              'TAP::Parser::IteratorFactory'=> '3.21',
              'TAP::Parser::Multiplexer'=> '3.21',
              'TAP::Parser::Result'   => '3.21',
              'TAP::Parser::Result::Bailout'=> '3.21',
              'TAP::Parser::Result::Comment'=> '3.21',
              'TAP::Parser::Result::Plan'=> '3.21',
              'TAP::Parser::Result::Pragma'=> '3.21',
              'TAP::Parser::Result::Test'=> '3.21',
              'TAP::Parser::Result::Unknown'=> '3.21',
              'TAP::Parser::Result::Version'=> '3.21',
              'TAP::Parser::Result::YAML'=> '3.21',
              'TAP::Parser::ResultFactory'=> '3.21',
              'TAP::Parser::Scheduler'=> '3.21',
              'TAP::Parser::Scheduler::Job'=> '3.21',
              'TAP::Parser::Scheduler::Spinner'=> '3.21',
              'TAP::Parser::Source'   => '3.21',
              'TAP::Parser::SourceHandler'=> '3.21',
              'TAP::Parser::SourceHandler::Executable'=> '3.21',
              'TAP::Parser::SourceHandler::File'=> '3.21',
              'TAP::Parser::SourceHandler::Handle'=> '3.21',
              'TAP::Parser::SourceHandler::Perl'=> '3.21',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.21',
              'TAP::Parser::SourceHandler::pgTAP'=> '3.21',
              'TAP::Parser::Utils'    => '3.21',
              'TAP::Parser::YAMLish::Reader'=> '3.21',
              'TAP::Parser::YAMLish::Writer'=> '3.21',
              'Term::ANSIColor'       => '3.00',
              'Term::ReadLine'        => '1.07',
              'Test::Harness'         => '3.21',
              'Tie::Array'            => '1.04',
              'Time::HiRes'           => '1.9721',
              'Time::Piece'           => '1.20_01',
              'Unicode::Collate'      => '0.53',
              'Unicode::Normalize'    => '1.06',
              'Unicode::UCD'          => '0.29',
              'autodie'               => '2.10',
              'autodie::exception'    => '2.10',
              'autodie::exception::system'=> '2.10',
              'autodie::hints'        => '2.10',
              'blib'                  => '1.05',
              'charnames'             => '1.11',
              'diagnostics'           => '1.20',
              'inc::latest'           => '0.3607',
              'lib'                   => '0.63',
              're'                    => '0.12',
              'threads'               => '1.77_03',
              'threads::shared'       => '1.33_02',
              'vars'                  => '1.02',
              'warnings'              => '1.10',
          },
          removed => {
              'TAP::Parser::Source::Perl'=> 1,
          }
      },
      5.013004 => {
          delta_from => 5.013003,
          changed => {
              'App::Prove'            => '3.22',
              'App::Prove::State'     => '3.22',
              'App::Prove::State::Result'=> '3.22',
              'App::Prove::State::Result::Test'=> '3.22',
              'Archive::Tar'          => '1.68',
              'Archive::Tar::Constant'=> '1.68',
              'Archive::Tar::File'    => '1.68',
              'B::Lint'               => '1.12',
              'B::Lint::Debug'        => '1.12',
              'Carp'                  => '1.18',
              'Carp::Heavy'           => '1.18',
              'Compress::Raw::Bzip2'  => '2.030',
              'Compress::Raw::Zlib'   => '2.030',
              'Compress::Zlib'        => '2.030',
              'ExtUtils::ParseXS'     => '2.2207',
              'File::Spec'            => '3.31_01',
              'I18N::Langinfo'        => '0.04',
              'IO::Compress::Adapter::Bzip2'=> '2.030',
              'IO::Compress::Adapter::Deflate'=> '2.030',
              'IO::Compress::Adapter::Identity'=> '2.030',
              'IO::Compress::Base'    => '2.030',
              'IO::Compress::Base::Common'=> '2.030',
              'IO::Compress::Bzip2'   => '2.030',
              'IO::Compress::Deflate' => '2.030',
              'IO::Compress::Gzip'    => '2.030',
              'IO::Compress::Gzip::Constants'=> '2.030',
              'IO::Compress::RawDeflate'=> '2.030',
              'IO::Compress::Zip'     => '2.030',
              'IO::Compress::Zip::Constants'=> '2.030',
              'IO::Compress::Zlib::Constants'=> '2.030',
              'IO::Compress::Zlib::Extra'=> '2.030',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.030',
              'IO::Uncompress::Adapter::Identity'=> '2.030',
              'IO::Uncompress::Adapter::Inflate'=> '2.030',
              'IO::Uncompress::AnyInflate'=> '2.030',
              'IO::Uncompress::AnyUncompress'=> '2.030',
              'IO::Uncompress::Base'  => '2.030',
              'IO::Uncompress::Bunzip2'=> '2.030',
              'IO::Uncompress::Gunzip'=> '2.030',
              'IO::Uncompress::Inflate'=> '2.030',
              'IO::Uncompress::RawInflate'=> '2.030',
              'IO::Uncompress::Unzip' => '2.030',
              'Module::CoreList'      => '2.37',
              'TAP::Base'             => '3.22',
              'TAP::Formatter::Base'  => '3.22',
              'TAP::Formatter::Color' => '3.22',
              'TAP::Formatter::Console'=> '3.22',
              'TAP::Formatter::Console::ParallelSession'=> '3.22',
              'TAP::Formatter::Console::Session'=> '3.22',
              'TAP::Formatter::File'  => '3.22',
              'TAP::Formatter::File::Session'=> '3.22',
              'TAP::Formatter::Session'=> '3.22',
              'TAP::Harness'          => '3.22',
              'TAP::Object'           => '3.22',
              'TAP::Parser'           => '3.22',
              'TAP::Parser::Aggregator'=> '3.22',
              'TAP::Parser::Grammar'  => '3.22',
              'TAP::Parser::Iterator' => '3.22',
              'TAP::Parser::Iterator::Array'=> '3.22',
              'TAP::Parser::Iterator::Process'=> '3.22',
              'TAP::Parser::Iterator::Stream'=> '3.22',
              'TAP::Parser::IteratorFactory'=> '3.22',
              'TAP::Parser::Multiplexer'=> '3.22',
              'TAP::Parser::Result'   => '3.22',
              'TAP::Parser::Result::Bailout'=> '3.22',
              'TAP::Parser::Result::Comment'=> '3.22',
              'TAP::Parser::Result::Plan'=> '3.22',
              'TAP::Parser::Result::Pragma'=> '3.22',
              'TAP::Parser::Result::Test'=> '3.22',
              'TAP::Parser::Result::Unknown'=> '3.22',
              'TAP::Parser::Result::Version'=> '3.22',
              'TAP::Parser::Result::YAML'=> '3.22',
              'TAP::Parser::ResultFactory'=> '3.22',
              'TAP::Parser::Scheduler'=> '3.22',
              'TAP::Parser::Scheduler::Job'=> '3.22',
              'TAP::Parser::Scheduler::Spinner'=> '3.22',
              'TAP::Parser::Source'   => '3.22',
              'TAP::Parser::SourceHandler'=> '3.22',
              'TAP::Parser::SourceHandler::Executable'=> '3.22',
              'TAP::Parser::SourceHandler::File'=> '3.22',
              'TAP::Parser::SourceHandler::Handle'=> '3.22',
              'TAP::Parser::SourceHandler::Perl'=> '3.22',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.22',
              'TAP::Parser::Utils'    => '3.22',
              'TAP::Parser::YAMLish::Reader'=> '3.22',
              'TAP::Parser::YAMLish::Writer'=> '3.22',
              'Test::Builder'         => '0.96',
              'Test::Builder::Module' => '0.96',
              'Test::Builder::Tester' => '1.20',
              'Test::Builder::Tester::Color'=> '1.20',
              'Test::Harness'         => '3.22',
              'Test::More'            => '0.96',
              'Test::Simple'          => '0.96',
              'Unicode::Collate'      => '0.56',
              'Unicode::Collate::Locale'=> '0.56',
              'XS::APItest'           => '0.20',
              'charnames'             => '1.15',
              'feature'               => '1.18',
          },
          removed => {
              'TAP::Parser::SourceHandler::pgTAP'=> 1,
          }
      },
      5.013005 => {
          delta_from => 5.013004,
          changed => {
              'B::Debug'              => '1.16',
              'CPANPLUS::Dist::Build' => '0.48',
              'CPANPLUS::Dist::Build::Constants'=> '0.48',
              'Data::Dumper'          => '2.128',
              'Encode'                => '2.40',
              'Encode::Guess'         => '2.04',
              'Encode::MIME::Header'  => '2.12',
              'Encode::Unicode::UTF7' => '2.05',
              'Errno'                 => '1.13',
              'ExtUtils::Command::MM' => '6.57_05',
              'ExtUtils::Liblist'     => '6.57_05',
              'ExtUtils::Liblist::Kid'=> '6.5705',
              'ExtUtils::MM'          => '6.57_05',
              'ExtUtils::MM_AIX'      => '6.57_05',
              'ExtUtils::MM_Any'      => '6.57_05',
              'ExtUtils::MM_BeOS'     => '6.57_05',
              'ExtUtils::MM_Cygwin'   => '6.57_05',
              'ExtUtils::MM_DOS'      => '6.5705',
              'ExtUtils::MM_Darwin'   => '6.57_05',
              'ExtUtils::MM_MacOS'    => '6.5705',
              'ExtUtils::MM_NW5'      => '6.57_05',
              'ExtUtils::MM_OS2'      => '6.57_05',
              'ExtUtils::MM_QNX'      => '6.57_05',
              'ExtUtils::MM_UWIN'     => '6.5705',
              'ExtUtils::MM_Unix'     => '6.57_05',
              'ExtUtils::MM_VMS'      => '6.57_05',
              'ExtUtils::MM_VOS'      => '6.57_05',
              'ExtUtils::MM_Win32'    => '6.57_05',
              'ExtUtils::MM_Win95'    => '6.57_05',
              'ExtUtils::MY'          => '6.5705',
              'ExtUtils::MakeMaker'   => '6.57_05',
              'ExtUtils::MakeMaker::Config'=> '6.57_05',
              'ExtUtils::MakeMaker::YAML'=> '1.44',
              'ExtUtils::Mkbootstrap' => '6.57_05',
              'ExtUtils::Mksymlists'  => '6.57_05',
              'ExtUtils::testlib'     => '6.5705',
              'Filter::Simple'        => '0.85',
              'Hash::Util'            => '0.09',
              'Math::BigFloat'        => '1.62',
              'Math::BigInt'          => '1.95',
              'Math::BigInt::Calc'    => '0.54',
              'Math::BigInt::CalcEmu' => '0.06',
              'Math::BigInt::FastCalc'=> '0.22',
              'Math::BigRat'          => '0.26',
              'Module::CoreList'      => '2.39',
              'POSIX'                 => '1.20',
              'PerlIO::scalar'        => '0.09',
              'Safe'                  => '2.28',
              'Test::Builder'         => '0.97_01',
              'Test::Builder::Module' => '0.97_01',
              'Test::Builder::Tester' => '1.21_01',
              'Test::Builder::Tester::Color'=> '1.21_01',
              'Test::More'            => '0.97_01',
              'Test::Simple'          => '0.97_01',
              'Tie::Hash'             => '1.04',
              'Unicode::Collate'      => '0.59',
              'Unicode::Collate::Locale'=> '0.59',
              'XS::APItest'           => '0.21',
              'XS::APItest::KeywordRPN'=> '0.005',
              'XSLoader'              => '0.11',
              'bigint'                => '0.25',
              'bignum'                => '0.25',
              'bigrat'                => '0.25',
              'blib'                  => '1.06',
              'open'                  => '1.08',
              'threads::shared'       => '1.33_03',
              'warnings'              => '1.11',
              'warnings::register'    => '1.02',
          },
          removed => {
          }
      },
      5.013006 => {
          delta_from => 5.013005,
          changed => {
              'Archive::Extract'      => '0.44',
              'B'                     => '1.24',
              'B::Deparse'            => '0.99',
              'CPAN'                  => '1.94_61',
              'CPAN::FTP'             => '5.5005',
              'CPAN::Queue'           => '5.5001',
              'CPAN::Version'         => '5.5001',
              'Carp'                  => '1.19',
              'Carp::Heavy'           => '1.19',
              'Compress::Raw::Bzip2'  => '2.031',
              'Cwd'                   => '3.34',
              'Data::Dumper'          => '2.129',
              'Devel::Peek'           => '1.05',
              'Digest::MD5'           => '2.51',
              'ExtUtils::Constant::Base'=> '0.05',
              'ExtUtils::Constant::ProxySubs'=> '0.07',
              'ExtUtils::Embed'       => '1.29',
              'ExtUtils::XSSymSet'    => '1.2',
              'Fcntl'                 => '1.09',
              'File::DosGlob'         => '1.03',
              'File::Find'            => '1.18',
              'File::Glob'            => '1.09',
              'File::Spec'            => '3.33',
              'File::Spec::Cygwin'    => '3.33',
              'File::Spec::Epoc'      => '3.33',
              'File::Spec::Functions' => '3.33',
              'File::Spec::Mac'       => '3.33',
              'File::Spec::OS2'       => '3.33',
              'File::Spec::Unix'      => '3.33',
              'File::Spec::VMS'       => '3.33',
              'File::Spec::Win32'     => '3.33',
              'GDBM_File'             => '1.11',
              'Hash::Util::FieldHash' => '1.05',
              'I18N::Langinfo'        => '0.06',
              'IPC::Cmd'              => '0.64',
              'IPC::Open3'            => '1.07',
              'Locale::Codes'         => '3.14',
              'Locale::Codes::Country'=> '3.14',
              'Locale::Codes::Currency'=> '3.14',
              'Locale::Codes::Language'=> '3.14',
              'Locale::Codes::Script' => '3.14',
              'Locale::Constants'     => '3.14',
              'Locale::Country'       => '3.14',
              'Locale::Currency'      => '3.14',
              'Locale::Language'      => '3.14',
              'Locale::Maketext'      => '1.16',
              'Locale::Script'        => '3.14',
              'Math::BigFloat'        => '1.63',
              'Math::BigInt'          => '1.97',
              'Math::BigInt::Calc'    => '0.55',
              'Math::BigInt::CalcEmu' => '0.07',
              'Module::CoreList'      => '2.40',
              'NDBM_File'             => '1.09',
              'NEXT'                  => '0.65',
              'ODBM_File'             => '1.08',
              'Opcode'                => '1.16',
              'POSIX'                 => '1.21',
              'PerlIO::encoding'      => '0.13',
              'PerlIO::scalar'        => '0.10',
              'PerlIO::via'           => '0.10',
              'Pod::Man'              => '2.25',
              'Pod::Text'             => '3.15',
              'SDBM_File'             => '1.07',
              'Socket'                => '1.90',
              'Sys::Hostname'         => '1.13',
              'Tie::Hash::NamedCapture'=> '0.07',
              'Unicode::Collate'      => '0.63',
              'Unicode::Collate::Locale'=> '0.63',
              'Unicode::Normalize'    => '1.07',
              'XS::APItest'           => '0.23',
              'XSLoader'              => '0.13',
              'attributes'            => '0.13',
              'charnames'             => '1.16',
              'if'                    => '0.06',
              'mro'                   => '1.04',
              'overload'              => '1.11',
              're'                    => '0.13',
              'sigtrap'               => '1.05',
              'threads'               => '1.81_01',
              'threads::shared'       => '1.34',
          },
          removed => {
              'XS::APItest::KeywordRPN'=> 1,
          }
      },
      5.013007 => {
          delta_from => 5.013006,
          changed => {
              'Archive::Extract'      => '0.46',
              'Archive::Tar'          => '1.72',
              'Archive::Tar::Constant'=> '1.72',
              'Archive::Tar::File'    => '1.72',
              'AutoLoader'            => '5.71',
              'B'                     => '1.26',
              'B::Concise'            => '0.81',
              'B::Deparse'            => '1.01',
              'CGI'                   => '3.50',
              'CPAN'                  => '1.94_62',
              'CPANPLUS'              => '0.9010',
              'CPANPLUS::Dist::Build' => '0.50',
              'CPANPLUS::Dist::Build::Constants'=> '0.50',
              'CPANPLUS::Internals'   => '0.9010',
              'CPANPLUS::Shell::Default'=> '0.9010',
              'Data::Dumper'          => '2.130_01',
              'DynaLoader'            => '1.11',
              'ExtUtils::Constant'    => '0.23',
              'ExtUtils::Constant::ProxySubs'=> '0.08',
              'Fcntl'                 => '1.10',
              'File::Fetch'           => '0.28',
              'File::Glob'            => '1.10',
              'File::stat'            => '1.04',
              'GDBM_File'             => '1.12',
              'Hash::Util'            => '0.10',
              'Hash::Util::FieldHash' => '1.06',
              'I18N::Langinfo'        => '0.07',
              'Locale::Maketext'      => '1.17',
              'Locale::Maketext::Guts'=> '1.17',
              'Locale::Maketext::GutsLoader'=> '1.17',
              'MIME::Base64'          => '3.10',
              'MIME::QuotedPrint'     => '3.10',
              'Math::BigFloat'        => '1.99_01',
              'Math::BigInt'          => '1.99_01',
              'Math::BigInt::Calc'    => '1.99_01',
              'Math::BigInt::CalcEmu' => '1.99_01',
              'Math::BigInt::FastCalc'=> '0.24_01',
              'Math::BigRat'          => '0.26_01',
              'Module::CoreList'      => '2.41',
              'NDBM_File'             => '1.10',
              'ODBM_File'             => '1.09',
              'Opcode'                => '1.17',
              'POSIX'                 => '1.22',
              'Pod::Simple'           => '3.15',
              'Pod::Simple::BlackBox' => '3.15',
              'Pod::Simple::Checker'  => '3.15',
              'Pod::Simple::Debug'    => '3.15',
              'Pod::Simple::DumpAsText'=> '3.15',
              'Pod::Simple::DumpAsXML'=> '3.15',
              'Pod::Simple::HTML'     => '3.15',
              'Pod::Simple::HTMLBatch'=> '3.15',
              'Pod::Simple::LinkSection'=> '3.15',
              'Pod::Simple::Methody'  => '3.15',
              'Pod::Simple::Progress' => '3.15',
              'Pod::Simple::PullParser'=> '3.15',
              'Pod::Simple::PullParserEndToken'=> '3.15',
              'Pod::Simple::PullParserStartToken'=> '3.15',
              'Pod::Simple::PullParserTextToken'=> '3.15',
              'Pod::Simple::PullParserToken'=> '3.15',
              'Pod::Simple::RTF'      => '3.15',
              'Pod::Simple::Search'   => '3.15',
              'Pod::Simple::SimpleTree'=> '3.15',
              'Pod::Simple::Text'     => '3.15',
              'Pod::Simple::TextContent'=> '3.15',
              'Pod::Simple::TiedOutFH'=> '3.15',
              'Pod::Simple::Transcode'=> '3.15',
              'Pod::Simple::TranscodeDumb'=> '3.15',
              'Pod::Simple::TranscodeSmart'=> '3.15',
              'Pod::Simple::XHTML'    => '3.15',
              'Pod::Simple::XMLOutStream'=> '3.15',
              'SDBM_File'             => '1.08',
              'Safe'                  => '2.29',
              'SelfLoader'            => '1.18',
              'Socket'                => '1.91',
              'Storable'              => '2.24',
              'Sys::Hostname'         => '1.14',
              'Unicode'               => '6.0.0',
              'Unicode::Collate'      => '0.67',
              'Unicode::Collate::CJK::Big5'=> '0.65',
              'Unicode::Collate::CJK::GB2312'=> '0.65',
              'Unicode::Collate::CJK::JISX0208'=> '0.64',
              'Unicode::Collate::CJK::Korean'=> '0.66',
              'Unicode::Collate::CJK::Pinyin'=> '0.65',
              'Unicode::Collate::CJK::Stroke'=> '0.65',
              'Unicode::Collate::Locale'=> '0.67',
              'XS::APItest'           => '0.26',
              'XS::Typemap'           => '0.04',
              'charnames'             => '1.17',
              'mro'                   => '1.05',
              'parent'                => '0.224',
              're'                    => '0.14',
              'threads'               => '1.81_02',
          },
          removed => {
          }
      },
      5.013008 => {
          delta_from => 5.013007,
          changed => {
              'Archive::Tar'          => '1.74',
              'Archive::Tar::Constant'=> '1.74',
              'Archive::Tar::File'    => '1.74',
              'B'                     => '1.27',
              'B::Concise'            => '0.82',
              'B::Deparse'            => '1.02',
              'Carp::Heavy'           => '1.17',
              'Cwd'                   => '3.35',
              'Data::Dumper'          => '2.130_02',
              'Devel::Peek'           => '1.06',
              'Devel::SelfStubber'    => '1.05',
              'Digest::SHA'           => '5.50',
              'Dumpvalue'             => '1.15',
              'DynaLoader'            => '1.12',
              'Env'                   => '1.02',
              'Exporter::Heavy'       => '5.64_01',
              'ExtUtils::CBuilder'    => '0.280201',
              'ExtUtils::CBuilder::Base'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280201',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280201',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280201',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280201',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280201',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280201',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280201',
              'ExtUtils::Constant::Utils'=> '0.03',
              'ExtUtils::Embed'       => '1.30',
              'ExtUtils::ParseXS'     => '2.2208',
              'Fatal'                 => '2.1001',
              'Fcntl'                 => '1.11',
              'File::CheckTree'       => '4.41',
              'File::Glob'            => '1.11',
              'GDBM_File'             => '1.13',
              'Hash::Util::FieldHash' => '1.07',
              'I18N::Collate'         => '1.02',
              'IO'                    => '1.25_03',
              'IPC::Cmd'              => '0.66',
              'IPC::Open3'            => '1.08',
              'Locale::Codes'         => '3.15',
              'Locale::Codes::Country'=> '3.15',
              'Locale::Codes::Currency'=> '3.15',
              'Locale::Codes::Language'=> '3.15',
              'Locale::Codes::Script' => '3.15',
              'Locale::Constants'     => '3.15',
              'Locale::Country'       => '3.15',
              'Locale::Currency'      => '3.15',
              'Locale::Language'      => '3.15',
              'Locale::Script'        => '3.15',
              'MIME::Base64'          => '3.13',
              'MIME::QuotedPrint'     => '3.13',
              'Math::BigFloat'        => '1.99_02',
              'Math::BigInt'          => '1.99_02',
              'Math::BigInt::Calc'    => '1.99_02',
              'Math::BigInt::CalcEmu' => '1.99_02',
              'Memoize'               => '1.02',
              'Memoize::AnyDBM_File'  => '1.02',
              'Memoize::Expire'       => '1.02',
              'Memoize::ExpireFile'   => '1.02',
              'Memoize::ExpireTest'   => '1.02',
              'Memoize::NDBM_File'    => '1.02',
              'Memoize::SDBM_File'    => '1.02',
              'Memoize::Storable'     => '1.02',
              'Module::CoreList'      => '2.43',
              'NDBM_File'             => '1.11',
              'Net::Ping'             => '2.37',
              'ODBM_File'             => '1.10',
              'Opcode'                => '1.18',
              'POSIX'                 => '1.23',
              'PerlIO::encoding'      => '0.14',
              'PerlIO::scalar'        => '0.11',
              'PerlIO::via'           => '0.11',
              'SDBM_File'             => '1.09',
              'Socket'                => '1.92',
              'Storable'              => '2.25',
              'Time::HiRes'           => '1.9721_01',
              'Unicode::Collate'      => '0.6801',
              'Unicode::Collate::Locale'=> '0.68',
              'Unicode::Normalize'    => '1.08',
              'Unicode::UCD'          => '0.30',
              'Win32'                 => '0.41',
              'XS::APItest'           => '0.27',
              'autodie'               => '2.1001',
              'autodie::exception'    => '2.1001',
              'autodie::exception::system'=> '2.1001',
              'autodie::hints'        => '2.1001',
              'feature'               => '1.19',
              'if'                    => '0.0601',
              'mro'                   => '1.06',
              'overload'              => '1.12',
              're'                    => '0.15',
              'threads'               => '1.81_03',
              'threads::shared'       => '1.35',
              'version'               => '0.86',
          },
          removed => {
          }
      },
      5.013009 => {
          delta_from => 5.013008,
          changed => {
              'Archive::Extract'      => '0.48',
              'Archive::Tar'          => '1.76',
              'Archive::Tar::Constant'=> '1.76',
              'Archive::Tar::File'    => '1.76',
              'B::Concise'            => '0.83',
              'B::Deparse'            => '1.03',
              'B::Lint'               => '1.13',
              'Benchmark'             => '1.12',
              'CGI'                   => '3.51',
              'CGI::Carp'             => '3.51',
              'CGI::Cookie'           => '1.30',
              'CGI::Push'             => '1.05',
              'CGI::Util'             => '3.51',
              'CPAN'                  => '1.94_63',
              'CPAN::HTTP::Client'    => '1.94',
              'CPAN::HTTP::Credentials'=> '1.94',
              'CPAN::Meta::YAML'      => '0.003',
              'CPANPLUS'              => '0.9011',
              'CPANPLUS::Dist::Build' => '0.52',
              'CPANPLUS::Dist::Build::Constants'=> '0.52',
              'CPANPLUS::Internals'   => '0.9011',
              'CPANPLUS::Shell::Default'=> '0.9011',
              'Carp::Heavy'           => '1.19',
              'Compress::Raw::Bzip2'  => '2.033',
              'Compress::Raw::Zlib'   => '2.033',
              'Compress::Zlib'        => '2.033',
              'Cwd'                   => '3.36',
              'DBM_Filter'            => '0.04',
              'DB_File'               => '1.821',
              'Devel::Peek'           => '1.07',
              'DirHandle'             => '1.04',
              'Dumpvalue'             => '1.16',
              'Encode'                => '2.42',
              'Encode::Alias'         => '2.13',
              'Encode::MIME::Header'  => '2.13',
              'Exporter::Heavy'       => '5.64_03',
              'ExtUtils::Install'     => '1.56',
              'ExtUtils::ParseXS'     => '2.2209',
              'File::Basename'        => '2.80',
              'File::Copy'            => '2.21',
              'File::DosGlob'         => '1.04',
              'File::Fetch'           => '0.32',
              'File::Find'            => '1.19',
              'File::Spec::Mac'       => '3.34',
              'File::Spec::VMS'       => '3.34',
              'File::stat'            => '1.05',
              'HTTP::Tiny'            => '0.009',
              'Hash::Util::FieldHash' => '1.08',
              'IO::Compress::Adapter::Bzip2'=> '2.033',
              'IO::Compress::Adapter::Deflate'=> '2.033',
              'IO::Compress::Adapter::Identity'=> '2.033',
              'IO::Compress::Base'    => '2.033',
              'IO::Compress::Base::Common'=> '2.033',
              'IO::Compress::Bzip2'   => '2.033',
              'IO::Compress::Deflate' => '2.033',
              'IO::Compress::Gzip'    => '2.033',
              'IO::Compress::Gzip::Constants'=> '2.033',
              'IO::Compress::RawDeflate'=> '2.033',
              'IO::Compress::Zip'     => '2.033',
              'IO::Compress::Zip::Constants'=> '2.033',
              'IO::Compress::Zlib::Constants'=> '2.033',
              'IO::Compress::Zlib::Extra'=> '2.033',
              'IO::Handle'            => '1.29',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.033',
              'IO::Uncompress::Adapter::Identity'=> '2.033',
              'IO::Uncompress::Adapter::Inflate'=> '2.033',
              'IO::Uncompress::AnyInflate'=> '2.033',
              'IO::Uncompress::AnyUncompress'=> '2.033',
              'IO::Uncompress::Base'  => '2.033',
              'IO::Uncompress::Bunzip2'=> '2.033',
              'IO::Uncompress::Gunzip'=> '2.033',
              'IO::Uncompress::Inflate'=> '2.033',
              'IO::Uncompress::RawInflate'=> '2.033',
              'IO::Uncompress::Unzip' => '2.033',
              'IPC::Cmd'              => '0.68',
              'IPC::Open3'            => '1.09',
              'JSON::PP'              => '2.27103',
              'JSON::PP::Boolean'     => undef,
              'Locale::Maketext'      => '1.18',
              'Log::Message'          => '0.04',
              'Log::Message::Config'  => '0.04',
              'Log::Message::Handlers'=> '0.04',
              'Log::Message::Item'    => '0.04',
              'Log::Message::Simple'  => '0.08',
              'Math::BigFloat'        => '1.99_03',
              'Math::BigInt'          => '1.99_03',
              'Math::BigInt::Calc'    => '1.99_03',
              'Math::BigInt::FastCalc'=> '0.24_02',
              'Math::BigRat'          => '0.26_02',
              'Module::CoreList'      => '2.42_01',
              'Module::Load::Conditional'=> '0.40',
              'Module::Metadata'      => '1.000003',
              'Net::Ping'             => '2.38',
              'OS2::Process'          => '1.05',
              'Object::Accessor'      => '0.38',
              'POSIX'                 => '1.24',
              'Params::Check'         => '0.28',
              'Perl::OSType'          => '1.002',
              'Pod::LaTeX'            => '0.59',
              'Pod::Perldoc'          => '3.15_03',
              'Socket'                => '1.93',
              'Storable'              => '2.26',
              'Sys::Hostname'         => '1.15',
              'Term::UI'              => '0.24',
              'Thread::Queue'         => '2.12',
              'Thread::Semaphore'     => '2.12',
              'Time::Local'           => '1.2000',
              'UNIVERSAL'             => '1.08',
              'Unicode::Normalize'    => '1.10',
              'Win32'                 => '0.44',
              'bigint'                => '0.26',
              'bignum'                => '0.26',
              'bigrat'                => '0.26',
              'charnames'             => '1.18',
              'diagnostics'           => '1.21',
              're'                    => '0.16',
              'threads'               => '1.83',
              'threads::shared'       => '1.36',
              'version'               => '0.88',
          },
          removed => {
          }
      },
      5.01301 => {
          delta_from => 5.013009,
          changed => {
              'Attribute::Handlers'   => '0.89',
              'B'                     => '1.28',
              'B::Showlex'            => '1.03',
              'CGI'                   => '3.52',
              'CPAN'                  => '1.94_65',
              'CPAN::Distribution'    => '1.9601',
              'CPAN::FTP::netrc'      => '1.01',
              'CPAN::FirstTime'       => '5.5303',
              'CPAN::HandleConfig'    => '5.5003',
              'CPAN::Meta'            => '2.110440',
              'CPAN::Meta::Converter' => '2.110440',
              'CPAN::Meta::Feature'   => '2.110440',
              'CPAN::Meta::History'   => '2.110440',
              'CPAN::Meta::Prereqs'   => '2.110440',
              'CPAN::Meta::Spec'      => '2.110440',
              'CPAN::Meta::Validator' => '2.110440',
              'CPAN::Shell'           => '5.5002',
              'CPANPLUS'              => '0.9101',
              'CPANPLUS::Internals'   => '0.9101',
              'CPANPLUS::Shell::Default'=> '0.9101',
              'Carp'                  => '1.20',
              'Carp::Heavy'           => '1.20',
              'Cwd'                   => '3.37',
              'Devel::DProf'          => '20110217.00',
              'DynaLoader'            => '1.13',
              'ExtUtils::CBuilder'    => '0.280202',
              'ExtUtils::CBuilder::Base'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280202',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280202',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280202',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280202',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280202',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280202',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280202',
              'File::Copy'            => '2.22',
              'Filter::Simple'        => '0.86',
              'HTTP::Tiny'            => '0.010',
              'I18N::LangTags::Detect'=> '1.05',
              'IO::Select'            => '1.18',
              'IPC::Cmd'              => '0.70',
              'Locale::Maketext'      => '1.19',
              'Math::BigFloat'        => '1.992',
              'Math::BigInt'          => '1.992',
              'Math::BigInt::Calc'    => '1.992',
              'Math::BigInt::CalcEmu' => '1.992',
              'Module::Build'         => '0.37_05',
              'Module::Build::Base'   => '0.37_05',
              'Module::Build::Compat' => '0.37_05',
              'Module::Build::Config' => '0.37_05',
              'Module::Build::Cookbook'=> '0.37_05',
              'Module::Build::Dumper' => '0.37_05',
              'Module::Build::ModuleInfo'=> '0.37_05',
              'Module::Build::Notes'  => '0.37_05',
              'Module::Build::PPMMaker'=> '0.37_05',
              'Module::Build::Platform::Amiga'=> '0.37_05',
              'Module::Build::Platform::Default'=> '0.37_05',
              'Module::Build::Platform::EBCDIC'=> '0.37_05',
              'Module::Build::Platform::MPEiX'=> '0.37_05',
              'Module::Build::Platform::MacOS'=> '0.37_05',
              'Module::Build::Platform::RiscOS'=> '0.37_05',
              'Module::Build::Platform::Unix'=> '0.37_05',
              'Module::Build::Platform::VMS'=> '0.37_05',
              'Module::Build::Platform::VOS'=> '0.37_05',
              'Module::Build::Platform::Windows'=> '0.37_05',
              'Module::Build::Platform::aix'=> '0.37_05',
              'Module::Build::Platform::cygwin'=> '0.37_05',
              'Module::Build::Platform::darwin'=> '0.37_05',
              'Module::Build::Platform::os2'=> '0.37_05',
              'Module::Build::PodParser'=> '0.37_05',
              'Module::Build::Version'=> '0.87',
              'Module::Build::YAML'   => '1.41',
              'Module::CoreList'      => '2.45',
              'Module::Load::Conditional'=> '0.44',
              'Module::Metadata'      => '1.000004',
              'OS2::Process'          => '1.06',
              'Parse::CPAN::Meta'     => '1.4401',
              'Pod::Html'             => '1.1',
              'Socket'                => '1.94',
              'Term::UI'              => '0.26',
              'Unicode::Collate'      => '0.72',
              'Unicode::Collate::Locale'=> '0.71',
              'Unicode::UCD'          => '0.31',
              'VMS::DCLsym'           => '1.05',
              'Version::Requirements' => '0.101020',
              'bigrat'                => '0.27',
              'deprecate'             => '0.02',
              'diagnostics'           => '1.22',
              'inc::latest'           => '0.37_05',
              'overload'              => '1.13',
              're'                    => '0.17',
              'utf8'                  => '1.09',
              'warnings'              => '1.12',
          },
          removed => {
          }
      },
      5.013011 => {
          delta_from => 5.01301,
          changed => {
              'App::Prove'            => '3.23',
              'App::Prove::State'     => '3.23',
              'App::Prove::State::Result'=> '3.23',
              'App::Prove::State::Result::Test'=> '3.23',
              'B'                     => '1.29',
              'CPAN'                  => '1.9600',
              'CPAN::Author'          => '5.5001',
              'CPAN::CacheMgr'        => '5.5001',
              'CPAN::Distribution'    => '1.9602',
              'CPAN::Exception::blocked_urllist'=> '1.001',
              'CPAN::HTTP::Client'    => '1.9600',
              'CPAN::HTTP::Credentials'=> '1.9600',
              'CPAN::Index'           => '1.9600',
              'CPAN::LWP::UserAgent'  => '1.9600',
              'CPAN::Mirrors'         => '1.9600',
              'CPAN::Module'          => '5.5001',
              'CPANPLUS'              => '0.9103',
              'CPANPLUS::Dist::Build' => '0.54',
              'CPANPLUS::Dist::Build::Constants'=> '0.54',
              'CPANPLUS::Internals'   => '0.9103',
              'CPANPLUS::Shell::Default'=> '0.9103',
              'Cwd'                   => '3.36',
              'Devel::DProf'          => '20110228.00',
              'Digest::SHA'           => '5.61',
              'ExtUtils::Command'     => '1.17',
              'File::Basename'        => '2.81',
              'File::Copy'            => '2.21',
              'File::Glob'            => '1.12',
              'GDBM_File'             => '1.14',
              'HTTP::Tiny'            => '0.011',
              'Hash::Util'            => '0.11',
              'Hash::Util::FieldHash' => '1.09',
              'I18N::Langinfo'        => '0.08',
              'IO'                    => '1.25_04',
              'IO::Dir'               => '1.08',
              'IO::File'              => '1.15',
              'IO::Handle'            => '1.30',
              'IO::Pipe'              => '1.14',
              'IO::Poll'              => '0.08',
              'IO::Select'            => '1.20',
              'JSON::PP'              => '2.27105',
              'Locale::Codes'         => '3.16',
              'Locale::Codes::Country'=> '3.16',
              'Locale::Codes::Currency'=> '3.16',
              'Locale::Codes::Language'=> '3.16',
              'Locale::Codes::Script' => '3.16',
              'Locale::Constants'     => '3.16',
              'Locale::Country'       => '3.16',
              'Locale::Currency'      => '3.16',
              'Locale::Language'      => '3.16',
              'Locale::Script'        => '3.16',
              'Math::BigFloat'        => '1.993',
              'Math::BigInt'          => '1.994',
              'Math::BigInt::Calc'    => '1.993',
              'Math::BigInt::CalcEmu' => '1.993',
              'Math::BigInt::FastCalc'=> '0.28',
              'Module::Build'         => '0.3800',
              'Module::Build::Base'   => '0.3800',
              'Module::Build::Compat' => '0.3800',
              'Module::Build::Config' => '0.3800',
              'Module::Build::Cookbook'=> '0.3800',
              'Module::Build::Dumper' => '0.3800',
              'Module::Build::ModuleInfo'=> '0.3800',
              'Module::Build::Notes'  => '0.3800',
              'Module::Build::PPMMaker'=> '0.3800',
              'Module::Build::Platform::Amiga'=> '0.3800',
              'Module::Build::Platform::Default'=> '0.3800',
              'Module::Build::Platform::EBCDIC'=> '0.3800',
              'Module::Build::Platform::MPEiX'=> '0.3800',
              'Module::Build::Platform::MacOS'=> '0.3800',
              'Module::Build::Platform::RiscOS'=> '0.3800',
              'Module::Build::Platform::Unix'=> '0.3800',
              'Module::Build::Platform::VMS'=> '0.3800',
              'Module::Build::Platform::VOS'=> '0.3800',
              'Module::Build::Platform::Windows'=> '0.3800',
              'Module::Build::Platform::aix'=> '0.3800',
              'Module::Build::Platform::cygwin'=> '0.3800',
              'Module::Build::Platform::darwin'=> '0.3800',
              'Module::Build::Platform::os2'=> '0.3800',
              'Module::Build::PodParser'=> '0.3800',
              'Module::CoreList'      => '2.46',
              'NDBM_File'             => '1.12',
              'Pod::Simple'           => '3.16',
              'Pod::Simple::BlackBox' => '3.16',
              'Pod::Simple::Checker'  => '3.16',
              'Pod::Simple::Debug'    => '3.16',
              'Pod::Simple::DumpAsText'=> '3.16',
              'Pod::Simple::DumpAsXML'=> '3.16',
              'Pod::Simple::HTML'     => '3.16',
              'Pod::Simple::HTMLBatch'=> '3.16',
              'Pod::Simple::LinkSection'=> '3.16',
              'Pod::Simple::Methody'  => '3.16',
              'Pod::Simple::Progress' => '3.16',
              'Pod::Simple::PullParser'=> '3.16',
              'Pod::Simple::PullParserEndToken'=> '3.16',
              'Pod::Simple::PullParserStartToken'=> '3.16',
              'Pod::Simple::PullParserTextToken'=> '3.16',
              'Pod::Simple::PullParserToken'=> '3.16',
              'Pod::Simple::RTF'      => '3.16',
              'Pod::Simple::Search'   => '3.16',
              'Pod::Simple::SimpleTree'=> '3.16',
              'Pod::Simple::Text'     => '3.16',
              'Pod::Simple::TextContent'=> '3.16',
              'Pod::Simple::TiedOutFH'=> '3.16',
              'Pod::Simple::Transcode'=> '3.16',
              'Pod::Simple::TranscodeDumb'=> '3.16',
              'Pod::Simple::TranscodeSmart'=> '3.16',
              'Pod::Simple::XHTML'    => '3.16',
              'Pod::Simple::XMLOutStream'=> '3.16',
              'Storable'              => '2.27',
              'Sys::Hostname'         => '1.16',
              'TAP::Base'             => '3.23',
              'TAP::Formatter::Base'  => '3.23',
              'TAP::Formatter::Color' => '3.23',
              'TAP::Formatter::Console'=> '3.23',
              'TAP::Formatter::Console::ParallelSession'=> '3.23',
              'TAP::Formatter::Console::Session'=> '3.23',
              'TAP::Formatter::File'  => '3.23',
              'TAP::Formatter::File::Session'=> '3.23',
              'TAP::Formatter::Session'=> '3.23',
              'TAP::Harness'          => '3.23',
              'TAP::Object'           => '3.23',
              'TAP::Parser'           => '3.23',
              'TAP::Parser::Aggregator'=> '3.23',
              'TAP::Parser::Grammar'  => '3.23',
              'TAP::Parser::Iterator' => '3.23',
              'TAP::Parser::Iterator::Array'=> '3.23',
              'TAP::Parser::Iterator::Process'=> '3.23',
              'TAP::Parser::Iterator::Stream'=> '3.23',
              'TAP::Parser::IteratorFactory'=> '3.23',
              'TAP::Parser::Multiplexer'=> '3.23',
              'TAP::Parser::Result'   => '3.23',
              'TAP::Parser::Result::Bailout'=> '3.23',
              'TAP::Parser::Result::Comment'=> '3.23',
              'TAP::Parser::Result::Plan'=> '3.23',
              'TAP::Parser::Result::Pragma'=> '3.23',
              'TAP::Parser::Result::Test'=> '3.23',
              'TAP::Parser::Result::Unknown'=> '3.23',
              'TAP::Parser::Result::Version'=> '3.23',
              'TAP::Parser::Result::YAML'=> '3.23',
              'TAP::Parser::ResultFactory'=> '3.23',
              'TAP::Parser::Scheduler'=> '3.23',
              'TAP::Parser::Scheduler::Job'=> '3.23',
              'TAP::Parser::Scheduler::Spinner'=> '3.23',
              'TAP::Parser::Source'   => '3.23',
              'TAP::Parser::SourceHandler'=> '3.23',
              'TAP::Parser::SourceHandler::Executable'=> '3.23',
              'TAP::Parser::SourceHandler::File'=> '3.23',
              'TAP::Parser::SourceHandler::Handle'=> '3.23',
              'TAP::Parser::SourceHandler::Perl'=> '3.23',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.23',
              'TAP::Parser::Utils'    => '3.23',
              'TAP::Parser::YAMLish::Reader'=> '3.23',
              'TAP::Parser::YAMLish::Writer'=> '3.23',
              'Test::Builder'         => '0.98',
              'Test::Builder::Module' => '0.98',
              'Test::Builder::Tester' => '1.22',
              'Test::Builder::Tester::Color'=> '1.22',
              'Test::Harness'         => '3.23',
              'Test::More'            => '0.98',
              'Test::Simple'          => '0.98',
              'Tie::Hash::NamedCapture'=> '0.08',
              'Tie::RefHash'          => '1.39',
              'Unicode::Collate'      => '0.73',
              'Unicode::Collate::Locale'=> '0.73',
              'Unicode::UCD'          => '0.32',
              'XS::Typemap'           => '0.05',
              'attributes'            => '0.14',
              'base'                  => '2.16',
              'inc::latest'           => '0.3800',
              'mro'                   => '1.07',
              'parent'                => '0.225',
          },
          removed => {
          }
      },
      5.014 => {
          delta_from => 5.013011,
          changed => {
              'ExtUtils::CBuilder'    => '0.280203',
              'ExtUtils::CBuilder::Base'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280203',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280203',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280203',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280203',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280203',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280203',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280203',
              'ExtUtils::ParseXS'     => '2.2210',
              'File::Basename'        => '2.82',
              'HTTP::Tiny'            => '0.012',
              'IO::Handle'            => '1.31',
              'Module::CoreList'      => '2.49',
              'PerlIO'                => '1.07',
              'Pod::Html'             => '1.11',
              'XS::APItest'           => '0.28',
              'bigint'                => '0.27',
              'bignum'                => '0.27',
              'bigrat'                => '0.28',
              'constant'              => '1.21',
              'feature'               => '1.20',
              're'                    => '0.18',
              'threads::shared'       => '1.37',
          },
          removed => {
          }
      },
      5.014001 => {
          delta_from => 5.014,
          changed => {
              'B::Deparse'            => '1.04',
              'Module::CoreList'      => '2.49_01',
              'Pod::Perldoc'          => '3.15_04',
          },
          removed => {
          }
      },
      5.014002 => {
          delta_from => 5.014001,
          changed => {
              'CPAN'                  => '1.9600_01',
              'CPAN::Distribution'    => '1.9602_01',
              'Devel::DProf::dprof::V'=> undef,
              'Encode'                => '2.42_01',
              'File::Glob'            => '1.13',
              'Module::CoreList'      => '2.49_02',
              'PerlIO::scalar'        => '0.11_01',
              'Time::Piece::Seconds'  => undef,
          },
          removed => {
          }
      },
      5.014003 => {
          delta_from => 5.014002,
          changed => {
              'Digest'                => '1.16_01',
              'IPC::Open3'            => '1.09_01',
              'Module::CoreList'      => '2.49_04',
          },
          removed => {
          }
      },
      5.014004 => {
          delta_from => 5.014003,
          changed => {
              'Encode'                => '2.42_02',
              'IPC::Open3'            => '1.0901',
              'Module::CoreList'      => '2.49_06',
          },
          removed => {
          }
      },
      5.015 => {
          delta_from => 5.014001,
          changed => {
              'Archive::Extract'      => '0.52',
              'Attribute::Handlers'   => '0.91',
              'B'                     => '1.30',
              'B::Concise'            => '0.84',
              'B::Deparse'            => '1.05',
              'Benchmark'             => '1.13',
              'CGI'                   => '3.54',
              'CGI::Util'             => '3.53',
              'CPAN::Meta'            => '2.110930',
              'CPAN::Meta::Converter' => '2.110930',
              'CPAN::Meta::Feature'   => '2.110930',
              'CPAN::Meta::History'   => '2.110930',
              'CPAN::Meta::Prereqs'   => '2.110930',
              'CPAN::Meta::Spec'      => '2.110930',
              'CPAN::Meta::Validator' => '2.110930',
              'CPANPLUS'              => '0.9105',
              'CPANPLUS::Dist::Build' => '0.56',
              'CPANPLUS::Dist::Build::Constants'=> '0.56',
              'CPANPLUS::Internals'   => '0.9105',
              'CPANPLUS::Shell::Default'=> '0.9105',
              'Compress::Raw::Bzip2'  => '2.035',
              'Compress::Raw::Zlib'   => '2.035',
              'Compress::Zlib'        => '2.035',
              'DB_File'               => '1.822',
              'Data::Dumper'          => '2.131',
              'Devel::Peek'           => '1.08',
              'Digest::SHA'           => '5.62',
              'Encode'                => '2.43',
              'Encode::Alias'         => '2.14',
              'ExtUtils::CBuilder'    => '0.280204',
              'ExtUtils::CBuilder::Base'=> '0.280204',
              'Fatal'                 => '2.10',
              'File::Spec::Win32'     => '3.34',
              'Filter::Simple'        => '0.87',
              'Filter::Util::Call'    => '1.39',
              'FindBin'               => '1.51',
              'Hash::Util::FieldHash' => '1.10',
              'I18N::LangTags'        => '0.36',
              'IO::Compress::Adapter::Bzip2'=> '2.035',
              'IO::Compress::Adapter::Deflate'=> '2.035',
              'IO::Compress::Adapter::Identity'=> '2.035',
              'IO::Compress::Base'    => '2.035',
              'IO::Compress::Base::Common'=> '2.035',
              'IO::Compress::Bzip2'   => '2.035',
              'IO::Compress::Deflate' => '2.035',
              'IO::Compress::Gzip'    => '2.035',
              'IO::Compress::Gzip::Constants'=> '2.035',
              'IO::Compress::RawDeflate'=> '2.035',
              'IO::Compress::Zip'     => '2.035',
              'IO::Compress::Zip::Constants'=> '2.035',
              'IO::Compress::Zlib::Constants'=> '2.035',
              'IO::Compress::Zlib::Extra'=> '2.035',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.035',
              'IO::Uncompress::Adapter::Identity'=> '2.035',
              'IO::Uncompress::Adapter::Inflate'=> '2.035',
              'IO::Uncompress::AnyInflate'=> '2.035',
              'IO::Uncompress::AnyUncompress'=> '2.035',
              'IO::Uncompress::Base'  => '2.035',
              'IO::Uncompress::Bunzip2'=> '2.035',
              'IO::Uncompress::Gunzip'=> '2.035',
              'IO::Uncompress::Inflate'=> '2.035',
              'IO::Uncompress::RawInflate'=> '2.035',
              'IO::Uncompress::Unzip' => '2.035',
              'IPC::Open2'            => '1.04',
              'IPC::Open3'            => '1.11',
              'JSON::PP'              => '2.27200',
              'Math::BigFloat'        => '1.994',
              'Math::BigInt'          => '1.995',
              'Math::Complex'         => '1.57',
              'Math::Trig'            => '1.21',
              'Module::CoreList'      => '2.51',
              'ODBM_File'             => '1.11',
              'Object::Accessor'      => '0.42',
              'Opcode'                => '1.19',
              'PerlIO::encoding'      => '0.15',
              'PerlIO::scalar'        => '0.12',
              'Pod::Perldoc'          => '3.15_05',
              'Storable'              => '2.28',
              'Sys::Syslog'           => '0.29',
              'Time::HiRes'           => '1.9722',
              'Unicode::Collate'      => '0.76',
              'Unicode::Collate::CJK::Pinyin'=> '0.76',
              'Unicode::Collate::CJK::Stroke'=> '0.76',
              'Unicode::Collate::Locale'=> '0.76',
              'Unicode::Normalize'    => '1.12',
              'XS::APItest'           => '0.29',
              'XSLoader'              => '0.15',
              'autodie'               => '2.10',
              'autodie::exception'    => '2.10',
              'autodie::exception::system'=> '2.10',
              'autodie::hints'        => '2.10',
              'base'                  => '2.17',
              'charnames'             => '1.22',
              'constant'              => '1.22',
              'feature'               => '1.21',
              'mro'                   => '1.08',
              'overload'              => '1.14',
              'threads::shared'       => '1.38',
              'vmsish'                => '1.03',
          },
          removed => {
              'Devel::DProf'          => 1,
              'Shell'                 => 1,
          }
      },
      5.015001 => {
          delta_from => 5.015,
          changed => {
              'B::Deparse'            => '1.06',
              'CGI'                   => '3.55',
              'CPAN::Meta'            => '2.110930001',
              'CPAN::Meta::Converter' => '2.110930001',
              'CPANPLUS'              => '0.9108',
              'CPANPLUS::Internals'   => '0.9108',
              'CPANPLUS::Shell::Default'=> '0.9108',
              'Carp'                  => '1.21',
              'Carp::Heavy'           => '1.21',
              'Compress::Raw::Bzip2'  => '2.037',
              'Compress::Raw::Zlib'   => '2.037',
              'Compress::Zlib'        => '2.037',
              'Cwd'                   => '3.37',
              'Env'                   => '1.03',
              'ExtUtils::Command::MM' => '6.58',
              'ExtUtils::Liblist'     => '6.58',
              'ExtUtils::Liblist::Kid'=> '6.58',
              'ExtUtils::MM'          => '6.58',
              'ExtUtils::MM_AIX'      => '6.58',
              'ExtUtils::MM_Any'      => '6.58',
              'ExtUtils::MM_BeOS'     => '6.58',
              'ExtUtils::MM_Cygwin'   => '6.58',
              'ExtUtils::MM_DOS'      => '6.58',
              'ExtUtils::MM_Darwin'   => '6.58',
              'ExtUtils::MM_MacOS'    => '6.58',
              'ExtUtils::MM_NW5'      => '6.58',
              'ExtUtils::MM_OS2'      => '6.58',
              'ExtUtils::MM_QNX'      => '6.58',
              'ExtUtils::MM_UWIN'     => '6.58',
              'ExtUtils::MM_Unix'     => '6.58',
              'ExtUtils::MM_VMS'      => '6.58',
              'ExtUtils::MM_VOS'      => '6.58',
              'ExtUtils::MM_Win32'    => '6.58',
              'ExtUtils::MM_Win95'    => '6.58',
              'ExtUtils::MY'          => '6.58',
              'ExtUtils::MakeMaker'   => '6.58',
              'ExtUtils::MakeMaker::Config'=> '6.58',
              'ExtUtils::Mkbootstrap' => '6.58',
              'ExtUtils::Mksymlists'  => '6.58',
              'ExtUtils::ParseXS'     => '3.00_01',
              'ExtUtils::ParseXS::Constants'=> undef,
              'ExtUtils::ParseXS::CountLines'=> undef,
              'ExtUtils::ParseXS::Utilities'=> undef,
              'ExtUtils::Typemaps'    => '1.00',
              'ExtUtils::Typemaps::InputMap'=> undef,
              'ExtUtils::Typemaps::OutputMap'=> undef,
              'ExtUtils::Typemaps::Type'=> '0.05',
              'ExtUtils::testlib'     => '6.58',
              'File::Basename'        => '2.83',
              'File::Find'            => '1.20',
              'HTTP::Tiny'            => '0.013',
              'I18N::Langinfo'        => '0.08_02',
              'IO::Compress::Adapter::Bzip2'=> '2.037',
              'IO::Compress::Adapter::Deflate'=> '2.037',
              'IO::Compress::Adapter::Identity'=> '2.037',
              'IO::Compress::Base'    => '2.037',
              'IO::Compress::Base::Common'=> '2.037',
              'IO::Compress::Bzip2'   => '2.037',
              'IO::Compress::Deflate' => '2.037',
              'IO::Compress::Gzip'    => '2.037',
              'IO::Compress::Gzip::Constants'=> '2.037',
              'IO::Compress::RawDeflate'=> '2.037',
              'IO::Compress::Zip'     => '2.037',
              'IO::Compress::Zip::Constants'=> '2.037',
              'IO::Compress::Zlib::Constants'=> '2.037',
              'IO::Compress::Zlib::Extra'=> '2.037',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.037',
              'IO::Uncompress::Adapter::Identity'=> '2.037',
              'IO::Uncompress::Adapter::Inflate'=> '2.037',
              'IO::Uncompress::AnyInflate'=> '2.037',
              'IO::Uncompress::AnyUncompress'=> '2.037',
              'IO::Uncompress::Base'  => '2.037',
              'IO::Uncompress::Bunzip2'=> '2.037',
              'IO::Uncompress::Gunzip'=> '2.037',
              'IO::Uncompress::Inflate'=> '2.037',
              'IO::Uncompress::RawInflate'=> '2.037',
              'IO::Uncompress::Unzip' => '2.037',
              'IPC::Cmd'              => '0.72',
              'Locale::Codes'         => '3.17',
              'Locale::Codes::Constants'=> '3.17',
              'Locale::Codes::Country'=> '3.17',
              'Locale::Codes::Country_Codes'=> '3.17',
              'Locale::Codes::Currency'=> '3.17',
              'Locale::Codes::Currency_Codes'=> '3.17',
              'Locale::Codes::LangExt'=> '3.17',
              'Locale::Codes::LangExt_Codes'=> '3.17',
              'Locale::Codes::LangVar'=> '3.17',
              'Locale::Codes::LangVar_Codes'=> '3.17',
              'Locale::Codes::Language'=> '3.17',
              'Locale::Codes::Language_Codes'=> '3.17',
              'Locale::Codes::Script' => '3.17',
              'Locale::Codes::Script_Codes'=> '3.17',
              'Locale::Country'       => '3.17',
              'Locale::Currency'      => '3.17',
              'Locale::Language'      => '3.17',
              'Locale::Script'        => '3.17',
              'Math::BigFloat::Trace' => '0.28',
              'Math::BigInt::FastCalc'=> '0.29',
              'Math::BigInt::Trace'   => '0.28',
              'Math::BigRat'          => '0.2602',
              'Math::Complex'         => '1.58',
              'Math::Trig'            => '1.22',
              'Module::CoreList'      => '2.54',
              'OS2::Process'          => '1.07',
              'Pod::Perldoc'          => '3.15_06',
              'Pod::Simple'           => '3.18',
              'Pod::Simple::BlackBox' => '3.18',
              'Pod::Simple::Checker'  => '3.18',
              'Pod::Simple::Debug'    => '3.18',
              'Pod::Simple::DumpAsText'=> '3.18',
              'Pod::Simple::DumpAsXML'=> '3.18',
              'Pod::Simple::HTML'     => '3.18',
              'Pod::Simple::HTMLBatch'=> '3.18',
              'Pod::Simple::LinkSection'=> '3.18',
              'Pod::Simple::Methody'  => '3.18',
              'Pod::Simple::Progress' => '3.18',
              'Pod::Simple::PullParser'=> '3.18',
              'Pod::Simple::PullParserEndToken'=> '3.18',
              'Pod::Simple::PullParserStartToken'=> '3.18',
              'Pod::Simple::PullParserTextToken'=> '3.18',
              'Pod::Simple::PullParserToken'=> '3.18',
              'Pod::Simple::RTF'      => '3.18',
              'Pod::Simple::Search'   => '3.18',
              'Pod::Simple::SimpleTree'=> '3.18',
              'Pod::Simple::Text'     => '3.18',
              'Pod::Simple::TextContent'=> '3.18',
              'Pod::Simple::TiedOutFH'=> '3.18',
              'Pod::Simple::Transcode'=> '3.18',
              'Pod::Simple::TranscodeDumb'=> '3.18',
              'Pod::Simple::TranscodeSmart'=> '3.18',
              'Pod::Simple::XHTML'    => '3.18',
              'Pod::Simple::XMLOutStream'=> '3.18',
              'Storable'              => '2.31',
              'Sys::Syslog::Win32'    => undef,
              'Time::HiRes'           => '1.9724',
              'Unicode::Collate'      => '0.77',
              'Unicode::UCD'          => '0.33',
              'Win32API::File'        => '0.1200',
              'XS::APItest'           => '0.30',
              'attributes'            => '0.15',
              'bigint'                => '0.28',
              'bignum'                => '0.28',
              'charnames'             => '1.23',
              'diagnostics'           => '1.23',
              'feature'               => '1.22',
              'overload'              => '1.15',
              'perlfaq'               => '5.015000',
              'threads'               => '1.84',
              'version'               => '0.93',
          },
          removed => {
              'ExtUtils::MakeMaker::YAML'=> 1,
              'Locale::Constants'     => 1,
              'Sys::Syslog::win32::Win32'=> 1,
          }
      },
      5.015002 => {
          delta_from => 5.015001,
          changed => {
              'Attribute::Handlers'   => '0.92',
              'B'                     => '1.31',
              'B::Concise'            => '0.85',
              'B::Deparse'            => '1.07',
              'B::Terse'              => '1.06',
              'B::Xref'               => '1.03',
              'CPAN'                  => '1.9800',
              'CPAN::Exception::yaml_process_error'=> '5.5',
              'CPAN::Meta'            => '2.112150',
              'CPAN::Meta::Converter' => '2.112150',
              'CPAN::Meta::Feature'   => '2.112150',
              'CPAN::Meta::History'   => '2.112150',
              'CPAN::Meta::Prereqs'   => '2.112150',
              'CPAN::Meta::Spec'      => '2.112150',
              'CPAN::Meta::Validator' => '2.112150',
              'CPANPLUS'              => '0.9109',
              'CPANPLUS::Internals'   => '0.9109',
              'CPANPLUS::Shell::Default'=> '0.9109',
              'DB_File'               => '1.824',
              'Data::Dumper'          => '2.132',
              'Encode'                => '2.44',
              'Encode::Alias'         => '2.15',
              'Encode::Encoder'       => '2.02',
              'Encode::Guess'         => '2.05',
              'ExtUtils::Command::MM' => '6.59',
              'ExtUtils::Install'     => '1.57',
              'ExtUtils::Installed'   => '1.999002',
              'ExtUtils::Liblist'     => '6.59',
              'ExtUtils::Liblist::Kid'=> '6.59',
              'ExtUtils::MM'          => '6.59',
              'ExtUtils::MM_AIX'      => '6.59',
              'ExtUtils::MM_Any'      => '6.59',
              'ExtUtils::MM_BeOS'     => '6.59',
              'ExtUtils::MM_Cygwin'   => '6.59',
              'ExtUtils::MM_DOS'      => '6.59',
              'ExtUtils::MM_Darwin'   => '6.59',
              'ExtUtils::MM_MacOS'    => '6.59',
              'ExtUtils::MM_NW5'      => '6.59',
              'ExtUtils::MM_OS2'      => '6.59',
              'ExtUtils::MM_QNX'      => '6.59',
              'ExtUtils::MM_UWIN'     => '6.59',
              'ExtUtils::MM_Unix'     => '6.59',
              'ExtUtils::MM_VMS'      => '6.59',
              'ExtUtils::MM_VOS'      => '6.59',
              'ExtUtils::MM_Win32'    => '6.59',
              'ExtUtils::MM_Win95'    => '6.59',
              'ExtUtils::MY'          => '6.59',
              'ExtUtils::MakeMaker'   => '6.59',
              'ExtUtils::MakeMaker::Config'=> '6.59',
              'ExtUtils::Manifest'    => '1.60',
              'ExtUtils::Mkbootstrap' => '6.59',
              'ExtUtils::Mksymlists'  => '6.59',
              'ExtUtils::ParseXS'     => '3.03_01',
              'ExtUtils::Typemaps'    => '1.01',
              'ExtUtils::testlib'     => '6.59',
              'File::Spec'            => '3.34',
              'File::Spec::Mac'       => '3.35',
              'File::Spec::Unix'      => '3.34',
              'File::Spec::VMS'       => '3.35',
              'File::Spec::Win32'     => '3.35',
              'I18N::LangTags'        => '0.37',
              'IO'                    => '1.25_05',
              'IO::Handle'            => '1.32',
              'IO::Socket'            => '1.33',
              'IO::Socket::INET'      => '1.32',
              'IPC::Open3'            => '1.12',
              'Math::BigFloat'        => '1.995',
              'Math::BigFloat::Trace' => '0.29',
              'Math::BigInt'          => '1.996',
              'Math::BigInt::Trace'   => '0.29',
              'Module::Build'         => '0.39_01',
              'Module::Build::Base'   => '0.39_01',
              'Module::Build::Compat' => '0.39_01',
              'Module::Build::Config' => '0.39_01',
              'Module::Build::Cookbook'=> '0.39_01',
              'Module::Build::Dumper' => '0.39_01',
              'Module::Build::ModuleInfo'=> '0.39_01',
              'Module::Build::Notes'  => '0.39_01',
              'Module::Build::PPMMaker'=> '0.39_01',
              'Module::Build::Platform::Amiga'=> '0.39_01',
              'Module::Build::Platform::Default'=> '0.39_01',
              'Module::Build::Platform::EBCDIC'=> '0.39_01',
              'Module::Build::Platform::MPEiX'=> '0.39_01',
              'Module::Build::Platform::MacOS'=> '0.39_01',
              'Module::Build::Platform::RiscOS'=> '0.39_01',
              'Module::Build::Platform::Unix'=> '0.39_01',
              'Module::Build::Platform::VMS'=> '0.39_01',
              'Module::Build::Platform::VOS'=> '0.39_01',
              'Module::Build::Platform::Windows'=> '0.39_01',
              'Module::Build::Platform::aix'=> '0.39_01',
              'Module::Build::Platform::cygwin'=> '0.39_01',
              'Module::Build::Platform::darwin'=> '0.39_01',
              'Module::Build::Platform::os2'=> '0.39_01',
              'Module::Build::PodParser'=> '0.39_01',
              'Module::CoreList'      => '2.55',
              'Module::Load'          => '0.20',
              'Module::Metadata'      => '1.000005_01',
              'Opcode'                => '1.20',
              'Params::Check'         => '0.32',
              'PerlIO::via'           => '0.12',
              'Term::ANSIColor'       => '3.01',
              'Unicode::Collate'      => '0.78',
              'Unicode::Normalize'    => '1.13',
              'Unicode::UCD'          => '0.34',
              'bigint'                => '0.29',
              'bignum'                => '0.29',
              'bigrat'                => '0.29',
              'diagnostics'           => '1.24',
              'fields'                => '2.16',
              'inc::latest'           => '0.39_01',
          },
          removed => {
          }
      },
      5.015003 => {
          delta_from => 5.015002,
          changed => {
              'AnyDBM_File'           => '1.01',
              'Archive::Extract'      => '0.56',
              'Archive::Tar'          => '1.78',
              'Archive::Tar::Constant'=> '1.78',
              'Archive::Tar::File'    => '1.78',
              'Attribute::Handlers'   => '0.93',
              'B'                     => '1.32',
              'B::Concise'            => '0.86',
              'B::Deparse'            => '1.08',
              'CPAN::Meta'            => '2.112621',
              'CPAN::Meta::Converter' => '2.112621',
              'CPAN::Meta::Feature'   => '2.112621',
              'CPAN::Meta::History'   => '2.112621',
              'CPAN::Meta::Prereqs'   => '2.112621',
              'CPAN::Meta::Spec'      => '2.112621',
              'CPAN::Meta::Validator' => '2.112621',
              'CPAN::Meta::YAML'      => '0.004',
              'CPANPLUS'              => '0.9111',
              'CPANPLUS::Dist::Build' => '0.58',
              'CPANPLUS::Dist::Build::Constants'=> '0.58',
              'CPANPLUS::Internals'   => '0.9111',
              'CPANPLUS::Shell::Default'=> '0.9111',
              'Carp'                  => '1.23',
              'Carp::Heavy'           => '1.23',
              'Data::Dumper'          => '2.134',
              'Devel::PPPort'         => '3.20',
              'Errno'                 => '1.14',
              'Exporter'              => '5.65',
              'Exporter::Heavy'       => '5.65',
              'ExtUtils::ParseXS'     => '3.04_04',
              'ExtUtils::ParseXS::Constants'=> '3.04_04',
              'ExtUtils::ParseXS::CountLines'=> '3.04_04',
              'ExtUtils::ParseXS::Utilities'=> '3.04_04',
              'ExtUtils::Typemaps'    => '1.02',
              'File::Glob'            => '1.13',
              'Filter::Simple'        => '0.88',
              'IO'                    => '1.25_06',
              'IO::Handle'            => '1.33',
              'Locale::Codes'         => '3.18',
              'Locale::Codes::Constants'=> '3.18',
              'Locale::Codes::Country'=> '3.18',
              'Locale::Codes::Country_Codes'=> '3.18',
              'Locale::Codes::Currency'=> '3.18',
              'Locale::Codes::Currency_Codes'=> '3.18',
              'Locale::Codes::LangExt'=> '3.18',
              'Locale::Codes::LangExt_Codes'=> '3.18',
              'Locale::Codes::LangVar'=> '3.18',
              'Locale::Codes::LangVar_Codes'=> '3.18',
              'Locale::Codes::Language'=> '3.18',
              'Locale::Codes::Language_Codes'=> '3.18',
              'Locale::Codes::Script' => '3.18',
              'Locale::Codes::Script_Codes'=> '3.18',
              'Locale::Country'       => '3.18',
              'Locale::Currency'      => '3.18',
              'Locale::Language'      => '3.18',
              'Locale::Script'        => '3.18',
              'Math::BigFloat'        => '1.997',
              'Math::BigInt'          => '1.997',
              'Math::BigInt::Calc'    => '1.997',
              'Math::BigInt::CalcEmu' => '1.997',
              'Math::BigInt::FastCalc'=> '0.30',
              'Math::BigRat'          => '0.2603',
              'Module::CoreList'      => '2.56',
              'Module::Load::Conditional'=> '0.46',
              'Module::Metadata'      => '1.000007',
              'ODBM_File'             => '1.12',
              'POSIX'                 => '1.26',
              'Pod::Perldoc'          => '3.15_07',
              'Pod::Simple'           => '3.19',
              'Pod::Simple::BlackBox' => '3.19',
              'Pod::Simple::Checker'  => '3.19',
              'Pod::Simple::Debug'    => '3.19',
              'Pod::Simple::DumpAsText'=> '3.19',
              'Pod::Simple::DumpAsXML'=> '3.19',
              'Pod::Simple::HTML'     => '3.19',
              'Pod::Simple::HTMLBatch'=> '3.19',
              'Pod::Simple::LinkSection'=> '3.19',
              'Pod::Simple::Methody'  => '3.19',
              'Pod::Simple::Progress' => '3.19',
              'Pod::Simple::PullParser'=> '3.19',
              'Pod::Simple::PullParserEndToken'=> '3.19',
              'Pod::Simple::PullParserStartToken'=> '3.19',
              'Pod::Simple::PullParserTextToken'=> '3.19',
              'Pod::Simple::PullParserToken'=> '3.19',
              'Pod::Simple::RTF'      => '3.19',
              'Pod::Simple::Search'   => '3.19',
              'Pod::Simple::SimpleTree'=> '3.19',
              'Pod::Simple::Text'     => '3.19',
              'Pod::Simple::TextContent'=> '3.19',
              'Pod::Simple::TiedOutFH'=> '3.19',
              'Pod::Simple::Transcode'=> '3.19',
              'Pod::Simple::TranscodeDumb'=> '3.19',
              'Pod::Simple::TranscodeSmart'=> '3.19',
              'Pod::Simple::XHTML'    => '3.19',
              'Pod::Simple::XMLOutStream'=> '3.19',
              'Search::Dict'          => '1.04',
              'Socket'                => '1.94_01',
              'Storable'              => '2.32',
              'Text::Abbrev'          => '1.02',
              'Tie::Array'            => '1.05',
              'UNIVERSAL'             => '1.09',
              'Unicode::UCD'          => '0.35',
              'XS::APItest'           => '0.31',
              'XSLoader'              => '0.16',
              'attributes'            => '0.16',
              'diagnostics'           => '1.25',
              'open'                  => '1.09',
              'perlfaq'               => '5.0150034',
              'threads'               => '1.85',
              'threads::shared'       => '1.40',
          },
          removed => {
          }
      },
      5.015004 => {
          delta_from => 5.015003,
          changed => {
              'Archive::Tar'          => '1.80',
              'Archive::Tar::Constant'=> '1.80',
              'Archive::Tar::File'    => '1.80',
              'Digest'                => '1.17',
              'DynaLoader'            => '1.14',
              'ExtUtils::Command::MM' => '6.61_01',
              'ExtUtils::Liblist'     => '6.61_01',
              'ExtUtils::Liblist::Kid'=> '6.61_01',
              'ExtUtils::MM'          => '6.61_01',
              'ExtUtils::MM_AIX'      => '6.61_01',
              'ExtUtils::MM_Any'      => '6.61_01',
              'ExtUtils::MM_BeOS'     => '6.61_01',
              'ExtUtils::MM_Cygwin'   => '6.61_01',
              'ExtUtils::MM_DOS'      => '6.61_01',
              'ExtUtils::MM_Darwin'   => '6.61_01',
              'ExtUtils::MM_MacOS'    => '6.61_01',
              'ExtUtils::MM_NW5'      => '6.61_01',
              'ExtUtils::MM_OS2'      => '6.61_01',
              'ExtUtils::MM_QNX'      => '6.61_01',
              'ExtUtils::MM_UWIN'     => '6.61_01',
              'ExtUtils::MM_Unix'     => '6.61_01',
              'ExtUtils::MM_VMS'      => '6.61_01',
              'ExtUtils::MM_VOS'      => '6.61_01',
              'ExtUtils::MM_Win32'    => '6.61_01',
              'ExtUtils::MM_Win95'    => '6.61_01',
              'ExtUtils::MY'          => '6.61_01',
              'ExtUtils::MakeMaker'   => '6.61_01',
              'ExtUtils::MakeMaker::Config'=> '6.61_01',
              'ExtUtils::Mkbootstrap' => '6.61_01',
              'ExtUtils::Mksymlists'  => '6.61_01',
              'ExtUtils::ParseXS'     => '3.05',
              'ExtUtils::ParseXS::Constants'=> '3.05',
              'ExtUtils::ParseXS::CountLines'=> '3.05',
              'ExtUtils::ParseXS::Utilities'=> '3.05',
              'ExtUtils::testlib'     => '6.61_01',
              'File::DosGlob'         => '1.05',
              'Module::CoreList'      => '2.57',
              'Module::Load'          => '0.22',
              'Unicode::Collate'      => '0.80',
              'Unicode::Collate::Locale'=> '0.80',
              'Unicode::UCD'          => '0.36',
              'XS::APItest'           => '0.32',
              'XS::Typemap'           => '0.07',
              'attributes'            => '0.17',
              'base'                  => '2.18',
              'constant'              => '1.23',
              'mro'                   => '1.09',
              'open'                  => '1.10',
              'perlfaq'               => '5.0150035',
          },
          removed => {
          }
      },
      5.015005 => {
          delta_from => 5.015004,
          changed => {
              'Archive::Extract'      => '0.58',
              'B::Concise'            => '0.87',
              'B::Deparse'            => '1.09',
              'CGI'                   => '3.58',
              'CGI::Fast'             => '1.09',
              'CPANPLUS'              => '0.9112',
              'CPANPLUS::Dist::Build' => '0.60',
              'CPANPLUS::Dist::Build::Constants'=> '0.60',
              'CPANPLUS::Internals'   => '0.9112',
              'CPANPLUS::Shell::Default'=> '0.9112',
              'Compress::Raw::Bzip2'  => '2.042',
              'Compress::Raw::Zlib'   => '2.042',
              'Compress::Zlib'        => '2.042',
              'Digest::SHA'           => '5.63',
              'Errno'                 => '1.15',
              'ExtUtils::Command::MM' => '6.63_02',
              'ExtUtils::Liblist'     => '6.63_02',
              'ExtUtils::Liblist::Kid'=> '6.63_02',
              'ExtUtils::MM'          => '6.63_02',
              'ExtUtils::MM_AIX'      => '6.63_02',
              'ExtUtils::MM_Any'      => '6.63_02',
              'ExtUtils::MM_BeOS'     => '6.63_02',
              'ExtUtils::MM_Cygwin'   => '6.63_02',
              'ExtUtils::MM_DOS'      => '6.63_02',
              'ExtUtils::MM_Darwin'   => '6.63_02',
              'ExtUtils::MM_MacOS'    => '6.63_02',
              'ExtUtils::MM_NW5'      => '6.63_02',
              'ExtUtils::MM_OS2'      => '6.63_02',
              'ExtUtils::MM_QNX'      => '6.63_02',
              'ExtUtils::MM_UWIN'     => '6.63_02',
              'ExtUtils::MM_Unix'     => '6.63_02',
              'ExtUtils::MM_VMS'      => '6.63_02',
              'ExtUtils::MM_VOS'      => '6.63_02',
              'ExtUtils::MM_Win32'    => '6.63_02',
              'ExtUtils::MM_Win95'    => '6.63_02',
              'ExtUtils::MY'          => '6.63_02',
              'ExtUtils::MakeMaker'   => '6.63_02',
              'ExtUtils::MakeMaker::Config'=> '6.63_02',
              'ExtUtils::Mkbootstrap' => '6.63_02',
              'ExtUtils::Mksymlists'  => '6.63_02',
              'ExtUtils::testlib'     => '6.63_02',
              'File::DosGlob'         => '1.06',
              'File::Glob'            => '1.14',
              'HTTP::Tiny'            => '0.016',
              'IO::Compress::Adapter::Bzip2'=> '2.042',
              'IO::Compress::Adapter::Deflate'=> '2.042',
              'IO::Compress::Adapter::Identity'=> '2.042',
              'IO::Compress::Base'    => '2.042',
              'IO::Compress::Base::Common'=> '2.042',
              'IO::Compress::Bzip2'   => '2.042',
              'IO::Compress::Deflate' => '2.042',
              'IO::Compress::Gzip'    => '2.042',
              'IO::Compress::Gzip::Constants'=> '2.042',
              'IO::Compress::RawDeflate'=> '2.042',
              'IO::Compress::Zip'     => '2.042',
              'IO::Compress::Zip::Constants'=> '2.042',
              'IO::Compress::Zlib::Constants'=> '2.042',
              'IO::Compress::Zlib::Extra'=> '2.042',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.042',
              'IO::Uncompress::Adapter::Identity'=> '2.042',
              'IO::Uncompress::Adapter::Inflate'=> '2.042',
              'IO::Uncompress::AnyInflate'=> '2.042',
              'IO::Uncompress::AnyUncompress'=> '2.042',
              'IO::Uncompress::Base'  => '2.042',
              'IO::Uncompress::Bunzip2'=> '2.042',
              'IO::Uncompress::Gunzip'=> '2.042',
              'IO::Uncompress::Inflate'=> '2.042',
              'IO::Uncompress::RawInflate'=> '2.042',
              'IO::Uncompress::Unzip' => '2.042',
              'Locale::Maketext'      => '1.20',
              'Locale::Maketext::Guts'=> '1.20',
              'Locale::Maketext::GutsLoader'=> '1.20',
              'Module::CoreList'      => '2.58',
              'Opcode'                => '1.21',
              'Socket'                => '1.94_02',
              'Storable'              => '2.33',
              'UNIVERSAL'             => '1.10',
              'Unicode::Collate'      => '0.85',
              'Unicode::Collate::CJK::Pinyin'=> '0.85',
              'Unicode::Collate::CJK::Stroke'=> '0.85',
              'Unicode::Collate::Locale'=> '0.85',
              'Unicode::UCD'          => '0.37',
              'XS::APItest'           => '0.33',
              'arybase'               => '0.01',
              'charnames'             => '1.24',
              'feature'               => '1.23',
              'perlfaq'               => '5.0150036',
              'strict'                => '1.05',
              'unicore::Name'         => undef,
          },
          removed => {
          }
      },
      5.015006 => {
          delta_from => 5.015005,
          changed => {
              'Archive::Tar'          => '1.82',
              'Archive::Tar::Constant'=> '1.82',
              'Archive::Tar::File'    => '1.82',
              'AutoLoader'            => '5.72',
              'B::Concise'            => '0.88',
              'B::Debug'              => '1.17',
              'B::Deparse'            => '1.10',
              'CPAN::Meta::YAML'      => '0.005',
              'CPANPLUS'              => '0.9113',
              'CPANPLUS::Internals'   => '0.9113',
              'CPANPLUS::Shell::Default'=> '0.9113',
              'Carp'                  => '1.24',
              'Compress::Raw::Bzip2'  => '2.045',
              'Compress::Raw::Zlib'   => '2.045',
              'Compress::Zlib'        => '2.045',
              'Cwd'                   => '3.38',
              'DB'                    => '1.04',
              'Data::Dumper'          => '2.135_01',
              'Digest::SHA'           => '5.70',
              'Dumpvalue'             => '1.17',
              'Exporter'              => '5.66',
              'Exporter::Heavy'       => '5.66',
              'ExtUtils::CBuilder'    => '0.280205',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280204',
              'ExtUtils::Packlist'    => '1.45',
              'ExtUtils::ParseXS'     => '3.08',
              'ExtUtils::ParseXS::Constants'=> '3.08',
              'ExtUtils::ParseXS::CountLines'=> '3.08',
              'ExtUtils::ParseXS::Utilities'=> '3.08',
              'File::Basename'        => '2.84',
              'File::Glob'            => '1.15',
              'File::Spec::Unix'      => '3.35',
              'Getopt::Std'           => '1.07',
              'I18N::LangTags'        => '0.38',
              'IO::Compress::Adapter::Bzip2'=> '2.045',
              'IO::Compress::Adapter::Deflate'=> '2.045',
              'IO::Compress::Adapter::Identity'=> '2.045',
              'IO::Compress::Base'    => '2.046',
              'IO::Compress::Base::Common'=> '2.045',
              'IO::Compress::Bzip2'   => '2.045',
              'IO::Compress::Deflate' => '2.045',
              'IO::Compress::Gzip'    => '2.045',
              'IO::Compress::Gzip::Constants'=> '2.045',
              'IO::Compress::RawDeflate'=> '2.045',
              'IO::Compress::Zip'     => '2.046',
              'IO::Compress::Zip::Constants'=> '2.045',
              'IO::Compress::Zlib::Constants'=> '2.045',
              'IO::Compress::Zlib::Extra'=> '2.045',
              'IO::Dir'               => '1.09',
              'IO::File'              => '1.16',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.045',
              'IO::Uncompress::Adapter::Identity'=> '2.045',
              'IO::Uncompress::Adapter::Inflate'=> '2.045',
              'IO::Uncompress::AnyInflate'=> '2.045',
              'IO::Uncompress::AnyUncompress'=> '2.045',
              'IO::Uncompress::Base'  => '2.046',
              'IO::Uncompress::Bunzip2'=> '2.045',
              'IO::Uncompress::Gunzip'=> '2.045',
              'IO::Uncompress::Inflate'=> '2.045',
              'IO::Uncompress::RawInflate'=> '2.045',
              'IO::Uncompress::Unzip' => '2.046',
              'Locale::Codes'         => '3.20',
              'Locale::Codes::Constants'=> '3.20',
              'Locale::Codes::Country'=> '3.20',
              'Locale::Codes::Country_Codes'=> '3.20',
              'Locale::Codes::Country_Retired'=> '3.20',
              'Locale::Codes::Currency'=> '3.20',
              'Locale::Codes::Currency_Codes'=> '3.20',
              'Locale::Codes::Currency_Retired'=> '3.20',
              'Locale::Codes::LangExt'=> '3.20',
              'Locale::Codes::LangExt_Codes'=> '3.20',
              'Locale::Codes::LangExt_Retired'=> '3.20',
              'Locale::Codes::LangFam'=> '3.20',
              'Locale::Codes::LangFam_Codes'=> '3.20',
              'Locale::Codes::LangFam_Retired'=> '3.20',
              'Locale::Codes::LangVar'=> '3.20',
              'Locale::Codes::LangVar_Codes'=> '3.20',
              'Locale::Codes::LangVar_Retired'=> '3.20',
              'Locale::Codes::Language'=> '3.20',
              'Locale::Codes::Language_Codes'=> '3.20',
              'Locale::Codes::Language_Retired'=> '3.20',
              'Locale::Codes::Script' => '3.20',
              'Locale::Codes::Script_Codes'=> '3.20',
              'Locale::Codes::Script_Retired'=> '3.20',
              'Locale::Country'       => '3.20',
              'Locale::Currency'      => '3.20',
              'Locale::Language'      => '3.20',
              'Locale::Maketext'      => '1.21',
              'Locale::Script'        => '3.20',
              'Module::CoreList'      => '2.59',
              'Module::Loaded'        => '0.08',
              'Opcode'                => '1.22',
              'POSIX'                 => '1.27',
              'Pod::Html'             => '1.12',
              'Pod::LaTeX'            => '0.60',
              'Pod::Perldoc'          => '3.15_08',
              'Safe'                  => '2.30',
              'SelfLoader'            => '1.20',
              'Socket'                => '1.97',
              'Storable'              => '2.34',
              'UNIVERSAL'             => '1.11',
              'Unicode::Collate'      => '0.87',
              'Unicode::Collate::Locale'=> '0.87',
              'XS::APItest'           => '0.34',
              'arybase'               => '0.02',
              'charnames'             => '1.27',
              'diagnostics'           => '1.26',
              'feature'               => '1.24',
              'if'                    => '0.0602',
              'overload'              => '1.16',
              'sigtrap'               => '1.06',
              'strict'                => '1.06',
              'threads'               => '1.86',
              'version'               => '0.96',
          },
          removed => {
          }
      },
      5.015007 => {
          delta_from => 5.015006,
          changed => {
              'B'                     => '1.33',
              'B::Deparse'            => '1.11',
              'CGI'                   => '3.59',
              'CPAN::Meta'            => '2.113640',
              'CPAN::Meta::Converter' => '2.113640',
              'CPAN::Meta::Feature'   => '2.113640',
              'CPAN::Meta::History'   => '2.113640',
              'CPAN::Meta::Prereqs'   => '2.113640',
              'CPAN::Meta::Requirements'=> '2.113640',
              'CPAN::Meta::Spec'      => '2.113640',
              'CPAN::Meta::Validator' => '2.113640',
              'CPANPLUS'              => '0.9116',
              'CPANPLUS::Internals'   => '0.9116',
              'CPANPLUS::Shell::Default'=> '0.9116',
              'Cwd'                   => '3.39_01',
              'Data::Dumper'          => '2.135_03',
              'Devel::InnerPackage'   => '0.4',
              'ExtUtils::CBuilder::Base'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280205',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280205',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280205',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280205',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280205',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280205',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280205',
              'ExtUtils::Manifest'    => '1.61',
              'ExtUtils::Packlist'    => '1.46',
              'ExtUtils::ParseXS'     => '3.12',
              'ExtUtils::ParseXS::Constants'=> '3.12',
              'ExtUtils::ParseXS::CountLines'=> '3.12',
              'ExtUtils::ParseXS::Utilities'=> '3.12',
              'ExtUtils::Typemaps'    => '1.03',
              'ExtUtils::Typemaps::Cmd'=> undef,
              'ExtUtils::Typemaps::Type'=> '0.06',
              'File::Glob'            => '1.16',
              'File::Spec'            => '3.39_01',
              'File::Spec::Cygwin'    => '3.39_01',
              'File::Spec::Epoc'      => '3.39_01',
              'File::Spec::Functions' => '3.39_01',
              'File::Spec::Mac'       => '3.39_01',
              'File::Spec::OS2'       => '3.39_01',
              'File::Spec::Unix'      => '3.39_01',
              'File::Spec::VMS'       => '3.39_01',
              'File::Spec::Win32'     => '3.39_01',
              'IO::Dir'               => '1.10',
              'IO::Pipe'              => '1.15',
              'IO::Poll'              => '0.09',
              'IO::Select'            => '1.21',
              'IO::Socket'            => '1.34',
              'IO::Socket::INET'      => '1.33',
              'IO::Socket::UNIX'      => '1.24',
              'Locale::Maketext'      => '1.22',
              'Math::BigInt'          => '1.998',
              'Module::CoreList'      => '2.60',
              'Module::Pluggable'     => '4.0',
              'POSIX'                 => '1.28',
              'PerlIO::scalar'        => '0.13',
              'Pod::Html'             => '1.13',
              'Pod::Perldoc'          => '3.15_15',
              'Pod::Perldoc::BaseTo'  => '3.15_15',
              'Pod::Perldoc::GetOptsOO'=> '3.15_15',
              'Pod::Perldoc::ToANSI'  => '3.15_15',
              'Pod::Perldoc::ToChecker'=> '3.15_15',
              'Pod::Perldoc::ToMan'   => '3.15_15',
              'Pod::Perldoc::ToNroff' => '3.15_15',
              'Pod::Perldoc::ToPod'   => '3.15_15',
              'Pod::Perldoc::ToRtf'   => '3.15_15',
              'Pod::Perldoc::ToTerm'  => '3.15_15',
              'Pod::Perldoc::ToText'  => '3.15_15',
              'Pod::Perldoc::ToTk'    => '3.15_15',
              'Pod::Perldoc::ToXml'   => '3.15_15',
              'Term::UI'              => '0.30',
              'Tie::File'             => '0.98',
              'Unicode::UCD'          => '0.39',
              'Version::Requirements' => '0.101021',
              'XS::APItest'           => '0.35',
              '_charnames'            => '1.28',
              'arybase'               => '0.03',
              'autouse'               => '1.07',
              'charnames'             => '1.28',
              'diagnostics'           => '1.27',
              'feature'               => '1.25',
              'overload'              => '1.17',
              'overloading'           => '0.02',
              'perlfaq'               => '5.0150038',
          },
          removed => {
          }
      },
      5.015008 => {
          delta_from => 5.015007,
          changed => {
              'B'                     => '1.34',
              'B::Deparse'            => '1.12',
              'CPAN::Meta'            => '2.120351',
              'CPAN::Meta::Converter' => '2.120351',
              'CPAN::Meta::Feature'   => '2.120351',
              'CPAN::Meta::History'   => '2.120351',
              'CPAN::Meta::Prereqs'   => '2.120351',
              'CPAN::Meta::Requirements'=> '2.120351',
              'CPAN::Meta::Spec'      => '2.120351',
              'CPAN::Meta::Validator' => '2.120351',
              'CPAN::Meta::YAML'      => '0.007',
              'CPANPLUS'              => '0.9118',
              'CPANPLUS::Dist::Build' => '0.62',
              'CPANPLUS::Dist::Build::Constants'=> '0.62',
              'CPANPLUS::Internals'   => '0.9118',
              'CPANPLUS::Shell::Default'=> '0.9118',
              'Carp'                  => '1.25',
              'Carp::Heavy'           => '1.25',
              'Compress::Raw::Bzip2'  => '2.048',
              'Compress::Raw::Zlib'   => '2.048',
              'Compress::Zlib'        => '2.048',
              'Cwd'                   => '3.39_02',
              'DB_File'               => '1.826',
              'Data::Dumper'          => '2.135_05',
              'English'               => '1.05',
              'ExtUtils::Install'     => '1.58',
              'ExtUtils::ParseXS'     => '3.16',
              'ExtUtils::ParseXS::Constants'=> '3.16',
              'ExtUtils::ParseXS::CountLines'=> '3.16',
              'ExtUtils::ParseXS::Utilities'=> '3.16',
              'ExtUtils::Typemaps'    => '3.16',
              'ExtUtils::Typemaps::Cmd'=> '3.16',
              'ExtUtils::Typemaps::InputMap'=> '3.16',
              'ExtUtils::Typemaps::OutputMap'=> '3.16',
              'ExtUtils::Typemaps::Type'=> '3.16',
              'File::Copy'            => '2.23',
              'File::Glob'            => '1.17',
              'File::Spec'            => '3.39_02',
              'File::Spec::Cygwin'    => '3.39_02',
              'File::Spec::Epoc'      => '3.39_02',
              'File::Spec::Functions' => '3.39_02',
              'File::Spec::Mac'       => '3.39_02',
              'File::Spec::OS2'       => '3.39_02',
              'File::Spec::Unix'      => '3.39_02',
              'File::Spec::VMS'       => '3.39_02',
              'File::Spec::Win32'     => '3.39_02',
              'Filter::Util::Call'    => '1.40',
              'IO::Compress::Adapter::Bzip2'=> '2.048',
              'IO::Compress::Adapter::Deflate'=> '2.048',
              'IO::Compress::Adapter::Identity'=> '2.048',
              'IO::Compress::Base'    => '2.048',
              'IO::Compress::Base::Common'=> '2.048',
              'IO::Compress::Bzip2'   => '2.048',
              'IO::Compress::Deflate' => '2.048',
              'IO::Compress::Gzip'    => '2.048',
              'IO::Compress::Gzip::Constants'=> '2.048',
              'IO::Compress::RawDeflate'=> '2.048',
              'IO::Compress::Zip'     => '2.048',
              'IO::Compress::Zip::Constants'=> '2.048',
              'IO::Compress::Zlib::Constants'=> '2.048',
              'IO::Compress::Zlib::Extra'=> '2.048',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.048',
              'IO::Uncompress::Adapter::Identity'=> '2.048',
              'IO::Uncompress::Adapter::Inflate'=> '2.048',
              'IO::Uncompress::AnyInflate'=> '2.048',
              'IO::Uncompress::AnyUncompress'=> '2.048',
              'IO::Uncompress::Base'  => '2.048',
              'IO::Uncompress::Bunzip2'=> '2.048',
              'IO::Uncompress::Gunzip'=> '2.048',
              'IO::Uncompress::Inflate'=> '2.048',
              'IO::Uncompress::RawInflate'=> '2.048',
              'IO::Uncompress::Unzip' => '2.048',
              'IPC::Cmd'              => '0.76',
              'Math::Complex'         => '1.59',
              'Math::Trig'            => '1.23',
              'Module::Metadata'      => '1.000009',
              'Opcode'                => '1.23',
              'POSIX'                 => '1.30',
              'Parse::CPAN::Meta'     => '1.4402',
              'PerlIO::mmap'          => '0.010',
              'Pod::Checker'          => '1.51',
              'Pod::Find'             => '1.51',
              'Pod::Functions'        => '1.05',
              'Pod::Html'             => '1.14',
              'Pod::InputObjects'     => '1.51',
              'Pod::ParseUtils'       => '1.51',
              'Pod::Parser'           => '1.51',
              'Pod::PlainText'        => '2.05',
              'Pod::Select'           => '1.51',
              'Pod::Usage'            => '1.51',
              'Safe'                  => '2.31',
              'Socket'                => '1.98',
              'Term::Cap'             => '1.13',
              'Term::ReadLine'        => '1.08',
              'Time::HiRes'           => '1.9725',
              'Unicode'               => '6.1.0',
              'Unicode::UCD'          => '0.41',
              'Version::Requirements' => '0.101022',
              'XS::APItest'           => '0.36',
              'XS::Typemap'           => '0.08',
              '_charnames'            => '1.29',
              'arybase'               => '0.04',
              'charnames'             => '1.29',
              'diagnostics'           => '1.28',
              'feature'               => '1.26',
              'locale'                => '1.01',
              'overload'              => '1.18',
              'perlfaq'               => '5.0150039',
              're'                    => '0.19',
              'subs'                  => '1.01',
              'warnings'              => '1.13',
          },
          removed => {
          }
      },
      5.015009 => {
          delta_from => 5.015008,
          changed => {
              'B::Deparse'            => '1.13',
              'B::Lint'               => '1.14',
              'B::Lint::Debug'        => '1.14',
              'CPAN::Meta'            => '2.120630',
              'CPAN::Meta::Converter' => '2.120630',
              'CPAN::Meta::Feature'   => '2.120630',
              'CPAN::Meta::History'   => '2.120630',
              'CPAN::Meta::Prereqs'   => '2.120630',
              'CPAN::Meta::Requirements'=> '2.120630',
              'CPAN::Meta::Spec'      => '2.120630',
              'CPAN::Meta::Validator' => '2.120630',
              'CPANPLUS'              => '0.9121',
              'CPANPLUS::Internals'   => '0.9121',
              'CPANPLUS::Shell::Default'=> '0.9121',
              'Data::Dumper'          => '2.135_06',
              'Digest::SHA'           => '5.71',
              'ExtUtils::CBuilder'    => '0.280206',
              'ExtUtils::CBuilder::Base'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280206',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280206',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280206',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280206',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280206',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280206',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280206',
              'HTTP::Tiny'            => '0.017',
              'Locale::Codes'         => '3.21',
              'Locale::Codes::Constants'=> '3.21',
              'Locale::Codes::Country'=> '3.21',
              'Locale::Codes::Country_Codes'=> '3.21',
              'Locale::Codes::Country_Retired'=> '3.21',
              'Locale::Codes::Currency'=> '3.21',
              'Locale::Codes::Currency_Codes'=> '3.21',
              'Locale::Codes::Currency_Retired'=> '3.21',
              'Locale::Codes::LangExt'=> '3.21',
              'Locale::Codes::LangExt_Codes'=> '3.21',
              'Locale::Codes::LangExt_Retired'=> '3.21',
              'Locale::Codes::LangFam'=> '3.21',
              'Locale::Codes::LangFam_Codes'=> '3.21',
              'Locale::Codes::LangFam_Retired'=> '3.21',
              'Locale::Codes::LangVar'=> '3.21',
              'Locale::Codes::LangVar_Codes'=> '3.21',
              'Locale::Codes::LangVar_Retired'=> '3.21',
              'Locale::Codes::Language'=> '3.21',
              'Locale::Codes::Language_Codes'=> '3.21',
              'Locale::Codes::Language_Retired'=> '3.21',
              'Locale::Codes::Script' => '3.21',
              'Locale::Codes::Script_Codes'=> '3.21',
              'Locale::Codes::Script_Retired'=> '3.21',
              'Locale::Country'       => '3.21',
              'Locale::Currency'      => '3.21',
              'Locale::Language'      => '3.21',
              'Locale::Script'        => '3.21',
              'Module::CoreList'      => '2.65',
              'Pod::Html'             => '1.1501',
              'Pod::Perldoc'          => '3.17',
              'Pod::Perldoc::BaseTo'  => '3.17',
              'Pod::Perldoc::GetOptsOO'=> '3.17',
              'Pod::Perldoc::ToANSI'  => '3.17',
              'Pod::Perldoc::ToChecker'=> '3.17',
              'Pod::Perldoc::ToMan'   => '3.17',
              'Pod::Perldoc::ToNroff' => '3.17',
              'Pod::Perldoc::ToPod'   => '3.17',
              'Pod::Perldoc::ToRtf'   => '3.17',
              'Pod::Perldoc::ToTerm'  => '3.17',
              'Pod::Perldoc::ToText'  => '3.17',
              'Pod::Perldoc::ToTk'    => '3.17',
              'Pod::Perldoc::ToXml'   => '3.17',
              'Pod::Simple'           => '3.20',
              'Pod::Simple::BlackBox' => '3.20',
              'Pod::Simple::Checker'  => '3.20',
              'Pod::Simple::Debug'    => '3.20',
              'Pod::Simple::DumpAsText'=> '3.20',
              'Pod::Simple::DumpAsXML'=> '3.20',
              'Pod::Simple::HTML'     => '3.20',
              'Pod::Simple::HTMLBatch'=> '3.20',
              'Pod::Simple::LinkSection'=> '3.20',
              'Pod::Simple::Methody'  => '3.20',
              'Pod::Simple::Progress' => '3.20',
              'Pod::Simple::PullParser'=> '3.20',
              'Pod::Simple::PullParserEndToken'=> '3.20',
              'Pod::Simple::PullParserStartToken'=> '3.20',
              'Pod::Simple::PullParserTextToken'=> '3.20',
              'Pod::Simple::PullParserToken'=> '3.20',
              'Pod::Simple::RTF'      => '3.20',
              'Pod::Simple::Search'   => '3.20',
              'Pod::Simple::SimpleTree'=> '3.20',
              'Pod::Simple::Text'     => '3.20',
              'Pod::Simple::TextContent'=> '3.20',
              'Pod::Simple::TiedOutFH'=> '3.20',
              'Pod::Simple::Transcode'=> '3.20',
              'Pod::Simple::TranscodeDumb'=> '3.20',
              'Pod::Simple::TranscodeSmart'=> '3.20',
              'Pod::Simple::XHTML'    => '3.20',
              'Pod::Simple::XMLOutStream'=> '3.20',
              'Socket'                => '2.000',
              'Term::ReadLine'        => '1.09',
              'Unicode::Collate'      => '0.89',
              'Unicode::Collate::CJK::Korean'=> '0.88',
              'Unicode::Collate::Locale'=> '0.89',
              'Unicode::Normalize'    => '1.14',
              'Unicode::UCD'          => '0.42',
              'XS::APItest'           => '0.37',
              'arybase'               => '0.05',
              'attributes'            => '0.18',
              'charnames'             => '1.30',
              'feature'               => '1.27',
          },
          removed => {
          }
      },
      5.016 => {
          delta_from => 5.015009,
          changed => {
              'B::Concise'            => '0.89',
              'B::Deparse'            => '1.14',
              'Carp'                  => '1.26',
              'Carp::Heavy'           => '1.26',
              'IO::Socket'            => '1.35',
              'Module::CoreList'      => '2.66',
              'PerlIO::scalar'        => '0.14',
              'Pod::Html'             => '1.1502',
              'Safe'                  => '2.31_01',
              'Socket'                => '2.001',
              'Unicode::UCD'          => '0.43',
              'XS::APItest'           => '0.38',
              '_charnames'            => '1.31',
              'attributes'            => '0.19',
              'strict'                => '1.07',
              'version'               => '0.99',
          },
          removed => {
          }
      },
      5.016001 => {
          delta_from => 5.016,
          changed => {
              'B'                     => '1.35',
              'B::Deparse'            => '1.14_01',
              'List::Util'            => '1.25',
              'List::Util::PP'        => '1.25',
              'List::Util::XS'        => '1.25',
              'Module::CoreList'      => '2.70',
              'PerlIO::scalar'        => '0.14_01',
              'Scalar::Util'          => '1.25',
              'Scalar::Util::PP'      => '1.25',
              're'                    => '0.19_01',
          },
          removed => {
          }
      },
      5.016002 => {
          delta_from => 5.016001,
          changed => {
              'Module::CoreList'      => '2.76',
          },
          removed => {
          }
      },
      5.016003 => {
          delta_from => 5.016002,
          changed => {
              'Encode'                => '2.44_01',
              'Module::CoreList'      => '2.76_02',
              'XS::APItest'           => '0.39',
          },
          removed => {
          }
      },
      5.017 => {
          delta_from => 5.016,
          changed => {
              'B'                     => '1.35',
              'B::Concise'            => '0.90',
              'ExtUtils::ParseXS'     => '3.17',
              'ExtUtils::ParseXS::Utilities'=> '3.17',
              'File::DosGlob'         => '1.07',
              'File::Find'            => '1.21',
              'File::stat'            => '1.06',
              'Hash::Util'            => '0.12',
              'IO::Socket'            => '1.34',
              'Module::CoreList'      => '2.67',
              'Pod::Functions'        => '1.06',
              'Storable'              => '2.35',
              'XS::APItest'           => '0.39',
              'diagnostics'           => '1.29',
              'feature'               => '1.28',
              'overload'              => '1.19',
              'utf8'                  => '1.10',
          },
          removed => {
              'Version::Requirements' => 1,
          }
      },
      5.017001 => {
          delta_from => 5.017,
          changed => {
              'App::Prove'            => '3.25',
              'App::Prove::State'     => '3.25',
              'App::Prove::State::Result'=> '3.25',
              'App::Prove::State::Result::Test'=> '3.25',
              'Archive::Extract'      => '0.60',
              'Archive::Tar'          => '1.88',
              'Archive::Tar::Constant'=> '1.88',
              'Archive::Tar::File'    => '1.88',
              'B'                     => '1.36',
              'B::Deparse'            => '1.15',
              'CPAN::Meta'            => '2.120921',
              'CPAN::Meta::Converter' => '2.120921',
              'CPAN::Meta::Feature'   => '2.120921',
              'CPAN::Meta::History'   => '2.120921',
              'CPAN::Meta::Prereqs'   => '2.120921',
              'CPAN::Meta::Requirements'=> '2.122',
              'CPAN::Meta::Spec'      => '2.120921',
              'CPAN::Meta::Validator' => '2.120921',
              'CPAN::Meta::YAML'      => '0.008',
              'CPANPLUS'              => '0.9130',
              'CPANPLUS::Config::HomeEnv'=> '0.04',
              'CPANPLUS::Internals'   => '0.9130',
              'CPANPLUS::Shell::Default'=> '0.9130',
              'Class::Struct'         => '0.64',
              'Compress::Raw::Bzip2'  => '2.052',
              'Compress::Raw::Zlib'   => '2.054',
              'Compress::Zlib'        => '2.052',
              'Digest::MD5'           => '2.52',
              'DynaLoader'            => '1.15',
              'ExtUtils::CBuilder'    => '0.280208',
              'ExtUtils::CBuilder::Base'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280208',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280208',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280208',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280208',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280208',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280208',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280208',
              'Fatal'                 => '2.11',
              'File::DosGlob'         => '1.08',
              'File::Fetch'           => '0.34',
              'File::Spec::Unix'      => '3.39_03',
              'Filter::Util::Call'    => '1.45',
              'HTTP::Tiny'            => '0.022',
              'IO'                    => '1.25_07',
              'IO::Compress::Adapter::Bzip2'=> '2.052',
              'IO::Compress::Adapter::Deflate'=> '2.052',
              'IO::Compress::Adapter::Identity'=> '2.052',
              'IO::Compress::Base'    => '2.052',
              'IO::Compress::Base::Common'=> '2.052',
              'IO::Compress::Bzip2'   => '2.052',
              'IO::Compress::Deflate' => '2.052',
              'IO::Compress::Gzip'    => '2.052',
              'IO::Compress::Gzip::Constants'=> '2.052',
              'IO::Compress::RawDeflate'=> '2.052',
              'IO::Compress::Zip'     => '2.052',
              'IO::Compress::Zip::Constants'=> '2.052',
              'IO::Compress::Zlib::Constants'=> '2.052',
              'IO::Compress::Zlib::Extra'=> '2.052',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.052',
              'IO::Uncompress::Adapter::Identity'=> '2.052',
              'IO::Uncompress::Adapter::Inflate'=> '2.052',
              'IO::Uncompress::AnyInflate'=> '2.052',
              'IO::Uncompress::AnyUncompress'=> '2.052',
              'IO::Uncompress::Base'  => '2.052',
              'IO::Uncompress::Bunzip2'=> '2.052',
              'IO::Uncompress::Gunzip'=> '2.052',
              'IO::Uncompress::Inflate'=> '2.052',
              'IO::Uncompress::RawInflate'=> '2.052',
              'IO::Uncompress::Unzip' => '2.052',
              'IPC::Cmd'              => '0.78',
              'List::Util'            => '1.25',
              'List::Util::XS'        => '1.25',
              'Locale::Codes'         => '3.22',
              'Locale::Codes::Constants'=> '3.22',
              'Locale::Codes::Country'=> '3.22',
              'Locale::Codes::Country_Codes'=> '3.22',
              'Locale::Codes::Country_Retired'=> '3.22',
              'Locale::Codes::Currency'=> '3.22',
              'Locale::Codes::Currency_Codes'=> '3.22',
              'Locale::Codes::Currency_Retired'=> '3.22',
              'Locale::Codes::LangExt'=> '3.22',
              'Locale::Codes::LangExt_Codes'=> '3.22',
              'Locale::Codes::LangExt_Retired'=> '3.22',
              'Locale::Codes::LangFam'=> '3.22',
              'Locale::Codes::LangFam_Codes'=> '3.22',
              'Locale::Codes::LangFam_Retired'=> '3.22',
              'Locale::Codes::LangVar'=> '3.22',
              'Locale::Codes::LangVar_Codes'=> '3.22',
              'Locale::Codes::LangVar_Retired'=> '3.22',
              'Locale::Codes::Language'=> '3.22',
              'Locale::Codes::Language_Codes'=> '3.22',
              'Locale::Codes::Language_Retired'=> '3.22',
              'Locale::Codes::Script' => '3.22',
              'Locale::Codes::Script_Codes'=> '3.22',
              'Locale::Codes::Script_Retired'=> '3.22',
              'Locale::Country'       => '3.22',
              'Locale::Currency'      => '3.22',
              'Locale::Language'      => '3.22',
              'Locale::Script'        => '3.22',
              'Memoize'               => '1.03',
              'Memoize::AnyDBM_File'  => '1.03',
              'Memoize::Expire'       => '1.03',
              'Memoize::ExpireFile'   => '1.03',
              'Memoize::ExpireTest'   => '1.03',
              'Memoize::NDBM_File'    => '1.03',
              'Memoize::SDBM_File'    => '1.03',
              'Memoize::Storable'     => '1.03',
              'Module::Build'         => '0.40',
              'Module::Build::Base'   => '0.40',
              'Module::Build::Compat' => '0.40',
              'Module::Build::Config' => '0.40',
              'Module::Build::Cookbook'=> '0.40',
              'Module::Build::Dumper' => '0.40',
              'Module::Build::ModuleInfo'=> '0.40',
              'Module::Build::Notes'  => '0.40',
              'Module::Build::PPMMaker'=> '0.40',
              'Module::Build::Platform::Amiga'=> '0.40',
              'Module::Build::Platform::Default'=> '0.40',
              'Module::Build::Platform::EBCDIC'=> '0.40',
              'Module::Build::Platform::MPEiX'=> '0.40',
              'Module::Build::Platform::MacOS'=> '0.40',
              'Module::Build::Platform::RiscOS'=> '0.40',
              'Module::Build::Platform::Unix'=> '0.40',
              'Module::Build::Platform::VMS'=> '0.40',
              'Module::Build::Platform::VOS'=> '0.40',
              'Module::Build::Platform::Windows'=> '0.40',
              'Module::Build::Platform::aix'=> '0.40',
              'Module::Build::Platform::cygwin'=> '0.40',
              'Module::Build::Platform::darwin'=> '0.40',
              'Module::Build::Platform::os2'=> '0.40',
              'Module::Build::PodParser'=> '0.40',
              'Module::CoreList'      => '2.68',
              'Module::Load::Conditional'=> '0.50',
              'Object::Accessor'      => '0.44',
              'POSIX'                 => '1.31',
              'Params::Check'         => '0.36',
              'Parse::CPAN::Meta'     => '1.4404',
              'PerlIO::mmap'          => '0.011',
              'PerlIO::via::QuotedPrint'=> '0.07',
              'Pod::Html'             => '1.16',
              'Pod::Man'              => '2.26',
              'Pod::Text'             => '3.16',
              'Safe'                  => '2.33_01',
              'Scalar::Util'          => '1.25',
              'Search::Dict'          => '1.07',
              'Storable'              => '2.36',
              'TAP::Base'             => '3.25',
              'TAP::Formatter::Base'  => '3.25',
              'TAP::Formatter::Color' => '3.25',
              'TAP::Formatter::Console'=> '3.25',
              'TAP::Formatter::Console::ParallelSession'=> '3.25',
              'TAP::Formatter::Console::Session'=> '3.25',
              'TAP::Formatter::File'  => '3.25',
              'TAP::Formatter::File::Session'=> '3.25',
              'TAP::Formatter::Session'=> '3.25',
              'TAP::Harness'          => '3.25',
              'TAP::Object'           => '3.25',
              'TAP::Parser'           => '3.25',
              'TAP::Parser::Aggregator'=> '3.25',
              'TAP::Parser::Grammar'  => '3.25',
              'TAP::Parser::Iterator' => '3.25',
              'TAP::Parser::Iterator::Array'=> '3.25',
              'TAP::Parser::Iterator::Process'=> '3.25',
              'TAP::Parser::Iterator::Stream'=> '3.25',
              'TAP::Parser::IteratorFactory'=> '3.25',
              'TAP::Parser::Multiplexer'=> '3.25',
              'TAP::Parser::Result'   => '3.25',
              'TAP::Parser::Result::Bailout'=> '3.25',
              'TAP::Parser::Result::Comment'=> '3.25',
              'TAP::Parser::Result::Plan'=> '3.25',
              'TAP::Parser::Result::Pragma'=> '3.25',
              'TAP::Parser::Result::Test'=> '3.25',
              'TAP::Parser::Result::Unknown'=> '3.25',
              'TAP::Parser::Result::Version'=> '3.25',
              'TAP::Parser::Result::YAML'=> '3.25',
              'TAP::Parser::ResultFactory'=> '3.25',
              'TAP::Parser::Scheduler'=> '3.25',
              'TAP::Parser::Scheduler::Job'=> '3.25',
              'TAP::Parser::Scheduler::Spinner'=> '3.25',
              'TAP::Parser::Source'   => '3.25',
              'TAP::Parser::SourceHandler'=> '3.25',
              'TAP::Parser::SourceHandler::Executable'=> '3.25',
              'TAP::Parser::SourceHandler::File'=> '3.25',
              'TAP::Parser::SourceHandler::Handle'=> '3.25',
              'TAP::Parser::SourceHandler::Perl'=> '3.25',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.25',
              'TAP::Parser::Utils'    => '3.25',
              'TAP::Parser::YAMLish::Reader'=> '3.25',
              'TAP::Parser::YAMLish::Writer'=> '3.25',
              'Term::ANSIColor'       => '3.02',
              'Test::Harness'         => '3.25',
              'Unicode'               => '6.2.0',
              'Unicode::UCD'          => '0.44',
              'XS::APItest'           => '0.40',
              '_charnames'            => '1.32',
              'attributes'            => '0.2',
              'autodie'               => '2.11',
              'autodie::exception'    => '2.11',
              'autodie::exception::system'=> '2.11',
              'autodie::hints'        => '2.11',
              'bigint'                => '0.30',
              'charnames'             => '1.32',
              'feature'               => '1.29',
              'inc::latest'           => '0.40',
              'perlfaq'               => '5.0150040',
              're'                    => '0.20',
          },
          removed => {
              'List::Util::PP'        => 1,
              'Scalar::Util::PP'      => 1,
          }
      },
      5.017002 => {
          delta_from => 5.017001,
          changed => {
              'App::Prove'            => '3.25_01',
              'App::Prove::State'     => '3.25_01',
              'App::Prove::State::Result'=> '3.25_01',
              'App::Prove::State::Result::Test'=> '3.25_01',
              'B::Concise'            => '0.91',
              'Compress::Raw::Bzip2'  => '2.05201',
              'Compress::Raw::Zlib'   => '2.05401',
              'Exporter'              => '5.67',
              'Exporter::Heavy'       => '5.67',
              'Fatal'                 => '2.12',
              'File::Fetch'           => '0.36',
              'File::stat'            => '1.07',
              'IO'                    => '1.25_08',
              'IO::Socket'            => '1.35',
              'Module::CoreList'      => '2.69',
              'PerlIO::scalar'        => '0.15',
              'Socket'                => '2.002',
              'Storable'              => '2.37',
              'TAP::Base'             => '3.25_01',
              'TAP::Formatter::Base'  => '3.25_01',
              'TAP::Formatter::Color' => '3.25_01',
              'TAP::Formatter::Console'=> '3.25_01',
              'TAP::Formatter::Console::ParallelSession'=> '3.25_01',
              'TAP::Formatter::Console::Session'=> '3.25_01',
              'TAP::Formatter::File'  => '3.25_01',
              'TAP::Formatter::File::Session'=> '3.25_01',
              'TAP::Formatter::Session'=> '3.25_01',
              'TAP::Harness'          => '3.25_01',
              'TAP::Object'           => '3.25_01',
              'TAP::Parser'           => '3.25_01',
              'TAP::Parser::Aggregator'=> '3.25_01',
              'TAP::Parser::Grammar'  => '3.25_01',
              'TAP::Parser::Iterator' => '3.25_01',
              'TAP::Parser::Iterator::Array'=> '3.25_01',
              'TAP::Parser::Iterator::Process'=> '3.25_01',
              'TAP::Parser::Iterator::Stream'=> '3.25_01',
              'TAP::Parser::IteratorFactory'=> '3.25_01',
              'TAP::Parser::Multiplexer'=> '3.25_01',
              'TAP::Parser::Result'   => '3.25_01',
              'TAP::Parser::Result::Bailout'=> '3.25_01',
              'TAP::Parser::Result::Comment'=> '3.25_01',
              'TAP::Parser::Result::Plan'=> '3.25_01',
              'TAP::Parser::Result::Pragma'=> '3.25_01',
              'TAP::Parser::Result::Test'=> '3.25_01',
              'TAP::Parser::Result::Unknown'=> '3.25_01',
              'TAP::Parser::Result::Version'=> '3.25_01',
              'TAP::Parser::Result::YAML'=> '3.25_01',
              'TAP::Parser::ResultFactory'=> '3.25_01',
              'TAP::Parser::Scheduler'=> '3.25_01',
              'TAP::Parser::Scheduler::Job'=> '3.25_01',
              'TAP::Parser::Scheduler::Spinner'=> '3.25_01',
              'TAP::Parser::Source'   => '3.25_01',
              'TAP::Parser::SourceHandler'=> '3.25_01',
              'TAP::Parser::SourceHandler::Executable'=> '3.25_01',
              'TAP::Parser::SourceHandler::File'=> '3.25_01',
              'TAP::Parser::SourceHandler::Handle'=> '3.25_01',
              'TAP::Parser::SourceHandler::Perl'=> '3.25_01',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.25_01',
              'TAP::Parser::Utils'    => '3.25_01',
              'TAP::Parser::YAMLish::Reader'=> '3.25_01',
              'TAP::Parser::YAMLish::Writer'=> '3.25_01',
              'Test::Harness'         => '3.25_01',
              'Tie::StdHandle'        => '4.3',
              'XS::APItest'           => '0.41',
              'autodie'               => '2.12',
              'autodie::exception'    => '2.12',
              'autodie::exception::system'=> '2.12',
              'autodie::hints'        => '2.12',
              'diagnostics'           => '1.30',
              'overload'              => '1.20',
              're'                    => '0.21',
              'vars'                  => '1.03',
          },
          removed => {
          }
      },
      5.017003 => {
          delta_from => 5.017002,
          changed => {
              'B'                     => '1.37',
              'B::Concise'            => '0.92',
              'B::Debug'              => '1.18',
              'B::Deparse'            => '1.16',
              'CGI'                   => '3.60',
              'Compress::Raw::Bzip2'  => '2.055',
              'Compress::Raw::Zlib'   => '2.056',
              'Compress::Zlib'        => '2.055',
              'Data::Dumper'          => '2.135_07',
              'Devel::Peek'           => '1.09',
              'Encode'                => '2.47',
              'Encode::Alias'         => '2.16',
              'Encode::GSM0338'       => '2.02',
              'Encode::Unicode::UTF7' => '2.06',
              'IO::Compress::Adapter::Bzip2'=> '2.055',
              'IO::Compress::Adapter::Deflate'=> '2.055',
              'IO::Compress::Adapter::Identity'=> '2.055',
              'IO::Compress::Base'    => '2.055',
              'IO::Compress::Base::Common'=> '2.055',
              'IO::Compress::Bzip2'   => '2.055',
              'IO::Compress::Deflate' => '2.055',
              'IO::Compress::Gzip'    => '2.055',
              'IO::Compress::Gzip::Constants'=> '2.055',
              'IO::Compress::RawDeflate'=> '2.055',
              'IO::Compress::Zip'     => '2.055',
              'IO::Compress::Zip::Constants'=> '2.055',
              'IO::Compress::Zlib::Constants'=> '2.055',
              'IO::Compress::Zlib::Extra'=> '2.055',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.055',
              'IO::Uncompress::Adapter::Identity'=> '2.055',
              'IO::Uncompress::Adapter::Inflate'=> '2.055',
              'IO::Uncompress::AnyInflate'=> '2.055',
              'IO::Uncompress::AnyUncompress'=> '2.055',
              'IO::Uncompress::Base'  => '2.055',
              'IO::Uncompress::Bunzip2'=> '2.055',
              'IO::Uncompress::Gunzip'=> '2.055',
              'IO::Uncompress::Inflate'=> '2.055',
              'IO::Uncompress::RawInflate'=> '2.055',
              'IO::Uncompress::Unzip' => '2.055',
              'Module::Build'         => '0.4003',
              'Module::Build::Base'   => '0.4003',
              'Module::Build::Compat' => '0.4003',
              'Module::Build::Config' => '0.4003',
              'Module::Build::Cookbook'=> '0.4003',
              'Module::Build::Dumper' => '0.4003',
              'Module::Build::ModuleInfo'=> '0.4003',
              'Module::Build::Notes'  => '0.4003',
              'Module::Build::PPMMaker'=> '0.4003',
              'Module::Build::Platform::Amiga'=> '0.4003',
              'Module::Build::Platform::Default'=> '0.4003',
              'Module::Build::Platform::EBCDIC'=> '0.4003',
              'Module::Build::Platform::MPEiX'=> '0.4003',
              'Module::Build::Platform::MacOS'=> '0.4003',
              'Module::Build::Platform::RiscOS'=> '0.4003',
              'Module::Build::Platform::Unix'=> '0.4003',
              'Module::Build::Platform::VMS'=> '0.4003',
              'Module::Build::Platform::VOS'=> '0.4003',
              'Module::Build::Platform::Windows'=> '0.4003',
              'Module::Build::Platform::aix'=> '0.4003',
              'Module::Build::Platform::cygwin'=> '0.4003',
              'Module::Build::Platform::darwin'=> '0.4003',
              'Module::Build::Platform::os2'=> '0.4003',
              'Module::Build::PodParser'=> '0.4003',
              'Module::CoreList'      => '2.71',
              'Module::CoreList::TieHashDelta'=> '2.71',
              'Module::Load::Conditional'=> '0.54',
              'Module::Metadata'      => '1.000011',
              'Module::Pluggable'     => '4.3',
              'Module::Pluggable::Object'=> '4.3',
              'Pod::Simple'           => '3.23',
              'Pod::Simple::BlackBox' => '3.23',
              'Pod::Simple::Checker'  => '3.23',
              'Pod::Simple::Debug'    => '3.23',
              'Pod::Simple::DumpAsText'=> '3.23',
              'Pod::Simple::DumpAsXML'=> '3.23',
              'Pod::Simple::HTML'     => '3.23',
              'Pod::Simple::HTMLBatch'=> '3.23',
              'Pod::Simple::LinkSection'=> '3.23',
              'Pod::Simple::Methody'  => '3.23',
              'Pod::Simple::Progress' => '3.23',
              'Pod::Simple::PullParser'=> '3.23',
              'Pod::Simple::PullParserEndToken'=> '3.23',
              'Pod::Simple::PullParserStartToken'=> '3.23',
              'Pod::Simple::PullParserTextToken'=> '3.23',
              'Pod::Simple::PullParserToken'=> '3.23',
              'Pod::Simple::RTF'      => '3.23',
              'Pod::Simple::Search'   => '3.23',
              'Pod::Simple::SimpleTree'=> '3.23',
              'Pod::Simple::Text'     => '3.23',
              'Pod::Simple::TextContent'=> '3.23',
              'Pod::Simple::TiedOutFH'=> '3.23',
              'Pod::Simple::Transcode'=> '3.23',
              'Pod::Simple::TranscodeDumb'=> '3.23',
              'Pod::Simple::TranscodeSmart'=> '3.23',
              'Pod::Simple::XHTML'    => '3.23',
              'Pod::Simple::XMLOutStream'=> '3.23',
              'Socket'                => '2.004',
              'Storable'              => '2.38',
              'Sys::Syslog'           => '0.31',
              'Term::ReadLine'        => '1.10',
              'Text::Tabs'            => '2012.0818',
              'Text::Wrap'            => '2012.0818',
              'Time::Local'           => '1.2300',
              'Unicode::UCD'          => '0.45',
              'Win32'                 => '0.45',
              'Win32CORE'             => '0.03',
              'XS::APItest'           => '0.42',
              'inc::latest'           => '0.4003',
              'perlfaq'               => '5.0150041',
              're'                    => '0.22',
          },
          removed => {
          }
      },
      5.017004 => {
          delta_from => 5.017003,
          changed => {
              'Archive::Tar'          => '1.90',
              'Archive::Tar::Constant'=> '1.90',
              'Archive::Tar::File'    => '1.90',
              'B'                     => '1.38',
              'B::Concise'            => '0.93',
              'B::Deparse'            => '1.17',
              'B::Xref'               => '1.04',
              'CPANPLUS'              => '0.9131',
              'CPANPLUS::Internals'   => '0.9131',
              'CPANPLUS::Shell::Default'=> '0.9131',
              'DB_File'               => '1.827',
              'Devel::Peek'           => '1.10',
              'DynaLoader'            => '1.16',
              'Errno'                 => '1.16',
              'ExtUtils::ParseXS'     => '3.18',
              'ExtUtils::ParseXS::Constants'=> '3.18',
              'ExtUtils::ParseXS::CountLines'=> '3.18',
              'ExtUtils::ParseXS::Utilities'=> '3.18',
              'File::Copy'            => '2.24',
              'File::Find'            => '1.22',
              'IPC::Open3'            => '1.13',
              'Locale::Codes'         => '3.23',
              'Locale::Codes::Constants'=> '3.23',
              'Locale::Codes::Country'=> '3.23',
              'Locale::Codes::Country_Codes'=> '3.23',
              'Locale::Codes::Country_Retired'=> '3.23',
              'Locale::Codes::Currency'=> '3.23',
              'Locale::Codes::Currency_Codes'=> '3.23',
              'Locale::Codes::Currency_Retired'=> '3.23',
              'Locale::Codes::LangExt'=> '3.23',
              'Locale::Codes::LangExt_Codes'=> '3.23',
              'Locale::Codes::LangExt_Retired'=> '3.23',
              'Locale::Codes::LangFam'=> '3.23',
              'Locale::Codes::LangFam_Codes'=> '3.23',
              'Locale::Codes::LangFam_Retired'=> '3.23',
              'Locale::Codes::LangVar'=> '3.23',
              'Locale::Codes::LangVar_Codes'=> '3.23',
              'Locale::Codes::LangVar_Retired'=> '3.23',
              'Locale::Codes::Language'=> '3.23',
              'Locale::Codes::Language_Codes'=> '3.23',
              'Locale::Codes::Language_Retired'=> '3.23',
              'Locale::Codes::Script' => '3.23',
              'Locale::Codes::Script_Codes'=> '3.23',
              'Locale::Codes::Script_Retired'=> '3.23',
              'Locale::Country'       => '3.23',
              'Locale::Currency'      => '3.23',
              'Locale::Language'      => '3.23',
              'Locale::Script'        => '3.23',
              'Math::BigFloat::Trace' => '0.30',
              'Math::BigInt::Trace'   => '0.30',
              'Module::CoreList'      => '2.73',
              'Module::CoreList::TieHashDelta'=> '2.73',
              'Opcode'                => '1.24',
              'Socket'                => '2.006',
              'Storable'              => '2.39',
              'Sys::Syslog'           => '0.32',
              'Unicode::UCD'          => '0.46',
              'XS::APItest'           => '0.43',
              'bignum'                => '0.30',
              'bigrat'                => '0.30',
              'constant'              => '1.24',
              'feature'               => '1.30',
              'threads::shared'       => '1.41',
              'version'               => '0.9901',
              'warnings'              => '1.14',
          },
          removed => {
          }
      },
      5.017005 => {
          delta_from => 5.017004,
          changed => {
              'AutoLoader'            => '5.73',
              'B'                     => '1.39',
              'B::Deparse'            => '1.18',
              'CPANPLUS'              => '0.9133',
              'CPANPLUS::Internals'   => '0.9133',
              'CPANPLUS::Shell::Default'=> '0.9133',
              'Carp'                  => '1.27',
              'Carp::Heavy'           => '1.27',
              'Data::Dumper'          => '2.136',
              'Digest::SHA'           => '5.72',
              'ExtUtils::CBuilder'    => '0.280209',
              'ExtUtils::CBuilder::Base'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280209',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280209',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280209',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280209',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280209',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280209',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280209',
              'File::Copy'            => '2.25',
              'File::Glob'            => '1.18',
              'HTTP::Tiny'            => '0.024',
              'Module::CoreList'      => '2.75',
              'Module::CoreList::TieHashDelta'=> '2.75',
              'PerlIO::encoding'      => '0.16',
              'Unicode::Collate'      => '0.90',
              'Unicode::Collate::Locale'=> '0.90',
              'Unicode::Normalize'    => '1.15',
              'Win32CORE'             => '0.04',
              'XS::APItest'           => '0.44',
              'attributes'            => '0.21',
              'bigint'                => '0.31',
              'bignum'                => '0.31',
              'bigrat'                => '0.31',
              'feature'               => '1.31',
              'threads::shared'       => '1.42',
              'warnings'              => '1.15',
          },
          removed => {
          }
      },
      5.017006 => {
          delta_from => 5.017005,
          changed => {
              'B'                     => '1.40',
              'B::Concise'            => '0.94',
              'B::Deparse'            => '1.19',
              'B::Xref'               => '1.05',
              'CGI'                   => '3.63',
              'CGI::Util'             => '3.62',
              'CPAN'                  => '1.99_51',
              'CPANPLUS::Dist::Build' => '0.64',
              'CPANPLUS::Dist::Build::Constants'=> '0.64',
              'Carp'                  => '1.28',
              'Carp::Heavy'           => '1.28',
              'Compress::Raw::Bzip2'  => '2.058',
              'Compress::Raw::Zlib'   => '2.058',
              'Compress::Zlib'        => '2.058',
              'Data::Dumper'          => '2.137',
              'Digest::SHA'           => '5.73',
              'DynaLoader'            => '1.17',
              'Env'                   => '1.04',
              'Errno'                 => '1.17',
              'ExtUtils::Manifest'    => '1.62',
              'ExtUtils::Typemaps'    => '3.18',
              'ExtUtils::Typemaps::Cmd'=> '3.18',
              'ExtUtils::Typemaps::InputMap'=> '3.18',
              'ExtUtils::Typemaps::OutputMap'=> '3.18',
              'ExtUtils::Typemaps::Type'=> '3.18',
              'Fatal'                 => '2.13',
              'File::Find'            => '1.23',
              'Hash::Util'            => '0.13',
              'IO::Compress::Adapter::Bzip2'=> '2.058',
              'IO::Compress::Adapter::Deflate'=> '2.058',
              'IO::Compress::Adapter::Identity'=> '2.058',
              'IO::Compress::Base'    => '2.058',
              'IO::Compress::Base::Common'=> '2.058',
              'IO::Compress::Bzip2'   => '2.058',
              'IO::Compress::Deflate' => '2.058',
              'IO::Compress::Gzip'    => '2.058',
              'IO::Compress::Gzip::Constants'=> '2.058',
              'IO::Compress::RawDeflate'=> '2.058',
              'IO::Compress::Zip'     => '2.058',
              'IO::Compress::Zip::Constants'=> '2.058',
              'IO::Compress::Zlib::Constants'=> '2.058',
              'IO::Compress::Zlib::Extra'=> '2.058',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.058',
              'IO::Uncompress::Adapter::Identity'=> '2.058',
              'IO::Uncompress::Adapter::Inflate'=> '2.058',
              'IO::Uncompress::AnyInflate'=> '2.058',
              'IO::Uncompress::AnyUncompress'=> '2.058',
              'IO::Uncompress::Base'  => '2.058',
              'IO::Uncompress::Bunzip2'=> '2.058',
              'IO::Uncompress::Gunzip'=> '2.058',
              'IO::Uncompress::Inflate'=> '2.058',
              'IO::Uncompress::RawInflate'=> '2.058',
              'IO::Uncompress::Unzip' => '2.058',
              'Module::CoreList'      => '2.78',
              'Module::CoreList::TieHashDelta'=> '2.77',
              'Module::Pluggable'     => '4.5',
              'Module::Pluggable::Object'=> '4.5',
              'Opcode'                => '1.25',
              'Sys::Hostname'         => '1.17',
              'Term::UI'              => '0.32',
              'Thread::Queue'         => '3.01',
              'Tie::Hash::NamedCapture'=> '0.09',
              'Unicode::Collate'      => '0.93',
              'Unicode::Collate::CJK::Korean'=> '0.93',
              'Unicode::Collate::Locale'=> '0.93',
              'Unicode::Normalize'    => '1.16',
              'Unicode::UCD'          => '0.47',
              'XS::APItest'           => '0.46',
              '_charnames'            => '1.33',
              'autodie'               => '2.13',
              'autodie::exception'    => '2.13',
              'autodie::exception::system'=> '2.13',
              'autodie::hints'        => '2.13',
              'charnames'             => '1.33',
              're'                    => '0.23',
          },
          removed => {
          }
      },
      5.017007 => {
          delta_from => 5.017006,
          changed => {
              'B'                     => '1.41',
              'CPANPLUS::Dist::Build' => '0.68',
              'CPANPLUS::Dist::Build::Constants'=> '0.68',
              'Compress::Raw::Bzip2'  => '2.059',
              'Compress::Raw::Zlib'   => '2.059',
              'Compress::Zlib'        => '2.059',
              'Cwd'                   => '3.39_03',
              'Data::Dumper'          => '2.139',
              'Devel::Peek'           => '1.11',
              'Digest::SHA'           => '5.80',
              'DynaLoader'            => '1.18',
              'English'               => '1.06',
              'Errno'                 => '1.18',
              'ExtUtils::Command::MM' => '6.64',
              'ExtUtils::Liblist'     => '6.64',
              'ExtUtils::Liblist::Kid'=> '6.64',
              'ExtUtils::MM'          => '6.64',
              'ExtUtils::MM_AIX'      => '6.64',
              'ExtUtils::MM_Any'      => '6.64',
              'ExtUtils::MM_BeOS'     => '6.64',
              'ExtUtils::MM_Cygwin'   => '6.64',
              'ExtUtils::MM_DOS'      => '6.64',
              'ExtUtils::MM_Darwin'   => '6.64',
              'ExtUtils::MM_MacOS'    => '6.64',
              'ExtUtils::MM_NW5'      => '6.64',
              'ExtUtils::MM_OS2'      => '6.64',
              'ExtUtils::MM_QNX'      => '6.64',
              'ExtUtils::MM_UWIN'     => '6.64',
              'ExtUtils::MM_Unix'     => '6.64',
              'ExtUtils::MM_VMS'      => '6.64',
              'ExtUtils::MM_VOS'      => '6.64',
              'ExtUtils::MM_Win32'    => '6.64',
              'ExtUtils::MM_Win95'    => '6.64',
              'ExtUtils::MY'          => '6.64',
              'ExtUtils::MakeMaker'   => '6.64',
              'ExtUtils::MakeMaker::Config'=> '6.64',
              'ExtUtils::Mkbootstrap' => '6.64',
              'ExtUtils::Mksymlists'  => '6.64',
              'ExtUtils::testlib'     => '6.64',
              'File::DosGlob'         => '1.09',
              'File::Glob'            => '1.19',
              'GDBM_File'             => '1.15',
              'IO::Compress::Adapter::Bzip2'=> '2.059',
              'IO::Compress::Adapter::Deflate'=> '2.059',
              'IO::Compress::Adapter::Identity'=> '2.059',
              'IO::Compress::Base'    => '2.059',
              'IO::Compress::Base::Common'=> '2.059',
              'IO::Compress::Bzip2'   => '2.059',
              'IO::Compress::Deflate' => '2.059',
              'IO::Compress::Gzip'    => '2.059',
              'IO::Compress::Gzip::Constants'=> '2.059',
              'IO::Compress::RawDeflate'=> '2.059',
              'IO::Compress::Zip'     => '2.059',
              'IO::Compress::Zip::Constants'=> '2.059',
              'IO::Compress::Zlib::Constants'=> '2.059',
              'IO::Compress::Zlib::Extra'=> '2.059',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.059',
              'IO::Uncompress::Adapter::Identity'=> '2.059',
              'IO::Uncompress::Adapter::Inflate'=> '2.059',
              'IO::Uncompress::AnyInflate'=> '2.059',
              'IO::Uncompress::AnyUncompress'=> '2.059',
              'IO::Uncompress::Base'  => '2.059',
              'IO::Uncompress::Bunzip2'=> '2.059',
              'IO::Uncompress::Gunzip'=> '2.059',
              'IO::Uncompress::Inflate'=> '2.059',
              'IO::Uncompress::RawInflate'=> '2.059',
              'IO::Uncompress::Unzip' => '2.059',
              'List::Util'            => '1.26',
              'List::Util::XS'        => '1.26',
              'Locale::Codes'         => '3.24',
              'Locale::Codes::Constants'=> '3.24',
              'Locale::Codes::Country'=> '3.24',
              'Locale::Codes::Country_Codes'=> '3.24',
              'Locale::Codes::Country_Retired'=> '3.24',
              'Locale::Codes::Currency'=> '3.24',
              'Locale::Codes::Currency_Codes'=> '3.24',
              'Locale::Codes::Currency_Retired'=> '3.24',
              'Locale::Codes::LangExt'=> '3.24',
              'Locale::Codes::LangExt_Codes'=> '3.24',
              'Locale::Codes::LangExt_Retired'=> '3.24',
              'Locale::Codes::LangFam'=> '3.24',
              'Locale::Codes::LangFam_Codes'=> '3.24',
              'Locale::Codes::LangFam_Retired'=> '3.24',
              'Locale::Codes::LangVar'=> '3.24',
              'Locale::Codes::LangVar_Codes'=> '3.24',
              'Locale::Codes::LangVar_Retired'=> '3.24',
              'Locale::Codes::Language'=> '3.24',
              'Locale::Codes::Language_Codes'=> '3.24',
              'Locale::Codes::Language_Retired'=> '3.24',
              'Locale::Codes::Script' => '3.24',
              'Locale::Codes::Script_Codes'=> '3.24',
              'Locale::Codes::Script_Retired'=> '3.24',
              'Locale::Country'       => '3.24',
              'Locale::Currency'      => '3.24',
              'Locale::Language'      => '3.24',
              'Locale::Maketext'      => '1.23',
              'Locale::Script'        => '3.24',
              'Module::CoreList'      => '2.79',
              'Module::CoreList::TieHashDelta'=> '2.79',
              'POSIX'                 => '1.32',
              'Scalar::Util'          => '1.26',
              'Socket'                => '2.006_001',
              'Storable'              => '2.40',
              'Term::ReadLine'        => '1.11',
              'Unicode::Collate'      => '0.96',
              'Unicode::Collate::CJK::Stroke'=> '0.94',
              'Unicode::Collate::CJK::Zhuyin'=> '0.94',
              'Unicode::Collate::Locale'=> '0.96',
              'XS::APItest'           => '0.48',
              'XS::Typemap'           => '0.09',
              '_charnames'            => '1.34',
              'charnames'             => '1.34',
              'feature'               => '1.32',
              'mro'                   => '1.10',
              'sigtrap'               => '1.07',
              'sort'                  => '2.02',
          },
          removed => {
          }
      },
      5.017008 => {
          delta_from => 5.017007,
          changed => {
              'Archive::Extract'      => '0.62',
              'B'                     => '1.42',
              'B::Concise'            => '0.95',
              'Compress::Raw::Bzip2'  => '2.060',
              'Compress::Raw::Zlib'   => '2.060',
              'Compress::Zlib'        => '2.060',
              'Cwd'                   => '3.40',
              'Data::Dumper'          => '2.141',
              'Digest::SHA'           => '5.81',
              'ExtUtils::Install'     => '1.59',
              'File::Fetch'           => '0.38',
              'File::Path'            => '2.09',
              'File::Spec'            => '3.40',
              'File::Spec::Cygwin'    => '3.40',
              'File::Spec::Epoc'      => '3.40',
              'File::Spec::Functions' => '3.40',
              'File::Spec::Mac'       => '3.40',
              'File::Spec::OS2'       => '3.40',
              'File::Spec::Unix'      => '3.40',
              'File::Spec::VMS'       => '3.40',
              'File::Spec::Win32'     => '3.40',
              'HTTP::Tiny'            => '0.025',
              'Hash::Util'            => '0.14',
              'I18N::LangTags'        => '0.39',
              'I18N::LangTags::List'  => '0.39',
              'I18N::Langinfo'        => '0.09',
              'IO'                    => '1.26',
              'IO::Compress::Adapter::Bzip2'=> '2.060',
              'IO::Compress::Adapter::Deflate'=> '2.060',
              'IO::Compress::Adapter::Identity'=> '2.060',
              'IO::Compress::Base'    => '2.060',
              'IO::Compress::Base::Common'=> '2.060',
              'IO::Compress::Bzip2'   => '2.060',
              'IO::Compress::Deflate' => '2.060',
              'IO::Compress::Gzip'    => '2.060',
              'IO::Compress::Gzip::Constants'=> '2.060',
              'IO::Compress::RawDeflate'=> '2.060',
              'IO::Compress::Zip'     => '2.060',
              'IO::Compress::Zip::Constants'=> '2.060',
              'IO::Compress::Zlib::Constants'=> '2.060',
              'IO::Compress::Zlib::Extra'=> '2.060',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.060',
              'IO::Uncompress::Adapter::Identity'=> '2.060',
              'IO::Uncompress::Adapter::Inflate'=> '2.060',
              'IO::Uncompress::AnyInflate'=> '2.060',
              'IO::Uncompress::AnyUncompress'=> '2.060',
              'IO::Uncompress::Base'  => '2.060',
              'IO::Uncompress::Bunzip2'=> '2.060',
              'IO::Uncompress::Gunzip'=> '2.060',
              'IO::Uncompress::Inflate'=> '2.060',
              'IO::Uncompress::RawInflate'=> '2.060',
              'IO::Uncompress::Unzip' => '2.060',
              'List::Util'            => '1.27',
              'List::Util::XS'        => '1.27',
              'Module::CoreList'      => '2.80',
              'Module::CoreList::TieHashDelta'=> '2.80',
              'Pod::Html'             => '1.17',
              'Pod::LaTeX'            => '0.61',
              'Pod::Man'              => '2.27',
              'Pod::Text'             => '3.17',
              'Pod::Text::Color'      => '2.07',
              'Pod::Text::Overstrike' => '2.05',
              'Pod::Text::Termcap'    => '2.07',
              'Safe'                  => '2.34',
              'Scalar::Util'          => '1.27',
              'Socket'                => '2.009',
              'Term::ANSIColor'       => '4.02',
              'Test'                  => '1.26',
              'Unicode::Collate'      => '0.97',
              'XS::APItest'           => '0.51',
              'XS::Typemap'           => '0.10',
              '_charnames'            => '1.35',
              'charnames'             => '1.35',
              'constant'              => '1.25',
              'diagnostics'           => '1.31',
              'threads::shared'       => '1.43',
              'warnings'              => '1.16',
          },
          removed => {
          }
      },
      5.017009 => {
          delta_from => 5.017008,
          changed => {
              'App::Cpan'             => '1.60_02',
              'App::Prove'            => '3.26',
              'App::Prove::State'     => '3.26',
              'App::Prove::State::Result'=> '3.26',
              'App::Prove::State::Result::Test'=> '3.26',
              'Archive::Extract'      => '0.68',
              'Attribute::Handlers'   => '0.94',
              'B::Lint'               => '1.17',
              'B::Lint::Debug'        => '1.17',
              'Benchmark'             => '1.14',
              'CPAN'                  => '2.00',
              'CPAN::Distribution'    => '2.00',
              'CPAN::FirstTime'       => '5.5304',
              'CPAN::Nox'             => '5.5001',
              'CPANPLUS'              => '0.9135',
              'CPANPLUS::Backend'     => '0.9135',
              'CPANPLUS::Backend::RV' => '0.9135',
              'CPANPLUS::Config'      => '0.9135',
              'CPANPLUS::Config::HomeEnv'=> '0.9135',
              'CPANPLUS::Configure'   => '0.9135',
              'CPANPLUS::Configure::Setup'=> '0.9135',
              'CPANPLUS::Dist'        => '0.9135',
              'CPANPLUS::Dist::Autobundle'=> '0.9135',
              'CPANPLUS::Dist::Base'  => '0.9135',
              'CPANPLUS::Dist::Build' => '0.70',
              'CPANPLUS::Dist::Build::Constants'=> '0.70',
              'CPANPLUS::Dist::MM'    => '0.9135',
              'CPANPLUS::Dist::Sample'=> '0.9135',
              'CPANPLUS::Error'       => '0.9135',
              'CPANPLUS::Internals'   => '0.9135',
              'CPANPLUS::Internals::Constants'=> '0.9135',
              'CPANPLUS::Internals::Constants::Report'=> '0.9135',
              'CPANPLUS::Internals::Extract'=> '0.9135',
              'CPANPLUS::Internals::Fetch'=> '0.9135',
              'CPANPLUS::Internals::Report'=> '0.9135',
              'CPANPLUS::Internals::Search'=> '0.9135',
              'CPANPLUS::Internals::Source'=> '0.9135',
              'CPANPLUS::Internals::Source::Memory'=> '0.9135',
              'CPANPLUS::Internals::Source::SQLite'=> '0.9135',
              'CPANPLUS::Internals::Source::SQLite::Tie'=> '0.9135',
              'CPANPLUS::Internals::Utils'=> '0.9135',
              'CPANPLUS::Internals::Utils::Autoflush'=> '0.9135',
              'CPANPLUS::Module'      => '0.9135',
              'CPANPLUS::Module::Author'=> '0.9135',
              'CPANPLUS::Module::Author::Fake'=> '0.9135',
              'CPANPLUS::Module::Checksums'=> '0.9135',
              'CPANPLUS::Module::Fake'=> '0.9135',
              'CPANPLUS::Module::Signature'=> '0.9135',
              'CPANPLUS::Selfupdate'  => '0.9135',
              'CPANPLUS::Shell'       => '0.9135',
              'CPANPLUS::Shell::Classic'=> '0.9135',
              'CPANPLUS::Shell::Default'=> '0.9135',
              'CPANPLUS::Shell::Default::Plugins::CustomSource'=> '0.9135',
              'CPANPLUS::Shell::Default::Plugins::Remote'=> '0.9135',
              'CPANPLUS::Shell::Default::Plugins::Source'=> '0.9135',
              'Config'                => '5.017009',
              'Config::Perl::V'       => '0.17',
              'DBM_Filter'            => '0.05',
              'Data::Dumper'          => '2.142',
              'Digest::SHA'           => '5.82',
              'Encode'                => '2.48',
              'ExtUtils::Installed'   => '1.999003',
              'ExtUtils::Manifest'    => '1.63',
              'ExtUtils::ParseXS::Utilities'=> '3.19',
              'ExtUtils::Typemaps'    => '3.19',
              'File::CheckTree'       => '4.42',
              'File::DosGlob'         => '1.10',
              'File::Temp'            => '0.22_90',
              'Filter::Simple'        => '0.89',
              'IO'                    => '1.27',
              'Log::Message'          => '0.06',
              'Log::Message::Config'  => '0.06',
              'Log::Message::Handlers'=> '0.06',
              'Log::Message::Item'    => '0.06',
              'Log::Message::Simple'  => '0.10',
              'Math::BigInt'          => '1.999',
              'Module::CoreList'      => '2.82',
              'Module::CoreList::TieHashDelta'=> '2.82',
              'Module::Load'          => '0.24',
              'Module::Pluggable'     => '4.6',
              'Module::Pluggable::Object'=> '4.6',
              'OS2::DLL'              => '1.05',
              'OS2::ExtAttr'          => '0.03',
              'OS2::Process'          => '1.08',
              'Object::Accessor'      => '0.46',
              'PerlIO::scalar'        => '0.16',
              'Pod::Checker'          => '1.60',
              'Pod::Find'             => '1.60',
              'Pod::Html'             => '1.18',
              'Pod::InputObjects'     => '1.60',
              'Pod::ParseUtils'       => '1.60',
              'Pod::Parser'           => '1.60',
              'Pod::Perldoc'          => '3.19',
              'Pod::Perldoc::BaseTo'  => '3.19',
              'Pod::Perldoc::GetOptsOO'=> '3.19',
              'Pod::Perldoc::ToANSI'  => '3.19',
              'Pod::Perldoc::ToChecker'=> '3.19',
              'Pod::Perldoc::ToMan'   => '3.19',
              'Pod::Perldoc::ToNroff' => '3.19',
              'Pod::Perldoc::ToPod'   => '3.19',
              'Pod::Perldoc::ToRtf'   => '3.19',
              'Pod::Perldoc::ToTerm'  => '3.19',
              'Pod::Perldoc::ToText'  => '3.19',
              'Pod::Perldoc::ToTk'    => '3.19',
              'Pod::Perldoc::ToXml'   => '3.19',
              'Pod::PlainText'        => '2.06',
              'Pod::Select'           => '1.60',
              'Pod::Usage'            => '1.61',
              'SelfLoader'            => '1.21',
              'TAP::Base'             => '3.26',
              'TAP::Formatter::Base'  => '3.26',
              'TAP::Formatter::Color' => '3.26',
              'TAP::Formatter::Console'=> '3.26',
              'TAP::Formatter::Console::ParallelSession'=> '3.26',
              'TAP::Formatter::Console::Session'=> '3.26',
              'TAP::Formatter::File'  => '3.26',
              'TAP::Formatter::File::Session'=> '3.26',
              'TAP::Formatter::Session'=> '3.26',
              'TAP::Harness'          => '3.26',
              'TAP::Object'           => '3.26',
              'TAP::Parser'           => '3.26',
              'TAP::Parser::Aggregator'=> '3.26',
              'TAP::Parser::Grammar'  => '3.26',
              'TAP::Parser::Iterator' => '3.26',
              'TAP::Parser::Iterator::Array'=> '3.26',
              'TAP::Parser::Iterator::Process'=> '3.26',
              'TAP::Parser::Iterator::Stream'=> '3.26',
              'TAP::Parser::IteratorFactory'=> '3.26',
              'TAP::Parser::Multiplexer'=> '3.26',
              'TAP::Parser::Result'   => '3.26',
              'TAP::Parser::Result::Bailout'=> '3.26',
              'TAP::Parser::Result::Comment'=> '3.26',
              'TAP::Parser::Result::Plan'=> '3.26',
              'TAP::Parser::Result::Pragma'=> '3.26',
              'TAP::Parser::Result::Test'=> '3.26',
              'TAP::Parser::Result::Unknown'=> '3.26',
              'TAP::Parser::Result::Version'=> '3.26',
              'TAP::Parser::Result::YAML'=> '3.26',
              'TAP::Parser::ResultFactory'=> '3.26',
              'TAP::Parser::Scheduler'=> '3.26',
              'TAP::Parser::Scheduler::Job'=> '3.26',
              'TAP::Parser::Scheduler::Spinner'=> '3.26',
              'TAP::Parser::Source'   => '3.26',
              'TAP::Parser::SourceHandler'=> '3.26',
              'TAP::Parser::SourceHandler::Executable'=> '3.26',
              'TAP::Parser::SourceHandler::File'=> '3.26',
              'TAP::Parser::SourceHandler::Handle'=> '3.26',
              'TAP::Parser::SourceHandler::Perl'=> '3.26',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.26',
              'TAP::Parser::Utils'    => '3.26',
              'TAP::Parser::YAMLish::Reader'=> '3.26',
              'TAP::Parser::YAMLish::Writer'=> '3.26',
              'Term::UI'              => '0.34',
              'Test::Harness'         => '3.26',
              'Text::Soundex'         => '3.04',
              'Thread::Queue'         => '3.02',
              'Unicode::UCD'          => '0.50',
              'Win32'                 => '0.46',
              'Win32API::File'        => '0.1201',
              '_charnames'            => '1.36',
              'arybase'               => '0.06',
              'bigint'                => '0.32',
              'bignum'                => '0.32',
              'charnames'             => '1.36',
              'filetest'              => '1.03',
              'locale'                => '1.02',
              'overload'              => '1.21',
              'warnings'              => '1.17',
          },
          removed => {
          }
      },
      5.017010 => {
          delta_from => 5.017009,
          changed => {
              'Benchmark'             => '1.15',
              'Config'                => '5.017009',
              'Data::Dumper'          => '2.145',
              'Digest::SHA'           => '5.84',
              'Encode'                => '2.49',
              'ExtUtils::Command::MM' => '6.65_01',
              'ExtUtils::Liblist'     => '6.65_01',
              'ExtUtils::Liblist::Kid'=> '6.65_01',
              'ExtUtils::MM'          => '6.65_01',
              'ExtUtils::MM_AIX'      => '6.65_01',
              'ExtUtils::MM_Any'      => '6.65_01',
              'ExtUtils::MM_BeOS'     => '6.65_01',
              'ExtUtils::MM_Cygwin'   => '6.65_01',
              'ExtUtils::MM_DOS'      => '6.65_01',
              'ExtUtils::MM_Darwin'   => '6.65_01',
              'ExtUtils::MM_MacOS'    => '6.65_01',
              'ExtUtils::MM_NW5'      => '6.65_01',
              'ExtUtils::MM_OS2'      => '6.65_01',
              'ExtUtils::MM_QNX'      => '6.65_01',
              'ExtUtils::MM_UWIN'     => '6.65_01',
              'ExtUtils::MM_Unix'     => '6.65_01',
              'ExtUtils::MM_VMS'      => '6.65_01',
              'ExtUtils::MM_VOS'      => '6.65_01',
              'ExtUtils::MM_Win32'    => '6.65_01',
              'ExtUtils::MM_Win95'    => '6.65_01',
              'ExtUtils::MY'          => '6.65_01',
              'ExtUtils::MakeMaker'   => '6.65_01',
              'ExtUtils::MakeMaker::Config'=> '6.65_01',
              'ExtUtils::Mkbootstrap' => '6.65_01',
              'ExtUtils::Mksymlists'  => '6.65_01',
              'ExtUtils::testlib'     => '6.65_01',
              'File::Copy'            => '2.26',
              'File::Temp'            => '0.23',
              'Getopt::Long'          => '2.39',
              'Hash::Util'            => '0.15',
              'I18N::Langinfo'        => '0.10',
              'IPC::Cmd'              => '0.80',
              'JSON::PP'              => '2.27202',
              'Locale::Codes'         => '3.25',
              'Locale::Codes::Constants'=> '3.25',
              'Locale::Codes::Country'=> '3.25',
              'Locale::Codes::Country_Codes'=> '3.25',
              'Locale::Codes::Country_Retired'=> '3.25',
              'Locale::Codes::Currency'=> '3.25',
              'Locale::Codes::Currency_Codes'=> '3.25',
              'Locale::Codes::Currency_Retired'=> '3.25',
              'Locale::Codes::LangExt'=> '3.25',
              'Locale::Codes::LangExt_Codes'=> '3.25',
              'Locale::Codes::LangExt_Retired'=> '3.25',
              'Locale::Codes::LangFam'=> '3.25',
              'Locale::Codes::LangFam_Codes'=> '3.25',
              'Locale::Codes::LangFam_Retired'=> '3.25',
              'Locale::Codes::LangVar'=> '3.25',
              'Locale::Codes::LangVar_Codes'=> '3.25',
              'Locale::Codes::LangVar_Retired'=> '3.25',
              'Locale::Codes::Language'=> '3.25',
              'Locale::Codes::Language_Codes'=> '3.25',
              'Locale::Codes::Language_Retired'=> '3.25',
              'Locale::Codes::Script' => '3.25',
              'Locale::Codes::Script_Codes'=> '3.25',
              'Locale::Codes::Script_Retired'=> '3.25',
              'Locale::Country'       => '3.25',
              'Locale::Currency'      => '3.25',
              'Locale::Language'      => '3.25',
              'Locale::Script'        => '3.25',
              'Math::BigFloat'        => '1.998',
              'Math::BigFloat::Trace' => '0.32',
              'Math::BigInt'          => '1.9991',
              'Math::BigInt::CalcEmu' => '1.998',
              'Math::BigInt::Trace'   => '0.32',
              'Math::BigRat'          => '0.2604',
              'Module::CoreList'      => '2.84',
              'Module::CoreList::TieHashDelta'=> '2.84',
              'Module::Pluggable'     => '4.7',
              'Net::Ping'             => '2.41',
              'Perl::OSType'          => '1.003',
              'Pod::Simple'           => '3.26',
              'Pod::Simple::BlackBox' => '3.26',
              'Pod::Simple::Checker'  => '3.26',
              'Pod::Simple::Debug'    => '3.26',
              'Pod::Simple::DumpAsText'=> '3.26',
              'Pod::Simple::DumpAsXML'=> '3.26',
              'Pod::Simple::HTML'     => '3.26',
              'Pod::Simple::HTMLBatch'=> '3.26',
              'Pod::Simple::LinkSection'=> '3.26',
              'Pod::Simple::Methody'  => '3.26',
              'Pod::Simple::Progress' => '3.26',
              'Pod::Simple::PullParser'=> '3.26',
              'Pod::Simple::PullParserEndToken'=> '3.26',
              'Pod::Simple::PullParserStartToken'=> '3.26',
              'Pod::Simple::PullParserTextToken'=> '3.26',
              'Pod::Simple::PullParserToken'=> '3.26',
              'Pod::Simple::RTF'      => '3.26',
              'Pod::Simple::Search'   => '3.26',
              'Pod::Simple::SimpleTree'=> '3.26',
              'Pod::Simple::Text'     => '3.26',
              'Pod::Simple::TextContent'=> '3.26',
              'Pod::Simple::TiedOutFH'=> '3.26',
              'Pod::Simple::Transcode'=> '3.26',
              'Pod::Simple::TranscodeDumb'=> '3.26',
              'Pod::Simple::TranscodeSmart'=> '3.26',
              'Pod::Simple::XHTML'    => '3.26',
              'Pod::Simple::XMLOutStream'=> '3.26',
              'Safe'                  => '2.35',
              'Term::ReadLine'        => '1.12',
              'Text::ParseWords'      => '3.28',
              'Tie::File'             => '0.99',
              'Unicode::UCD'          => '0.51',
              'Win32'                 => '0.47',
              'bigint'                => '0.33',
              'bignum'                => '0.33',
              'bigrat'                => '0.33',
              'constant'              => '1.27',
              'perlfaq'               => '5.0150042',
              'version'               => '0.9902',
          },
          removed => {
          }
      },
      5.017011 => {
          delta_from => 5.017010,
          changed => {
              'App::Cpan'             => '1.61',
              'B::Deparse'            => '1.20',
              'Config'                => '5.017009',
              'Exporter'              => '5.68',
              'Exporter::Heavy'       => '5.68',
              'ExtUtils::CBuilder'    => '0.280210',
              'ExtUtils::Command::MM' => '6.66',
              'ExtUtils::Liblist'     => '6.66',
              'ExtUtils::Liblist::Kid'=> '6.66',
              'ExtUtils::MM'          => '6.66',
              'ExtUtils::MM_AIX'      => '6.66',
              'ExtUtils::MM_Any'      => '6.66',
              'ExtUtils::MM_BeOS'     => '6.66',
              'ExtUtils::MM_Cygwin'   => '6.66',
              'ExtUtils::MM_DOS'      => '6.66',
              'ExtUtils::MM_Darwin'   => '6.66',
              'ExtUtils::MM_MacOS'    => '6.66',
              'ExtUtils::MM_NW5'      => '6.66',
              'ExtUtils::MM_OS2'      => '6.66',
              'ExtUtils::MM_QNX'      => '6.66',
              'ExtUtils::MM_UWIN'     => '6.66',
              'ExtUtils::MM_Unix'     => '6.66',
              'ExtUtils::MM_VMS'      => '6.66',
              'ExtUtils::MM_VOS'      => '6.66',
              'ExtUtils::MM_Win32'    => '6.66',
              'ExtUtils::MM_Win95'    => '6.66',
              'ExtUtils::MY'          => '6.66',
              'ExtUtils::MakeMaker'   => '6.66',
              'ExtUtils::MakeMaker::Config'=> '6.66',
              'ExtUtils::Mkbootstrap' => '6.66',
              'ExtUtils::Mksymlists'  => '6.66',
              'ExtUtils::testlib'     => '6.66',
              'File::Glob'            => '1.20',
              'IO'                    => '1.28',
              'Module::CoreList'      => '2.87',
              'Module::CoreList::TieHashDelta'=> '2.87',
              'Storable'              => '2.41',
              'bigint'                => '0.34',
              'mro'                   => '1.11',
              'overload'              => '1.22',
              'warnings'              => '1.18',
          },
          removed => {
          }
      },
      5.018000 => {
          delta_from => 5.017011,
          changed => {
              'Carp'                  => '1.29',
              'Carp::Heavy'           => '1.29',
              'Config'                => '5.018000',
              'Hash::Util'            => '0.16',
              'IO::Handle'            => '1.34',
              'IO::Socket'            => '1.36',
              'Module::CoreList'      => '2.89',
              'Module::CoreList::TieHashDelta'=> '2.89',
              'Pod::Simple'           => '3.28',
              'Pod::Simple::BlackBox' => '3.28',
              'Pod::Simple::Checker'  => '3.28',
              'Pod::Simple::Debug'    => '3.28',
              'Pod::Simple::DumpAsText'=> '3.28',
              'Pod::Simple::DumpAsXML'=> '3.28',
              'Pod::Simple::HTML'     => '3.28',
              'Pod::Simple::HTMLBatch'=> '3.28',
              'Pod::Simple::LinkSection'=> '3.28',
              'Pod::Simple::Methody'  => '3.28',
              'Pod::Simple::Progress' => '3.28',
              'Pod::Simple::PullParser'=> '3.28',
              'Pod::Simple::PullParserEndToken'=> '3.28',
              'Pod::Simple::PullParserStartToken'=> '3.28',
              'Pod::Simple::PullParserTextToken'=> '3.28',
              'Pod::Simple::PullParserToken'=> '3.28',
              'Pod::Simple::RTF'      => '3.28',
              'Pod::Simple::Search'   => '3.28',
              'Pod::Simple::SimpleTree'=> '3.28',
              'Pod::Simple::Text'     => '3.28',
              'Pod::Simple::TextContent'=> '3.28',
              'Pod::Simple::TiedOutFH'=> '3.28',
              'Pod::Simple::Transcode'=> '3.28',
              'Pod::Simple::TranscodeDumb'=> '3.28',
              'Pod::Simple::TranscodeSmart'=> '3.28',
              'Pod::Simple::XHTML'    => '3.28',
              'Pod::Simple::XMLOutStream'=> '3.28',
          },
          removed => {
          }
      },
      5.018001 => {
          delta_from => 5.018000,
          changed => {
              'B'                     => '1.42_01',
              'Config'                => '5.018001',
              'Digest::SHA'           => '5.84_01',
              'Module::CoreList'      => '2.96',
              'Module::CoreList::TieHashDelta'=> '2.96',
              'Module::CoreList::Utils'=> '2.96',
          },
          removed => {
             'VMS::Filespec'         => 1,
          }
      },
      5.018002 => {
          delta_from => 5.018001,
          changed => {
              'B'                     => '1.42_02',
              'B::Concise'            => '0.95_01',
              'Config'                => '5.018002',
              'File::Glob'            => '1.20_01',
              'Module::CoreList'      => '3.03',
              'Module::CoreList::TieHashDelta'=> '3.03',
              'Module::CoreList::Utils'=> '3.03',
          },
      },
      5.018003 => {
          delta_from => 5.018002,
          changed => {
              'Config'                => '5.018003',
              'Digest::SHA'           => '5.84_02',
              'Module::CoreList'      => '3.12',
              'Module::CoreList::TieHashDelta'=> '3.12',
              'Module::CoreList::Utils'=> '3.12',
          },
      },
      5.018004 => {
          delta_from => 5.018003,
          changed => {
              'Config'                => '5.018004',
              'Module::CoreList'      => '3.13',
              'Module::CoreList::TieHashDelta'=> '3.13',
              'Module::CoreList::Utils'=> '3.13',
          },
      },
      5.019000 => {
          delta_from => 5.018000,
          changed => {
              'Config'                => '5.019000',
              'Getopt::Std'           => '1.08',
              'Module::CoreList'      => '2.91',
              'Module::CoreList::TieHashDelta'=> '2.91',
              'Storable'              => '2.42',
              'feature'               => '1.33',
              'utf8'                  => '1.11',
          },
          removed => {
             'Archive::Extract'      => 1,
             'B::Lint'               => 1,
             'B::Lint::Debug'        => 1,
             'CPANPLUS'              => 1,
             'CPANPLUS::Backend'     => 1,
             'CPANPLUS::Backend::RV' => 1,
             'CPANPLUS::Config'      => 1,
             'CPANPLUS::Config::HomeEnv'=> 1,
             'CPANPLUS::Configure'   => 1,
             'CPANPLUS::Configure::Setup'=> 1,
             'CPANPLUS::Dist'        => 1,
             'CPANPLUS::Dist::Autobundle'=> 1,
             'CPANPLUS::Dist::Base'  => 1,
             'CPANPLUS::Dist::Build' => 1,
             'CPANPLUS::Dist::Build::Constants'=> 1,
             'CPANPLUS::Dist::MM'    => 1,
             'CPANPLUS::Dist::Sample'=> 1,
             'CPANPLUS::Error'       => 1,
             'CPANPLUS::Internals'   => 1,
             'CPANPLUS::Internals::Constants'=> 1,
             'CPANPLUS::Internals::Constants::Report'=> 1,
             'CPANPLUS::Internals::Extract'=> 1,
             'CPANPLUS::Internals::Fetch'=> 1,
             'CPANPLUS::Internals::Report'=> 1,
             'CPANPLUS::Internals::Search'=> 1,
             'CPANPLUS::Internals::Source'=> 1,
             'CPANPLUS::Internals::Source::Memory'=> 1,
             'CPANPLUS::Internals::Source::SQLite'=> 1,
             'CPANPLUS::Internals::Source::SQLite::Tie'=> 1,
             'CPANPLUS::Internals::Utils'=> 1,
             'CPANPLUS::Internals::Utils::Autoflush'=> 1,
             'CPANPLUS::Module'      => 1,
             'CPANPLUS::Module::Author'=> 1,
             'CPANPLUS::Module::Author::Fake'=> 1,
             'CPANPLUS::Module::Checksums'=> 1,
             'CPANPLUS::Module::Fake'=> 1,
             'CPANPLUS::Module::Signature'=> 1,
             'CPANPLUS::Selfupdate'  => 1,
             'CPANPLUS::Shell'       => 1,
             'CPANPLUS::Shell::Classic'=> 1,
             'CPANPLUS::Shell::Default'=> 1,
             'CPANPLUS::Shell::Default::Plugins::CustomSource'=> 1,
             'CPANPLUS::Shell::Default::Plugins::Remote'=> 1,
             'CPANPLUS::Shell::Default::Plugins::Source'=> 1,
             'Devel::InnerPackage'   => 1,
             'File::CheckTree'       => 1,
             'Log::Message'          => 1,
             'Log::Message::Config'  => 1,
             'Log::Message::Handlers'=> 1,
             'Log::Message::Item'    => 1,
             'Log::Message::Simple'  => 1,
             'Module::Pluggable'     => 1,
             'Module::Pluggable::Object'=> 1,
             'Object::Accessor'      => 1,
             'Pod::LaTeX'            => 1,
             'Term::UI'              => 1,
             'Term::UI::History'     => 1,
             'Text::Soundex'         => 1,
          }
      },
      5.019001 => {
          delta_from => 5.019000,
          changed => {
              'App::Prove'            => '3.28',
              'App::Prove::State'     => '3.28',
              'App::Prove::State::Result'=> '3.28',
              'App::Prove::State::Result::Test'=> '3.28',
              'Archive::Tar'          => '1.92',
              'Archive::Tar::Constant'=> '1.92',
              'Archive::Tar::File'    => '1.92',
              'Attribute::Handlers'   => '0.95',
              'B'                     => '1.43',
              'B::Concise'            => '0.96',
              'B::Deparse'            => '1.21',
              'B::Showlex'            => '1.04',
              'Benchmark'             => '1.16',
              'CPAN::Meta'            => '2.131560',
              'CPAN::Meta::Converter' => '2.131560',
              'CPAN::Meta::Feature'   => '2.131560',
              'CPAN::Meta::History'   => '2.131560',
              'CPAN::Meta::Prereqs'   => '2.131560',
              'CPAN::Meta::Spec'      => '2.131560',
              'CPAN::Meta::Validator' => '2.131560',
              'Carp'                  => '1.30',
              'Carp::Heavy'           => '1.30',
              'Compress::Raw::Bzip2'  => '2.061',
              'Compress::Raw::Zlib'   => '2.061',
              'Compress::Zlib'        => '2.061',
              'Config'                => '5.019001',
              'Config::Perl::V'       => '0.18',
              'Cwd'                   => '3.41',
              'DB'                    => '1.06',
              'DB_File'               => '1.828',
              'Data::Dumper'          => '2.146',
              'Encode'                => '2.51',
              'Encode::CN::HZ'        => '2.06',
              'Encode::GSM0338'       => '2.03',
              'Encode::Unicode::UTF7' => '2.07',
              'ExtUtils::CBuilder::Base'=> '0.280210',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280210',
              'ExtUtils::Command::MM' => '6.68',
              'ExtUtils::Install'     => '1.60',
              'ExtUtils::Liblist'     => '6.68',
              'ExtUtils::Liblist::Kid'=> '6.68',
              'ExtUtils::MM'          => '6.68',
              'ExtUtils::MM_AIX'      => '6.68',
              'ExtUtils::MM_Any'      => '6.68',
              'ExtUtils::MM_BeOS'     => '6.68',
              'ExtUtils::MM_Cygwin'   => '6.68',
              'ExtUtils::MM_DOS'      => '6.68',
              'ExtUtils::MM_Darwin'   => '6.68',
              'ExtUtils::MM_MacOS'    => '6.68',
              'ExtUtils::MM_NW5'      => '6.68',
              'ExtUtils::MM_OS2'      => '6.68',
              'ExtUtils::MM_QNX'      => '6.68',
              'ExtUtils::MM_UWIN'     => '6.68',
              'ExtUtils::MM_Unix'     => '6.68',
              'ExtUtils::MM_VMS'      => '6.68',
              'ExtUtils::MM_VOS'      => '6.68',
              'ExtUtils::MM_Win32'    => '6.68',
              'ExtUtils::MM_Win95'    => '6.68',
              'ExtUtils::MY'          => '6.68',
              'ExtUtils::MakeMaker'   => '6.68',
              'ExtUtils::MakeMaker::Config'=> '6.68',
              'ExtUtils::Mkbootstrap' => '6.68',
              'ExtUtils::Mksymlists'  => '6.68',
              'ExtUtils::ParseXS'     => '3.19',
              'ExtUtils::testlib'     => '6.68',
              'Fatal'                 => '2.19',
              'File::Copy'            => '2.27',
              'File::DosGlob'         => '1.11',
              'File::Fetch'           => '0.42',
              'File::Find'            => '1.24',
              'File::Spec'            => '3.41',
              'File::Spec::Cygwin'    => '3.41',
              'File::Spec::Epoc'      => '3.41',
              'File::Spec::Mac'       => '3.41',
              'File::Spec::OS2'       => '3.41',
              'File::Spec::Unix'      => '3.41',
              'File::Spec::VMS'       => '3.41',
              'File::Spec::Win32'     => '3.41',
              'File::Temp'            => '0.2301',
              'Filter::Simple'        => '0.90',
              'Filter::Util::Call'    => '1.49',
              'Getopt::Long'          => '2.4',
              'HTTP::Tiny'            => '0.031',
              'Hash::Util::FieldHash' => '1.11',
              'IO::Compress::Adapter::Bzip2'=> '2.061',
              'IO::Compress::Adapter::Deflate'=> '2.061',
              'IO::Compress::Adapter::Identity'=> '2.061',
              'IO::Compress::Base'    => '2.061',
              'IO::Compress::Base::Common'=> '2.061',
              'IO::Compress::Bzip2'   => '2.061',
              'IO::Compress::Deflate' => '2.061',
              'IO::Compress::Gzip'    => '2.061',
              'IO::Compress::Gzip::Constants'=> '2.061',
              'IO::Compress::RawDeflate'=> '2.061',
              'IO::Compress::Zip'     => '2.061',
              'IO::Compress::Zip::Constants'=> '2.061',
              'IO::Compress::Zlib::Constants'=> '2.061',
              'IO::Compress::Zlib::Extra'=> '2.061',
              'IO::Handle'            => '1.35',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.061',
              'IO::Uncompress::Adapter::Identity'=> '2.061',
              'IO::Uncompress::Adapter::Inflate'=> '2.061',
              'IO::Uncompress::AnyInflate'=> '2.061',
              'IO::Uncompress::AnyUncompress'=> '2.061',
              'IO::Uncompress::Base'  => '2.061',
              'IO::Uncompress::Bunzip2'=> '2.061',
              'IO::Uncompress::Gunzip'=> '2.061',
              'IO::Uncompress::Inflate'=> '2.061',
              'IO::Uncompress::RawInflate'=> '2.061',
              'IO::Uncompress::Unzip' => '2.061',
              'IPC::Open3'            => '1.14',
              'Locale::Codes'         => '3.26',
              'Locale::Codes::Constants'=> '3.26',
              'Locale::Codes::Country'=> '3.26',
              'Locale::Codes::Country_Codes'=> '3.26',
              'Locale::Codes::Country_Retired'=> '3.26',
              'Locale::Codes::Currency'=> '3.26',
              'Locale::Codes::Currency_Codes'=> '3.26',
              'Locale::Codes::Currency_Retired'=> '3.26',
              'Locale::Codes::LangExt'=> '3.26',
              'Locale::Codes::LangExt_Codes'=> '3.26',
              'Locale::Codes::LangExt_Retired'=> '3.26',
              'Locale::Codes::LangFam'=> '3.26',
              'Locale::Codes::LangFam_Codes'=> '3.26',
              'Locale::Codes::LangFam_Retired'=> '3.26',
              'Locale::Codes::LangVar'=> '3.26',
              'Locale::Codes::LangVar_Codes'=> '3.26',
              'Locale::Codes::LangVar_Retired'=> '3.26',
              'Locale::Codes::Language'=> '3.26',
              'Locale::Codes::Language_Codes'=> '3.26',
              'Locale::Codes::Language_Retired'=> '3.26',
              'Locale::Codes::Script' => '3.26',
              'Locale::Codes::Script_Codes'=> '3.26',
              'Locale::Codes::Script_Retired'=> '3.26',
              'Locale::Country'       => '3.26',
              'Locale::Currency'      => '3.26',
              'Locale::Language'      => '3.26',
              'Locale::Maketext'      => '1.24',
              'Locale::Script'        => '3.26',
              'Math::BigFloat'        => '1.999',
              'Math::BigInt'          => '1.9992',
              'Math::BigInt::Calc'    => '1.998',
              'Math::BigInt::CalcEmu' => '1.9991',
              'Math::BigRat'          => '0.2606',
              'Module::Build'         => '0.4005',
              'Module::Build::Base'   => '0.4005',
              'Module::Build::Compat' => '0.4005',
              'Module::Build::Config' => '0.4005',
              'Module::Build::Cookbook'=> '0.4005',
              'Module::Build::Dumper' => '0.4005',
              'Module::Build::ModuleInfo'=> '0.4005',
              'Module::Build::Notes'  => '0.4005',
              'Module::Build::PPMMaker'=> '0.4005',
              'Module::Build::Platform::Amiga'=> '0.4005',
              'Module::Build::Platform::Default'=> '0.4005',
              'Module::Build::Platform::EBCDIC'=> '0.4005',
              'Module::Build::Platform::MPEiX'=> '0.4005',
              'Module::Build::Platform::MacOS'=> '0.4005',
              'Module::Build::Platform::RiscOS'=> '0.4005',
              'Module::Build::Platform::Unix'=> '0.4005',
              'Module::Build::Platform::VMS'=> '0.4005',
              'Module::Build::Platform::VOS'=> '0.4005',
              'Module::Build::Platform::Windows'=> '0.4005',
              'Module::Build::Platform::aix'=> '0.4005',
              'Module::Build::Platform::cygwin'=> '0.4005',
              'Module::Build::Platform::darwin'=> '0.4005',
              'Module::Build::Platform::os2'=> '0.4005',
              'Module::Build::PodParser'=> '0.4005',
              'Module::CoreList'      => '2.92',
              'Module::CoreList::TieHashDelta'=> '2.92',
              'Module::CoreList::Utils'=> '2.92',
              'Module::Metadata'      => '1.000014',
              'Net::Ping'             => '2.42',
              'OS2::Process'          => '1.09',
              'POSIX'                 => '1.33',
              'Pod::Find'             => '1.61',
              'Pod::Html'             => '1.19',
              'Pod::InputObjects'     => '1.61',
              'Pod::ParseUtils'       => '1.61',
              'Pod::Parser'           => '1.61',
              'Pod::Perldoc'          => '3.20',
              'Pod::Perldoc::BaseTo'  => '3.20',
              'Pod::Perldoc::GetOptsOO'=> '3.20',
              'Pod::Perldoc::ToANSI'  => '3.20',
              'Pod::Perldoc::ToChecker'=> '3.20',
              'Pod::Perldoc::ToMan'   => '3.20',
              'Pod::Perldoc::ToNroff' => '3.20',
              'Pod::Perldoc::ToPod'   => '3.20',
              'Pod::Perldoc::ToRtf'   => '3.20',
              'Pod::Perldoc::ToTerm'  => '3.20',
              'Pod::Perldoc::ToText'  => '3.20',
              'Pod::Perldoc::ToTk'    => '3.20',
              'Pod::Perldoc::ToXml'   => '3.20',
              'Pod::Select'           => '1.61',
              'Pod::Usage'            => '1.63',
              'Safe'                  => '2.36',
              'Storable'              => '2.43',
              'Sys::Hostname'         => '1.18',
              'Sys::Syslog'           => '0.33',
              'TAP::Base'             => '3.28',
              'TAP::Formatter::Base'  => '3.28',
              'TAP::Formatter::Color' => '3.28',
              'TAP::Formatter::Console'=> '3.28',
              'TAP::Formatter::Console::ParallelSession'=> '3.28',
              'TAP::Formatter::Console::Session'=> '3.28',
              'TAP::Formatter::File'  => '3.28',
              'TAP::Formatter::File::Session'=> '3.28',
              'TAP::Formatter::Session'=> '3.28',
              'TAP::Harness'          => '3.28',
              'TAP::Object'           => '3.28',
              'TAP::Parser'           => '3.28',
              'TAP::Parser::Aggregator'=> '3.28',
              'TAP::Parser::Grammar'  => '3.28',
              'TAP::Parser::Iterator' => '3.28',
              'TAP::Parser::Iterator::Array'=> '3.28',
              'TAP::Parser::Iterator::Process'=> '3.28',
              'TAP::Parser::Iterator::Stream'=> '3.28',
              'TAP::Parser::IteratorFactory'=> '3.28',
              'TAP::Parser::Multiplexer'=> '3.28',
              'TAP::Parser::Result'   => '3.28',
              'TAP::Parser::Result::Bailout'=> '3.28',
              'TAP::Parser::Result::Comment'=> '3.28',
              'TAP::Parser::Result::Plan'=> '3.28',
              'TAP::Parser::Result::Pragma'=> '3.28',
              'TAP::Parser::Result::Test'=> '3.28',
              'TAP::Parser::Result::Unknown'=> '3.28',
              'TAP::Parser::Result::Version'=> '3.28',
              'TAP::Parser::Result::YAML'=> '3.28',
              'TAP::Parser::ResultFactory'=> '3.28',
              'TAP::Parser::Scheduler'=> '3.28',
              'TAP::Parser::Scheduler::Job'=> '3.28',
              'TAP::Parser::Scheduler::Spinner'=> '3.28',
              'TAP::Parser::Source'   => '3.28',
              'TAP::Parser::SourceHandler'=> '3.28',
              'TAP::Parser::SourceHandler::Executable'=> '3.28',
              'TAP::Parser::SourceHandler::File'=> '3.28',
              'TAP::Parser::SourceHandler::Handle'=> '3.28',
              'TAP::Parser::SourceHandler::Perl'=> '3.28',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.28',
              'TAP::Parser::Utils'    => '3.28',
              'TAP::Parser::YAMLish::Reader'=> '3.28',
              'TAP::Parser::YAMLish::Writer'=> '3.28',
              'Term::ReadLine'        => '1.13',
              'Test::Harness'         => '3.28',
              'Text::Tabs'            => '2013.0523',
              'Text::Wrap'            => '2013.0523',
              'Thread'                => '3.04',
              'Tie::File'             => '1.00',
              'Time::Piece'           => '1.2002',
              'Unicode::Collate'      => '0.98',
              'Unicode::UCD'          => '0.53',
              'XS::APItest'           => '0.53',
              '_charnames'            => '1.37',
              'autodie'               => '2.19',
              'autodie::exception'    => '2.19',
              'autodie::exception::system'=> '2.19',
              'autodie::hints'        => '2.19',
              'autodie::skip'         => '2.19',
              'bigint'                => '0.35',
              'charnames'             => '1.38',
              'encoding'              => '2.12',
              'inc::latest'           => '0.4005',
              'mro'                   => '1.12',
              'perlfaq'               => '5.0150043',
              're'                    => '0.25',
              'threads'               => '1.87',
              'threads::shared'       => '1.44',
              'utf8'                  => '1.12',
          },
          removed => {
          }
      },
      5.019002 => {
          delta_from => 5.019001,
          changed => {
              'B'                     => '1.44',
              'B::Concise'            => '0.98',
              'B::Deparse'            => '1.22',
              'Benchmark'             => '1.17',
              'Class::Struct'         => '0.65',
              'Config'                => '5.019002',
              'DB'                    => '1.07',
              'DBM_Filter'            => '0.06',
              'DBM_Filter::compress'  => '0.03',
              'DBM_Filter::encode'    => '0.03',
              'DBM_Filter::int32'     => '0.03',
              'DBM_Filter::null'      => '0.03',
              'DBM_Filter::utf8'      => '0.03',
              'DB_File'               => '1.829',
              'Data::Dumper'          => '2.147',
              'Devel::Peek'           => '1.12',
              'Digest::MD5'           => '2.53',
              'Digest::SHA'           => '5.85',
              'English'               => '1.07',
              'Errno'                 => '1.19',
              'ExtUtils::Embed'       => '1.31',
              'ExtUtils::Miniperl'    => '1',
              'ExtUtils::ParseXS'     => '3.21',
              'ExtUtils::ParseXS::Constants'=> '3.21',
              'ExtUtils::ParseXS::CountLines'=> '3.21',
              'ExtUtils::ParseXS::Eval'=> '3.19',
              'ExtUtils::ParseXS::Utilities'=> '3.21',
              'ExtUtils::Typemaps'    => '3.21',
              'ExtUtils::Typemaps::Cmd'=> '3.21',
              'ExtUtils::Typemaps::InputMap'=> '3.21',
              'ExtUtils::Typemaps::OutputMap'=> '3.21',
              'ExtUtils::Typemaps::Type'=> '3.21',
              'ExtUtils::XSSymSet'    => '1.3',
              'Fatal'                 => '2.20',
              'File::Basename'        => '2.85',
              'File::Spec::VMS'       => '3.43',
              'File::Spec::Win32'     => '3.42',
              'Getopt::Long'          => '2.41',
              'Getopt::Std'           => '1.09',
              'HTTP::Tiny'            => '0.034',
              'Hash::Util::FieldHash' => '1.12',
              'I18N::Langinfo'        => '0.11',
              'IO::Socket::INET'      => '1.34',
              'IO::Socket::UNIX'      => '1.25',
              'IPC::Cmd'              => '0.82',
              'MIME::Base64'          => '3.14',
              'Module::CoreList'      => '2.94',
              'Module::CoreList::TieHashDelta'=> '2.94',
              'Module::CoreList::Utils'=> '2.94',
              'POSIX'                 => '1.34',
              'Params::Check'         => '0.38',
              'Parse::CPAN::Meta'     => '1.4405',
              'Pod::Functions'        => '1.07',
              'Pod::Html'             => '1.2',
              'Safe'                  => '2.37',
              'Socket'                => '2.010',
              'Storable'              => '2.45',
              'Text::ParseWords'      => '3.29',
              'Tie::Array'            => '1.06',
              'Tie::Hash'             => '1.05',
              'Tie::Scalar'           => '1.03',
              'Time::Piece'           => '1.21',
              'Time::Seconds'         => '1.21',
              'XS::APItest'           => '0.54',
              'autodie'               => '2.20',
              'autodie::exception'    => '2.20',
              'autodie::exception::system'=> '2.20',
              'autodie::hints'        => '2.20',
              'autodie::skip'         => '2.20',
              'base'                  => '2.19',
              'deprecate'             => '0.03',
              'if'                    => '0.0603',
              'integer'               => '1.01',
              'strict'                => '1.08',
              'subs'                  => '1.02',
              'vmsish'                => '1.04',
          },
          removed => {
          }
      },
      5.019003 => {
          delta_from => 5.019002,
          changed => {
              'B'                     => '1.45',
              'CPAN::Meta'            => '2.132140',
              'CPAN::Meta::Converter' => '2.132140',
              'CPAN::Meta::Feature'   => '2.132140',
              'CPAN::Meta::History'   => '2.132140',
              'CPAN::Meta::Prereqs'   => '2.132140',
              'CPAN::Meta::Spec'      => '2.132140',
              'CPAN::Meta::Validator' => '2.132140',
              'Carp'                  => '1.31',
              'Carp::Heavy'           => '1.31',
              'Compress::Raw::Bzip2'  => '2.062',
              'Compress::Raw::Zlib'   => '2.062',
              'Compress::Zlib'        => '2.062',
              'Config'                => '5.019003',
              'Config::Perl::V'       => '0.19',
              'Cwd'                   => '3.44',
              'Data::Dumper'          => '2.148',
              'Devel::PPPort'         => '3.21',
              'Devel::Peek'           => '1.13',
              'DynaLoader'            => '1.19',
              'Encode'                => '2.52',
              'Encode::Alias'         => '2.17',
              'Encode::Encoding'      => '2.06',
              'Encode::GSM0338'       => '2.04',
              'Encode::MIME::Header'  => '2.14',
              'Encode::Unicode'       => '2.08',
              'English'               => '1.08',
              'Exporter'              => '5.69',
              'Exporter::Heavy'       => '5.69',
              'ExtUtils::Command::MM' => '6.72',
              'ExtUtils::Liblist'     => '6.72',
              'ExtUtils::Liblist::Kid'=> '6.72',
              'ExtUtils::MM'          => '6.72',
              'ExtUtils::MM_AIX'      => '6.72',
              'ExtUtils::MM_Any'      => '6.72',
              'ExtUtils::MM_BeOS'     => '6.72',
              'ExtUtils::MM_Cygwin'   => '6.72',
              'ExtUtils::MM_DOS'      => '6.72',
              'ExtUtils::MM_Darwin'   => '6.72',
              'ExtUtils::MM_MacOS'    => '6.72',
              'ExtUtils::MM_NW5'      => '6.72',
              'ExtUtils::MM_OS2'      => '6.72',
              'ExtUtils::MM_QNX'      => '6.72',
              'ExtUtils::MM_UWIN'     => '6.72',
              'ExtUtils::MM_Unix'     => '6.72',
              'ExtUtils::MM_VMS'      => '6.72',
              'ExtUtils::MM_VOS'      => '6.72',
              'ExtUtils::MM_Win32'    => '6.72',
              'ExtUtils::MM_Win95'    => '6.72',
              'ExtUtils::MY'          => '6.72',
              'ExtUtils::MakeMaker'   => '6.72',
              'ExtUtils::MakeMaker::Config'=> '6.72',
              'ExtUtils::Mkbootstrap' => '6.72',
              'ExtUtils::Mksymlists'  => '6.72',
              'ExtUtils::ParseXS::Eval'=> '3.21',
              'ExtUtils::testlib'     => '6.72',
              'File::Spec'            => '3.44',
              'File::Spec::Cygwin'    => '3.44',
              'File::Spec::Epoc'      => '3.44',
              'File::Spec::Functions' => '3.44',
              'File::Spec::Mac'       => '3.44',
              'File::Spec::OS2'       => '3.44',
              'File::Spec::Unix'      => '3.44',
              'File::Spec::VMS'       => '3.44',
              'File::Spec::Win32'     => '3.44',
              'Getopt::Std'           => '1.10',
              'IO::Compress::Adapter::Bzip2'=> '2.062',
              'IO::Compress::Adapter::Deflate'=> '2.062',
              'IO::Compress::Adapter::Identity'=> '2.062',
              'IO::Compress::Base'    => '2.062',
              'IO::Compress::Base::Common'=> '2.062',
              'IO::Compress::Bzip2'   => '2.062',
              'IO::Compress::Deflate' => '2.062',
              'IO::Compress::Gzip'    => '2.062',
              'IO::Compress::Gzip::Constants'=> '2.062',
              'IO::Compress::RawDeflate'=> '2.062',
              'IO::Compress::Zip'     => '2.062',
              'IO::Compress::Zip::Constants'=> '2.062',
              'IO::Compress::Zlib::Constants'=> '2.062',
              'IO::Compress::Zlib::Extra'=> '2.062',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.062',
              'IO::Uncompress::Adapter::Identity'=> '2.062',
              'IO::Uncompress::Adapter::Inflate'=> '2.062',
              'IO::Uncompress::AnyInflate'=> '2.062',
              'IO::Uncompress::AnyUncompress'=> '2.062',
              'IO::Uncompress::Base'  => '2.062',
              'IO::Uncompress::Bunzip2'=> '2.062',
              'IO::Uncompress::Gunzip'=> '2.062',
              'IO::Uncompress::Inflate'=> '2.062',
              'IO::Uncompress::RawInflate'=> '2.062',
              'IO::Uncompress::Unzip' => '2.062',
              'IPC::Cmd'              => '0.84',
              'IPC::Msg'              => '2.04',
              'IPC::Open3'            => '1.15',
              'IPC::Semaphore'        => '2.04',
              'IPC::SharedMem'        => '2.04',
              'IPC::SysV'             => '2.04',
              'List::Util'            => '1.31',
              'List::Util::XS'        => '1.31',
              'Math::BigFloat::Trace' => '0.36',
              'Math::BigInt::Trace'   => '0.36',
              'Module::Build'         => '0.4007',
              'Module::Build::Base'   => '0.4007',
              'Module::Build::Compat' => '0.4007',
              'Module::Build::Config' => '0.4007',
              'Module::Build::Cookbook'=> '0.4007',
              'Module::Build::Dumper' => '0.4007',
              'Module::Build::ModuleInfo'=> '0.4007',
              'Module::Build::Notes'  => '0.4007',
              'Module::Build::PPMMaker'=> '0.4007',
              'Module::Build::Platform::Default'=> '0.4007',
              'Module::Build::Platform::MacOS'=> '0.4007',
              'Module::Build::Platform::Unix'=> '0.4007',
              'Module::Build::Platform::VMS'=> '0.4007',
              'Module::Build::Platform::VOS'=> '0.4007',
              'Module::Build::Platform::Windows'=> '0.4007',
              'Module::Build::Platform::aix'=> '0.4007',
              'Module::Build::Platform::cygwin'=> '0.4007',
              'Module::Build::Platform::darwin'=> '0.4007',
              'Module::Build::Platform::os2'=> '0.4007',
              'Module::Build::PodParser'=> '0.4007',
              'Module::CoreList'      => '2.97',
              'Module::CoreList::TieHashDelta'=> '2.97',
              'Module::CoreList::Utils'=> '2.97',
              'Net::Cmd'              => '2.30',
              'Net::Config'           => '1.12',
              'Net::Domain'           => '2.22',
              'Net::FTP'              => '2.78',
              'Net::FTP::dataconn'    => '0.12',
              'Net::NNTP'             => '2.25',
              'Net::Netrc'            => '2.14',
              'Net::POP3'             => '2.30',
              'Net::SMTP'             => '2.32',
              'PerlIO'                => '1.08',
              'Pod::Functions'        => '1.08',
              'Scalar::Util'          => '1.31',
              'Socket'                => '2.011',
              'Storable'              => '2.46',
              'Time::HiRes'           => '1.9726',
              'Time::Piece'           => '1.22',
              'Time::Seconds'         => '1.22',
              'XS::APItest'           => '0.55',
              'bigint'                => '0.36',
              'bignum'                => '0.36',
              'bigrat'                => '0.36',
              'constant'              => '1.28',
              'diagnostics'           => '1.32',
              'inc::latest'           => '0.4007',
              'mro'                   => '1.13',
              'parent'                => '0.226',
              'utf8'                  => '1.13',
              'version'               => '0.9903',
          },
          removed => {
             'Module::Build::Platform::Amiga'=> 1,
             'Module::Build::Platform::EBCDIC'=> 1,
             'Module::Build::Platform::MPEiX'=> 1,
             'Module::Build::Platform::RiscOS'=> 1,
          }
      },
      5.019004 => {
          delta_from => 5.019003,
          changed => {
              'B'                     => '1.46',
              'B::Concise'            => '0.99',
              'B::Deparse'            => '1.23',
              'CPAN'                  => '2.03',
              'CPAN::Meta'            => '2.132620',
              'CPAN::Meta::Converter' => '2.132620',
              'CPAN::Meta::Feature'   => '2.132620',
              'CPAN::Meta::History'   => '2.132620',
              'CPAN::Meta::Prereqs'   => '2.132620',
              'CPAN::Meta::Requirements'=> '2.123',
              'CPAN::Meta::Spec'      => '2.132620',
              'CPAN::Meta::Validator' => '2.132620',
              'Carp'                  => '1.32',
              'Carp::Heavy'           => '1.32',
              'Config'                => '5.019004',
              'Data::Dumper'          => '2.149',
              'Devel::Peek'           => '1.14',
              'DynaLoader'            => '1.20',
              'Encode'                => '2.55',
              'Encode::Alias'         => '2.18',
              'Encode::CN::HZ'        => '2.07',
              'Encode::Encoder'       => '2.03',
              'Encode::Encoding'      => '2.07',
              'Encode::GSM0338'       => '2.05',
              'Encode::Guess'         => '2.06',
              'Encode::JP::JIS7'      => '2.05',
              'Encode::KR::2022_KR'   => '2.03',
              'Encode::MIME::Header'  => '2.15',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.04',
              'Encode::Unicode'       => '2.09',
              'Encode::Unicode::UTF7' => '2.08',
              'Errno'                 => '1.20',
              'Exporter'              => '5.70',
              'Exporter::Heavy'       => '5.70',
              'ExtUtils::CBuilder'    => '0.280212',
              'ExtUtils::CBuilder::Base'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280212',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280212',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280212',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280212',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280212',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280212',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280212',
              'ExtUtils::Command'     => '1.18',
              'ExtUtils::Command::MM' => '6.76',
              'ExtUtils::Liblist'     => '6.76',
              'ExtUtils::Liblist::Kid'=> '6.76',
              'ExtUtils::MM'          => '6.76',
              'ExtUtils::MM_AIX'      => '6.76',
              'ExtUtils::MM_Any'      => '6.76',
              'ExtUtils::MM_BeOS'     => '6.76',
              'ExtUtils::MM_Cygwin'   => '6.76',
              'ExtUtils::MM_DOS'      => '6.76',
              'ExtUtils::MM_Darwin'   => '6.76',
              'ExtUtils::MM_MacOS'    => '6.76',
              'ExtUtils::MM_NW5'      => '6.76',
              'ExtUtils::MM_OS2'      => '6.76',
              'ExtUtils::MM_QNX'      => '6.76',
              'ExtUtils::MM_UWIN'     => '6.76',
              'ExtUtils::MM_Unix'     => '6.76',
              'ExtUtils::MM_VMS'      => '6.76',
              'ExtUtils::MM_VOS'      => '6.76',
              'ExtUtils::MM_Win32'    => '6.76',
              'ExtUtils::MM_Win95'    => '6.76',
              'ExtUtils::MY'          => '6.76',
              'ExtUtils::MakeMaker'   => '6.76',
              'ExtUtils::MakeMaker::Config'=> '6.76',
              'ExtUtils::Mkbootstrap' => '6.76',
              'ExtUtils::Mksymlists'  => '6.76',
              'ExtUtils::ParseXS'     => '3.23',
              'ExtUtils::ParseXS::Constants'=> '3.23',
              'ExtUtils::ParseXS::CountLines'=> '3.23',
              'ExtUtils::ParseXS::Eval'=> '3.23',
              'ExtUtils::ParseXS::Utilities'=> '3.23',
              'ExtUtils::Typemaps'    => '3.23',
              'ExtUtils::Typemaps::Cmd'=> '3.23',
              'ExtUtils::Typemaps::InputMap'=> '3.23',
              'ExtUtils::Typemaps::OutputMap'=> '3.23',
              'ExtUtils::Typemaps::Type'=> '3.23',
              'ExtUtils::testlib'     => '6.76',
              'Fatal'                 => '2.21',
              'File::Copy'            => '2.28',
              'File::Find'            => '1.25',
              'File::Glob'            => '1.21',
              'FileCache'             => '1.09',
              'HTTP::Tiny'            => '0.035',
              'Hash::Util::FieldHash' => '1.13',
              'I18N::LangTags'        => '0.40',
              'IO'                    => '1.29',
              'IO::Socket'            => '1.37',
              'IPC::Open3'            => '1.16',
              'JSON::PP'              => '2.27202_01',
              'List::Util'            => '1.32',
              'List::Util::XS'        => '1.32',
              'Locale::Codes'         => '3.27',
              'Locale::Codes::Constants'=> '3.27',
              'Locale::Codes::Country'=> '3.27',
              'Locale::Codes::Country_Codes'=> '3.27',
              'Locale::Codes::Country_Retired'=> '3.27',
              'Locale::Codes::Currency'=> '3.27',
              'Locale::Codes::Currency_Codes'=> '3.27',
              'Locale::Codes::Currency_Retired'=> '3.27',
              'Locale::Codes::LangExt'=> '3.27',
              'Locale::Codes::LangExt_Codes'=> '3.27',
              'Locale::Codes::LangExt_Retired'=> '3.27',
              'Locale::Codes::LangFam'=> '3.27',
              'Locale::Codes::LangFam_Codes'=> '3.27',
              'Locale::Codes::LangFam_Retired'=> '3.27',
              'Locale::Codes::LangVar'=> '3.27',
              'Locale::Codes::LangVar_Codes'=> '3.27',
              'Locale::Codes::LangVar_Retired'=> '3.27',
              'Locale::Codes::Language'=> '3.27',
              'Locale::Codes::Language_Codes'=> '3.27',
              'Locale::Codes::Language_Retired'=> '3.27',
              'Locale::Codes::Script' => '3.27',
              'Locale::Codes::Script_Codes'=> '3.27',
              'Locale::Codes::Script_Retired'=> '3.27',
              'Locale::Country'       => '3.27',
              'Locale::Currency'      => '3.27',
              'Locale::Language'      => '3.27',
              'Locale::Script'        => '3.27',
              'Math::BigFloat'        => '1.9991',
              'Math::BigInt'          => '1.9993',
              'Math::BigInt::FastCalc'=> '0.31',
              'Module::CoreList'      => '2.99',
              'Module::CoreList::TieHashDelta'=> '2.99',
              'Module::CoreList::Utils'=> '2.99',
              'Module::Load::Conditional'=> '0.58',
              'Module::Metadata'      => '1.000018',
              'Opcode'                => '1.26',
              'POSIX'                 => '1.35',
              'Parse::CPAN::Meta'     => '1.4407',
              'Perl::OSType'          => '1.005',
              'Pod::Html'             => '1.21',
              'Scalar::Util'          => '1.32',
              'Socket'                => '2.012',
              'Storable'              => '2.47',
              'Term::ReadLine'        => '1.14',
              'Test::Builder'         => '0.98_06',
              'Test::Builder::Module' => '0.98_06',
              'Test::More'            => '0.98_06',
              'Test::Simple'          => '0.98_06',
              'Time::Piece'           => '1.23',
              'Time::Seconds'         => '1.23',
              'Unicode::Collate'      => '0.99',
              'Unicode::UCD'          => '0.54',
              'XS::APItest'           => '0.56',
              'XS::Typemap'           => '0.11',
              '_charnames'            => '1.39',
              'autodie'               => '2.21',
              'autodie::exception'    => '2.21',
              'autodie::exception::system'=> '2.21',
              'autodie::hints'        => '2.21',
              'autodie::skip'         => '2.21',
              'charnames'             => '1.39',
              'diagnostics'           => '1.33',
              'mro'                   => '1.14',
              'parent'                => '0.228',
              'perlfaq'               => '5.0150044',
              're'                    => '0.26',
              'version'               => '0.9904',
              'warnings'              => '1.19',
          },
          removed => {
          }
      },
      5.019005 => {
          delta_from => 5.019004,
          changed => {
              'App::Prove'            => '3.29',
              'App::Prove::State'     => '3.29',
              'App::Prove::State::Result'=> '3.29',
              'App::Prove::State::Result::Test'=> '3.29',
              'CPAN::Meta'            => '2.132830',
              'CPAN::Meta::Converter' => '2.132830',
              'CPAN::Meta::Feature'   => '2.132830',
              'CPAN::Meta::History'   => '2.132830',
              'CPAN::Meta::Prereqs'   => '2.132830',
              'CPAN::Meta::Requirements'=> '2.125',
              'CPAN::Meta::Spec'      => '2.132830',
              'CPAN::Meta::Validator' => '2.132830',
              'CPAN::Meta::YAML'      => '0.010',
              'Config'                => '5.019005',
              'Cwd'                   => '3.45',
              'ExtUtils::Command::MM' => '6.80',
              'ExtUtils::Install'     => '1.61',
              'ExtUtils::Liblist'     => '6.80',
              'ExtUtils::Liblist::Kid'=> '6.80',
              'ExtUtils::MM'          => '6.80',
              'ExtUtils::MM_AIX'      => '6.80',
              'ExtUtils::MM_Any'      => '6.80',
              'ExtUtils::MM_BeOS'     => '6.80',
              'ExtUtils::MM_Cygwin'   => '6.80',
              'ExtUtils::MM_DOS'      => '6.80',
              'ExtUtils::MM_Darwin'   => '6.80',
              'ExtUtils::MM_MacOS'    => '6.80',
              'ExtUtils::MM_NW5'      => '6.80',
              'ExtUtils::MM_OS2'      => '6.80',
              'ExtUtils::MM_QNX'      => '6.80',
              'ExtUtils::MM_UWIN'     => '6.80',
              'ExtUtils::MM_Unix'     => '6.80',
              'ExtUtils::MM_VMS'      => '6.80',
              'ExtUtils::MM_VOS'      => '6.80',
              'ExtUtils::MM_Win32'    => '6.80',
              'ExtUtils::MM_Win95'    => '6.80',
              'ExtUtils::MY'          => '6.80',
              'ExtUtils::MakeMaker'   => '6.80',
              'ExtUtils::MakeMaker::Config'=> '6.80',
              'ExtUtils::Mkbootstrap' => '6.80',
              'ExtUtils::Mksymlists'  => '6.80',
              'ExtUtils::testlib'     => '6.80',
              'Fatal'                 => '2.22',
              'File::Fetch'           => '0.44',
              'File::Glob'            => '1.22',
              'File::Spec'            => '3.45',
              'File::Spec::Cygwin'    => '3.45',
              'File::Spec::Epoc'      => '3.45',
              'File::Spec::Functions' => '3.45',
              'File::Spec::Mac'       => '3.45',
              'File::Spec::OS2'       => '3.45',
              'File::Spec::Unix'      => '3.45',
              'File::Spec::VMS'       => '3.45',
              'File::Spec::Win32'     => '3.45',
              'File::Temp'            => '0.2304',
              'Getopt::Long'          => '2.42',
              'HTTP::Tiny'            => '0.036',
              'IPC::Cmd'              => '0.84_01',
              'JSON::PP'              => '2.27203',
              'List::Util'            => '1.35',
              'List::Util::XS'        => '1.35',
              'Module::CoreList'      => '3.00',
              'Module::CoreList::TieHashDelta'=> '3.00',
              'Module::CoreList::Utils'=> '3.00',
              'Module::Metadata'      => '1.000019',
              'Parse::CPAN::Meta'     => '1.4409',
              'Perl::OSType'          => '1.006',
              'PerlIO::scalar'        => '0.17',
              'Pod::Man'              => '2.28',
              'Pod::Text'             => '3.18',
              'Pod::Text::Termcap'    => '2.08',
              'Scalar::Util'          => '1.35',
              'TAP::Base'             => '3.29',
              'TAP::Formatter::Base'  => '3.29',
              'TAP::Formatter::Color' => '3.29',
              'TAP::Formatter::Console'=> '3.29',
              'TAP::Formatter::Console::ParallelSession'=> '3.29',
              'TAP::Formatter::Console::Session'=> '3.29',
              'TAP::Formatter::File'  => '3.29',
              'TAP::Formatter::File::Session'=> '3.29',
              'TAP::Formatter::Session'=> '3.29',
              'TAP::Harness'          => '3.29',
              'TAP::Harness::Env'     => '3.29',
              'TAP::Object'           => '3.29',
              'TAP::Parser'           => '3.29',
              'TAP::Parser::Aggregator'=> '3.29',
              'TAP::Parser::Grammar'  => '3.29',
              'TAP::Parser::Iterator' => '3.29',
              'TAP::Parser::Iterator::Array'=> '3.29',
              'TAP::Parser::Iterator::Process'=> '3.29',
              'TAP::Parser::Iterator::Stream'=> '3.29',
              'TAP::Parser::IteratorFactory'=> '3.29',
              'TAP::Parser::Multiplexer'=> '3.29',
              'TAP::Parser::Result'   => '3.29',
              'TAP::Parser::Result::Bailout'=> '3.29',
              'TAP::Parser::Result::Comment'=> '3.29',
              'TAP::Parser::Result::Plan'=> '3.29',
              'TAP::Parser::Result::Pragma'=> '3.29',
              'TAP::Parser::Result::Test'=> '3.29',
              'TAP::Parser::Result::Unknown'=> '3.29',
              'TAP::Parser::Result::Version'=> '3.29',
              'TAP::Parser::Result::YAML'=> '3.29',
              'TAP::Parser::ResultFactory'=> '3.29',
              'TAP::Parser::Scheduler'=> '3.29',
              'TAP::Parser::Scheduler::Job'=> '3.29',
              'TAP::Parser::Scheduler::Spinner'=> '3.29',
              'TAP::Parser::Source'   => '3.29',
              'TAP::Parser::SourceHandler'=> '3.29',
              'TAP::Parser::SourceHandler::Executable'=> '3.29',
              'TAP::Parser::SourceHandler::File'=> '3.29',
              'TAP::Parser::SourceHandler::Handle'=> '3.29',
              'TAP::Parser::SourceHandler::Perl'=> '3.29',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.29',
              'TAP::Parser::YAMLish::Reader'=> '3.29',
              'TAP::Parser::YAMLish::Writer'=> '3.29',
              'Test::Builder'         => '0.99',
              'Test::Builder::Module' => '0.99',
              'Test::Builder::Tester' => '1.23_002',
              'Test::Builder::Tester::Color'=> '1.23_002',
              'Test::Harness'         => '3.29',
              'Test::More'            => '0.99',
              'Test::Simple'          => '0.99',
              'Unicode'               => '6.3.0',
              'Unicode::Normalize'    => '1.17',
              'Unicode::UCD'          => '0.55',
              'attributes'            => '0.22',
              'autodie'               => '2.22',
              'autodie::exception'    => '2.22',
              'autodie::exception::system'=> '2.22',
              'autodie::hints'        => '2.22',
              'autodie::skip'         => '2.22',
              'feature'               => '1.34',
              'threads'               => '1.89',
              'warnings'              => '1.20',
          },
          removed => {
              'TAP::Parser::Utils'    => 1,
          }
      },
      5.019006 => {
          delta_from => 5.019005,
          changed => {
              'App::Prove'            => '3.30',
              'App::Prove::State'     => '3.30',
              'App::Prove::State::Result'=> '3.30',
              'App::Prove::State::Result::Test'=> '3.30',
              'Archive::Tar'          => '1.96',
              'Archive::Tar::Constant'=> '1.96',
              'Archive::Tar::File'    => '1.96',
              'AutoLoader'            => '5.74',
              'B'                     => '1.47',
              'B::Concise'            => '0.991',
              'B::Debug'              => '1.19',
              'B::Deparse'            => '1.24',
              'Benchmark'             => '1.18',
              'Compress::Raw::Bzip2'  => '2.063',
              'Compress::Raw::Zlib'   => '2.063',
              'Compress::Zlib'        => '2.063',
              'Config'                => '5.019006',
              'DB_File'               => '1.831',
              'Devel::Peek'           => '1.15',
              'DynaLoader'            => '1.21',
              'Errno'                 => '1.20_01',
              'ExtUtils::Command::MM' => '6.82',
              'ExtUtils::Liblist'     => '6.82',
              'ExtUtils::Liblist::Kid'=> '6.82',
              'ExtUtils::MM'          => '6.82',
              'ExtUtils::MM_AIX'      => '6.82',
              'ExtUtils::MM_Any'      => '6.82',
              'ExtUtils::MM_BeOS'     => '6.82',
              'ExtUtils::MM_Cygwin'   => '6.82',
              'ExtUtils::MM_DOS'      => '6.82',
              'ExtUtils::MM_Darwin'   => '6.82',
              'ExtUtils::MM_MacOS'    => '6.82',
              'ExtUtils::MM_NW5'      => '6.82',
              'ExtUtils::MM_OS2'      => '6.82',
              'ExtUtils::MM_QNX'      => '6.82',
              'ExtUtils::MM_UWIN'     => '6.82',
              'ExtUtils::MM_Unix'     => '6.82',
              'ExtUtils::MM_VMS'      => '6.82',
              'ExtUtils::MM_VOS'      => '6.82',
              'ExtUtils::MM_Win32'    => '6.82',
              'ExtUtils::MM_Win95'    => '6.82',
              'ExtUtils::MY'          => '6.82',
              'ExtUtils::MakeMaker'   => '6.82',
              'ExtUtils::MakeMaker::Config'=> '6.82',
              'ExtUtils::Mkbootstrap' => '6.82',
              'ExtUtils::Mksymlists'  => '6.82',
              'ExtUtils::testlib'     => '6.82',
              'File::DosGlob'         => '1.12',
              'File::Find'            => '1.26',
              'File::Glob'            => '1.23',
              'HTTP::Tiny'            => '0.038',
              'IO'                    => '1.30',
              'IO::Compress::Adapter::Bzip2'=> '2.063',
              'IO::Compress::Adapter::Deflate'=> '2.063',
              'IO::Compress::Adapter::Identity'=> '2.063',
              'IO::Compress::Base'    => '2.063',
              'IO::Compress::Base::Common'=> '2.063',
              'IO::Compress::Bzip2'   => '2.063',
              'IO::Compress::Deflate' => '2.063',
              'IO::Compress::Gzip'    => '2.063',
              'IO::Compress::Gzip::Constants'=> '2.063',
              'IO::Compress::RawDeflate'=> '2.063',
              'IO::Compress::Zip'     => '2.063',
              'IO::Compress::Zip::Constants'=> '2.063',
              'IO::Compress::Zlib::Constants'=> '2.063',
              'IO::Compress::Zlib::Extra'=> '2.063',
              'IO::Select'            => '1.22',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.063',
              'IO::Uncompress::Adapter::Identity'=> '2.063',
              'IO::Uncompress::Adapter::Inflate'=> '2.063',
              'IO::Uncompress::AnyInflate'=> '2.063',
              'IO::Uncompress::AnyUncompress'=> '2.063',
              'IO::Uncompress::Base'  => '2.063',
              'IO::Uncompress::Bunzip2'=> '2.063',
              'IO::Uncompress::Gunzip'=> '2.063',
              'IO::Uncompress::Inflate'=> '2.063',
              'IO::Uncompress::RawInflate'=> '2.063',
              'IO::Uncompress::Unzip' => '2.063',
              'IPC::Cmd'              => '0.90',
              'Locale::Maketext'      => '1.25',
              'Module::Build'         => '0.4202',
              'Module::Build::Base'   => '0.4202',
              'Module::Build::Compat' => '0.4202',
              'Module::Build::Config' => '0.4202',
              'Module::Build::Cookbook'=> '0.4202',
              'Module::Build::Dumper' => '0.4202',
              'Module::Build::ModuleInfo'=> '0.4202',
              'Module::Build::Notes'  => '0.4202',
              'Module::Build::PPMMaker'=> '0.4202',
              'Module::Build::Platform::Default'=> '0.4202',
              'Module::Build::Platform::MacOS'=> '0.4202',
              'Module::Build::Platform::Unix'=> '0.4202',
              'Module::Build::Platform::VMS'=> '0.4202',
              'Module::Build::Platform::VOS'=> '0.4202',
              'Module::Build::Platform::Windows'=> '0.4202',
              'Module::Build::Platform::aix'=> '0.4202',
              'Module::Build::Platform::cygwin'=> '0.4202',
              'Module::Build::Platform::darwin'=> '0.4202',
              'Module::Build::Platform::os2'=> '0.4202',
              'Module::Build::PodParser'=> '0.4202',
              'Module::CoreList'      => '3.01',
              'Module::CoreList::TieHashDelta'=> '3.01',
              'Module::CoreList::Utils'=> '3.01',
              'Opcode'                => '1.27',
              'POSIX'                 => '1.36',
              'Package::Constants'    => '0.04',
              'PerlIO::scalar'        => '0.18',
              'PerlIO::via'           => '0.13',
              'SDBM_File'             => '1.10',
              'Socket'                => '2.013',
              'TAP::Base'             => '3.30',
              'TAP::Formatter::Base'  => '3.30',
              'TAP::Formatter::Color' => '3.30',
              'TAP::Formatter::Console'=> '3.30',
              'TAP::Formatter::Console::ParallelSession'=> '3.30',
              'TAP::Formatter::Console::Session'=> '3.30',
              'TAP::Formatter::File'  => '3.30',
              'TAP::Formatter::File::Session'=> '3.30',
              'TAP::Formatter::Session'=> '3.30',
              'TAP::Harness'          => '3.30',
              'TAP::Harness::Env'     => '3.30',
              'TAP::Object'           => '3.30',
              'TAP::Parser'           => '3.30',
              'TAP::Parser::Aggregator'=> '3.30',
              'TAP::Parser::Grammar'  => '3.30',
              'TAP::Parser::Iterator' => '3.30',
              'TAP::Parser::Iterator::Array'=> '3.30',
              'TAP::Parser::Iterator::Process'=> '3.30',
              'TAP::Parser::Iterator::Stream'=> '3.30',
              'TAP::Parser::IteratorFactory'=> '3.30',
              'TAP::Parser::Multiplexer'=> '3.30',
              'TAP::Parser::Result'   => '3.30',
              'TAP::Parser::Result::Bailout'=> '3.30',
              'TAP::Parser::Result::Comment'=> '3.30',
              'TAP::Parser::Result::Plan'=> '3.30',
              'TAP::Parser::Result::Pragma'=> '3.30',
              'TAP::Parser::Result::Test'=> '3.30',
              'TAP::Parser::Result::Unknown'=> '3.30',
              'TAP::Parser::Result::Version'=> '3.30',
              'TAP::Parser::Result::YAML'=> '3.30',
              'TAP::Parser::ResultFactory'=> '3.30',
              'TAP::Parser::Scheduler'=> '3.30',
              'TAP::Parser::Scheduler::Job'=> '3.30',
              'TAP::Parser::Scheduler::Spinner'=> '3.30',
              'TAP::Parser::Source'   => '3.30',
              'TAP::Parser::SourceHandler'=> '3.30',
              'TAP::Parser::SourceHandler::Executable'=> '3.30',
              'TAP::Parser::SourceHandler::File'=> '3.30',
              'TAP::Parser::SourceHandler::Handle'=> '3.30',
              'TAP::Parser::SourceHandler::Perl'=> '3.30',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.30',
              'TAP::Parser::YAMLish::Reader'=> '3.30',
              'TAP::Parser::YAMLish::Writer'=> '3.30',
              'Term::Cap'             => '1.15',
              'Test::Builder'         => '1.001002',
              'Test::Builder::Module' => '1.001002',
              'Test::Harness'         => '3.30',
              'Test::More'            => '1.001002',
              'Test::Simple'          => '1.001002',
              'Tie::StdHandle'        => '4.4',
              'Unicode::Collate'      => '1.02',
              'Unicode::Collate::CJK::Korean'=> '1.02',
              'Unicode::Collate::Locale'=> '1.02',
              'XS::APItest'           => '0.57',
              'XS::Typemap'           => '0.12',
              'arybase'               => '0.07',
              'bignum'                => '0.37',
              'constant'              => '1.29',
              'fields'                => '2.17',
              'inc::latest'           => '0.4202',
              'threads'               => '1.90',
              'threads::shared'       => '1.45',
          },
          removed => {
          }
      },
      5.019007 => {
          delta_from => 5.019006,
          changed => {
              'CGI'                   => '3.64',
              'CGI::Apache'           => '1.02',
              'CGI::Carp'             => '3.64',
              'CGI::Cookie'           => '1.31',
              'CGI::Fast'             => '1.10',
              'CGI::Pretty'           => '3.64',
              'CGI::Push'             => '1.06',
              'CGI::Switch'           => '1.02',
              'CGI::Util'             => '3.64',
              'CPAN::Meta'            => '2.133380',
              'CPAN::Meta::Converter' => '2.133380',
              'CPAN::Meta::Feature'   => '2.133380',
              'CPAN::Meta::History'   => '2.133380',
              'CPAN::Meta::Prereqs'   => '2.133380',
              'CPAN::Meta::Spec'      => '2.133380',
              'CPAN::Meta::Validator' => '2.133380',
              'Config'                => '5.019007',
              'Data::Dumper'          => '2.150',
              'DynaLoader'            => '1.22',
              'ExtUtils::Command::MM' => '6.84',
              'ExtUtils::Liblist'     => '6.84',
              'ExtUtils::Liblist::Kid'=> '6.84',
              'ExtUtils::MM'          => '6.84',
              'ExtUtils::MM_AIX'      => '6.84',
              'ExtUtils::MM_Any'      => '6.84',
              'ExtUtils::MM_BeOS'     => '6.84',
              'ExtUtils::MM_Cygwin'   => '6.84',
              'ExtUtils::MM_DOS'      => '6.84',
              'ExtUtils::MM_Darwin'   => '6.84',
              'ExtUtils::MM_MacOS'    => '6.84',
              'ExtUtils::MM_NW5'      => '6.84',
              'ExtUtils::MM_OS2'      => '6.84',
              'ExtUtils::MM_QNX'      => '6.84',
              'ExtUtils::MM_UWIN'     => '6.84',
              'ExtUtils::MM_Unix'     => '6.84',
              'ExtUtils::MM_VMS'      => '6.84',
              'ExtUtils::MM_VOS'      => '6.84',
              'ExtUtils::MM_Win32'    => '6.84',
              'ExtUtils::MM_Win95'    => '6.84',
              'ExtUtils::MY'          => '6.84',
              'ExtUtils::MakeMaker'   => '6.84',
              'ExtUtils::MakeMaker::Config'=> '6.84',
              'ExtUtils::Mkbootstrap' => '6.84',
              'ExtUtils::Mksymlists'  => '6.84',
              'ExtUtils::testlib'     => '6.84',
              'File::Fetch'           => '0.46',
              'HTTP::Tiny'            => '0.039',
              'Locale::Codes'         => '3.28',
              'Locale::Codes::Constants'=> '3.28',
              'Locale::Codes::Country'=> '3.28',
              'Locale::Codes::Country_Codes'=> '3.28',
              'Locale::Codes::Country_Retired'=> '3.28',
              'Locale::Codes::Currency'=> '3.28',
              'Locale::Codes::Currency_Codes'=> '3.28',
              'Locale::Codes::Currency_Retired'=> '3.28',
              'Locale::Codes::LangExt'=> '3.28',
              'Locale::Codes::LangExt_Codes'=> '3.28',
              'Locale::Codes::LangExt_Retired'=> '3.28',
              'Locale::Codes::LangFam'=> '3.28',
              'Locale::Codes::LangFam_Codes'=> '3.28',
              'Locale::Codes::LangFam_Retired'=> '3.28',
              'Locale::Codes::LangVar'=> '3.28',
              'Locale::Codes::LangVar_Codes'=> '3.28',
              'Locale::Codes::LangVar_Retired'=> '3.28',
              'Locale::Codes::Language'=> '3.28',
              'Locale::Codes::Language_Codes'=> '3.28',
              'Locale::Codes::Language_Retired'=> '3.28',
              'Locale::Codes::Script' => '3.28',
              'Locale::Codes::Script_Codes'=> '3.28',
              'Locale::Codes::Script_Retired'=> '3.28',
              'Locale::Country'       => '3.28',
              'Locale::Currency'      => '3.28',
              'Locale::Language'      => '3.28',
              'Locale::Script'        => '3.28',
              'Module::Build'         => '0.4203',
              'Module::Build::Base'   => '0.4203',
              'Module::Build::Compat' => '0.4203',
              'Module::Build::Config' => '0.4203',
              'Module::Build::Cookbook'=> '0.4203',
              'Module::Build::Dumper' => '0.4203',
              'Module::Build::ModuleInfo'=> '0.4203',
              'Module::Build::Notes'  => '0.4203',
              'Module::Build::PPMMaker'=> '0.4203',
              'Module::Build::Platform::Default'=> '0.4203',
              'Module::Build::Platform::MacOS'=> '0.4203',
              'Module::Build::Platform::Unix'=> '0.4203',
              'Module::Build::Platform::VMS'=> '0.4203',
              'Module::Build::Platform::VOS'=> '0.4203',
              'Module::Build::Platform::Windows'=> '0.4203',
              'Module::Build::Platform::aix'=> '0.4203',
              'Module::Build::Platform::cygwin'=> '0.4203',
              'Module::Build::Platform::darwin'=> '0.4203',
              'Module::Build::Platform::os2'=> '0.4203',
              'Module::Build::PodParser'=> '0.4203',
              'Module::CoreList'      => '3.02',
              'Module::CoreList::TieHashDelta'=> '3.02',
              'Module::CoreList::Utils'=> '3.02',
              'POSIX'                 => '1.37',
              'PerlIO::encoding'      => '0.17',
              'PerlIO::via'           => '0.14',
              'SDBM_File'             => '1.11',
              'Storable'              => '2.48',
              'Time::Piece'           => '1.24',
              'Time::Seconds'         => '1.24',
              'Unicode::Collate'      => '1.04',
              'Win32'                 => '0.48',
              'XS::APItest'           => '0.58',
              'base'                  => '2.20',
              'constant'              => '1.30',
              'inc::latest'           => '0.4203',
              'threads'               => '1.91',
          },
          removed => {
          }
      },
      5.019008 => {
          delta_from => 5.019007,
          changed => {
              'Config'                => '5.019008',
              'DynaLoader'            => '1.24',
              'Encode'                => '2.57',
              'Errno'                 => '1.20_02',
              'ExtUtils::CBuilder'    => '0.280213',
              'ExtUtils::CBuilder::Base'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280213',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280213',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280213',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280213',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280213',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280213',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280213',
              'ExtUtils::Command::MM' => '6.86',
              'ExtUtils::Liblist'     => '6.86',
              'ExtUtils::Liblist::Kid'=> '6.86',
              'ExtUtils::MM'          => '6.86',
              'ExtUtils::MM_AIX'      => '6.86',
              'ExtUtils::MM_Any'      => '6.86',
              'ExtUtils::MM_BeOS'     => '6.86',
              'ExtUtils::MM_Cygwin'   => '6.86',
              'ExtUtils::MM_DOS'      => '6.86',
              'ExtUtils::MM_Darwin'   => '6.86',
              'ExtUtils::MM_MacOS'    => '6.86',
              'ExtUtils::MM_NW5'      => '6.86',
              'ExtUtils::MM_OS2'      => '6.86',
              'ExtUtils::MM_QNX'      => '6.86',
              'ExtUtils::MM_UWIN'     => '6.86',
              'ExtUtils::MM_Unix'     => '6.86',
              'ExtUtils::MM_VMS'      => '6.86',
              'ExtUtils::MM_VOS'      => '6.86',
              'ExtUtils::MM_Win32'    => '6.86',
              'ExtUtils::MM_Win95'    => '6.86',
              'ExtUtils::MY'          => '6.86',
              'ExtUtils::MakeMaker'   => '6.86',
              'ExtUtils::MakeMaker::Config'=> '6.86',
              'ExtUtils::Mkbootstrap' => '6.86',
              'ExtUtils::Mksymlists'  => '6.86',
              'ExtUtils::testlib'     => '6.86',
              'File::Copy'            => '2.29',
              'Hash::Util::FieldHash' => '1.14',
              'IO::Socket::IP'        => '0.26',
              'IO::Socket::UNIX'      => '1.26',
              'List::Util'            => '1.36',
              'List::Util::XS'        => '1.36',
              'Module::Build'         => '0.4204',
              'Module::Build::Base'   => '0.4204',
              'Module::Build::Compat' => '0.4204',
              'Module::Build::Config' => '0.4204',
              'Module::Build::Cookbook'=> '0.4204',
              'Module::Build::Dumper' => '0.4204',
              'Module::Build::ModuleInfo'=> '0.4204',
              'Module::Build::Notes'  => '0.4204',
              'Module::Build::PPMMaker'=> '0.4204',
              'Module::Build::Platform::Default'=> '0.4204',
              'Module::Build::Platform::MacOS'=> '0.4204',
              'Module::Build::Platform::Unix'=> '0.4204',
              'Module::Build::Platform::VMS'=> '0.4204',
              'Module::Build::Platform::VOS'=> '0.4204',
              'Module::Build::Platform::Windows'=> '0.4204',
              'Module::Build::Platform::aix'=> '0.4204',
              'Module::Build::Platform::cygwin'=> '0.4204',
              'Module::Build::Platform::darwin'=> '0.4204',
              'Module::Build::Platform::os2'=> '0.4204',
              'Module::Build::PodParser'=> '0.4204',
              'Module::CoreList'      => '3.04',
              'Module::CoreList::TieHashDelta'=> '3.04',
              'Module::CoreList::Utils'=> '3.04',
              'Module::Load'          => '0.28',
              'Module::Load::Conditional'=> '0.60',
              'Net::Config'           => '1.13',
              'Net::FTP::A'           => '1.19',
              'POSIX'                 => '1.38_01',
              'Perl::OSType'          => '1.007',
              'PerlIO::encoding'      => '0.18',
              'Pod::Perldoc'          => '3.21',
              'Pod::Perldoc::BaseTo'  => '3.21',
              'Pod::Perldoc::GetOptsOO'=> '3.21',
              'Pod::Perldoc::ToANSI'  => '3.21',
              'Pod::Perldoc::ToChecker'=> '3.21',
              'Pod::Perldoc::ToMan'   => '3.21',
              'Pod::Perldoc::ToNroff' => '3.21',
              'Pod::Perldoc::ToPod'   => '3.21',
              'Pod::Perldoc::ToRtf'   => '3.21',
              'Pod::Perldoc::ToTerm'  => '3.21',
              'Pod::Perldoc::ToText'  => '3.21',
              'Pod::Perldoc::ToTk'    => '3.21',
              'Pod::Perldoc::ToXml'   => '3.21',
              'Scalar::Util'          => '1.36',
              'Time::Piece'           => '1.27',
              'Time::Seconds'         => '1.27',
              'Unicode::UCD'          => '0.57',
              'XS::APItest'           => '0.59',
              'XSLoader'              => '0.17',
              'base'                  => '2.21',
              'constant'              => '1.31',
              'inc::latest'           => '0.4204',
              'threads::shared'       => '1.46',
              'version'               => '0.9907',
              'version::regex'        => '0.9907',
              'version::vpp'          => '0.9907',
              'warnings'              => '1.21',
          },
          removed => {
          }
      },
      5.019009 => {
          delta_from => 5.019008,
          changed => {
              'B'                     => '1.48',
              'B::Concise'            => '0.992',
              'B::Deparse'            => '1.25',
              'CGI'                   => '3.65',
              'CPAN::Meta::YAML'      => '0.011',
              'Compress::Raw::Bzip2'  => '2.064',
              'Compress::Raw::Zlib'   => '2.065',
              'Compress::Zlib'        => '2.064',
              'Config'                => '5.019009',
              'Config::Perl::V'       => '0.20',
              'Cwd'                   => '3.47',
              'Devel::Peek'           => '1.16',
              'Digest::SHA'           => '5.87',
              'DynaLoader'            => '1.25',
              'English'               => '1.09',
              'ExtUtils::CBuilder'    => '0.280216',
              'ExtUtils::CBuilder::Base'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280216',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280216',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280216',
              'ExtUtils::CBuilder::Platform::android'=> '0.280216',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280216',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280216',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280216',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280216',
              'ExtUtils::Command::MM' => '6.88',
              'ExtUtils::Embed'       => '1.32',
              'ExtUtils::Install'     => '1.62',
              'ExtUtils::Installed'   => '1.999004',
              'ExtUtils::Liblist'     => '6.88',
              'ExtUtils::Liblist::Kid'=> '6.88',
              'ExtUtils::MM'          => '6.88',
              'ExtUtils::MM_AIX'      => '6.88',
              'ExtUtils::MM_Any'      => '6.88',
              'ExtUtils::MM_BeOS'     => '6.88',
              'ExtUtils::MM_Cygwin'   => '6.88',
              'ExtUtils::MM_DOS'      => '6.88',
              'ExtUtils::MM_Darwin'   => '6.88',
              'ExtUtils::MM_MacOS'    => '6.88',
              'ExtUtils::MM_NW5'      => '6.88',
              'ExtUtils::MM_OS2'      => '6.88',
              'ExtUtils::MM_QNX'      => '6.88',
              'ExtUtils::MM_UWIN'     => '6.88',
              'ExtUtils::MM_Unix'     => '6.88',
              'ExtUtils::MM_VMS'      => '6.88',
              'ExtUtils::MM_VOS'      => '6.88',
              'ExtUtils::MM_Win32'    => '6.88',
              'ExtUtils::MM_Win95'    => '6.88',
              'ExtUtils::MY'          => '6.88',
              'ExtUtils::MakeMaker'   => '6.88',
              'ExtUtils::MakeMaker::Config'=> '6.88',
              'ExtUtils::Mkbootstrap' => '6.88',
              'ExtUtils::Mksymlists'  => '6.88',
              'ExtUtils::Packlist'    => '1.47',
              'ExtUtils::testlib'     => '6.88',
              'Fatal'                 => '2.23',
              'File::Fetch'           => '0.48',
              'File::Spec'            => '3.47',
              'File::Spec::Cygwin'    => '3.47',
              'File::Spec::Epoc'      => '3.47',
              'File::Spec::Functions' => '3.47',
              'File::Spec::Mac'       => '3.47',
              'File::Spec::OS2'       => '3.47',
              'File::Spec::Unix'      => '3.47',
              'File::Spec::VMS'       => '3.47',
              'File::Spec::Win32'     => '3.47',
              'HTTP::Tiny'            => '0.042',
              'IO::Compress::Adapter::Bzip2'=> '2.064',
              'IO::Compress::Adapter::Deflate'=> '2.064',
              'IO::Compress::Adapter::Identity'=> '2.064',
              'IO::Compress::Base'    => '2.064',
              'IO::Compress::Base::Common'=> '2.064',
              'IO::Compress::Bzip2'   => '2.064',
              'IO::Compress::Deflate' => '2.064',
              'IO::Compress::Gzip'    => '2.064',
              'IO::Compress::Gzip::Constants'=> '2.064',
              'IO::Compress::RawDeflate'=> '2.064',
              'IO::Compress::Zip'     => '2.064',
              'IO::Compress::Zip::Constants'=> '2.064',
              'IO::Compress::Zlib::Constants'=> '2.064',
              'IO::Compress::Zlib::Extra'=> '2.064',
              'IO::Socket::INET'      => '1.35',
              'IO::Socket::IP'        => '0.28',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.064',
              'IO::Uncompress::Adapter::Identity'=> '2.064',
              'IO::Uncompress::Adapter::Inflate'=> '2.064',
              'IO::Uncompress::AnyInflate'=> '2.064',
              'IO::Uncompress::AnyUncompress'=> '2.064',
              'IO::Uncompress::Base'  => '2.064',
              'IO::Uncompress::Bunzip2'=> '2.064',
              'IO::Uncompress::Gunzip'=> '2.064',
              'IO::Uncompress::Inflate'=> '2.064',
              'IO::Uncompress::RawInflate'=> '2.064',
              'IO::Uncompress::Unzip' => '2.064',
              'IPC::Cmd'              => '0.92',
              'List::Util'            => '1.38',
              'List::Util::XS'        => '1.38',
              'Locale::Codes'         => '3.29',
              'Locale::Codes::Constants'=> '3.29',
              'Locale::Codes::Country'=> '3.29',
              'Locale::Codes::Country_Codes'=> '3.29',
              'Locale::Codes::Country_Retired'=> '3.29',
              'Locale::Codes::Currency'=> '3.29',
              'Locale::Codes::Currency_Codes'=> '3.29',
              'Locale::Codes::Currency_Retired'=> '3.29',
              'Locale::Codes::LangExt'=> '3.29',
              'Locale::Codes::LangExt_Codes'=> '3.29',
              'Locale::Codes::LangExt_Retired'=> '3.29',
              'Locale::Codes::LangFam'=> '3.29',
              'Locale::Codes::LangFam_Codes'=> '3.29',
              'Locale::Codes::LangFam_Retired'=> '3.29',
              'Locale::Codes::LangVar'=> '3.29',
              'Locale::Codes::LangVar_Codes'=> '3.29',
              'Locale::Codes::LangVar_Retired'=> '3.29',
              'Locale::Codes::Language'=> '3.29',
              'Locale::Codes::Language_Codes'=> '3.29',
              'Locale::Codes::Language_Retired'=> '3.29',
              'Locale::Codes::Script' => '3.29',
              'Locale::Codes::Script_Codes'=> '3.29',
              'Locale::Codes::Script_Retired'=> '3.29',
              'Locale::Country'       => '3.29',
              'Locale::Currency'      => '3.29',
              'Locale::Language'      => '3.29',
              'Locale::Script'        => '3.29',
              'Module::Build'         => '0.4205',
              'Module::Build::Base'   => '0.4205',
              'Module::Build::Compat' => '0.4205',
              'Module::Build::Config' => '0.4205',
              'Module::Build::Cookbook'=> '0.4205',
              'Module::Build::Dumper' => '0.4205',
              'Module::Build::ModuleInfo'=> '0.4205',
              'Module::Build::Notes'  => '0.4205',
              'Module::Build::PPMMaker'=> '0.4205',
              'Module::Build::Platform::Default'=> '0.4205',
              'Module::Build::Platform::MacOS'=> '0.4205',
              'Module::Build::Platform::Unix'=> '0.4205',
              'Module::Build::Platform::VMS'=> '0.4205',
              'Module::Build::Platform::VOS'=> '0.4205',
              'Module::Build::Platform::Windows'=> '0.4205',
              'Module::Build::Platform::aix'=> '0.4205',
              'Module::Build::Platform::cygwin'=> '0.4205',
              'Module::Build::Platform::darwin'=> '0.4205',
              'Module::Build::Platform::os2'=> '0.4205',
              'Module::Build::PodParser'=> '0.4205',
              'Module::CoreList'      => '3.06',
              'Module::CoreList::TieHashDelta'=> '3.06',
              'Module::CoreList::Utils'=> '3.06',
              'Module::Load'          => '0.30',
              'Module::Load::Conditional'=> '0.62',
              'Net::Domain'           => '2.23',
              'Net::FTP'              => '2.79',
              'Net::NNTP'             => '2.26',
              'Net::POP3'             => '2.31',
              'Net::Ping'             => '2.43',
              'Net::SMTP'             => '2.33',
              'POSIX'                 => '1.38_02',
              'Parse::CPAN::Meta'     => '1.4413',
              'Pod::Escapes'          => '1.06',
              'Pod::Find'             => '1.62',
              'Pod::InputObjects'     => '1.62',
              'Pod::ParseUtils'       => '1.62',
              'Pod::Parser'           => '1.62',
              'Pod::Select'           => '1.62',
              'Scalar::Util'          => '1.38',
              'autodie'               => '2.23',
              'autodie::exception'    => '2.23',
              'autodie::exception::system'=> '2.23',
              'autodie::hints'        => '2.23',
              'autodie::skip'         => '2.23',
              'diagnostics'           => '1.34',
              'feature'               => '1.35',
              'inc::latest'           => '0.4205',
              'locale'                => '1.03',
              'mro'                   => '1.15',
              'threads'               => '1.92',
              'version'               => '0.9908',
              'version::regex'        => '0.9908',
              'version::vpp'          => '0.9908',
              'warnings'              => '1.22',
          },
          removed => {
          }
      },
      5.01901 => {
          delta_from => 5.019009,
          changed => {
              'App::Cpan'             => '1.62',
              'Attribute::Handlers'   => '0.96',
              'B::Deparse'            => '1.26',
              'CPAN'                  => '2.04',
              'CPAN::Bundle'          => '5.5001',
              'CPAN::Complete'        => '5.5001',
              'CPAN::Distribution'    => '2.01',
              'CPAN::Distroprefs'     => '6.0001',
              'CPAN::FirstTime'       => '5.5305',
              'CPAN::Meta'            => '2.140640',
              'CPAN::Meta::Converter' => '2.140640',
              'CPAN::Meta::Feature'   => '2.140640',
              'CPAN::Meta::History'   => '2.140640',
              'CPAN::Meta::Prereqs'   => '2.140640',
              'CPAN::Meta::Spec'      => '2.140640',
              'CPAN::Meta::Validator' => '2.140640',
              'CPAN::Meta::YAML'      => '0.012',
              'CPAN::Queue'           => '5.5002',
              'CPAN::Shell'           => '5.5003',
              'CPAN::Tarzip'          => '5.5012',
              'CPAN::Version'         => '5.5003',
              'Carp'                  => '1.33',
              'Carp::Heavy'           => '1.33',
              'Config'                => '5.019010',
              'Data::Dumper'          => '2.151',
              'Devel::PPPort'         => '3.22',
              'Digest::SHA'           => '5.88',
              'ExtUtils::Command::MM' => '6.92',
              'ExtUtils::Install'     => '1.63',
              'ExtUtils::Installed'   => '1.999005',
              'ExtUtils::Liblist'     => '6.92',
              'ExtUtils::Liblist::Kid'=> '6.92',
              'ExtUtils::MM'          => '6.92',
              'ExtUtils::MM_AIX'      => '6.92',
              'ExtUtils::MM_Any'      => '6.92',
              'ExtUtils::MM_BeOS'     => '6.92',
              'ExtUtils::MM_Cygwin'   => '6.92',
              'ExtUtils::MM_DOS'      => '6.92',
              'ExtUtils::MM_Darwin'   => '6.92',
              'ExtUtils::MM_MacOS'    => '6.92',
              'ExtUtils::MM_NW5'      => '6.92',
              'ExtUtils::MM_OS2'      => '6.92',
              'ExtUtils::MM_QNX'      => '6.92',
              'ExtUtils::MM_UWIN'     => '6.92',
              'ExtUtils::MM_Unix'     => '6.92',
              'ExtUtils::MM_VMS'      => '6.92',
              'ExtUtils::MM_VOS'      => '6.92',
              'ExtUtils::MM_Win32'    => '6.92',
              'ExtUtils::MM_Win95'    => '6.92',
              'ExtUtils::MY'          => '6.92',
              'ExtUtils::MakeMaker'   => '6.92',
              'ExtUtils::MakeMaker::Config'=> '6.92',
              'ExtUtils::Mkbootstrap' => '6.92',
              'ExtUtils::Mksymlists'  => '6.92',
              'ExtUtils::Packlist'    => '1.48',
              'ExtUtils::ParseXS'     => '3.24',
              'ExtUtils::ParseXS::Constants'=> '3.24',
              'ExtUtils::ParseXS::CountLines'=> '3.24',
              'ExtUtils::ParseXS::Eval'=> '3.24',
              'ExtUtils::ParseXS::Utilities'=> '3.24',
              'ExtUtils::Typemaps'    => '3.24',
              'ExtUtils::Typemaps::Cmd'=> '3.24',
              'ExtUtils::Typemaps::InputMap'=> '3.24',
              'ExtUtils::Typemaps::OutputMap'=> '3.24',
              'ExtUtils::Typemaps::Type'=> '3.24',
              'ExtUtils::testlib'     => '6.92',
              'File::Find'            => '1.27',
              'Filter::Simple'        => '0.91',
              'HTTP::Tiny'            => '0.043',
              'Hash::Util::FieldHash' => '1.15',
              'IO'                    => '1.31',
              'IO::Socket::IP'        => '0.29',
              'Locale::Codes'         => '3.30',
              'Locale::Codes::Constants'=> '3.30',
              'Locale::Codes::Country'=> '3.30',
              'Locale::Codes::Country_Codes'=> '3.30',
              'Locale::Codes::Country_Retired'=> '3.30',
              'Locale::Codes::Currency'=> '3.30',
              'Locale::Codes::Currency_Codes'=> '3.30',
              'Locale::Codes::Currency_Retired'=> '3.30',
              'Locale::Codes::LangExt'=> '3.30',
              'Locale::Codes::LangExt_Codes'=> '3.30',
              'Locale::Codes::LangExt_Retired'=> '3.30',
              'Locale::Codes::LangFam'=> '3.30',
              'Locale::Codes::LangFam_Codes'=> '3.30',
              'Locale::Codes::LangFam_Retired'=> '3.30',
              'Locale::Codes::LangVar'=> '3.30',
              'Locale::Codes::LangVar_Codes'=> '3.30',
              'Locale::Codes::LangVar_Retired'=> '3.30',
              'Locale::Codes::Language'=> '3.30',
              'Locale::Codes::Language_Codes'=> '3.30',
              'Locale::Codes::Language_Retired'=> '3.30',
              'Locale::Codes::Script' => '3.30',
              'Locale::Codes::Script_Codes'=> '3.30',
              'Locale::Codes::Script_Retired'=> '3.30',
              'Locale::Country'       => '3.30',
              'Locale::Currency'      => '3.30',
              'Locale::Language'      => '3.30',
              'Locale::Script'        => '3.30',
              'Module::CoreList'      => '3.09',
              'Module::CoreList::TieHashDelta'=> '3.09',
              'Module::CoreList::Utils'=> '3.09',
              'Module::Load'          => '0.32',
              'POSIX'                 => '1.38_03',
              'Parse::CPAN::Meta'     => '1.4414',
              'Pod::Perldoc'          => '3.23',
              'Pod::Perldoc::BaseTo'  => '3.23',
              'Pod::Perldoc::GetOptsOO'=> '3.23',
              'Pod::Perldoc::ToANSI'  => '3.23',
              'Pod::Perldoc::ToChecker'=> '3.23',
              'Pod::Perldoc::ToMan'   => '3.23',
              'Pod::Perldoc::ToNroff' => '3.23',
              'Pod::Perldoc::ToPod'   => '3.23',
              'Pod::Perldoc::ToRtf'   => '3.23',
              'Pod::Perldoc::ToTerm'  => '3.23',
              'Pod::Perldoc::ToText'  => '3.23',
              'Pod::Perldoc::ToTk'    => '3.23',
              'Pod::Perldoc::ToXml'   => '3.23',
              'Thread::Queue'         => '3.05',
              'XS::APItest'           => '0.60',
              'XS::Typemap'           => '0.13',
              'autouse'               => '1.08',
              'base'                  => '2.22',
              'charnames'             => '1.40',
              'feature'               => '1.36',
              'mro'                   => '1.16',
              'threads'               => '1.93',
              'warnings'              => '1.23',
              'warnings::register'    => '1.03',
          },
          removed => {
          }
      },
      5.019011 => {
          delta_from => 5.01901,
          changed => {
              'CPAN'                  => '2.05',
              'CPAN::Distribution'    => '2.02',
              'CPAN::FirstTime'       => '5.5306',
              'CPAN::Shell'           => '5.5004',
              'Carp'                  => '1.3301',
              'Carp::Heavy'           => '1.3301',
              'Config'                => '5.019011',
              'ExtUtils::Command::MM' => '6.94',
              'ExtUtils::Install'     => '1.67',
              'ExtUtils::Liblist'     => '6.94',
              'ExtUtils::Liblist::Kid'=> '6.94',
              'ExtUtils::MM'          => '6.94',
              'ExtUtils::MM_AIX'      => '6.94',
              'ExtUtils::MM_Any'      => '6.94',
              'ExtUtils::MM_BeOS'     => '6.94',
              'ExtUtils::MM_Cygwin'   => '6.94',
              'ExtUtils::MM_DOS'      => '6.94',
              'ExtUtils::MM_Darwin'   => '6.94',
              'ExtUtils::MM_MacOS'    => '6.94',
              'ExtUtils::MM_NW5'      => '6.94',
              'ExtUtils::MM_OS2'      => '6.94',
              'ExtUtils::MM_QNX'      => '6.94',
              'ExtUtils::MM_UWIN'     => '6.94',
              'ExtUtils::MM_Unix'     => '6.94',
              'ExtUtils::MM_VMS'      => '6.94',
              'ExtUtils::MM_VOS'      => '6.94',
              'ExtUtils::MM_Win32'    => '6.94',
              'ExtUtils::MM_Win95'    => '6.94',
              'ExtUtils::MY'          => '6.94',
              'ExtUtils::MakeMaker'   => '6.94',
              'ExtUtils::MakeMaker::Config'=> '6.94',
              'ExtUtils::Mkbootstrap' => '6.94',
              'ExtUtils::Mksymlists'  => '6.94',
              'ExtUtils::testlib'     => '6.94',
              'Module::CoreList'      => '3.10',
              'Module::CoreList::TieHashDelta'=> '3.10',
              'Module::CoreList::Utils'=> '3.10',
              'PerlIO'                => '1.09',
              'Storable'              => '2.49',
              'Win32'                 => '0.49',
              'experimental'          => '0.007',
          },
          removed => {
          }
      },
      5.020000 => {
          delta_from => 5.019011,
          changed => {
              'Config'                => '5.02',
              'Devel::PPPort'         => '3.21',
              'Encode'                => '2.60',
              'Errno'                 => '1.20_03',
              'ExtUtils::Command::MM' => '6.98',
              'ExtUtils::Liblist'     => '6.98',
              'ExtUtils::Liblist::Kid'=> '6.98',
              'ExtUtils::MM'          => '6.98',
              'ExtUtils::MM_AIX'      => '6.98',
              'ExtUtils::MM_Any'      => '6.98',
              'ExtUtils::MM_BeOS'     => '6.98',
              'ExtUtils::MM_Cygwin'   => '6.98',
              'ExtUtils::MM_DOS'      => '6.98',
              'ExtUtils::MM_Darwin'   => '6.98',
              'ExtUtils::MM_MacOS'    => '6.98',
              'ExtUtils::MM_NW5'      => '6.98',
              'ExtUtils::MM_OS2'      => '6.98',
              'ExtUtils::MM_QNX'      => '6.98',
              'ExtUtils::MM_UWIN'     => '6.98',
              'ExtUtils::MM_Unix'     => '6.98',
              'ExtUtils::MM_VMS'      => '6.98',
              'ExtUtils::MM_VOS'      => '6.98',
              'ExtUtils::MM_Win32'    => '6.98',
              'ExtUtils::MM_Win95'    => '6.98',
              'ExtUtils::MY'          => '6.98',
              'ExtUtils::MakeMaker'   => '6.98',
              'ExtUtils::MakeMaker::Config'=> '6.98',
              'ExtUtils::Miniperl'    => '1.01',
              'ExtUtils::Mkbootstrap' => '6.98',
              'ExtUtils::Mksymlists'  => '6.98',
              'ExtUtils::testlib'     => '6.98',
              'Pod::Functions::Functions'=> '1.08',
          },
          removed => {
          }
      },
      5.021000 => {
          delta_from => 5.020000,
          changed => {
              'Module::CoreList'      => '5.021001',
              'Module::CoreList::TieHashDelta'=> '5.021001',
              'Module::CoreList::Utils'=> '5.021001',
              'feature'               => '1.37',
          },
          removed => {
              'CGI'                   => 1,
              'CGI::Apache'           => 1,
              'CGI::Carp'             => 1,
              'CGI::Cookie'           => 1,
              'CGI::Fast'             => 1,
              'CGI::Pretty'           => 1,
              'CGI::Push'             => 1,
              'CGI::Switch'           => 1,
              'CGI::Util'             => 1,
              'Module::Build'         => 1,
              'Module::Build::Base'   => 1,
              'Module::Build::Compat' => 1,
              'Module::Build::Config' => 1,
              'Module::Build::ConfigData'=> 1,
              'Module::Build::Cookbook'=> 1,
              'Module::Build::Dumper' => 1,
              'Module::Build::ModuleInfo'=> 1,
              'Module::Build::Notes'  => 1,
              'Module::Build::PPMMaker'=> 1,
              'Module::Build::Platform::Default'=> 1,
              'Module::Build::Platform::MacOS'=> 1,
              'Module::Build::Platform::Unix'=> 1,
              'Module::Build::Platform::VMS'=> 1,
              'Module::Build::Platform::VOS'=> 1,
              'Module::Build::Platform::Windows'=> 1,
              'Module::Build::Platform::aix'=> 1,
              'Module::Build::Platform::cygwin'=> 1,
              'Module::Build::Platform::darwin'=> 1,
              'Module::Build::Platform::os2'=> 1,
              'Module::Build::PodParser'=> 1,
              'Module::Build::Version'=> 1,
              'Module::Build::YAML'   => 1,
              'Package::Constants'    => 1,
              'inc::latest'           => 1,
          }
      },
      5.021001 => {
          delta_from => 5.021000,
          changed => {
              'App::Prove'            => '3.32',
              'App::Prove::State'     => '3.32',
              'App::Prove::State::Result'=> '3.32',
              'App::Prove::State::Result::Test'=> '3.32',
              'Archive::Tar'          => '2.00',
              'Archive::Tar::Constant'=> '2.00',
              'Archive::Tar::File'    => '2.00',
              'B'                     => '1.49',
              'B::Deparse'            => '1.27',
              'Benchmark'             => '1.19',
              'CPAN::Meta'            => '2.141520',
              'CPAN::Meta::Converter' => '2.141520',
              'CPAN::Meta::Feature'   => '2.141520',
              'CPAN::Meta::History'   => '2.141520',
              'CPAN::Meta::Prereqs'   => '2.141520',
              'CPAN::Meta::Spec'      => '2.141520',
              'CPAN::Meta::Validator' => '2.141520',
              'Carp'                  => '1.34',
              'Carp::Heavy'           => '1.34',
              'Config'                => '5.021001',
              'Cwd'                   => '3.48',
              'Data::Dumper'          => '2.152',
              'Devel::PPPort'         => '3.24',
              'Devel::Peek'           => '1.17',
              'Digest::SHA'           => '5.92',
              'DynaLoader'            => '1.26',
              'Encode'                => '2.62',
              'Errno'                 => '1.20_04',
              'Exporter'              => '5.71',
              'Exporter::Heavy'       => '5.71',
              'ExtUtils::Install'     => '1.68',
              'ExtUtils::Miniperl'    => '1.02',
              'ExtUtils::ParseXS'     => '3.25',
              'ExtUtils::ParseXS::Constants'=> '3.25',
              'ExtUtils::ParseXS::CountLines'=> '3.25',
              'ExtUtils::ParseXS::Eval'=> '3.25',
              'ExtUtils::ParseXS::Utilities'=> '3.25',
              'ExtUtils::Typemaps'    => '3.25',
              'ExtUtils::Typemaps::Cmd'=> '3.25',
              'ExtUtils::Typemaps::InputMap'=> '3.25',
              'ExtUtils::Typemaps::OutputMap'=> '3.25',
              'ExtUtils::Typemaps::Type'=> '3.25',
              'Fatal'                 => '2.25',
              'File::Spec'            => '3.48',
              'File::Spec::Cygwin'    => '3.48',
              'File::Spec::Epoc'      => '3.48',
              'File::Spec::Functions' => '3.48',
              'File::Spec::Mac'       => '3.48',
              'File::Spec::OS2'       => '3.48',
              'File::Spec::Unix'      => '3.48',
              'File::Spec::VMS'       => '3.48',
              'File::Spec::Win32'     => '3.48',
              'Hash::Util'            => '0.17',
              'IO'                    => '1.32',
              'List::Util'            => '1.39',
              'List::Util::XS'        => '1.39',
              'Locale::Codes'         => '3.31',
              'Locale::Codes::Constants'=> '3.31',
              'Locale::Codes::Country'=> '3.31',
              'Locale::Codes::Country_Codes'=> '3.31',
              'Locale::Codes::Country_Retired'=> '3.31',
              'Locale::Codes::Currency'=> '3.31',
              'Locale::Codes::Currency_Codes'=> '3.31',
              'Locale::Codes::Currency_Retired'=> '3.31',
              'Locale::Codes::LangExt'=> '3.31',
              'Locale::Codes::LangExt_Codes'=> '3.31',
              'Locale::Codes::LangExt_Retired'=> '3.31',
              'Locale::Codes::LangFam'=> '3.31',
              'Locale::Codes::LangFam_Codes'=> '3.31',
              'Locale::Codes::LangFam_Retired'=> '3.31',
              'Locale::Codes::LangVar'=> '3.31',
              'Locale::Codes::LangVar_Codes'=> '3.31',
              'Locale::Codes::LangVar_Retired'=> '3.31',
              'Locale::Codes::Language'=> '3.31',
              'Locale::Codes::Language_Codes'=> '3.31',
              'Locale::Codes::Language_Retired'=> '3.31',
              'Locale::Codes::Script' => '3.31',
              'Locale::Codes::Script_Codes'=> '3.31',
              'Locale::Codes::Script_Retired'=> '3.31',
              'Locale::Country'       => '3.31',
              'Locale::Currency'      => '3.31',
              'Locale::Language'      => '3.31',
              'Locale::Script'        => '3.31',
              'Math::BigFloat'        => '1.9994',
              'Math::BigInt'          => '1.9995',
              'Math::BigInt::Calc'    => '1.9994',
              'Math::BigInt::CalcEmu' => '1.9994',
              'Math::BigRat'          => '0.2608',
              'Module::CoreList'      => '5.021001_01',
              'Module::CoreList::TieHashDelta'=> '5.021001_01',
              'Module::CoreList::Utils'=> '5.021001_01',
              'Module::Metadata'      => '1.000024',
              'NDBM_File'             => '1.13',
              'Net::Config'           => '1.14',
              'Net::SMTP'             => '2.34',
              'Net::Time'             => '2.11',
              'OS2::Process'          => '1.10',
              'POSIX'                 => '1.40',
              'PerlIO::encoding'      => '0.19',
              'PerlIO::mmap'          => '0.013',
              'PerlIO::scalar'        => '0.19',
              'PerlIO::via'           => '0.15',
              'Pod::Html'             => '1.22',
              'Scalar::Util'          => '1.39',
              'SelfLoader'            => '1.22',
              'Socket'                => '2.014',
              'Storable'              => '2.51',
              'TAP::Base'             => '3.32',
              'TAP::Formatter::Base'  => '3.32',
              'TAP::Formatter::Color' => '3.32',
              'TAP::Formatter::Console'=> '3.32',
              'TAP::Formatter::Console::ParallelSession'=> '3.32',
              'TAP::Formatter::Console::Session'=> '3.32',
              'TAP::Formatter::File'  => '3.32',
              'TAP::Formatter::File::Session'=> '3.32',
              'TAP::Formatter::Session'=> '3.32',
              'TAP::Harness'          => '3.32',
              'TAP::Harness::Env'     => '3.32',
              'TAP::Object'           => '3.32',
              'TAP::Parser'           => '3.32',
              'TAP::Parser::Aggregator'=> '3.32',
              'TAP::Parser::Grammar'  => '3.32',
              'TAP::Parser::Iterator' => '3.32',
              'TAP::Parser::Iterator::Array'=> '3.32',
              'TAP::Parser::Iterator::Process'=> '3.32',
              'TAP::Parser::Iterator::Stream'=> '3.32',
              'TAP::Parser::IteratorFactory'=> '3.32',
              'TAP::Parser::Multiplexer'=> '3.32',
              'TAP::Parser::Result'   => '3.32',
              'TAP::Parser::Result::Bailout'=> '3.32',
              'TAP::Parser::Result::Comment'=> '3.32',
              'TAP::Parser::Result::Plan'=> '3.32',
              'TAP::Parser::Result::Pragma'=> '3.32',
              'TAP::Parser::Result::Test'=> '3.32',
              'TAP::Parser::Result::Unknown'=> '3.32',
              'TAP::Parser::Result::Version'=> '3.32',
              'TAP::Parser::Result::YAML'=> '3.32',
              'TAP::Parser::ResultFactory'=> '3.32',
              'TAP::Parser::Scheduler'=> '3.32',
              'TAP::Parser::Scheduler::Job'=> '3.32',
              'TAP::Parser::Scheduler::Spinner'=> '3.32',
              'TAP::Parser::Source'   => '3.32',
              'TAP::Parser::SourceHandler'=> '3.32',
              'TAP::Parser::SourceHandler::Executable'=> '3.32',
              'TAP::Parser::SourceHandler::File'=> '3.32',
              'TAP::Parser::SourceHandler::Handle'=> '3.32',
              'TAP::Parser::SourceHandler::Perl'=> '3.32',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.32',
              'TAP::Parser::YAMLish::Reader'=> '3.32',
              'TAP::Parser::YAMLish::Writer'=> '3.32',
              'Term::ANSIColor'       => '4.03',
              'Test::Builder'         => '1.001003',
              'Test::Builder::Module' => '1.001003',
              'Test::Builder::Tester' => '1.23_003',
              'Test::Harness'         => '3.32',
              'Test::More'            => '1.001003',
              'Test::Simple'          => '1.001003',
              'Tie::File'             => '1.01',
              'Unicode'               => '7.0.0',
              'Unicode::Collate'      => '1.07',
              'Unicode::Normalize'    => '1.18',
              'Unicode::UCD'          => '0.58',
              'XS::APItest'           => '0.61',
              '_charnames'            => '1.41',
              'autodie'               => '2.25',
              'autodie::Scope::Guard' => '2.25',
              'autodie::Scope::GuardStack'=> '2.25',
              'autodie::ScopeUtil'    => '2.25',
              'autodie::exception'    => '2.25',
              'autodie::exception::system'=> '2.25',
              'autodie::hints'        => '2.25',
              'autodie::skip'         => '2.25',
              'charnames'             => '1.41',
              'locale'                => '1.04',
              'threads'               => '1.94',
              'utf8'                  => '1.14',
              'warnings'              => '1.24',
          },
          removed => {
          }
      },
      5.021002 => {
          delta_from => 5.021001,
          changed => {
              'B'                     => '1.50',
              'Config'                => '5.021002',
              'Cwd'                   => '3.49',
              'Devel::Peek'           => '1.18',
              'ExtUtils::Manifest'    => '1.64',
              'File::Copy'            => '2.30',
              'File::Spec'            => '3.49',
              'File::Spec::Cygwin'    => '3.49',
              'File::Spec::Epoc'      => '3.49',
              'File::Spec::Functions' => '3.49',
              'File::Spec::Mac'       => '3.49',
              'File::Spec::OS2'       => '3.49',
              'File::Spec::Unix'      => '3.49',
              'File::Spec::VMS'       => '3.49',
              'File::Spec::Win32'     => '3.49',
              'Filter::Simple'        => '0.92',
              'Hash::Util'            => '0.18',
              'IO'                    => '1.33',
              'IO::Socket::IP'        => '0.31',
              'IPC::Open3'            => '1.17',
              'Math::BigFloat'        => '1.9996',
              'Math::BigInt'          => '1.9996',
              'Math::BigInt::Calc'    => '1.9996',
              'Math::BigInt::CalcEmu' => '1.9996',
              'Module::CoreList'      => '5.021002',
              'Module::CoreList::TieHashDelta'=> '5.021002',
              'Module::CoreList::Utils'=> '5.021002',
              'POSIX'                 => '1.41',
              'Pod::Usage'            => '1.64',
              'XS::APItest'           => '0.62',
              'arybase'               => '0.08',
              'experimental'          => '0.008',
              'threads'               => '1.95',
              'warnings'              => '1.26',
          },
          removed => {
          }
      },
      5.021003 => {
          delta_from => 5.021002,
          changed => {
              'B::Debug'              => '1.21',
              'CPAN::Meta'            => '2.142060',
              'CPAN::Meta::Converter' => '2.142060',
              'CPAN::Meta::Feature'   => '2.142060',
              'CPAN::Meta::History'   => '2.142060',
              'CPAN::Meta::Merge'     => '2.142060',
              'CPAN::Meta::Prereqs'   => '2.142060',
              'CPAN::Meta::Requirements'=> '2.126',
              'CPAN::Meta::Spec'      => '2.142060',
              'CPAN::Meta::Validator' => '2.142060',
              'Config'                => '5.021003',
              'Config::Perl::V'       => '0.22',
              'ExtUtils::CBuilder'    => '0.280217',
              'ExtUtils::CBuilder::Base'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::android'=> '0.280217',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280217',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280217',
              'ExtUtils::Manifest'    => '1.65',
              'HTTP::Tiny'            => '0.047',
              'IPC::Open3'            => '1.18',
              'Module::CoreList'      => '5.021003',
              'Module::CoreList::TieHashDelta'=> '5.021003',
              'Module::CoreList::Utils'=> '5.021003',
              'Opcode'                => '1.28',
              'POSIX'                 => '1.42',
              'Safe'                  => '2.38',
              'Socket'                => '2.015',
              'Sys::Hostname'         => '1.19',
              'UNIVERSAL'             => '1.12',
              'XS::APItest'           => '0.63',
              'perlfaq'               => '5.0150045',
          },
          removed => {
          }
      },
      5.020001 => {
          delta_from => 5.020000,
          changed => {
              'Config'                => '5.020001',
              'Config::Perl::V'       => '0.22',
              'Cwd'                   => '3.48',
              'Exporter'              => '5.71',
              'Exporter::Heavy'       => '5.71',
              'ExtUtils::CBuilder'    => '0.280217',
              'ExtUtils::CBuilder::Base'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::android'=> '0.280217',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280217',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280217',
              'File::Copy'            => '2.30',
              'File::Spec'            => '3.48',
              'File::Spec::Cygwin'    => '3.48',
              'File::Spec::Epoc'      => '3.48',
              'File::Spec::Functions' => '3.48',
              'File::Spec::Mac'       => '3.48',
              'File::Spec::OS2'       => '3.48',
              'File::Spec::Unix'      => '3.48',
              'File::Spec::VMS'       => '3.48',
              'File::Spec::Win32'     => '3.48',
              'Module::CoreList'      => '5.020001',
              'Module::CoreList::TieHashDelta'=> '5.020001',
              'Module::CoreList::Utils'=> '5.020001',
              'PerlIO::via'           => '0.15',
              'Unicode::UCD'          => '0.58',
              'XS::APItest'           => '0.60_01',
              'utf8'                  => '1.13_01',
              'version'               => '0.9909',
              'version::regex'        => '0.9909',
              'version::vpp'          => '0.9909',
          },
          removed => {
          }
      },
      5.021004 => {
          delta_from => 5.021003,
          changed => {
              'App::Prove'            => '3.33',
              'App::Prove::State'     => '3.33',
              'App::Prove::State::Result'=> '3.33',
              'App::Prove::State::Result::Test'=> '3.33',
              'Archive::Tar'          => '2.02',
              'Archive::Tar::Constant'=> '2.02',
              'Archive::Tar::File'    => '2.02',
              'Attribute::Handlers'   => '0.97',
              'B'                     => '1.51',
              'B::Concise'            => '0.993',
              'B::Deparse'            => '1.28',
              'B::Op_private'         => '5.021004',
              'CPAN::Meta::Requirements'=> '2.128',
              'Config'                => '5.021004',
              'Cwd'                   => '3.50',
              'Data::Dumper'          => '2.154',
              'ExtUtils::CBuilder'    => '0.280219',
              'ExtUtils::CBuilder::Base'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280219',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280219',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280219',
              'ExtUtils::CBuilder::Platform::android'=> '0.280219',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280219',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280219',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280219',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280219',
              'ExtUtils::Install'     => '2.04',
              'ExtUtils::Installed'   => '2.04',
              'ExtUtils::Liblist::Kid'=> '6.98_01',
              'ExtUtils::Manifest'    => '1.68',
              'ExtUtils::Packlist'    => '2.04',
              'File::Find'            => '1.28',
              'File::Spec'            => '3.50',
              'File::Spec::Cygwin'    => '3.50',
              'File::Spec::Epoc'      => '3.50',
              'File::Spec::Functions' => '3.50',
              'File::Spec::Mac'       => '3.50',
              'File::Spec::OS2'       => '3.50',
              'File::Spec::Unix'      => '3.50',
              'File::Spec::VMS'       => '3.50',
              'File::Spec::Win32'     => '3.50',
              'Getopt::Std'           => '1.11',
              'HTTP::Tiny'            => '0.049',
              'IO'                    => '1.34',
              'IO::Socket::IP'        => '0.32',
              'List::Util'            => '1.41',
              'List::Util::XS'        => '1.41',
              'Locale::Codes'         => '3.32',
              'Locale::Codes::Constants'=> '3.32',
              'Locale::Codes::Country'=> '3.32',
              'Locale::Codes::Country_Codes'=> '3.32',
              'Locale::Codes::Country_Retired'=> '3.32',
              'Locale::Codes::Currency'=> '3.32',
              'Locale::Codes::Currency_Codes'=> '3.32',
              'Locale::Codes::Currency_Retired'=> '3.32',
              'Locale::Codes::LangExt'=> '3.32',
              'Locale::Codes::LangExt_Codes'=> '3.32',
              'Locale::Codes::LangExt_Retired'=> '3.32',
              'Locale::Codes::LangFam'=> '3.32',
              'Locale::Codes::LangFam_Codes'=> '3.32',
              'Locale::Codes::LangFam_Retired'=> '3.32',
              'Locale::Codes::LangVar'=> '3.32',
              'Locale::Codes::LangVar_Codes'=> '3.32',
              'Locale::Codes::LangVar_Retired'=> '3.32',
              'Locale::Codes::Language'=> '3.32',
              'Locale::Codes::Language_Codes'=> '3.32',
              'Locale::Codes::Language_Retired'=> '3.32',
              'Locale::Codes::Script' => '3.32',
              'Locale::Codes::Script_Codes'=> '3.32',
              'Locale::Codes::Script_Retired'=> '3.32',
              'Locale::Country'       => '3.32',
              'Locale::Currency'      => '3.32',
              'Locale::Language'      => '3.32',
              'Locale::Script'        => '3.32',
              'Math::BigFloat'        => '1.9997',
              'Math::BigInt'          => '1.9997',
              'Math::BigInt::Calc'    => '1.9997',
              'Math::BigInt::CalcEmu' => '1.9997',
              'Module::CoreList'      => '5.20140920',
              'Module::CoreList::TieHashDelta'=> '5.20140920',
              'Module::CoreList::Utils'=> '5.20140920',
              'POSIX'                 => '1.43',
              'Pod::Perldoc'          => '3.24',
              'Pod::Perldoc::BaseTo'  => '3.24',
              'Pod::Perldoc::GetOptsOO'=> '3.24',
              'Pod::Perldoc::ToANSI'  => '3.24',
              'Pod::Perldoc::ToChecker'=> '3.24',
              'Pod::Perldoc::ToMan'   => '3.24',
              'Pod::Perldoc::ToNroff' => '3.24',
              'Pod::Perldoc::ToPod'   => '3.24',
              'Pod::Perldoc::ToRtf'   => '3.24',
              'Pod::Perldoc::ToTerm'  => '3.24',
              'Pod::Perldoc::ToText'  => '3.24',
              'Pod::Perldoc::ToTk'    => '3.24',
              'Pod::Perldoc::ToXml'   => '3.24',
              'Scalar::Util'          => '1.41',
              'Sub::Util'             => '1.41',
              'TAP::Base'             => '3.33',
              'TAP::Formatter::Base'  => '3.33',
              'TAP::Formatter::Color' => '3.33',
              'TAP::Formatter::Console'=> '3.33',
              'TAP::Formatter::Console::ParallelSession'=> '3.33',
              'TAP::Formatter::Console::Session'=> '3.33',
              'TAP::Formatter::File'  => '3.33',
              'TAP::Formatter::File::Session'=> '3.33',
              'TAP::Formatter::Session'=> '3.33',
              'TAP::Harness'          => '3.33',
              'TAP::Harness::Env'     => '3.33',
              'TAP::Object'           => '3.33',
              'TAP::Parser'           => '3.33',
              'TAP::Parser::Aggregator'=> '3.33',
              'TAP::Parser::Grammar'  => '3.33',
              'TAP::Parser::Iterator' => '3.33',
              'TAP::Parser::Iterator::Array'=> '3.33',
              'TAP::Parser::Iterator::Process'=> '3.33',
              'TAP::Parser::Iterator::Stream'=> '3.33',
              'TAP::Parser::IteratorFactory'=> '3.33',
              'TAP::Parser::Multiplexer'=> '3.33',
              'TAP::Parser::Result'   => '3.33',
              'TAP::Parser::Result::Bailout'=> '3.33',
              'TAP::Parser::Result::Comment'=> '3.33',
              'TAP::Parser::Result::Plan'=> '3.33',
              'TAP::Parser::Result::Pragma'=> '3.33',
              'TAP::Parser::Result::Test'=> '3.33',
              'TAP::Parser::Result::Unknown'=> '3.33',
              'TAP::Parser::Result::Version'=> '3.33',
              'TAP::Parser::Result::YAML'=> '3.33',
              'TAP::Parser::ResultFactory'=> '3.33',
              'TAP::Parser::Scheduler'=> '3.33',
              'TAP::Parser::Scheduler::Job'=> '3.33',
              'TAP::Parser::Scheduler::Spinner'=> '3.33',
              'TAP::Parser::Source'   => '3.33',
              'TAP::Parser::SourceHandler'=> '3.33',
              'TAP::Parser::SourceHandler::Executable'=> '3.33',
              'TAP::Parser::SourceHandler::File'=> '3.33',
              'TAP::Parser::SourceHandler::Handle'=> '3.33',
              'TAP::Parser::SourceHandler::Perl'=> '3.33',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.33',
              'TAP::Parser::YAMLish::Reader'=> '3.33',
              'TAP::Parser::YAMLish::Writer'=> '3.33',
              'Term::ReadLine'        => '1.15',
              'Test::Builder'         => '1.001006',
              'Test::Builder::Module' => '1.001006',
              'Test::Builder::Tester' => '1.24',
              'Test::Builder::Tester::Color'=> '1.24',
              'Test::Harness'         => '3.33',
              'Test::More'            => '1.001006',
              'Test::Simple'          => '1.001006',
              'Time::Piece'           => '1.29',
              'Time::Seconds'         => '1.29',
              'XS::APItest'           => '0.64',
              '_charnames'            => '1.42',
              'attributes'            => '0.23',
              'bigint'                => '0.37',
              'bignum'                => '0.38',
              'bigrat'                => '0.37',
              'constant'              => '1.32',
              'experimental'          => '0.010',
              'overload'              => '1.23',
              'threads'               => '1.96',
              'version'               => '0.9909',
              'version::regex'        => '0.9909',
              'version::vpp'          => '0.9909',
          },
          removed => {
          }
      },
      5.021005 => {
          delta_from => 5.021004,
          changed => {
              'B'                     => '1.52',
              'B::Concise'            => '0.994',
              'B::Debug'              => '1.22',
              'B::Deparse'            => '1.29',
              'B::Op_private'         => '5.021005',
              'CPAN::Meta'            => '2.142690',
              'CPAN::Meta::Converter' => '2.142690',
              'CPAN::Meta::Feature'   => '2.142690',
              'CPAN::Meta::History'   => '2.142690',
              'CPAN::Meta::Merge'     => '2.142690',
              'CPAN::Meta::Prereqs'   => '2.142690',
              'CPAN::Meta::Spec'      => '2.142690',
              'CPAN::Meta::Validator' => '2.142690',
              'Compress::Raw::Bzip2'  => '2.066',
              'Compress::Raw::Zlib'   => '2.066',
              'Compress::Zlib'        => '2.066',
              'Config'                => '5.021005',
              'Cwd'                   => '3.51',
              'DynaLoader'            => '1.27',
              'Errno'                 => '1.21',
              'ExtUtils::CBuilder'    => '0.280220',
              'ExtUtils::CBuilder::Base'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280220',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280220',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280220',
              'ExtUtils::CBuilder::Platform::android'=> '0.280220',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280220',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280220',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280220',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280220',
              'ExtUtils::Miniperl'    => '1.03',
              'Fcntl'                 => '1.13',
              'File::Find'            => '1.29',
              'File::Spec'            => '3.51',
              'File::Spec::Cygwin'    => '3.51',
              'File::Spec::Epoc'      => '3.51',
              'File::Spec::Functions' => '3.51',
              'File::Spec::Mac'       => '3.51',
              'File::Spec::OS2'       => '3.51',
              'File::Spec::Unix'      => '3.51',
              'File::Spec::VMS'       => '3.51',
              'File::Spec::Win32'     => '3.51',
              'HTTP::Tiny'            => '0.050',
              'IO::Compress::Adapter::Bzip2'=> '2.066',
              'IO::Compress::Adapter::Deflate'=> '2.066',
              'IO::Compress::Adapter::Identity'=> '2.066',
              'IO::Compress::Base'    => '2.066',
              'IO::Compress::Base::Common'=> '2.066',
              'IO::Compress::Bzip2'   => '2.066',
              'IO::Compress::Deflate' => '2.066',
              'IO::Compress::Gzip'    => '2.066',
              'IO::Compress::Gzip::Constants'=> '2.066',
              'IO::Compress::RawDeflate'=> '2.066',
              'IO::Compress::Zip'     => '2.066',
              'IO::Compress::Zip::Constants'=> '2.066',
              'IO::Compress::Zlib::Constants'=> '2.066',
              'IO::Compress::Zlib::Extra'=> '2.066',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.066',
              'IO::Uncompress::Adapter::Identity'=> '2.066',
              'IO::Uncompress::Adapter::Inflate'=> '2.066',
              'IO::Uncompress::AnyInflate'=> '2.066',
              'IO::Uncompress::AnyUncompress'=> '2.066',
              'IO::Uncompress::Base'  => '2.066',
              'IO::Uncompress::Bunzip2'=> '2.066',
              'IO::Uncompress::Gunzip'=> '2.066',
              'IO::Uncompress::Inflate'=> '2.066',
              'IO::Uncompress::RawInflate'=> '2.066',
              'IO::Uncompress::Unzip' => '2.066',
              'JSON::PP'              => '2.27300',
              'Module::CoreList'      => '5.20141020',
              'Module::CoreList::TieHashDelta'=> '5.20141020',
              'Module::CoreList::Utils'=> '5.20141020',
              'Net::Cmd'              => '3.02',
              'Net::Config'           => '3.02',
              'Net::Domain'           => '3.02',
              'Net::FTP'              => '3.02',
              'Net::FTP::A'           => '3.02',
              'Net::FTP::E'           => '3.02',
              'Net::FTP::I'           => '3.02',
              'Net::FTP::L'           => '3.02',
              'Net::FTP::dataconn'    => '3.02',
              'Net::NNTP'             => '3.02',
              'Net::Netrc'            => '3.02',
              'Net::POP3'             => '3.02',
              'Net::SMTP'             => '3.02',
              'Net::Time'             => '3.02',
              'Opcode'                => '1.29',
              'POSIX'                 => '1.45',
              'Socket'                => '2.016',
              'Test::Builder'         => '1.001008',
              'Test::Builder::Module' => '1.001008',
              'Test::More'            => '1.001008',
              'Test::Simple'          => '1.001008',
              'XS::APItest'           => '0.65',
              'XSLoader'              => '0.18',
              'attributes'            => '0.24',
              'experimental'          => '0.012',
              'feature'               => '1.38',
              'perlfaq'               => '5.0150046',
              're'                    => '0.27',
              'threads::shared'       => '1.47',
              'warnings'              => '1.28',
              'warnings::register'    => '1.04',
          },
          removed => {
          }
      },
      5.021006 => {
          delta_from => 5.021005,
          changed => {
              'App::Prove'            => '3.34',
              'App::Prove::State'     => '3.34',
              'App::Prove::State::Result'=> '3.34',
              'App::Prove::State::Result::Test'=> '3.34',
              'B'                     => '1.53',
              'B::Concise'            => '0.995',
              'B::Deparse'            => '1.30',
              'B::Op_private'         => '5.021006',
              'CPAN::Meta'            => '2.143240',
              'CPAN::Meta::Converter' => '2.143240',
              'CPAN::Meta::Feature'   => '2.143240',
              'CPAN::Meta::History'   => '2.143240',
              'CPAN::Meta::Merge'     => '2.143240',
              'CPAN::Meta::Prereqs'   => '2.143240',
              'CPAN::Meta::Requirements'=> '2.130',
              'CPAN::Meta::Spec'      => '2.143240',
              'CPAN::Meta::Validator' => '2.143240',
              'Config'                => '5.021006',
              'Devel::Peek'           => '1.19',
              'Digest::SHA'           => '5.93',
              'DynaLoader'            => '1.28',
              'Encode'                => '2.64',
              'Exporter'              => '5.72',
              'Exporter::Heavy'       => '5.72',
              'ExtUtils::Command::MM' => '7.02',
              'ExtUtils::Liblist'     => '7.02',
              'ExtUtils::Liblist::Kid'=> '7.02',
              'ExtUtils::MM'          => '7.02',
              'ExtUtils::MM_AIX'      => '7.02',
              'ExtUtils::MM_Any'      => '7.02',
              'ExtUtils::MM_BeOS'     => '7.02',
              'ExtUtils::MM_Cygwin'   => '7.02',
              'ExtUtils::MM_DOS'      => '7.02',
              'ExtUtils::MM_Darwin'   => '7.02',
              'ExtUtils::MM_MacOS'    => '7.02',
              'ExtUtils::MM_NW5'      => '7.02',
              'ExtUtils::MM_OS2'      => '7.02',
              'ExtUtils::MM_QNX'      => '7.02',
              'ExtUtils::MM_UWIN'     => '7.02',
              'ExtUtils::MM_Unix'     => '7.02',
              'ExtUtils::MM_VMS'      => '7.02',
              'ExtUtils::MM_VOS'      => '7.02',
              'ExtUtils::MM_Win32'    => '7.02',
              'ExtUtils::MM_Win95'    => '7.02',
              'ExtUtils::MY'          => '7.02',
              'ExtUtils::MakeMaker'   => '7.02',
              'ExtUtils::MakeMaker::Config'=> '7.02',
              'ExtUtils::MakeMaker::Locale'=> '7.02',
              'ExtUtils::MakeMaker::version'=> '7.02',
              'ExtUtils::MakeMaker::version::regex'=> '7.02',
              'ExtUtils::MakeMaker::version::vpp'=> '7.02',
              'ExtUtils::Manifest'    => '1.69',
              'ExtUtils::Mkbootstrap' => '7.02',
              'ExtUtils::Mksymlists'  => '7.02',
              'ExtUtils::ParseXS'     => '3.26',
              'ExtUtils::ParseXS::Constants'=> '3.26',
              'ExtUtils::ParseXS::CountLines'=> '3.26',
              'ExtUtils::ParseXS::Eval'=> '3.26',
              'ExtUtils::ParseXS::Utilities'=> '3.26',
              'ExtUtils::testlib'     => '7.02',
              'File::Spec::VMS'       => '3.52',
              'HTTP::Tiny'            => '0.051',
              'I18N::Langinfo'        => '0.12',
              'IO::Socket'            => '1.38',
              'Module::CoreList'      => '5.20141120',
              'Module::CoreList::TieHashDelta'=> '5.20141120',
              'Module::CoreList::Utils'=> '5.20141120',
              'POSIX'                 => '1.46',
              'PerlIO::encoding'      => '0.20',
              'PerlIO::scalar'        => '0.20',
              'TAP::Base'             => '3.34',
              'TAP::Formatter::Base'  => '3.34',
              'TAP::Formatter::Color' => '3.34',
              'TAP::Formatter::Console'=> '3.34',
              'TAP::Formatter::Console::ParallelSession'=> '3.34',
              'TAP::Formatter::Console::Session'=> '3.34',
              'TAP::Formatter::File'  => '3.34',
              'TAP::Formatter::File::Session'=> '3.34',
              'TAP::Formatter::Session'=> '3.34',
              'TAP::Harness'          => '3.34',
              'TAP::Harness::Env'     => '3.34',
              'TAP::Object'           => '3.34',
              'TAP::Parser'           => '3.34',
              'TAP::Parser::Aggregator'=> '3.34',
              'TAP::Parser::Grammar'  => '3.34',
              'TAP::Parser::Iterator' => '3.34',
              'TAP::Parser::Iterator::Array'=> '3.34',
              'TAP::Parser::Iterator::Process'=> '3.34',
              'TAP::Parser::Iterator::Stream'=> '3.34',
              'TAP::Parser::IteratorFactory'=> '3.34',
              'TAP::Parser::Multiplexer'=> '3.34',
              'TAP::Parser::Result'   => '3.34',
              'TAP::Parser::Result::Bailout'=> '3.34',
              'TAP::Parser::Result::Comment'=> '3.34',
              'TAP::Parser::Result::Plan'=> '3.34',
              'TAP::Parser::Result::Pragma'=> '3.34',
              'TAP::Parser::Result::Test'=> '3.34',
              'TAP::Parser::Result::Unknown'=> '3.34',
              'TAP::Parser::Result::Version'=> '3.34',
              'TAP::Parser::Result::YAML'=> '3.34',
              'TAP::Parser::ResultFactory'=> '3.34',
              'TAP::Parser::Scheduler'=> '3.34',
              'TAP::Parser::Scheduler::Job'=> '3.34',
              'TAP::Parser::Scheduler::Spinner'=> '3.34',
              'TAP::Parser::Source'   => '3.34',
              'TAP::Parser::SourceHandler'=> '3.34',
              'TAP::Parser::SourceHandler::Executable'=> '3.34',
              'TAP::Parser::SourceHandler::File'=> '3.34',
              'TAP::Parser::SourceHandler::Handle'=> '3.34',
              'TAP::Parser::SourceHandler::Perl'=> '3.34',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.34',
              'TAP::Parser::YAMLish::Reader'=> '3.34',
              'TAP::Parser::YAMLish::Writer'=> '3.34',
              'Test::Builder'         => '1.301001_075',
              'Test::Builder::Module' => '1.301001_075',
              'Test::Builder::Tester' => '1.301001_075',
              'Test::Builder::Tester::Color'=> '1.301001_075',
              'Test::Harness'         => '3.34',
              'Test::More'            => '1.301001_075',
              'Test::More::DeepCheck' => undef,
              'Test::More::DeepCheck::Strict'=> undef,
              'Test::More::DeepCheck::Tolerant'=> undef,
              'Test::More::Tools'     => undef,
              'Test::MostlyLike'      => undef,
              'Test::Simple'          => '1.301001_075',
              'Test::Stream'          => '1.301001_075',
              'Test::Stream::ArrayBase'=> undef,
              'Test::Stream::ArrayBase::Meta'=> undef,
              'Test::Stream::Carp'    => undef,
              'Test::Stream::Context' => undef,
              'Test::Stream::Event'   => undef,
              'Test::Stream::Event::Bail'=> undef,
              'Test::Stream::Event::Child'=> undef,
              'Test::Stream::Event::Diag'=> undef,
              'Test::Stream::Event::Finish'=> undef,
              'Test::Stream::Event::Note'=> undef,
              'Test::Stream::Event::Ok'=> undef,
              'Test::Stream::Event::Plan'=> undef,
              'Test::Stream::Event::Subtest'=> undef,
              'Test::Stream::ExitMagic'=> undef,
              'Test::Stream::ExitMagic::Context'=> undef,
              'Test::Stream::Exporter'=> undef,
              'Test::Stream::Exporter::Meta'=> undef,
              'Test::Stream::IOSets'  => undef,
              'Test::Stream::Meta'    => undef,
              'Test::Stream::PackageUtil'=> undef,
              'Test::Stream::Tester'  => undef,
              'Test::Stream::Tester::Checks'=> undef,
              'Test::Stream::Tester::Checks::Event'=> undef,
              'Test::Stream::Tester::Events'=> undef,
              'Test::Stream::Tester::Events::Event'=> undef,
              'Test::Stream::Tester::Grab'=> undef,
              'Test::Stream::Threads' => undef,
              'Test::Stream::Toolset' => undef,
              'Test::Stream::Util'    => undef,
              'Test::Tester'          => '1.301001_075',
              'Test::Tester::Capture' => undef,
              'Test::use::ok'         => '1.301001_075',
              'Unicode::UCD'          => '0.59',
              'XS::APItest'           => '0.68',
              'XSLoader'              => '0.19',
              'experimental'          => '0.013',
              'locale'                => '1.05',
              'ok'                    => '1.301001_075',
              'overload'              => '1.24',
              're'                    => '0.28',
              'warnings'              => '1.29',
          },
          removed => {
          }
      },
      5.021007 => {
          delta_from => 5.021006,
          changed => {
              'Archive::Tar'          => '2.04',
              'Archive::Tar::Constant'=> '2.04',
              'Archive::Tar::File'    => '2.04',
              'B'                     => '1.54',
              'B::Concise'            => '0.996',
              'B::Deparse'            => '1.31',
              'B::Op_private'         => '5.021007',
              'B::Showlex'            => '1.05',
              'Compress::Raw::Bzip2'  => '2.067',
              'Compress::Raw::Zlib'   => '2.067',
              'Compress::Zlib'        => '2.067',
              'Config'                => '5.021007',
              'Cwd'                   => '3.54',
              'DB_File'               => '1.834',
              'Data::Dumper'          => '2.155',
              'Devel::PPPort'         => '3.25',
              'Devel::Peek'           => '1.20',
              'DynaLoader'            => '1.29',
              'Encode'                => '2.67',
              'Errno'                 => '1.22',
              'ExtUtils::CBuilder'    => '0.280221',
              'ExtUtils::CBuilder::Base'=> '0.280221',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280221',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280221',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280221',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280221',
              'ExtUtils::CBuilder::Platform::android'=> '0.280221',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280221',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280221',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280221',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280221',
              'ExtUtils::Command::MM' => '7.04',
              'ExtUtils::Liblist'     => '7.04',
              'ExtUtils::Liblist::Kid'=> '7.04',
              'ExtUtils::MM'          => '7.04',
              'ExtUtils::MM_AIX'      => '7.04',
              'ExtUtils::MM_Any'      => '7.04',
              'ExtUtils::MM_BeOS'     => '7.04',
              'ExtUtils::MM_Cygwin'   => '7.04',
              'ExtUtils::MM_DOS'      => '7.04',
              'ExtUtils::MM_Darwin'   => '7.04',
              'ExtUtils::MM_MacOS'    => '7.04',
              'ExtUtils::MM_NW5'      => '7.04',
              'ExtUtils::MM_OS2'      => '7.04',
              'ExtUtils::MM_QNX'      => '7.04',
              'ExtUtils::MM_UWIN'     => '7.04',
              'ExtUtils::MM_Unix'     => '7.04',
              'ExtUtils::MM_VMS'      => '7.04',
              'ExtUtils::MM_VOS'      => '7.04',
              'ExtUtils::MM_Win32'    => '7.04',
              'ExtUtils::MM_Win95'    => '7.04',
              'ExtUtils::MY'          => '7.04',
              'ExtUtils::MakeMaker'   => '7.04',
              'ExtUtils::MakeMaker::Config'=> '7.04',
              'ExtUtils::MakeMaker::Locale'=> '7.04',
              'ExtUtils::MakeMaker::version'=> '7.04',
              'ExtUtils::MakeMaker::version::regex'=> '7.04',
              'ExtUtils::MakeMaker::version::vpp'=> '7.04',
              'ExtUtils::Mkbootstrap' => '7.04',
              'ExtUtils::Mksymlists'  => '7.04',
              'ExtUtils::ParseXS'     => '3.27',
              'ExtUtils::ParseXS::Constants'=> '3.27',
              'ExtUtils::ParseXS::CountLines'=> '3.27',
              'ExtUtils::ParseXS::Eval'=> '3.27',
              'ExtUtils::ParseXS::Utilities'=> '3.27',
              'ExtUtils::testlib'     => '7.04',
              'File::Spec'            => '3.53',
              'File::Spec::Cygwin'    => '3.54',
              'File::Spec::Epoc'      => '3.54',
              'File::Spec::Functions' => '3.54',
              'File::Spec::Mac'       => '3.54',
              'File::Spec::OS2'       => '3.54',
              'File::Spec::Unix'      => '3.54',
              'File::Spec::VMS'       => '3.54',
              'File::Spec::Win32'     => '3.54',
              'Filter::Util::Call'    => '1.51',
              'HTTP::Tiny'            => '0.053',
              'IO'                    => '1.35',
              'IO::Compress::Adapter::Bzip2'=> '2.067',
              'IO::Compress::Adapter::Deflate'=> '2.067',
              'IO::Compress::Adapter::Identity'=> '2.067',
              'IO::Compress::Base'    => '2.067',
              'IO::Compress::Base::Common'=> '2.067',
              'IO::Compress::Bzip2'   => '2.067',
              'IO::Compress::Deflate' => '2.067',
              'IO::Compress::Gzip'    => '2.067',
              'IO::Compress::Gzip::Constants'=> '2.067',
              'IO::Compress::RawDeflate'=> '2.067',
              'IO::Compress::Zip'     => '2.067',
              'IO::Compress::Zip::Constants'=> '2.067',
              'IO::Compress::Zlib::Constants'=> '2.067',
              'IO::Compress::Zlib::Extra'=> '2.067',
              'IO::Socket::IP'        => '0.34',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.067',
              'IO::Uncompress::Adapter::Identity'=> '2.067',
              'IO::Uncompress::Adapter::Inflate'=> '2.067',
              'IO::Uncompress::AnyInflate'=> '2.067',
              'IO::Uncompress::AnyUncompress'=> '2.067',
              'IO::Uncompress::Base'  => '2.067',
              'IO::Uncompress::Bunzip2'=> '2.067',
              'IO::Uncompress::Gunzip'=> '2.067',
              'IO::Uncompress::Inflate'=> '2.067',
              'IO::Uncompress::RawInflate'=> '2.067',
              'IO::Uncompress::Unzip' => '2.067',
              'Locale::Codes'         => '3.33',
              'Locale::Codes::Constants'=> '3.33',
              'Locale::Codes::Country'=> '3.33',
              'Locale::Codes::Country_Codes'=> '3.33',
              'Locale::Codes::Country_Retired'=> '3.33',
              'Locale::Codes::Currency'=> '3.33',
              'Locale::Codes::Currency_Codes'=> '3.33',
              'Locale::Codes::Currency_Retired'=> '3.33',
              'Locale::Codes::LangExt'=> '3.33',
              'Locale::Codes::LangExt_Codes'=> '3.33',
              'Locale::Codes::LangExt_Retired'=> '3.33',
              'Locale::Codes::LangFam'=> '3.33',
              'Locale::Codes::LangFam_Codes'=> '3.33',
              'Locale::Codes::LangFam_Retired'=> '3.33',
              'Locale::Codes::LangVar'=> '3.33',
              'Locale::Codes::LangVar_Codes'=> '3.33',
              'Locale::Codes::LangVar_Retired'=> '3.33',
              'Locale::Codes::Language'=> '3.33',
              'Locale::Codes::Language_Codes'=> '3.33',
              'Locale::Codes::Language_Retired'=> '3.33',
              'Locale::Codes::Script' => '3.33',
              'Locale::Codes::Script_Codes'=> '3.33',
              'Locale::Codes::Script_Retired'=> '3.33',
              'Locale::Country'       => '3.33',
              'Locale::Currency'      => '3.33',
              'Locale::Language'      => '3.33',
              'Locale::Maketext'      => '1.26',
              'Locale::Script'        => '3.33',
              'Module::CoreList'      => '5.20141220',
              'Module::CoreList::TieHashDelta'=> '5.20141220',
              'Module::CoreList::Utils'=> '5.20141220',
              'NDBM_File'             => '1.14',
              'Net::Cmd'              => '3.04',
              'Net::Config'           => '3.04',
              'Net::Domain'           => '3.04',
              'Net::FTP'              => '3.04',
              'Net::FTP::A'           => '3.04',
              'Net::FTP::E'           => '3.04',
              'Net::FTP::I'           => '3.04',
              'Net::FTP::L'           => '3.04',
              'Net::FTP::dataconn'    => '3.04',
              'Net::NNTP'             => '3.04',
              'Net::Netrc'            => '3.04',
              'Net::POP3'             => '3.04',
              'Net::SMTP'             => '3.04',
              'Net::Time'             => '3.04',
              'Opcode'                => '1.30',
              'POSIX'                 => '1.48',
              'PerlIO::scalar'        => '0.21',
              'Pod::Escapes'          => '1.07',
              'SDBM_File'             => '1.12',
              'Storable'              => '2.52',
              'Sys::Hostname'         => '1.20',
              'Test::Builder'         => '1.301001_090',
              'Test::Builder::Module' => '1.301001_090',
              'Test::Builder::Tester' => '1.301001_090',
              'Test::Builder::Tester::Color'=> '1.301001_090',
              'Test::CanFork'         => undef,
              'Test::CanThread'       => undef,
              'Test::More'            => '1.301001_090',
              'Test::Simple'          => '1.301001_090',
              'Test::Stream'          => '1.301001_090',
              'Test::Stream::API'     => undef,
              'Test::Stream::ForceExit'=> undef,
              'Test::Stream::Subtest' => undef,
              'Test::Tester'          => '1.301001_090',
              'Test::use::ok'         => '1.301001_090',
              'Unicode::Collate'      => '1.09',
              'Unicode::Collate::CJK::Big5'=> '1.09',
              'Unicode::Collate::CJK::GB2312'=> '1.09',
              'Unicode::Collate::CJK::JISX0208'=> '1.09',
              'Unicode::Collate::CJK::Korean'=> '1.09',
              'Unicode::Collate::CJK::Pinyin'=> '1.09',
              'Unicode::Collate::CJK::Stroke'=> '1.09',
              'Unicode::Collate::CJK::Zhuyin'=> '1.09',
              'Unicode::Collate::Locale'=> '1.09',
              'XS::APItest'           => '0.69',
              'XSLoader'              => '0.20',
              '_charnames'            => '1.43',
              'arybase'               => '0.09',
              'charnames'             => '1.43',
              'feature'               => '1.39',
              'mro'                   => '1.17',
              'ok'                    => '1.301001_090',
              'strict'                => '1.09',
              'threads'               => '1.96_001',
          },
          removed => {
          }
      },
      5.021008 => {
          delta_from => 5.021007,
          changed => {
              'App::Prove'            => '3.35',
              'App::Prove::State'     => '3.35',
              'App::Prove::State::Result'=> '3.35',
              'App::Prove::State::Result::Test'=> '3.35',
              'B'                     => '1.55',
              'B::Deparse'            => '1.32',
              'B::Op_private'         => '5.021008',
              'CPAN::Meta::Requirements'=> '2.131',
              'Compress::Raw::Bzip2'  => '2.068',
              'Compress::Raw::Zlib'   => '2.068',
              'Compress::Zlib'        => '2.068',
              'Config'                => '5.021008',
              'DB_File'               => '1.835',
              'Data::Dumper'          => '2.156',
              'Devel::PPPort'         => '3.28',
              'Devel::Peek'           => '1.21',
              'Digest::MD5'           => '2.54',
              'Digest::SHA'           => '5.95',
              'DynaLoader'            => '1.30',
              'ExtUtils::Command'     => '1.20',
              'ExtUtils::Manifest'    => '1.70',
              'Fatal'                 => '2.26',
              'File::Glob'            => '1.24',
              'Filter::Util::Call'    => '1.54',
              'Getopt::Long'          => '2.43',
              'IO::Compress::Adapter::Bzip2'=> '2.068',
              'IO::Compress::Adapter::Deflate'=> '2.068',
              'IO::Compress::Adapter::Identity'=> '2.068',
              'IO::Compress::Base'    => '2.068',
              'IO::Compress::Base::Common'=> '2.068',
              'IO::Compress::Bzip2'   => '2.068',
              'IO::Compress::Deflate' => '2.068',
              'IO::Compress::Gzip'    => '2.068',
              'IO::Compress::Gzip::Constants'=> '2.068',
              'IO::Compress::RawDeflate'=> '2.068',
              'IO::Compress::Zip'     => '2.068',
              'IO::Compress::Zip::Constants'=> '2.068',
              'IO::Compress::Zlib::Constants'=> '2.068',
              'IO::Compress::Zlib::Extra'=> '2.068',
              'IO::Socket::IP'        => '0.36',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.068',
              'IO::Uncompress::Adapter::Identity'=> '2.068',
              'IO::Uncompress::Adapter::Inflate'=> '2.068',
              'IO::Uncompress::AnyInflate'=> '2.068',
              'IO::Uncompress::AnyUncompress'=> '2.068',
              'IO::Uncompress::Base'  => '2.068',
              'IO::Uncompress::Bunzip2'=> '2.068',
              'IO::Uncompress::Gunzip'=> '2.068',
              'IO::Uncompress::Inflate'=> '2.068',
              'IO::Uncompress::RawInflate'=> '2.068',
              'IO::Uncompress::Unzip' => '2.068',
              'MIME::Base64'          => '3.15',
              'Module::CoreList'      => '5.20150220',
              'Module::CoreList::TieHashDelta'=> '5.20150220',
              'Module::CoreList::Utils'=> '5.20150220',
              'Module::Load::Conditional'=> '0.64',
              'Module::Metadata'      => '1.000026',
              'Net::Cmd'              => '3.05',
              'Net::Config'           => '3.05',
              'Net::Domain'           => '3.05',
              'Net::FTP'              => '3.05',
              'Net::FTP::A'           => '3.05',
              'Net::FTP::E'           => '3.05',
              'Net::FTP::I'           => '3.05',
              'Net::FTP::L'           => '3.05',
              'Net::FTP::dataconn'    => '3.05',
              'Net::NNTP'             => '3.05',
              'Net::Netrc'            => '3.05',
              'Net::POP3'             => '3.05',
              'Net::SMTP'             => '3.05',
              'Net::Time'             => '3.05',
              'Opcode'                => '1.31',
              'POSIX'                 => '1.49',
              'PerlIO::encoding'      => '0.21',
              'Pod::Simple'           => '3.29',
              'Pod::Simple::BlackBox' => '3.29',
              'Pod::Simple::Checker'  => '3.29',
              'Pod::Simple::Debug'    => '3.29',
              'Pod::Simple::DumpAsText'=> '3.29',
              'Pod::Simple::DumpAsXML'=> '3.29',
              'Pod::Simple::HTML'     => '3.29',
              'Pod::Simple::HTMLBatch'=> '3.29',
              'Pod::Simple::LinkSection'=> '3.29',
              'Pod::Simple::Methody'  => '3.29',
              'Pod::Simple::Progress' => '3.29',
              'Pod::Simple::PullParser'=> '3.29',
              'Pod::Simple::PullParserEndToken'=> '3.29',
              'Pod::Simple::PullParserStartToken'=> '3.29',
              'Pod::Simple::PullParserTextToken'=> '3.29',
              'Pod::Simple::PullParserToken'=> '3.29',
              'Pod::Simple::RTF'      => '3.29',
              'Pod::Simple::Search'   => '3.29',
              'Pod::Simple::SimpleTree'=> '3.29',
              'Pod::Simple::Text'     => '3.29',
              'Pod::Simple::TextContent'=> '3.29',
              'Pod::Simple::TiedOutFH'=> '3.29',
              'Pod::Simple::Transcode'=> '3.29',
              'Pod::Simple::TranscodeDumb'=> '3.29',
              'Pod::Simple::TranscodeSmart'=> '3.29',
              'Pod::Simple::XHTML'    => '3.29',
              'Pod::Simple::XMLOutStream'=> '3.29',
              'SDBM_File'             => '1.13',
              'Safe'                  => '2.39',
              'TAP::Base'             => '3.35',
              'TAP::Formatter::Base'  => '3.35',
              'TAP::Formatter::Color' => '3.35',
              'TAP::Formatter::Console'=> '3.35',
              'TAP::Formatter::Console::ParallelSession'=> '3.35',
              'TAP::Formatter::Console::Session'=> '3.35',
              'TAP::Formatter::File'  => '3.35',
              'TAP::Formatter::File::Session'=> '3.35',
              'TAP::Formatter::Session'=> '3.35',
              'TAP::Harness'          => '3.35',
              'TAP::Harness::Env'     => '3.35',
              'TAP::Object'           => '3.35',
              'TAP::Parser'           => '3.35',
              'TAP::Parser::Aggregator'=> '3.35',
              'TAP::Parser::Grammar'  => '3.35',
              'TAP::Parser::Iterator' => '3.35',
              'TAP::Parser::Iterator::Array'=> '3.35',
              'TAP::Parser::Iterator::Process'=> '3.35',
              'TAP::Parser::Iterator::Stream'=> '3.35',
              'TAP::Parser::IteratorFactory'=> '3.35',
              'TAP::Parser::Multiplexer'=> '3.35',
              'TAP::Parser::Result'   => '3.35',
              'TAP::Parser::Result::Bailout'=> '3.35',
              'TAP::Parser::Result::Comment'=> '3.35',
              'TAP::Parser::Result::Plan'=> '3.35',
              'TAP::Parser::Result::Pragma'=> '3.35',
              'TAP::Parser::Result::Test'=> '3.35',
              'TAP::Parser::Result::Unknown'=> '3.35',
              'TAP::Parser::Result::Version'=> '3.35',
              'TAP::Parser::Result::YAML'=> '3.35',
              'TAP::Parser::ResultFactory'=> '3.35',
              'TAP::Parser::Scheduler'=> '3.35',
              'TAP::Parser::Scheduler::Job'=> '3.35',
              'TAP::Parser::Scheduler::Spinner'=> '3.35',
              'TAP::Parser::Source'   => '3.35',
              'TAP::Parser::SourceHandler'=> '3.35',
              'TAP::Parser::SourceHandler::Executable'=> '3.35',
              'TAP::Parser::SourceHandler::File'=> '3.35',
              'TAP::Parser::SourceHandler::Handle'=> '3.35',
              'TAP::Parser::SourceHandler::Perl'=> '3.35',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.35',
              'TAP::Parser::YAMLish::Reader'=> '3.35',
              'TAP::Parser::YAMLish::Writer'=> '3.35',
              'Test::Builder'         => '1.301001_097',
              'Test::Builder::Module' => '1.301001_097',
              'Test::Builder::Tester' => '1.301001_097',
              'Test::Builder::Tester::Color'=> '1.301001_097',
              'Test::Harness'         => '3.35',
              'Test::More'            => '1.301001_097',
              'Test::Simple'          => '1.301001_097',
              'Test::Stream'          => '1.301001_097',
              'Test::Stream::Block'   => undef,
              'Test::Tester'          => '1.301001_097',
              'Test::Tester::CaptureRunner'=> undef,
              'Test::Tester::Delegate'=> undef,
              'Test::use::ok'         => '1.301001_097',
              'Unicode::Collate'      => '1.10',
              'Unicode::Collate::CJK::Big5'=> '1.10',
              'Unicode::Collate::CJK::GB2312'=> '1.10',
              'Unicode::Collate::CJK::JISX0208'=> '1.10',
              'Unicode::Collate::CJK::Korean'=> '1.10',
              'Unicode::Collate::CJK::Pinyin'=> '1.10',
              'Unicode::Collate::CJK::Stroke'=> '1.10',
              'Unicode::Collate::CJK::Zhuyin'=> '1.10',
              'Unicode::Collate::Locale'=> '1.10',
              'VMS::DCLsym'           => '1.06',
              'XS::APItest'           => '0.70',
              'arybase'               => '0.10',
              'attributes'            => '0.25',
              'autodie'               => '2.26',
              'autodie::Scope::Guard' => '2.26',
              'autodie::Scope::GuardStack'=> '2.26',
              'autodie::ScopeUtil'    => '2.26',
              'autodie::exception'    => '2.26',
              'autodie::exception::system'=> '2.26',
              'autodie::hints'        => '2.26',
              'autodie::skip'         => '2.26',
              'ok'                    => '1.301001_097',
              're'                    => '0.30',
              'warnings'              => '1.30',
          },
          removed => {
          }
      },
      5.020002 => {
          delta_from => 5.020001,
          changed => {
              'CPAN::Author'          => '5.5002',
              'CPAN::CacheMgr'        => '5.5002',
              'CPAN::FTP'             => '5.5006',
              'CPAN::HTTP::Client'    => '1.9601',
              'CPAN::HandleConfig'    => '5.5005',
              'CPAN::Index'           => '1.9601',
              'CPAN::LWP::UserAgent'  => '1.9601',
              'CPAN::Mirrors'         => '1.9601',
              'Config'                => '5.020002',
              'Cwd'                   => '3.48_01',
              'Data::Dumper'          => '2.151_01',
              'Errno'                 => '1.20_05',
              'File::Spec'            => '3.48_01',
              'File::Spec::Cygwin'    => '3.48_01',
              'File::Spec::Epoc'      => '3.48_01',
              'File::Spec::Functions' => '3.48_01',
              'File::Spec::Mac'       => '3.48_01',
              'File::Spec::OS2'       => '3.48_01',
              'File::Spec::Unix'      => '3.48_01',
              'File::Spec::VMS'       => '3.48_01',
              'File::Spec::Win32'     => '3.48_01',
              'IO::Socket'            => '1.38',
              'Module::CoreList'      => '5.20150214',
              'Module::CoreList::TieHashDelta'=> '5.20150214',
              'Module::CoreList::Utils'=> '5.20150214',
              'PerlIO::scalar'        => '0.18_01',
              'Pod::PlainText'        => '2.07',
              'Storable'              => '2.49_01',
              'VMS::DCLsym'           => '1.05_01',
              'VMS::Stdio'            => '2.41',
              'attributes'            => '0.23',
              'feature'               => '1.36_01',
          },
          removed => {
          }
      },
      5.021009 => {
          delta_from => 5.021008,
          changed => {
              'B'                     => '1.56',
              'B::Debug'              => '1.23',
              'B::Deparse'            => '1.33',
              'B::Op_private'         => '5.021009',
              'Benchmark'             => '1.20',
              'CPAN::Author'          => '5.5002',
              'CPAN::CacheMgr'        => '5.5002',
              'CPAN::FTP'             => '5.5006',
              'CPAN::HTTP::Client'    => '1.9601',
              'CPAN::HandleConfig'    => '5.5005',
              'CPAN::Index'           => '1.9601',
              'CPAN::LWP::UserAgent'  => '1.9601',
              'CPAN::Meta::Requirements'=> '2.132',
              'CPAN::Mirrors'         => '1.9601',
              'Carp'                  => '1.35',
              'Carp::Heavy'           => '1.35',
              'Config'                => '5.021009',
              'Config::Perl::V'       => '0.23',
              'Data::Dumper'          => '2.157',
              'Devel::Peek'           => '1.22',
              'DynaLoader'            => '1.31',
              'Encode'                => '2.70',
              'Encode::MIME::Header'  => '2.16',
              'Errno'                 => '1.23',
              'ExtUtils::Miniperl'    => '1.04',
              'HTTP::Tiny'            => '0.054',
              'Module::CoreList'      => '5.20150220',
              'Module::CoreList::TieHashDelta'=> '5.20150220',
              'Module::CoreList::Utils'=> '5.20150220',
              'Opcode'                => '1.32',
              'POSIX'                 => '1.51',
              'Perl::OSType'          => '1.008',
              'PerlIO::scalar'        => '0.22',
              'Pod::Find'             => '1.63',
              'Pod::InputObjects'     => '1.63',
              'Pod::ParseUtils'       => '1.63',
              'Pod::Parser'           => '1.63',
              'Pod::Perldoc'          => '3.25',
              'Pod::Perldoc::BaseTo'  => '3.25',
              'Pod::Perldoc::GetOptsOO'=> '3.25',
              'Pod::Perldoc::ToANSI'  => '3.25',
              'Pod::Perldoc::ToChecker'=> '3.25',
              'Pod::Perldoc::ToMan'   => '3.25',
              'Pod::Perldoc::ToNroff' => '3.25',
              'Pod::Perldoc::ToPod'   => '3.25',
              'Pod::Perldoc::ToRtf'   => '3.25',
              'Pod::Perldoc::ToTerm'  => '3.25',
              'Pod::Perldoc::ToText'  => '3.25',
              'Pod::Perldoc::ToTk'    => '3.25',
              'Pod::Perldoc::ToXml'   => '3.25',
              'Pod::PlainText'        => '2.07',
              'Pod::Select'           => '1.63',
              'Socket'                => '2.018',
              'Storable'              => '2.53',
              'Test::Builder'         => '1.301001_098',
              'Test::Builder::Module' => '1.301001_098',
              'Test::Builder::Tester' => '1.301001_098',
              'Test::Builder::Tester::Color'=> '1.301001_098',
              'Test::More'            => '1.301001_098',
              'Test::Simple'          => '1.301001_098',
              'Test::Stream'          => '1.301001_098',
              'Test::Tester'          => '1.301001_098',
              'Test::use::ok'         => '1.301001_098',
              'Unicode::Collate'      => '1.11',
              'Unicode::Collate::CJK::Big5'=> '1.11',
              'Unicode::Collate::CJK::GB2312'=> '1.11',
              'Unicode::Collate::CJK::JISX0208'=> '1.11',
              'Unicode::Collate::CJK::Korean'=> '1.11',
              'Unicode::Collate::CJK::Pinyin'=> '1.11',
              'Unicode::Collate::CJK::Stroke'=> '1.11',
              'Unicode::Collate::CJK::Zhuyin'=> '1.11',
              'Unicode::Collate::Locale'=> '1.11',
              'Unicode::UCD'          => '0.61',
              'VMS::Stdio'            => '2.41',
              'Win32'                 => '0.51',
              'Win32API::File'        => '0.1202',
              'attributes'            => '0.26',
              'bigint'                => '0.39',
              'bignum'                => '0.39',
              'bigrat'                => '0.39',
              'constant'              => '1.33',
              'encoding'              => '2.13',
              'feature'               => '1.40',
              'ok'                    => '1.301001_098',
              'overload'              => '1.25',
              'perlfaq'               => '5.021009',
              're'                    => '0.31',
              'threads::shared'       => '1.48',
              'warnings'              => '1.31',
          },
          removed => {
          }
      },
      5.021010 => {
          delta_from => 5.021009,
          changed => {
              'App::Cpan'             => '1.63',
              'B'                     => '1.57',
              'B::Deparse'            => '1.34',
              'B::Op_private'         => '5.021010',
              'Benchmark'             => '1.2',
              'CPAN'                  => '2.10',
              'CPAN::Distribution'    => '2.04',
              'CPAN::FirstTime'       => '5.5307',
              'CPAN::HTTP::Credentials'=> '1.9601',
              'CPAN::HandleConfig'    => '5.5006',
              'CPAN::Meta'            => '2.150001',
              'CPAN::Meta::Converter' => '2.150001',
              'CPAN::Meta::Feature'   => '2.150001',
              'CPAN::Meta::History'   => '2.150001',
              'CPAN::Meta::Merge'     => '2.150001',
              'CPAN::Meta::Prereqs'   => '2.150001',
              'CPAN::Meta::Spec'      => '2.150001',
              'CPAN::Meta::Validator' => '2.150001',
              'CPAN::Module'          => '5.5002',
              'CPAN::Plugin'          => '0.95',
              'CPAN::Plugin::Specfile'=> '0.01',
              'CPAN::Shell'           => '5.5005',
              'Carp'                  => '1.36',
              'Carp::Heavy'           => '1.36',
              'Config'                => '5.02101',
              'Cwd'                   => '3.55',
              'DB'                    => '1.08',
              'Data::Dumper'          => '2.158',
              'Devel::PPPort'         => '3.31',
              'DynaLoader'            => '1.32',
              'Encode'                => '2.72',
              'Encode::Alias'         => '2.19',
              'File::Spec'            => '3.55',
              'File::Spec::Cygwin'    => '3.55',
              'File::Spec::Epoc'      => '3.55',
              'File::Spec::Functions' => '3.55',
              'File::Spec::Mac'       => '3.55',
              'File::Spec::OS2'       => '3.55',
              'File::Spec::Unix'      => '3.55',
              'File::Spec::VMS'       => '3.55',
              'File::Spec::Win32'     => '3.55',
              'Getopt::Long'          => '2.45',
              'Locale::Codes'         => '3.34',
              'Locale::Codes::Constants'=> '3.34',
              'Locale::Codes::Country'=> '3.34',
              'Locale::Codes::Country_Codes'=> '3.34',
              'Locale::Codes::Country_Retired'=> '3.34',
              'Locale::Codes::Currency'=> '3.34',
              'Locale::Codes::Currency_Codes'=> '3.34',
              'Locale::Codes::Currency_Retired'=> '3.34',
              'Locale::Codes::LangExt'=> '3.34',
              'Locale::Codes::LangExt_Codes'=> '3.34',
              'Locale::Codes::LangExt_Retired'=> '3.34',
              'Locale::Codes::LangFam'=> '3.34',
              'Locale::Codes::LangFam_Codes'=> '3.34',
              'Locale::Codes::LangFam_Retired'=> '3.34',
              'Locale::Codes::LangVar'=> '3.34',
              'Locale::Codes::LangVar_Codes'=> '3.34',
              'Locale::Codes::LangVar_Retired'=> '3.34',
              'Locale::Codes::Language'=> '3.34',
              'Locale::Codes::Language_Codes'=> '3.34',
              'Locale::Codes::Language_Retired'=> '3.34',
              'Locale::Codes::Script' => '3.34',
              'Locale::Codes::Script_Codes'=> '3.34',
              'Locale::Codes::Script_Retired'=> '3.34',
              'Locale::Country'       => '3.34',
              'Locale::Currency'      => '3.34',
              'Locale::Language'      => '3.34',
              'Locale::Script'        => '3.34',
              'Module::CoreList'      => '5.20150320',
              'Module::CoreList::TieHashDelta'=> '5.20150320',
              'Module::CoreList::Utils'=> '5.20150320',
              'POSIX'                 => '1.52',
              'Pod::Functions'        => '1.09',
              'Pod::Functions::Functions'=> '1.09',
              'Term::Complete'        => '1.403',
              'Test::Builder'         => '1.001014',
              'Test::Builder::IO::Scalar'=> '2.113',
              'Test::Builder::Module' => '1.001014',
              'Test::Builder::Tester' => '1.28',
              'Test::Builder::Tester::Color'=> '1.290001',
              'Test::More'            => '1.001014',
              'Test::Simple'          => '1.001014',
              'Test::Tester'          => '0.114',
              'Test::use::ok'         => '0.16',
              'Text::Balanced'        => '2.03',
              'Text::ParseWords'      => '3.30',
              'Unicode::Collate'      => '1.12',
              'Unicode::Collate::CJK::Big5'=> '1.12',
              'Unicode::Collate::CJK::GB2312'=> '1.12',
              'Unicode::Collate::CJK::JISX0208'=> '1.12',
              'Unicode::Collate::CJK::Korean'=> '1.12',
              'Unicode::Collate::CJK::Pinyin'=> '1.12',
              'Unicode::Collate::CJK::Stroke'=> '1.12',
              'Unicode::Collate::CJK::Zhuyin'=> '1.12',
              'Unicode::Collate::Locale'=> '1.12',
              'XS::APItest'           => '0.71',
              'encoding'              => '2.14',
              'locale'                => '1.06',
              'meta_notation'         => undef,
              'ok'                    => '0.16',
              'parent'                => '0.232',
              're'                    => '0.32',
              'sigtrap'               => '1.08',
              'threads'               => '2.01',
              'utf8'                  => '1.15',
          },
          removed => {
              'Test::CanFork'         => 1,
              'Test::CanThread'       => 1,
              'Test::More::DeepCheck' => 1,
              'Test::More::DeepCheck::Strict'=> 1,
              'Test::More::DeepCheck::Tolerant'=> 1,
              'Test::More::Tools'     => 1,
              'Test::MostlyLike'      => 1,
              'Test::Stream'          => 1,
              'Test::Stream::API'     => 1,
              'Test::Stream::ArrayBase'=> 1,
              'Test::Stream::ArrayBase::Meta'=> 1,
              'Test::Stream::Block'   => 1,
              'Test::Stream::Carp'    => 1,
              'Test::Stream::Context' => 1,
              'Test::Stream::Event'   => 1,
              'Test::Stream::Event::Bail'=> 1,
              'Test::Stream::Event::Child'=> 1,
              'Test::Stream::Event::Diag'=> 1,
              'Test::Stream::Event::Finish'=> 1,
              'Test::Stream::Event::Note'=> 1,
              'Test::Stream::Event::Ok'=> 1,
              'Test::Stream::Event::Plan'=> 1,
              'Test::Stream::Event::Subtest'=> 1,
              'Test::Stream::ExitMagic'=> 1,
              'Test::Stream::ExitMagic::Context'=> 1,
              'Test::Stream::Exporter'=> 1,
              'Test::Stream::Exporter::Meta'=> 1,
              'Test::Stream::ForceExit'=> 1,
              'Test::Stream::IOSets'  => 1,
              'Test::Stream::Meta'    => 1,
              'Test::Stream::PackageUtil'=> 1,
              'Test::Stream::Subtest' => 1,
              'Test::Stream::Tester'  => 1,
              'Test::Stream::Tester::Checks'=> 1,
              'Test::Stream::Tester::Checks::Event'=> 1,
              'Test::Stream::Tester::Events'=> 1,
              'Test::Stream::Tester::Events::Event'=> 1,
              'Test::Stream::Tester::Grab'=> 1,
              'Test::Stream::Threads' => 1,
              'Test::Stream::Toolset' => 1,
              'Test::Stream::Util'    => 1,
          }
      },
      5.021011 => {
          delta_from => 5.021010,
          changed => {
              'B'                     => '1.58',
              'B::Deparse'            => '1.35',
              'B::Op_private'         => '5.021011',
              'CPAN'                  => '2.11',
              'Config'                => '5.021011',
              'Config::Perl::V'       => '0.24',
              'Cwd'                   => '3.56',
              'ExtUtils::Miniperl'    => '1.05',
              'ExtUtils::ParseXS'     => '3.28',
              'ExtUtils::ParseXS::Constants'=> '3.28',
              'ExtUtils::ParseXS::CountLines'=> '3.28',
              'ExtUtils::ParseXS::Eval'=> '3.28',
              'ExtUtils::ParseXS::Utilities'=> '3.28',
              'ExtUtils::Typemaps'    => '3.28',
              'ExtUtils::Typemaps::Cmd'=> '3.28',
              'ExtUtils::Typemaps::InputMap'=> '3.28',
              'ExtUtils::Typemaps::OutputMap'=> '3.28',
              'ExtUtils::Typemaps::Type'=> '3.28',
              'File::Spec'            => '3.56',
              'File::Spec::Cygwin'    => '3.56',
              'File::Spec::Epoc'      => '3.56',
              'File::Spec::Functions' => '3.56',
              'File::Spec::Mac'       => '3.56',
              'File::Spec::OS2'       => '3.56',
              'File::Spec::Unix'      => '3.56',
              'File::Spec::VMS'       => '3.56',
              'File::Spec::Win32'     => '3.56',
              'IO::Socket::IP'        => '0.37',
              'Module::CoreList'      => '5.20150420',
              'Module::CoreList::TieHashDelta'=> '5.20150420',
              'Module::CoreList::Utils'=> '5.20150420',
              'PerlIO::mmap'          => '0.014',
              'XS::APItest'           => '0.72',
              'attributes'            => '0.27',
              'if'                    => '0.0604',
              'utf8'                  => '1.16',
              'warnings'              => '1.32',
          },
          removed => {
          }
      },
      5.022000 => {
          delta_from => 5.021011,
          changed => {
              'B::Op_private'         => '5.022000',
              'Config'                => '5.022',
              'ExtUtils::Command::MM' => '7.04_01',
              'ExtUtils::Liblist'     => '7.04_01',
              'ExtUtils::Liblist::Kid'=> '7.04_01',
              'ExtUtils::MM'          => '7.04_01',
              'ExtUtils::MM_AIX'      => '7.04_01',
              'ExtUtils::MM_Any'      => '7.04_01',
              'ExtUtils::MM_BeOS'     => '7.04_01',
              'ExtUtils::MM_Cygwin'   => '7.04_01',
              'ExtUtils::MM_DOS'      => '7.04_01',
              'ExtUtils::MM_Darwin'   => '7.04_01',
              'ExtUtils::MM_MacOS'    => '7.04_01',
              'ExtUtils::MM_NW5'      => '7.04_01',
              'ExtUtils::MM_OS2'      => '7.04_01',
              'ExtUtils::MM_QNX'      => '7.04_01',
              'ExtUtils::MM_UWIN'     => '7.04_01',
              'ExtUtils::MM_Unix'     => '7.04_01',
              'ExtUtils::MM_VMS'      => '7.04_01',
              'ExtUtils::MM_VOS'      => '7.04_01',
              'ExtUtils::MM_Win32'    => '7.04_01',
              'ExtUtils::MM_Win95'    => '7.04_01',
              'ExtUtils::MY'          => '7.04_01',
              'ExtUtils::MakeMaker'   => '7.04_01',
              'ExtUtils::MakeMaker::Config'=> '7.04_01',
              'ExtUtils::MakeMaker::Locale'=> '7.04_01',
              'ExtUtils::MakeMaker::version'=> '7.04_01',
              'ExtUtils::MakeMaker::version::regex'=> '7.04_01',
              'ExtUtils::MakeMaker::version::vpp'=> '7.04_01',
              'ExtUtils::Mkbootstrap' => '7.04_01',
              'ExtUtils::Mksymlists'  => '7.04_01',
              'ExtUtils::testlib'     => '7.04_01',
              'Module::CoreList'      => '5.20150520',
              'Module::CoreList::TieHashDelta'=> '5.20150520',
              'Module::CoreList::Utils'=> '5.20150520',
              'POSIX'                 => '1.53',
              'PerlIO::via::QuotedPrint'=> '0.08',
              'overload'              => '1.26',
              'utf8'                  => '1.17',
          },
          removed => {
          }
      },
      5.023000 => {
          delta_from => 5.022000,
          changed => {
              'B::Op_private'         => '5.023000',
              'CPAN::Meta'            => '2.150005',
              'CPAN::Meta::Converter' => '2.150005',
              'CPAN::Meta::Feature'   => '2.150005',
              'CPAN::Meta::History'   => '2.150005',
              'CPAN::Meta::Merge'     => '2.150005',
              'CPAN::Meta::Prereqs'   => '2.150005',
              'CPAN::Meta::Requirements'=> '2.133',
              'CPAN::Meta::Spec'      => '2.150005',
              'CPAN::Meta::Validator' => '2.150005',
              'CPAN::Meta::YAML'      => '0.016',
              'Config'                => '5.023',
              'Encode'                => '2.73',
              'ExtUtils::CBuilder'    => '0.280223',
              'ExtUtils::CBuilder::Base'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280223',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280223',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280223',
              'ExtUtils::CBuilder::Platform::android'=> '0.280223',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280223',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280223',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280223',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280223',
              'Fatal'                 => '2.27',
              'Getopt::Long'          => '2.46',
              'HTTP::Tiny'            => '0.056',
              'List::Util'            => '1.42_01',
              'List::Util::XS'        => '1.42_01',
              'Locale::Codes'         => '3.35',
              'Locale::Codes::Constants'=> '3.35',
              'Locale::Codes::Country'=> '3.35',
              'Locale::Codes::Country_Codes'=> '3.35',
              'Locale::Codes::Country_Retired'=> '3.35',
              'Locale::Codes::Currency'=> '3.35',
              'Locale::Codes::Currency_Codes'=> '3.35',
              'Locale::Codes::Currency_Retired'=> '3.35',
              'Locale::Codes::LangExt'=> '3.35',
              'Locale::Codes::LangExt_Codes'=> '3.35',
              'Locale::Codes::LangExt_Retired'=> '3.35',
              'Locale::Codes::LangFam'=> '3.35',
              'Locale::Codes::LangFam_Codes'=> '3.35',
              'Locale::Codes::LangFam_Retired'=> '3.35',
              'Locale::Codes::LangVar'=> '3.35',
              'Locale::Codes::LangVar_Codes'=> '3.35',
              'Locale::Codes::LangVar_Retired'=> '3.35',
              'Locale::Codes::Language'=> '3.35',
              'Locale::Codes::Language_Codes'=> '3.35',
              'Locale::Codes::Language_Retired'=> '3.35',
              'Locale::Codes::Script' => '3.35',
              'Locale::Codes::Script_Codes'=> '3.35',
              'Locale::Codes::Script_Retired'=> '3.35',
              'Locale::Country'       => '3.35',
              'Locale::Currency'      => '3.35',
              'Locale::Language'      => '3.35',
              'Locale::Script'        => '3.35',
              'Math::BigFloat'        => '1.999701',
              'Math::BigInt'          => '1.999701',
              'Math::BigInt::Calc'    => '1.999701',
              'Math::BigInt::CalcEmu' => '1.999701',
              'Math::BigRat'          => '0.260801',
              'Module::CoreList'      => '5.20150620',
              'Module::CoreList::TieHashDelta'=> '5.20150620',
              'Module::CoreList::Utils'=> '5.20150620',
              'Module::Metadata'      => '1.000027',
              'Net::Cmd'              => '3.06',
              'Net::Config'           => '3.06',
              'Net::Domain'           => '3.06',
              'Net::FTP'              => '3.06',
              'Net::FTP::A'           => '3.06',
              'Net::FTP::E'           => '3.06',
              'Net::FTP::I'           => '3.06',
              'Net::FTP::L'           => '3.06',
              'Net::FTP::dataconn'    => '3.06',
              'Net::NNTP'             => '3.06',
              'Net::Netrc'            => '3.06',
              'Net::POP3'             => '3.06',
              'Net::SMTP'             => '3.06',
              'Net::Time'             => '3.06',
              'POSIX'                 => '1.54',
              'Parse::CPAN::Meta'     => '1.4417',
              'Pod::Simple'           => '3.30',
              'Pod::Simple::BlackBox' => '3.30',
              'Pod::Simple::Checker'  => '3.30',
              'Pod::Simple::Debug'    => '3.30',
              'Pod::Simple::DumpAsText'=> '3.30',
              'Pod::Simple::DumpAsXML'=> '3.30',
              'Pod::Simple::HTML'     => '3.30',
              'Pod::Simple::HTMLBatch'=> '3.30',
              'Pod::Simple::LinkSection'=> '3.30',
              'Pod::Simple::Methody'  => '3.30',
              'Pod::Simple::Progress' => '3.30',
              'Pod::Simple::PullParser'=> '3.30',
              'Pod::Simple::PullParserEndToken'=> '3.30',
              'Pod::Simple::PullParserStartToken'=> '3.30',
              'Pod::Simple::PullParserTextToken'=> '3.30',
              'Pod::Simple::PullParserToken'=> '3.30',
              'Pod::Simple::RTF'      => '3.30',
              'Pod::Simple::Search'   => '3.30',
              'Pod::Simple::SimpleTree'=> '3.30',
              'Pod::Simple::Text'     => '3.30',
              'Pod::Simple::TextContent'=> '3.30',
              'Pod::Simple::TiedOutFH'=> '3.30',
              'Pod::Simple::Transcode'=> '3.30',
              'Pod::Simple::TranscodeDumb'=> '3.30',
              'Pod::Simple::TranscodeSmart'=> '3.30',
              'Pod::Simple::XHTML'    => '3.30',
              'Pod::Simple::XMLOutStream'=> '3.30',
              'Pod::Usage'            => '1.67',
              'Scalar::Util'          => '1.42_01',
              'Socket'                => '2.019',
              'Sub::Util'             => '1.42_01',
              'Time::Piece'           => '1.30',
              'Time::Seconds'         => '1.30',
              'UNIVERSAL'             => '1.13',
              'Unicode'               => '8.0.0',
              'XS::APItest'           => '0.73',
              'autodie'               => '2.27',
              'autodie::Scope::Guard' => '2.27',
              'autodie::Scope::GuardStack'=> '2.27',
              'autodie::Util'         => '2.27',
              'autodie::exception'    => '2.27',
              'autodie::exception::system'=> '2.27',
              'autodie::hints'        => '2.27',
              'autodie::skip'         => '2.27',
              'encoding'              => '2.15',
              'feature'               => '1.41',
              'parent'                => '0.234',
              'threads'               => '2.02',
          },
          removed => {
          }
      },
      5.023001 => {
          delta_from => 5.023000,
          changed => {
              'B::Op_private'         => '5.023001',
              'Config'                => '5.023001',
              'DynaLoader'            => '1.33',
              'Encode'                => '2.75',
              'Encode::MIME::Header'  => '2.17',
              'Encode::Unicode'       => '2.13',
              'Fatal'                 => '2.29',
              'File::Path'            => '2.11',
              'Getopt::Long'          => '2.47',
              'I18N::Langinfo'        => '0.13',
              'IPC::Open3'            => '1.19',
              'Module::CoreList'      => '5.20150720',
              'Module::CoreList::TieHashDelta'=> '5.20150720',
              'Module::CoreList::Utils'=> '5.20150720',
              'Net::Cmd'              => '3.07',
              'Net::Config'           => '3.07',
              'Net::Domain'           => '3.07',
              'Net::FTP'              => '3.07',
              'Net::FTP::A'           => '3.07',
              'Net::FTP::E'           => '3.07',
              'Net::FTP::I'           => '3.07',
              'Net::FTP::L'           => '3.07',
              'Net::FTP::dataconn'    => '3.07',
              'Net::NNTP'             => '3.07',
              'Net::Netrc'            => '3.07',
              'Net::POP3'             => '3.07',
              'Net::SMTP'             => '3.07',
              'Net::Time'             => '3.07',
              'Opcode'                => '1.33',
              'POSIX'                 => '1.55',
              'PerlIO::scalar'        => '0.23',
              'Socket'                => '2.020',
              'Storable'              => '2.54',
              'Unicode::Collate'      => '1.14',
              'Unicode::Collate::CJK::Big5'=> '1.14',
              'Unicode::Collate::CJK::GB2312'=> '1.14',
              'Unicode::Collate::CJK::JISX0208'=> '1.14',
              'Unicode::Collate::CJK::Korean'=> '1.14',
              'Unicode::Collate::CJK::Pinyin'=> '1.14',
              'Unicode::Collate::CJK::Stroke'=> '1.14',
              'Unicode::Collate::CJK::Zhuyin'=> '1.14',
              'Unicode::Collate::Locale'=> '1.14',
              'Unicode::Normalize'    => '1.19',
              'XS::APItest'           => '0.74',
              'XS::Typemap'           => '0.14',
              'autodie'               => '2.29',
              'autodie::Scope::Guard' => '2.29',
              'autodie::Scope::GuardStack'=> '2.29',
              'autodie::Util'         => '2.29',
              'autodie::exception'    => '2.29',
              'autodie::exception::system'=> '2.29',
              'autodie::hints'        => '2.29',
              'autodie::skip'         => '2.29',
              'encoding'              => '2.16',
              'feature'               => '1.42',
              'warnings'              => '1.33',
          },
          removed => {
              'autodie::ScopeUtil'    => 1,
          }
      },
      5.023002 => {
          delta_from => 5.023001,
          changed => {
              'Attribute::Handlers'   => '0.99',
              'B::Op_private'         => '5.023002',
              'CPAN::Meta::YAML'      => '0.017',
              'Config'                => '5.023002',
              'Cwd'                   => '3.57',
              'Encode'                => '2.76',
              'ExtUtils::ParseXS'     => '3.29',
              'ExtUtils::ParseXS::Constants'=> '3.29',
              'ExtUtils::ParseXS::CountLines'=> '3.29',
              'ExtUtils::ParseXS::Eval'=> '3.29',
              'ExtUtils::ParseXS::Utilities'=> '3.29',
              'ExtUtils::Typemaps'    => '3.29',
              'File::Find'            => '1.30',
              'File::Spec'            => '3.57',
              'File::Spec::Cygwin'    => '3.57',
              'File::Spec::Epoc'      => '3.57',
              'File::Spec::Functions' => '3.57',
              'File::Spec::Mac'       => '3.57',
              'File::Spec::OS2'       => '3.57',
              'File::Spec::Unix'      => '3.57',
              'File::Spec::VMS'       => '3.57',
              'File::Spec::Win32'     => '3.57',
              'Filter::Util::Call'    => '1.55',
              'Hash::Util'            => '0.19',
              'Module::CoreList'      => '5.20150820',
              'Module::CoreList::TieHashDelta'=> '5.20150820',
              'Module::CoreList::Utils'=> '5.20150820',
              'POSIX'                 => '1.56',
              'Term::Cap'             => '1.17',
              'Unicode::UCD'          => '0.62',
              'perlfaq'               => '5.021010',
          },
          removed => {
          }
      },
      5.020003 => {
          delta_from => 5.020002,
          changed => {
              'Config'                => '5.020003',
              'Errno'                 => '1.20_06',
              'Module::CoreList'      => '5.20150912',
              'Module::CoreList::TieHashDelta'=> '5.20150912',
              'Module::CoreList::Utils'=> '5.20150912',
          },
          removed => {
          }
      },
      5.023003 => {
          delta_from => 5.023002,
          changed => {
              'Amiga::ARexx'          => '0.02',
              'Amiga::Exec'           => '0.01',
              'B'                     => '1.59',
              'B::Op_private'         => '5.023003',
              'Carp'                  => '1.37',
              'Carp::Heavy'           => '1.37',
              'Compress::Raw::Zlib'   => '2.068_01',
              'Config'                => '5.023003',
              'Cwd'                   => '3.58',
              'DynaLoader'            => '1.34',
              'Encode'                => '2.77',
              'Encode::Unicode'       => '2.14',
              'English'               => '1.10',
              'Errno'                 => '1.24',
              'ExtUtils::Command'     => '7.10',
              'ExtUtils::Command::MM' => '7.10',
              'ExtUtils::Liblist'     => '7.10',
              'ExtUtils::Liblist::Kid'=> '7.10',
              'ExtUtils::MM'          => '7.10',
              'ExtUtils::MM_AIX'      => '7.10',
              'ExtUtils::MM_Any'      => '7.10',
              'ExtUtils::MM_BeOS'     => '7.10',
              'ExtUtils::MM_Cygwin'   => '7.10',
              'ExtUtils::MM_DOS'      => '7.10',
              'ExtUtils::MM_Darwin'   => '7.10',
              'ExtUtils::MM_MacOS'    => '7.10',
              'ExtUtils::MM_NW5'      => '7.10',
              'ExtUtils::MM_OS2'      => '7.10',
              'ExtUtils::MM_QNX'      => '7.10',
              'ExtUtils::MM_UWIN'     => '7.10',
              'ExtUtils::MM_Unix'     => '7.10',
              'ExtUtils::MM_VMS'      => '7.10',
              'ExtUtils::MM_VOS'      => '7.10',
              'ExtUtils::MM_Win32'    => '7.10',
              'ExtUtils::MM_Win95'    => '7.10',
              'ExtUtils::MY'          => '7.10',
              'ExtUtils::MakeMaker'   => '7.10',
              'ExtUtils::MakeMaker::Config'=> '7.10',
              'ExtUtils::MakeMaker::Locale'=> '7.10',
              'ExtUtils::MakeMaker::version'=> '7.10',
              'ExtUtils::MakeMaker::version::regex'=> '7.10',
              'ExtUtils::MakeMaker::version::vpp'=> '7.10',
              'ExtUtils::Mkbootstrap' => '7.10',
              'ExtUtils::Mksymlists'  => '7.10',
              'ExtUtils::ParseXS'     => '3.30',
              'ExtUtils::ParseXS::Constants'=> '3.30',
              'ExtUtils::ParseXS::CountLines'=> '3.30',
              'ExtUtils::ParseXS::Eval'=> '3.30',
              'ExtUtils::ParseXS::Utilities'=> '3.30',
              'ExtUtils::Typemaps'    => '3.30',
              'ExtUtils::Typemaps::Cmd'=> '3.30',
              'ExtUtils::Typemaps::InputMap'=> '3.30',
              'ExtUtils::Typemaps::OutputMap'=> '3.30',
              'ExtUtils::Typemaps::Type'=> '3.30',
              'ExtUtils::testlib'     => '7.10',
              'File::Find'            => '1.31',
              'File::Glob'            => '1.25',
              'File::Spec'            => '3.58',
              'File::Spec::AmigaOS'   => '3.58',
              'File::Spec::Cygwin'    => '3.58',
              'File::Spec::Epoc'      => '3.58',
              'File::Spec::Functions' => '3.58',
              'File::Spec::Mac'       => '3.58',
              'File::Spec::OS2'       => '3.58',
              'File::Spec::Unix'      => '3.58',
              'File::Spec::VMS'       => '3.58',
              'File::Spec::Win32'     => '3.58',
              'Hash::Util::FieldHash' => '1.17',
              'Locale::Codes'         => '3.36',
              'Locale::Codes::Constants'=> '3.36',
              'Locale::Codes::Country'=> '3.36',
              'Locale::Codes::Country_Codes'=> '3.36',
              'Locale::Codes::Country_Retired'=> '3.36',
              'Locale::Codes::Currency'=> '3.36',
              'Locale::Codes::Currency_Codes'=> '3.36',
              'Locale::Codes::Currency_Retired'=> '3.36',
              'Locale::Codes::LangExt'=> '3.36',
              'Locale::Codes::LangExt_Codes'=> '3.36',
              'Locale::Codes::LangExt_Retired'=> '3.36',
              'Locale::Codes::LangFam'=> '3.36',
              'Locale::Codes::LangFam_Codes'=> '3.36',
              'Locale::Codes::LangFam_Retired'=> '3.36',
              'Locale::Codes::LangVar'=> '3.36',
              'Locale::Codes::LangVar_Codes'=> '3.36',
              'Locale::Codes::LangVar_Retired'=> '3.36',
              'Locale::Codes::Language'=> '3.36',
              'Locale::Codes::Language_Codes'=> '3.36',
              'Locale::Codes::Language_Retired'=> '3.36',
              'Locale::Codes::Script' => '3.36',
              'Locale::Codes::Script_Codes'=> '3.36',
              'Locale::Codes::Script_Retired'=> '3.36',
              'Locale::Country'       => '3.36',
              'Locale::Currency'      => '3.36',
              'Locale::Language'      => '3.36',
              'Locale::Script'        => '3.36',
              'Math::BigFloat::Trace' => '0.40',
              'Math::BigInt::Trace'   => '0.40',
              'Module::CoreList'      => '5.20150920',
              'Module::CoreList::TieHashDelta'=> '5.20150920',
              'Module::CoreList::Utils'=> '5.20150920',
              'OS2::DLL'              => '1.06',
              'OS2::ExtAttr'          => '0.04',
              'OS2::Process'          => '1.11',
              'OS2::REXX'             => '1.05',
              'POSIX'                 => '1.57',
              'Pod::Perldoc'          => '3.25_01',
              'Socket'                => '2.020_01',
              'Test'                  => '1.27',
              'Thread::Queue'         => '3.06',
              'Time::HiRes'           => '1.9727_02',
              'Unicode::UCD'          => '0.63',
              'Win32'                 => '0.52',
              'XS::APItest'           => '0.75',
              'bigint'                => '0.40',
              'bignum'                => '0.40',
              'bigrat'                => '0.40',
              'encoding'              => '2.17',
              'experimental'          => '0.014',
              'if'                    => '0.0605',
              'locale'                => '1.07',
              'mro'                   => '1.18',
              'threads'               => '2.03',
          },
          removed => {
          }
      },
      5.023004 => {
          delta_from => 5.023003,
          changed => {
              'B'                     => '1.60',
              'B::Op_private'         => '5.023004',
              'Compress::Raw::Bzip2'  => '2.069',
              'Compress::Raw::Zlib'   => '2.069',
              'Compress::Zlib'        => '2.069',
              'Config'                => '5.023004',
              'Devel::PPPort'         => '3.32',
              'DynaLoader'            => '1.35',
              'Encode'                => '2.78',
              'ExtUtils::CBuilder'    => '0.280224',
              'ExtUtils::CBuilder::Base'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280224',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280224',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280224',
              'ExtUtils::CBuilder::Platform::android'=> '0.280224',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280224',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280224',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280224',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280224',
              'File::Path'            => '2.12',
              'IO'                    => '1.36',
              'IO::Compress::Adapter::Bzip2'=> '2.069',
              'IO::Compress::Adapter::Deflate'=> '2.069',
              'IO::Compress::Adapter::Identity'=> '2.069',
              'IO::Compress::Base'    => '2.069',
              'IO::Compress::Base::Common'=> '2.069',
              'IO::Compress::Bzip2'   => '2.069',
              'IO::Compress::Deflate' => '2.069',
              'IO::Compress::Gzip'    => '2.069',
              'IO::Compress::Gzip::Constants'=> '2.069',
              'IO::Compress::RawDeflate'=> '2.069',
              'IO::Compress::Zip'     => '2.069',
              'IO::Compress::Zip::Constants'=> '2.069',
              'IO::Compress::Zlib::Constants'=> '2.069',
              'IO::Compress::Zlib::Extra'=> '2.069',
              'IO::Poll'              => '0.10',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.069',
              'IO::Uncompress::Adapter::Identity'=> '2.069',
              'IO::Uncompress::Adapter::Inflate'=> '2.069',
              'IO::Uncompress::AnyInflate'=> '2.069',
              'IO::Uncompress::AnyUncompress'=> '2.069',
              'IO::Uncompress::Base'  => '2.069',
              'IO::Uncompress::Bunzip2'=> '2.069',
              'IO::Uncompress::Gunzip'=> '2.069',
              'IO::Uncompress::Inflate'=> '2.069',
              'IO::Uncompress::RawInflate'=> '2.069',
              'IO::Uncompress::Unzip' => '2.069',
              'Math::BigFloat'        => '1.999704',
              'Math::BigFloat::Trace' => '0.41',
              'Math::BigInt'          => '1.999704',
              'Math::BigInt::Calc'    => '1.999704',
              'Math::BigInt::CalcEmu' => '1.999704',
              'Math::BigInt::FastCalc'=> '0.34',
              'Math::BigInt::Trace'   => '0.41',
              'Module::CoreList'      => '5.20151020',
              'Module::CoreList::TieHashDelta'=> '5.20151020',
              'Module::CoreList::Utils'=> '5.20151020',
              'Module::Metadata'      => '1.000029',
              'POSIX'                 => '1.58',
              'Perl::OSType'          => '1.009',
              'PerlIO::encoding'      => '0.22',
              'Socket'                => '2.020_02',
              'Unicode::Normalize'    => '1.21',
              'XS::APItest'           => '0.76',
              'bigint'                => '0.41',
              'bignum'                => '0.41',
              'bigrat'                => '0.41',
              'experimental'          => '0.016',
              'if'                    => '0.0606',
              'warnings'              => '1.35',
          },
          removed => {
          }
      },
      5.023005 => {
          delta_from => 5.023004,
          changed => {
              'B'                     => '1.61',
              'B::Op_private'         => '5.023005',
              'Carp'                  => '1.38',
              'Carp::Heavy'           => '1.38',
              'Config'                => '5.023005',
              'Config::Perl::V'       => '0.25',
              'Cwd'                   => '3.59',
              'Devel::Peek'           => '1.23',
              'Dumpvalue'             => '1.18',
              'DynaLoader'            => '1.36',
              'File::Find'            => '1.32',
              'File::Spec'            => '3.59',
              'File::Spec::AmigaOS'   => '3.59',
              'File::Spec::Cygwin'    => '3.59',
              'File::Spec::Epoc'      => '3.59',
              'File::Spec::Functions' => '3.59',
              'File::Spec::Mac'       => '3.59',
              'File::Spec::OS2'       => '3.59',
              'File::Spec::Unix'      => '3.59',
              'File::Spec::VMS'       => '3.59',
              'File::Spec::Win32'     => '3.59',
              'Getopt::Long'          => '2.48',
              'Hash::Util::FieldHash' => '1.18',
              'IPC::Open3'            => '1.20',
              'Math::BigFloat'        => '1.999710',
              'Math::BigInt'          => '1.999710',
              'Math::BigInt::Calc'    => '1.999710',
              'Math::BigInt::CalcEmu' => '1.999710',
              'Math::BigInt::FastCalc'=> '0.37',
              'Module::CoreList'      => '5.20151120',
              'Module::CoreList::TieHashDelta'=> '5.20151120',
              'Module::CoreList::Utils'=> '5.20151120',
              'Module::Metadata'      => '1.000030',
              'POSIX'                 => '1.59',
              'PerlIO::encoding'      => '0.23',
              'PerlIO::mmap'          => '0.015',
              'PerlIO::scalar'        => '0.24',
              'PerlIO::via'           => '0.16',
              'Pod::Simple'           => '3.32',
              'Pod::Simple::BlackBox' => '3.32',
              'Pod::Simple::Checker'  => '3.32',
              'Pod::Simple::Debug'    => '3.32',
              'Pod::Simple::DumpAsText'=> '3.32',
              'Pod::Simple::DumpAsXML'=> '3.32',
              'Pod::Simple::HTML'     => '3.32',
              'Pod::Simple::HTMLBatch'=> '3.32',
              'Pod::Simple::LinkSection'=> '3.32',
              'Pod::Simple::Methody'  => '3.32',
              'Pod::Simple::Progress' => '3.32',
              'Pod::Simple::PullParser'=> '3.32',
              'Pod::Simple::PullParserEndToken'=> '3.32',
              'Pod::Simple::PullParserStartToken'=> '3.32',
              'Pod::Simple::PullParserTextToken'=> '3.32',
              'Pod::Simple::PullParserToken'=> '3.32',
              'Pod::Simple::RTF'      => '3.32',
              'Pod::Simple::Search'   => '3.32',
              'Pod::Simple::SimpleTree'=> '3.32',
              'Pod::Simple::Text'     => '3.32',
              'Pod::Simple::TextContent'=> '3.32',
              'Pod::Simple::TiedOutFH'=> '3.32',
              'Pod::Simple::Transcode'=> '3.32',
              'Pod::Simple::TranscodeDumb'=> '3.32',
              'Pod::Simple::TranscodeSmart'=> '3.32',
              'Pod::Simple::XHTML'    => '3.32',
              'Pod::Simple::XMLOutStream'=> '3.32',
              'Thread::Queue'         => '3.07',
              'Tie::Scalar'           => '1.04',
              'Time::HiRes'           => '1.9728',
              'Time::Piece'           => '1.31',
              'Time::Seconds'         => '1.31',
              'Unicode::Normalize'    => '1.23',
              'XSLoader'              => '0.21',
              'arybase'               => '0.11',
              'base'                  => '2.22_01',
              'fields'                => '2.22_01',
              'threads'               => '2.04',
              'threads::shared'       => '1.49',
          },
          removed => {
              'ExtUtils::MakeMaker::version::vpp'=> 1,
              'version::vpp'          => 1,
          }
      },
      5.022001 => {
          delta_from => 5.022,
          changed => {
              'B::Op_private'         => '5.022001',
              'Config'                => '5.022001',
              'Module::CoreList'      => '5.20151213',
              'Module::CoreList::TieHashDelta'=> '5.20151213',
              'Module::CoreList::Utils'=> '5.20151213',
              'POSIX'                 => '1.53_01',
              'PerlIO::scalar'        => '0.23',
              'Storable'              => '2.53_01',
              'Win32'                 => '0.52',
              'warnings'              => '1.34',
          },
          removed => {
          }
      },
      5.023006 => {
          delta_from => 5.023005,
          changed => {
              'B::Deparse'            => '1.36',
              'B::Op_private'         => '5.023006',
              'Benchmark'             => '1.21',
              'CPAN::Meta::Requirements'=> '2.140',
              'CPAN::Meta::YAML'      => '0.018',
              'Config'                => '5.023006',
              'Cwd'                   => '3.60',
              'Data::Dumper'          => '2.159',
              'DynaLoader'            => '1.37',
              'File::Spec'            => '3.60',
              'File::Spec::AmigaOS'   => '3.60',
              'File::Spec::Cygwin'    => '3.60',
              'File::Spec::Epoc'      => '3.60',
              'File::Spec::Functions' => '3.60',
              'File::Spec::Mac'       => '3.60',
              'File::Spec::OS2'       => '3.60',
              'File::Spec::Unix'      => '3.60',
              'File::Spec::VMS'       => '3.60',
              'File::Spec::Win32'     => '3.60',
              'Hash::Util::FieldHash' => '1.19',
              'Locale::Codes'         => '3.37',
              'Locale::Codes::Constants'=> '3.37',
              'Locale::Codes::Country'=> '3.37',
              'Locale::Codes::Country_Codes'=> '3.37',
              'Locale::Codes::Country_Retired'=> '3.37',
              'Locale::Codes::Currency'=> '3.37',
              'Locale::Codes::Currency_Codes'=> '3.37',
              'Locale::Codes::Currency_Retired'=> '3.37',
              'Locale::Codes::LangExt'=> '3.37',
              'Locale::Codes::LangExt_Codes'=> '3.37',
              'Locale::Codes::LangExt_Retired'=> '3.37',
              'Locale::Codes::LangFam'=> '3.37',
              'Locale::Codes::LangFam_Codes'=> '3.37',
              'Locale::Codes::LangFam_Retired'=> '3.37',
              'Locale::Codes::LangVar'=> '3.37',
              'Locale::Codes::LangVar_Codes'=> '3.37',
              'Locale::Codes::LangVar_Retired'=> '3.37',
              'Locale::Codes::Language'=> '3.37',
              'Locale::Codes::Language_Codes'=> '3.37',
              'Locale::Codes::Language_Retired'=> '3.37',
              'Locale::Codes::Script' => '3.37',
              'Locale::Codes::Script_Codes'=> '3.37',
              'Locale::Codes::Script_Retired'=> '3.37',
              'Locale::Country'       => '3.37',
              'Locale::Currency'      => '3.37',
              'Locale::Language'      => '3.37',
              'Locale::Script'        => '3.37',
              'Math::BigInt::FastCalc'=> '0.38',
              'Module::CoreList'      => '5.20151220',
              'Module::CoreList::TieHashDelta'=> '5.20151220',
              'Module::CoreList::Utils'=> '5.20151220',
              'Module::Metadata'      => '1.000031',
              'Opcode'                => '1.34',
              'PerlIO::mmap'          => '0.016',
              'Pod::Perldoc'          => '3.25_02',
              'SDBM_File'             => '1.14',
              'Term::ANSIColor'       => '4.04',
              'Test'                  => '1.28',
              'Unicode::Normalize'    => '1.24',
              'XS::APItest'           => '0.77',
              'base'                  => '2.23',
              'encoding::warnings'    => '0.12',
              'fields'                => '2.23',
              'locale'                => '1.08',
              'strict'                => '1.10',
              'threads'               => '2.05',
              'threads::shared'       => '1.50',
              'utf8'                  => '1.18',
          },
          removed => {
          }
      },
      5.023007 => {
          delta_from => 5.023006,
          changed => {
              'App::Prove'            => '3.36',
              'App::Prove::State'     => '3.36',
              'App::Prove::State::Result'=> '3.36',
              'App::Prove::State::Result::Test'=> '3.36',
              'B'                     => '1.62',
              'B::Deparse'            => '1.37',
              'B::Op_private'         => '5.023007',
              'Benchmark'             => '1.22',
              'Config'                => '5.023007',
              'Cwd'                   => '3.62',
              'Data::Dumper'          => '2.160',
              'ExtUtils::ParseXS'     => '3.31',
              'ExtUtils::ParseXS::Constants'=> '3.31',
              'ExtUtils::ParseXS::CountLines'=> '3.31',
              'ExtUtils::ParseXS::Eval'=> '3.31',
              'ExtUtils::ParseXS::Utilities'=> '3.31',
              'ExtUtils::Typemaps'    => '3.31',
              'ExtUtils::Typemaps::Cmd'=> '3.31',
              'ExtUtils::Typemaps::InputMap'=> '3.31',
              'ExtUtils::Typemaps::OutputMap'=> '3.31',
              'ExtUtils::Typemaps::Type'=> '3.31',
              'File::Find'            => '1.33',
              'File::Spec'            => '3.62',
              'File::Spec::AmigaOS'   => '3.62',
              'File::Spec::Cygwin'    => '3.62',
              'File::Spec::Epoc'      => '3.62',
              'File::Spec::Functions' => '3.62',
              'File::Spec::Mac'       => '3.62',
              'File::Spec::OS2'       => '3.62',
              'File::Spec::Unix'      => '3.62',
              'File::Spec::VMS'       => '3.62',
              'File::Spec::Win32'     => '3.62',
              'Math::BigFloat'        => '1.999715',
              'Math::BigFloat::Trace' => '0.42',
              'Math::BigInt'          => '1.999715',
              'Math::BigInt::Calc'    => '1.999715',
              'Math::BigInt::CalcEmu' => '1.999715',
              'Math::BigInt::FastCalc'=> '0.40',
              'Math::BigInt::Trace'   => '0.42',
              'Math::BigRat'          => '0.260802',
              'Module::CoreList'      => '5.20160120',
              'Module::CoreList::TieHashDelta'=> '5.20160120',
              'Module::CoreList::Utils'=> '5.20160120',
              'Net::Cmd'              => '3.08',
              'Net::Config'           => '3.08',
              'Net::Domain'           => '3.08',
              'Net::FTP'              => '3.08',
              'Net::FTP::A'           => '3.08',
              'Net::FTP::E'           => '3.08',
              'Net::FTP::I'           => '3.08',
              'Net::FTP::L'           => '3.08',
              'Net::FTP::dataconn'    => '3.08',
              'Net::NNTP'             => '3.08',
              'Net::Netrc'            => '3.08',
              'Net::POP3'             => '3.08',
              'Net::SMTP'             => '3.08',
              'Net::Time'             => '3.08',
              'Pod::Man'              => '4.04',
              'Pod::ParseLink'        => '4.04',
              'Pod::Text'             => '4.04',
              'Pod::Text::Color'      => '4.04',
              'Pod::Text::Overstrike' => '4.04',
              'Pod::Text::Termcap'    => '4.04',
              'Pod::Usage'            => '1.68',
              'TAP::Base'             => '3.36',
              'TAP::Formatter::Base'  => '3.36',
              'TAP::Formatter::Color' => '3.36',
              'TAP::Formatter::Console'=> '3.36',
              'TAP::Formatter::Console::ParallelSession'=> '3.36',
              'TAP::Formatter::Console::Session'=> '3.36',
              'TAP::Formatter::File'  => '3.36',
              'TAP::Formatter::File::Session'=> '3.36',
              'TAP::Formatter::Session'=> '3.36',
              'TAP::Harness'          => '3.36',
              'TAP::Harness::Env'     => '3.36',
              'TAP::Object'           => '3.36',
              'TAP::Parser'           => '3.36',
              'TAP::Parser::Aggregator'=> '3.36',
              'TAP::Parser::Grammar'  => '3.36',
              'TAP::Parser::Iterator' => '3.36',
              'TAP::Parser::Iterator::Array'=> '3.36',
              'TAP::Parser::Iterator::Process'=> '3.36',
              'TAP::Parser::Iterator::Stream'=> '3.36',
              'TAP::Parser::IteratorFactory'=> '3.36',
              'TAP::Parser::Multiplexer'=> '3.36',
              'TAP::Parser::Result'   => '3.36',
              'TAP::Parser::Result::Bailout'=> '3.36',
              'TAP::Parser::Result::Comment'=> '3.36',
              'TAP::Parser::Result::Plan'=> '3.36',
              'TAP::Parser::Result::Pragma'=> '3.36',
              'TAP::Parser::Result::Test'=> '3.36',
              'TAP::Parser::Result::Unknown'=> '3.36',
              'TAP::Parser::Result::Version'=> '3.36',
              'TAP::Parser::Result::YAML'=> '3.36',
              'TAP::Parser::ResultFactory'=> '3.36',
              'TAP::Parser::Scheduler'=> '3.36',
              'TAP::Parser::Scheduler::Job'=> '3.36',
              'TAP::Parser::Scheduler::Spinner'=> '3.36',
              'TAP::Parser::Source'   => '3.36',
              'TAP::Parser::SourceHandler'=> '3.36',
              'TAP::Parser::SourceHandler::Executable'=> '3.36',
              'TAP::Parser::SourceHandler::File'=> '3.36',
              'TAP::Parser::SourceHandler::Handle'=> '3.36',
              'TAP::Parser::SourceHandler::Perl'=> '3.36',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.36',
              'TAP::Parser::YAMLish::Reader'=> '3.36',
              'TAP::Parser::YAMLish::Writer'=> '3.36',
              'Test::Harness'         => '3.36',
              'Unicode::Normalize'    => '1.25',
              'Unicode::UCD'          => '0.64',
              'XS::APItest'           => '0.78',
              'bigint'                => '0.42',
              'bignum'                => '0.42',
              'bigrat'                => '0.42',
              'utf8'                  => '1.19',
          },
          removed => {
          }
      },
      5.023008 => {
          delta_from => 5.023007,
          changed => {
              'B::Op_private'         => '5.023008',
              'Config'                => '5.023008',
              'Cwd'                   => '3.63',
              'DynaLoader'            => '1.38',
              'Encode'                => '2.80',
              'Encode::Alias'         => '2.20',
              'Encode::MIME::Header'  => '2.19',
              'Encode::Unicode'       => '2.15',
              'ExtUtils::CBuilder'    => '0.280225',
              'ExtUtils::CBuilder::Base'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280225',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280225',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280225',
              'ExtUtils::CBuilder::Platform::android'=> '0.280225',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280225',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280225',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280225',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280225',
              'ExtUtils::Command::MM' => '7.10_01',
              'ExtUtils::Liblist'     => '7.10_01',
              'ExtUtils::Liblist::Kid'=> '7.10_01',
              'ExtUtils::MM'          => '7.10_01',
              'ExtUtils::MM_AIX'      => '7.10_01',
              'ExtUtils::MM_Any'      => '7.10_01',
              'ExtUtils::MM_BeOS'     => '7.10_01',
              'ExtUtils::MM_Cygwin'   => '7.10_01',
              'ExtUtils::MM_DOS'      => '7.10_01',
              'ExtUtils::MM_Darwin'   => '7.10_01',
              'ExtUtils::MM_MacOS'    => '7.10_01',
              'ExtUtils::MM_NW5'      => '7.10_01',
              'ExtUtils::MM_OS2'      => '7.10_01',
              'ExtUtils::MM_QNX'      => '7.10_01',
              'ExtUtils::MM_UWIN'     => '7.10_01',
              'ExtUtils::MM_Unix'     => '7.10_01',
              'ExtUtils::MM_VMS'      => '7.10_01',
              'ExtUtils::MM_VOS'      => '7.10_01',
              'ExtUtils::MM_Win32'    => '7.10_01',
              'ExtUtils::MM_Win95'    => '7.10_01',
              'ExtUtils::MY'          => '7.10_01',
              'ExtUtils::MakeMaker'   => '7.10_01',
              'ExtUtils::MakeMaker::Config'=> '7.10_01',
              'ExtUtils::MakeMaker::version'=> '7.10_01',
              'ExtUtils::MakeMaker::version::regex'=> '7.10_01',
              'ExtUtils::Mkbootstrap' => '7.10_01',
              'ExtUtils::Mksymlists'  => '7.10_01',
              'ExtUtils::testlib'     => '7.10_01',
              'File::Spec'            => '3.63',
              'File::Spec::AmigaOS'   => '3.63',
              'File::Spec::Cygwin'    => '3.63',
              'File::Spec::Epoc'      => '3.63',
              'File::Spec::Functions' => '3.63',
              'File::Spec::Mac'       => '3.63',
              'File::Spec::OS2'       => '3.63',
              'File::Spec::Unix'      => '3.63',
              'File::Spec::VMS'       => '3.63',
              'File::Spec::Win32'     => '3.63',
              'IPC::Msg'              => '2.05',
              'IPC::Semaphore'        => '2.05',
              'IPC::SharedMem'        => '2.05',
              'IPC::SysV'             => '2.05',
              'Module::CoreList'      => '5.20160121',
              'Module::CoreList::TieHashDelta'=> '5.20160121',
              'Module::CoreList::Utils'=> '5.20160121',
              'ODBM_File'             => '1.13',
              'POSIX'                 => '1.63',
              'PerlIO::encoding'      => '0.24',
              'Pod::Man'              => '4.06',
              'Pod::ParseLink'        => '4.06',
              'Pod::Text'             => '4.06',
              'Pod::Text::Color'      => '4.06',
              'Pod::Text::Overstrike' => '4.06',
              'Pod::Text::Termcap'    => '4.06',
              'Storable'              => '2.55',
              'Time::HiRes'           => '1.9730',
              'XS::APItest'           => '0.79',
          },
          removed => {
          }
      },
      5.023009 => {
          delta_from => 5.023008,
          changed => {
              'Amiga::ARexx'          => '0.04',
              'Amiga::Exec'           => '0.02',
              'B::Op_private'         => '5.023009',
              'Carp'                  => '1.40',
              'Carp::Heavy'           => '1.40',
              'Config'                => '5.023009',
              'Errno'                 => '1.25',
              'ExtUtils::Embed'       => '1.33',
              'File::Find'            => '1.34',
              'File::Glob'            => '1.26',
              'File::Spec::AmigaOS'   => ';.64',
              'IPC::Msg'              => '2.06_01',
              'IPC::Semaphore'        => '2.06_01',
              'IPC::SharedMem'        => '2.06_01',
              'IPC::SysV'             => '2.06_01',
              'List::Util'            => '1.42_02',
              'List::Util::XS'        => '1.42_02',
              'Module::CoreList'      => '5.20160320',
              'Module::CoreList::TieHashDelta'=> '5.20160320',
              'Module::CoreList::Utils'=> '5.20160320',
              'POSIX'                 => '1.64',
              'Pod::Functions'        => '1.10',
              'Pod::Functions::Functions'=> '1.10',
              'Scalar::Util'          => '1.42_02',
              'SelfLoader'            => '1.23',
              'Socket'                => '2.020_03',
              'Storable'              => '2.56',
              'Sub::Util'             => '1.42_02',
              'Thread::Queue'         => '3.08',
              'Tie::File'             => '1.02',
              'Time::HiRes'           => '1.9732',
              'Win32API::File'        => '0.1203',
              'Win32API::File::inc::ExtUtils::Myconst2perl'=> '1',
              'XS::APItest'           => '0.80',
              'autouse'               => '1.11',
              'bytes'                 => '1.05',
              'strict'                => '1.11',
              'threads'               => '2.06',
              'version'               => '0.9916',
              'version::regex'        => '0.9916',
              'warnings'              => '1.36',
          },
          removed => {
              'Win32API::File::ExtUtils::Myconst2perl'=> 1,
          }
      },
      5.022002 => {
          delta_from => 5.022001,
          changed => {
              'B::Op_private'         => '5.022002',
              'Config'                => '5.022002',
              'Cwd'                   => '3.56_01',
              'File::Spec'            => '3.56_01',
              'File::Spec::Cygwin'    => '3.56_01',
              'File::Spec::Epoc'      => '3.56_01',
              'File::Spec::Functions' => '3.56_01',
              'File::Spec::Mac'       => '3.56_01',
              'File::Spec::OS2'       => '3.56_01',
              'File::Spec::Unix'      => '3.56_01',
              'File::Spec::VMS'       => '3.56_01',
              'File::Spec::Win32'     => '3.56_01',
              'Module::CoreList'      => '5.20160429',
              'Module::CoreList::TieHashDelta'=> '5.20160429',
              'Module::CoreList::Utils'=> '5.20160429',
              'XS::APItest'           => '0.72_01',
          },
          removed => {
          }
      },
      5.024000 => {
          delta_from => 5.023009,
          changed => {
              'B::Op_private'         => '5.024000',
              'Config'                => '5.024',
              'File::Copy'            => '2.31',
              'File::Path'            => '2.12_01',
              'File::Spec::AmigaOS'   => '3.64',
              'IO::Handle'            => '1.36',
              'Module::CoreList'      => '5.20160506',
              'Module::CoreList::TieHashDelta'=> '5.20160506',
              'Module::CoreList::Utils'=> '5.20160506',
              'ODBM_File'             => '1.14',
              'POSIX'                 => '1.65',
              'Pod::Man'              => '4.07',
              'Pod::ParseLink'        => '4.07',
              'Pod::Text'             => '4.07',
              'Pod::Text::Color'      => '4.07',
              'Pod::Text::Overstrike' => '4.07',
              'Pod::Text::Termcap'    => '4.07',
              'Thread::Queue'         => '3.09',
              'Time::HiRes'           => '1.9733',
              'threads'               => '2.07',
              'threads::shared'       => '1.51',
              'locale'                => '1.09',
          },
          removed => {
          }
      },
      5.025000 => {
          delta_from => 5.024,
          changed => {
              'B::Op_private'         => '5.025000',
              'Config'                => '5.025',
              'Module::CoreList'      => '5.20160507',
              'Module::CoreList::TieHashDelta'=> '5.20160507',
              'Module::CoreList::Utils'=> '5.20160507',
              'feature'               => '1.43',
          },
          removed => {
          }
      },
      5.025001 => {
          delta_from => 5.025,
          changed => {
              'Archive::Tar'          => '2.08',
              'Archive::Tar::Constant'=> '2.08',
              'Archive::Tar::File'    => '2.08',
              'B::Op_private'         => '5.025001',
              'Carp'                  => '1.41',
              'Carp::Heavy'           => '1.41',
              'Config'                => '5.025001',
              'Config::Perl::V'       => '0.26',
              'DB_File'               => '1.838',
              'Digest::MD5'           => '2.55',
              'IPC::Cmd'              => '0.94',
              'IPC::Msg'              => '2.07',
              'IPC::Semaphore'        => '2.07',
              'IPC::SharedMem'        => '2.07',
              'IPC::SysV'             => '2.07',
              'List::Util'            => '1.45_01',
              'List::Util::XS'        => '1.45_01',
              'Locale::Codes'         => '3.38',
              'Locale::Codes::Constants'=> '3.38',
              'Locale::Codes::Country'=> '3.38',
              'Locale::Codes::Country_Codes'=> '3.38',
              'Locale::Codes::Country_Retired'=> '3.38',
              'Locale::Codes::Currency'=> '3.38',
              'Locale::Codes::Currency_Codes'=> '3.38',
              'Locale::Codes::Currency_Retired'=> '3.38',
              'Locale::Codes::LangExt'=> '3.38',
              'Locale::Codes::LangExt_Codes'=> '3.38',
              'Locale::Codes::LangExt_Retired'=> '3.38',
              'Locale::Codes::LangFam'=> '3.38',
              'Locale::Codes::LangFam_Codes'=> '3.38',
              'Locale::Codes::LangFam_Retired'=> '3.38',
              'Locale::Codes::LangVar'=> '3.38',
              'Locale::Codes::LangVar_Codes'=> '3.38',
              'Locale::Codes::LangVar_Retired'=> '3.38',
              'Locale::Codes::Language'=> '3.38',
              'Locale::Codes::Language_Codes'=> '3.38',
              'Locale::Codes::Language_Retired'=> '3.38',
              'Locale::Codes::Script' => '3.38',
              'Locale::Codes::Script_Codes'=> '3.38',
              'Locale::Codes::Script_Retired'=> '3.38',
              'Locale::Country'       => '3.38',
              'Locale::Currency'      => '3.38',
              'Locale::Language'      => '3.38',
              'Locale::Maketext'      => '1.27',
              'Locale::Script'        => '3.38',
              'Module::CoreList'      => '5.20160520',
              'Module::CoreList::TieHashDelta'=> '5.20160520',
              'Module::CoreList::Utils'=> '5.20160520',
              'Module::Metadata'      => '1.000032',
              'POSIX'                 => '1.69',
              'Scalar::Util'          => '1.45_01',
              'Sub::Util'             => '1.45_01',
              'Sys::Syslog'           => '0.34',
              'Term::ANSIColor'       => '4.05',
              'Test2'                 => '1.302015',
              'Test2::API'            => '1.302015',
              'Test2::API::Breakage'  => '1.302015',
              'Test2::API::Context'   => '1.302015',
              'Test2::API::Instance'  => '1.302015',
              'Test2::API::Stack'     => '1.302015',
              'Test2::Event'          => '1.302015',
              'Test2::Event::Bail'    => '1.302015',
              'Test2::Event::Diag'    => '1.302015',
              'Test2::Event::Exception'=> '1.302015',
              'Test2::Event::Note'    => '1.302015',
              'Test2::Event::Ok'      => '1.302015',
              'Test2::Event::Plan'    => '1.302015',
              'Test2::Event::Skip'    => '1.302015',
              'Test2::Event::Subtest' => '1.302015',
              'Test2::Event::Waiting' => '1.302015',
              'Test2::Formatter'      => '1.302015',
              'Test2::Formatter::TAP' => '1.302015',
              'Test2::Hub'            => '1.302015',
              'Test2::Hub::Interceptor'=> '1.302015',
              'Test2::Hub::Interceptor::Terminator'=> '1.302015',
              'Test2::Hub::Subtest'   => '1.302015',
              'Test2::IPC'            => '1.302015',
              'Test2::IPC::Driver'    => '1.302015',
              'Test2::IPC::Driver::Files'=> '1.302015',
              'Test2::Util'           => '1.302015',
              'Test2::Util::ExternalMeta'=> '1.302015',
              'Test2::Util::HashBase' => '1.302015',
              'Test2::Util::Trace'    => '1.302015',
              'Test::Builder'         => '1.302015',
              'Test::Builder::Formatter'=> '1.302015',
              'Test::Builder::Module' => '1.302015',
              'Test::Builder::Tester' => '1.302015',
              'Test::Builder::Tester::Color'=> '1.302015',
              'Test::Builder::TodoDiag'=> '1.302015',
              'Test::More'            => '1.302015',
              'Test::Simple'          => '1.302015',
              'Test::Tester'          => '1.302015',
              'Test::Tester::Capture' => '1.302015',
              'Test::Tester::CaptureRunner'=> '1.302015',
              'Test::Tester::Delegate'=> '1.302015',
              'Test::use::ok'         => '1.302015',
              'XS::APItest'           => '0.81',
              '_charnames'            => '1.44',
              'charnames'             => '1.44',
              'ok'                    => '1.302015',
              'perlfaq'               => '5.021011',
              're'                    => '0.33',
              'threads'               => '2.08',
              'threads::shared'       => '1.52',
          },
          removed => {
          }
      },
      5.025002 => {
          delta_from => 5.025001,
          changed => {
              'App::Cpan'             => '1.64',
              'B::Op_private'         => '5.025002',
              'CPAN'                  => '2.14',
              'CPAN::Distribution'    => '2.12',
              'CPAN::FTP'             => '5.5007',
              'CPAN::FirstTime'       => '5.5309',
              'CPAN::HandleConfig'    => '5.5007',
              'CPAN::Index'           => '2.12',
              'CPAN::Mirrors'         => '2.12',
              'CPAN::Plugin'          => '0.96',
              'CPAN::Shell'           => '5.5006',
              'Config'                => '5.025002',
              'Cwd'                   => '3.64',
              'Devel::Peek'           => '1.24',
              'DynaLoader'            => '1.39',
              'ExtUtils::Command'     => '7.18',
              'ExtUtils::Command::MM' => '7.18',
              'ExtUtils::Liblist'     => '7.18',
              'ExtUtils::Liblist::Kid'=> '7.18',
              'ExtUtils::MM'          => '7.18',
              'ExtUtils::MM_AIX'      => '7.18',
              'ExtUtils::MM_Any'      => '7.18',
              'ExtUtils::MM_BeOS'     => '7.18',
              'ExtUtils::MM_Cygwin'   => '7.18',
              'ExtUtils::MM_DOS'      => '7.18',
              'ExtUtils::MM_Darwin'   => '7.18',
              'ExtUtils::MM_MacOS'    => '7.18',
              'ExtUtils::MM_NW5'      => '7.18',
              'ExtUtils::MM_OS2'      => '7.18',
              'ExtUtils::MM_QNX'      => '7.18',
              'ExtUtils::MM_UWIN'     => '7.18',
              'ExtUtils::MM_Unix'     => '7.18',
              'ExtUtils::MM_VMS'      => '7.18',
              'ExtUtils::MM_VOS'      => '7.18',
              'ExtUtils::MM_Win32'    => '7.18',
              'ExtUtils::MM_Win95'    => '7.18',
              'ExtUtils::MY'          => '7.18',
              'ExtUtils::MakeMaker'   => '7.18',
              'ExtUtils::MakeMaker::Config'=> '7.18',
              'ExtUtils::MakeMaker::Locale'=> '7.18',
              'ExtUtils::MakeMaker::version'=> '7.18',
              'ExtUtils::MakeMaker::version::regex'=> '7.18',
              'ExtUtils::Miniperl'    => '1.06',
              'ExtUtils::Mkbootstrap' => '7.18',
              'ExtUtils::Mksymlists'  => '7.18',
              'ExtUtils::ParseXS'     => '3.32',
              'ExtUtils::ParseXS::Constants'=> '3.32',
              'ExtUtils::ParseXS::CountLines'=> '3.32',
              'ExtUtils::ParseXS::Eval'=> '3.32',
              'ExtUtils::ParseXS::Utilities'=> '3.32',
              'ExtUtils::Typemaps'    => '3.32',
              'ExtUtils::Typemaps::Cmd'=> '3.32',
              'ExtUtils::Typemaps::InputMap'=> '3.32',
              'ExtUtils::Typemaps::OutputMap'=> '3.32',
              'ExtUtils::Typemaps::Type'=> '3.32',
              'ExtUtils::testlib'     => '7.18',
              'File::Copy'            => '2.32',
              'File::Glob'            => '1.27',
              'File::Spec'            => '3.64',
              'File::Spec::Cygwin'    => '3.64',
              'File::Spec::Epoc'      => '3.64',
              'File::Spec::Functions' => '3.64',
              'File::Spec::Mac'       => '3.64',
              'File::Spec::OS2'       => '3.64',
              'File::Spec::Unix'      => '3.64',
              'File::Spec::VMS'       => '3.64',
              'File::Spec::Win32'     => '3.64',
              'FileHandle'            => '2.03',
              'Getopt::Long'          => '2.49',
              'HTTP::Tiny'            => '0.058',
              'JSON::PP'              => '2.27400',
              'Locale::Codes'         => '3.39',
              'Locale::Codes::Constants'=> '3.39',
              'Locale::Codes::Country'=> '3.39',
              'Locale::Codes::Country_Codes'=> '3.39',
              'Locale::Codes::Country_Retired'=> '3.39',
              'Locale::Codes::Currency'=> '3.39',
              'Locale::Codes::Currency_Codes'=> '3.39',
              'Locale::Codes::Currency_Retired'=> '3.39',
              'Locale::Codes::LangExt'=> '3.39',
              'Locale::Codes::LangExt_Codes'=> '3.39',
              'Locale::Codes::LangExt_Retired'=> '3.39',
              'Locale::Codes::LangFam'=> '3.39',
              'Locale::Codes::LangFam_Codes'=> '3.39',
              'Locale::Codes::LangFam_Retired'=> '3.39',
              'Locale::Codes::LangVar'=> '3.39',
              'Locale::Codes::LangVar_Codes'=> '3.39',
              'Locale::Codes::LangVar_Retired'=> '3.39',
              'Locale::Codes::Language'=> '3.39',
              'Locale::Codes::Language_Codes'=> '3.39',
              'Locale::Codes::Language_Retired'=> '3.39',
              'Locale::Codes::Script' => '3.39',
              'Locale::Codes::Script_Codes'=> '3.39',
              'Locale::Codes::Script_Retired'=> '3.39',
              'Locale::Country'       => '3.39',
              'Locale::Currency'      => '3.39',
              'Locale::Language'      => '3.39',
              'Locale::Script'        => '3.39',
              'Module::CoreList'      => '5.20160620',
              'Module::CoreList::TieHashDelta'=> '5.20160620',
              'Module::CoreList::Utils'=> '5.20160620',
              'Opcode'                => '1.35',
              'POSIX'                 => '1.70',
              'Pod::Checker'          => '1.73',
              'Pod::Functions'        => '1.11',
              'Pod::Functions::Functions'=> '1.11',
              'Pod::Usage'            => '1.69',
              'Test2'                 => '1.302026',
              'Test2::API'            => '1.302026',
              'Test2::API::Breakage'  => '1.302026',
              'Test2::API::Context'   => '1.302026',
              'Test2::API::Instance'  => '1.302026',
              'Test2::API::Stack'     => '1.302026',
              'Test2::Event'          => '1.302026',
              'Test2::Event::Bail'    => '1.302026',
              'Test2::Event::Diag'    => '1.302026',
              'Test2::Event::Exception'=> '1.302026',
              'Test2::Event::Generic' => '1.302026',
              'Test2::Event::Note'    => '1.302026',
              'Test2::Event::Ok'      => '1.302026',
              'Test2::Event::Plan'    => '1.302026',
              'Test2::Event::Skip'    => '1.302026',
              'Test2::Event::Subtest' => '1.302026',
              'Test2::Event::Waiting' => '1.302026',
              'Test2::Formatter'      => '1.302026',
              'Test2::Formatter::TAP' => '1.302026',
              'Test2::Hub'            => '1.302026',
              'Test2::Hub::Interceptor'=> '1.302026',
              'Test2::Hub::Interceptor::Terminator'=> '1.302026',
              'Test2::Hub::Subtest'   => '1.302026',
              'Test2::IPC'            => '1.302026',
              'Test2::IPC::Driver'    => '1.302026',
              'Test2::IPC::Driver::Files'=> '1.302026',
              'Test2::Util'           => '1.302026',
              'Test2::Util::ExternalMeta'=> '1.302026',
              'Test2::Util::HashBase' => '1.302026',
              'Test2::Util::Trace'    => '1.302026',
              'Test::Builder'         => '1.302026',
              'Test::Builder::Formatter'=> '1.302026',
              'Test::Builder::Module' => '1.302026',
              'Test::Builder::Tester' => '1.302026',
              'Test::Builder::Tester::Color'=> '1.302026',
              'Test::Builder::TodoDiag'=> '1.302026',
              'Test::More'            => '1.302026',
              'Test::Simple'          => '1.302026',
              'Test::Tester'          => '1.302026',
              'Test::Tester::Capture' => '1.302026',
              'Test::Tester::CaptureRunner'=> '1.302026',
              'Test::Tester::Delegate'=> '1.302026',
              'Test::use::ok'         => '1.302026',
              'Thread::Queue'         => '3.11',
              'Time::HiRes'           => '1.9734',
              'Unicode::UCD'          => '0.65',
              'VMS::DCLsym'           => '1.07',
              'XS::APItest'           => '0.82',
              'diagnostics'           => '1.35',
              'feature'               => '1.44',
              'ok'                    => '1.302026',
              'threads'               => '2.09',
          },
          removed => {
          }
      },
      5.025003 => {
          delta_from => 5.025002,
          changed => {
              'B::Op_private'         => '5.025003',
              'Config'                => '5.025003',
              'Data::Dumper'          => '2.161',
              'Devel::PPPort'         => '3.35',
              'Encode'                => '2.84',
              'Encode::MIME::Header'  => '2.23',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.07',
              'ExtUtils::ParseXS'     => '3.33',
              'ExtUtils::ParseXS::Constants'=> '3.33',
              'ExtUtils::ParseXS::CountLines'=> '3.33',
              'ExtUtils::ParseXS::Eval'=> '3.33',
              'ExtUtils::ParseXS::Utilities'=> '3.33',
              'ExtUtils::Typemaps'    => '3.33',
              'ExtUtils::Typemaps::Cmd'=> '3.33',
              'ExtUtils::Typemaps::InputMap'=> '3.33',
              'ExtUtils::Typemaps::OutputMap'=> '3.33',
              'ExtUtils::Typemaps::Type'=> '3.33',
              'Hash::Util'            => '0.20',
              'Math::BigFloat'        => '1.999726',
              'Math::BigFloat::Trace' => '0.43',
              'Math::BigInt'          => '1.999726',
              'Math::BigInt::Calc'    => '1.999726',
              'Math::BigInt::CalcEmu' => '1.999726',
              'Math::BigInt::FastCalc'=> '0.42',
              'Math::BigInt::Trace'   => '0.43',
              'Math::BigRat'          => '0.260804',
              'Module::CoreList'      => '5.20160720',
              'Module::CoreList::TieHashDelta'=> '5.20160720',
              'Module::CoreList::Utils'=> '5.20160720',
              'Net::Cmd'              => '3.09',
              'Net::Config'           => '3.09',
              'Net::Domain'           => '3.09',
              'Net::FTP'              => '3.09',
              'Net::FTP::A'           => '3.09',
              'Net::FTP::E'           => '3.09',
              'Net::FTP::I'           => '3.09',
              'Net::FTP::L'           => '3.09',
              'Net::FTP::dataconn'    => '3.09',
              'Net::NNTP'             => '3.09',
              'Net::Netrc'            => '3.09',
              'Net::POP3'             => '3.09',
              'Net::SMTP'             => '3.09',
              'Net::Time'             => '3.09',
              'Parse::CPAN::Meta'     => '1.4422',
              'Perl::OSType'          => '1.010',
              'Test2'                 => '1.302045',
              'Test2::API'            => '1.302045',
              'Test2::API::Breakage'  => '1.302045',
              'Test2::API::Context'   => '1.302045',
              'Test2::API::Instance'  => '1.302045',
              'Test2::API::Stack'     => '1.302045',
              'Test2::Event'          => '1.302045',
              'Test2::Event::Bail'    => '1.302045',
              'Test2::Event::Diag'    => '1.302045',
              'Test2::Event::Exception'=> '1.302045',
              'Test2::Event::Generic' => '1.302045',
              'Test2::Event::Info'    => '1.302045',
              'Test2::Event::Note'    => '1.302045',
              'Test2::Event::Ok'      => '1.302045',
              'Test2::Event::Plan'    => '1.302045',
              'Test2::Event::Skip'    => '1.302045',
              'Test2::Event::Subtest' => '1.302045',
              'Test2::Event::Waiting' => '1.302045',
              'Test2::Formatter'      => '1.302045',
              'Test2::Formatter::TAP' => '1.302045',
              'Test2::Hub'            => '1.302045',
              'Test2::Hub::Interceptor'=> '1.302045',
              'Test2::Hub::Interceptor::Terminator'=> '1.302045',
              'Test2::Hub::Subtest'   => '1.302045',
              'Test2::IPC'            => '1.302045',
              'Test2::IPC::Driver'    => '1.302045',
              'Test2::IPC::Driver::Files'=> '1.302045',
              'Test2::Util'           => '1.302045',
              'Test2::Util::ExternalMeta'=> '1.302045',
              'Test2::Util::HashBase' => '1.302045',
              'Test2::Util::Trace'    => '1.302045',
              'Test::Builder'         => '1.302045',
              'Test::Builder::Formatter'=> '1.302045',
              'Test::Builder::Module' => '1.302045',
              'Test::Builder::Tester' => '1.302045',
              'Test::Builder::Tester::Color'=> '1.302045',
              'Test::Builder::TodoDiag'=> '1.302045',
              'Test::More'            => '1.302045',
              'Test::Simple'          => '1.302045',
              'Test::Tester'          => '1.302045',
              'Test::Tester::Capture' => '1.302045',
              'Test::Tester::CaptureRunner'=> '1.302045',
              'Test::Tester::Delegate'=> '1.302045',
              'Test::use::ok'         => '1.302045',
              'Time::HiRes'           => '1.9739',
              'Unicode'               => '9.0.0',
              'Unicode::UCD'          => '0.66',
              'XSLoader'              => '0.22',
              'bigint'                => '0.43',
              'bignum'                => '0.43',
              'bigrat'                => '0.43',
              'encoding'              => '2.17_01',
              'encoding::warnings'    => '0.13',
              'feature'               => '1.45',
              'ok'                    => '1.302045',
              'version'               => '0.9917',
              'version::regex'        => '0.9917',
              'warnings'              => '1.37',
          },
          removed => {
          }
      },
      5.025004 => {
          delta_from => 5.025003,
          changed => {
              'App::Cpan'             => '1.64_01',
              'App::Prove'            => '3.36_01',
              'App::Prove::State'     => '3.36_01',
              'App::Prove::State::Result'=> '3.36_01',
              'App::Prove::State::Result::Test'=> '3.36_01',
              'Archive::Tar'          => '2.10',
              'Archive::Tar::Constant'=> '2.10',
              'Archive::Tar::File'    => '2.10',
              'B'                     => '1.63',
              'B::Concise'            => '0.998',
              'B::Deparse'            => '1.38',
              'B::Op_private'         => '5.025004',
              'CPAN'                  => '2.14_01',
              'CPAN::Meta'            => '2.150010',
              'CPAN::Meta::Converter' => '2.150010',
              'CPAN::Meta::Feature'   => '2.150010',
              'CPAN::Meta::History'   => '2.150010',
              'CPAN::Meta::Merge'     => '2.150010',
              'CPAN::Meta::Prereqs'   => '2.150010',
              'CPAN::Meta::Spec'      => '2.150010',
              'CPAN::Meta::Validator' => '2.150010',
              'Carp'                  => '1.42',
              'Carp::Heavy'           => '1.42',
              'Compress::Zlib'        => '2.069_01',
              'Config'                => '5.025004',
              'Config::Perl::V'       => '0.27',
              'Cwd'                   => '3.65',
              'Digest'                => '1.17_01',
              'Digest::SHA'           => '5.96',
              'Encode'                => '2.86',
              'Errno'                 => '1.26',
              'ExtUtils::Command'     => '7.24',
              'ExtUtils::Command::MM' => '7.24',
              'ExtUtils::Liblist'     => '7.24',
              'ExtUtils::Liblist::Kid'=> '7.24',
              'ExtUtils::MM'          => '7.24',
              'ExtUtils::MM_AIX'      => '7.24',
              'ExtUtils::MM_Any'      => '7.24',
              'ExtUtils::MM_BeOS'     => '7.24',
              'ExtUtils::MM_Cygwin'   => '7.24',
              'ExtUtils::MM_DOS'      => '7.24',
              'ExtUtils::MM_Darwin'   => '7.24',
              'ExtUtils::MM_MacOS'    => '7.24',
              'ExtUtils::MM_NW5'      => '7.24',
              'ExtUtils::MM_OS2'      => '7.24',
              'ExtUtils::MM_QNX'      => '7.24',
              'ExtUtils::MM_UWIN'     => '7.24',
              'ExtUtils::MM_Unix'     => '7.24',
              'ExtUtils::MM_VMS'      => '7.24',
              'ExtUtils::MM_VOS'      => '7.24',
              'ExtUtils::MM_Win32'    => '7.24',
              'ExtUtils::MM_Win95'    => '7.24',
              'ExtUtils::MY'          => '7.24',
              'ExtUtils::MakeMaker'   => '7.24',
              'ExtUtils::MakeMaker::Config'=> '7.24',
              'ExtUtils::MakeMaker::Locale'=> '7.24',
              'ExtUtils::MakeMaker::version'=> '7.24',
              'ExtUtils::MakeMaker::version::regex'=> '7.24',
              'ExtUtils::Mkbootstrap' => '7.24',
              'ExtUtils::Mksymlists'  => '7.24',
              'ExtUtils::testlib'     => '7.24',
              'File::Fetch'           => '0.52',
              'File::Spec'            => '3.65',
              'File::Spec::AmigaOS'   => '3.65',
              'File::Spec::Cygwin'    => '3.65',
              'File::Spec::Epoc'      => '3.65',
              'File::Spec::Functions' => '3.65',
              'File::Spec::Mac'       => '3.65',
              'File::Spec::OS2'       => '3.65',
              'File::Spec::Unix'      => '3.65',
              'File::Spec::VMS'       => '3.65',
              'File::Spec::Win32'     => '3.65',
              'HTTP::Tiny'            => '0.064',
              'Hash::Util'            => '0.21',
              'I18N::LangTags'        => '0.41',
              'I18N::LangTags::Detect'=> '1.06',
              'IO'                    => '1.37',
              'IO::Compress::Adapter::Bzip2'=> '2.069_01',
              'IO::Compress::Adapter::Deflate'=> '2.069_01',
              'IO::Compress::Adapter::Identity'=> '2.069_01',
              'IO::Compress::Base'    => '2.069_01',
              'IO::Compress::Base::Common'=> '2.069_01',
              'IO::Compress::Bzip2'   => '2.069_01',
              'IO::Compress::Deflate' => '2.069_01',
              'IO::Compress::Gzip'    => '2.069_01',
              'IO::Compress::Gzip::Constants'=> '2.069_01',
              'IO::Compress::RawDeflate'=> '2.069_01',
              'IO::Compress::Zip'     => '2.069_01',
              'IO::Compress::Zip::Constants'=> '2.069_01',
              'IO::Compress::Zlib::Constants'=> '2.069_01',
              'IO::Compress::Zlib::Extra'=> '2.069_01',
              'IO::Socket::IP'        => '0.38',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.069_01',
              'IO::Uncompress::Adapter::Identity'=> '2.069_01',
              'IO::Uncompress::Adapter::Inflate'=> '2.069_01',
              'IO::Uncompress::AnyInflate'=> '2.069_01',
              'IO::Uncompress::AnyUncompress'=> '2.069_01',
              'IO::Uncompress::Base'  => '2.069_01',
              'IO::Uncompress::Bunzip2'=> '2.069_01',
              'IO::Uncompress::Gunzip'=> '2.069_01',
              'IO::Uncompress::Inflate'=> '2.069_01',
              'IO::Uncompress::RawInflate'=> '2.069_01',
              'IO::Uncompress::Unzip' => '2.069_01',
              'IPC::Cmd'              => '0.96',
              'JSON::PP'              => '2.27400_01',
              'Locale::Maketext'      => '1.28',
              'Locale::Maketext::Simple'=> '0.21_01',
              'Math::BigFloat::Trace' => '0.43_01',
              'Math::BigInt::Trace'   => '0.43_01',
              'Memoize'               => '1.03_01',
              'Module::CoreList'      => '5.20160820',
              'Module::CoreList::TieHashDelta'=> '5.20160820',
              'Module::CoreList::Utils'=> '5.20160820',
              'Module::Load::Conditional'=> '0.68',
              'Module::Metadata'      => '1.000033',
              'NEXT'                  => '0.67',
              'Net::Cmd'              => '3.10',
              'Net::Config'           => '3.10',
              'Net::Domain'           => '3.10',
              'Net::FTP'              => '3.10',
              'Net::FTP::A'           => '3.10',
              'Net::FTP::E'           => '3.10',
              'Net::FTP::I'           => '3.10',
              'Net::FTP::L'           => '3.10',
              'Net::FTP::dataconn'    => '3.10',
              'Net::NNTP'             => '3.10',
              'Net::Netrc'            => '3.10',
              'Net::POP3'             => '3.10',
              'Net::Ping'             => '2.44',
              'Net::SMTP'             => '3.10',
              'Net::Time'             => '3.10',
              'Opcode'                => '1.37',
              'POSIX'                 => '1.71',
              'Parse::CPAN::Meta'     => '2.150010',
              'Pod::Html'             => '1.2201',
              'Pod::Perldoc'          => '3.27',
              'Pod::Perldoc::BaseTo'  => '3.27',
              'Pod::Perldoc::GetOptsOO'=> '3.27',
              'Pod::Perldoc::ToANSI'  => '3.27',
              'Pod::Perldoc::ToChecker'=> '3.27',
              'Pod::Perldoc::ToMan'   => '3.27',
              'Pod::Perldoc::ToNroff' => '3.27',
              'Pod::Perldoc::ToPod'   => '3.27',
              'Pod::Perldoc::ToRtf'   => '3.27',
              'Pod::Perldoc::ToTerm'  => '3.27',
              'Pod::Perldoc::ToText'  => '3.27',
              'Pod::Perldoc::ToTk'    => '3.27',
              'Pod::Perldoc::ToXml'   => '3.27',
              'Storable'              => '2.57',
              'Sys::Syslog'           => '0.34_01',
              'TAP::Base'             => '3.36_01',
              'TAP::Formatter::Base'  => '3.36_01',
              'TAP::Formatter::Color' => '3.36_01',
              'TAP::Formatter::Console'=> '3.36_01',
              'TAP::Formatter::Console::ParallelSession'=> '3.36_01',
              'TAP::Formatter::Console::Session'=> '3.36_01',
              'TAP::Formatter::File'  => '3.36_01',
              'TAP::Formatter::File::Session'=> '3.36_01',
              'TAP::Formatter::Session'=> '3.36_01',
              'TAP::Harness'          => '3.36_01',
              'TAP::Harness::Env'     => '3.36_01',
              'TAP::Object'           => '3.36_01',
              'TAP::Parser'           => '3.36_01',
              'TAP::Parser::Aggregator'=> '3.36_01',
              'TAP::Parser::Grammar'  => '3.36_01',
              'TAP::Parser::Iterator' => '3.36_01',
              'TAP::Parser::Iterator::Array'=> '3.36_01',
              'TAP::Parser::Iterator::Process'=> '3.36_01',
              'TAP::Parser::Iterator::Stream'=> '3.36_01',
              'TAP::Parser::IteratorFactory'=> '3.36_01',
              'TAP::Parser::Multiplexer'=> '3.36_01',
              'TAP::Parser::Result'   => '3.36_01',
              'TAP::Parser::Result::Bailout'=> '3.36_01',
              'TAP::Parser::Result::Comment'=> '3.36_01',
              'TAP::Parser::Result::Plan'=> '3.36_01',
              'TAP::Parser::Result::Pragma'=> '3.36_01',
              'TAP::Parser::Result::Test'=> '3.36_01',
              'TAP::Parser::Result::Unknown'=> '3.36_01',
              'TAP::Parser::Result::Version'=> '3.36_01',
              'TAP::Parser::Result::YAML'=> '3.36_01',
              'TAP::Parser::ResultFactory'=> '3.36_01',
              'TAP::Parser::Scheduler'=> '3.36_01',
              'TAP::Parser::Scheduler::Job'=> '3.36_01',
              'TAP::Parser::Scheduler::Spinner'=> '3.36_01',
              'TAP::Parser::Source'   => '3.36_01',
              'TAP::Parser::SourceHandler'=> '3.36_01',
              'TAP::Parser::SourceHandler::Executable'=> '3.36_01',
              'TAP::Parser::SourceHandler::File'=> '3.36_01',
              'TAP::Parser::SourceHandler::Handle'=> '3.36_01',
              'TAP::Parser::SourceHandler::Perl'=> '3.36_01',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.36_01',
              'TAP::Parser::YAMLish::Reader'=> '3.36_01',
              'TAP::Parser::YAMLish::Writer'=> '3.36_01',
              'Test'                  => '1.29',
              'Test2'                 => '1.302052',
              'Test2::API'            => '1.302052',
              'Test2::API::Breakage'  => '1.302052',
              'Test2::API::Context'   => '1.302052',
              'Test2::API::Instance'  => '1.302052',
              'Test2::API::Stack'     => '1.302052',
              'Test2::Event'          => '1.302052',
              'Test2::Event::Bail'    => '1.302052',
              'Test2::Event::Diag'    => '1.302052',
              'Test2::Event::Exception'=> '1.302052',
              'Test2::Event::Generic' => '1.302052',
              'Test2::Event::Info'    => '1.302052',
              'Test2::Event::Note'    => '1.302052',
              'Test2::Event::Ok'      => '1.302052',
              'Test2::Event::Plan'    => '1.302052',
              'Test2::Event::Skip'    => '1.302052',
              'Test2::Event::Subtest' => '1.302052',
              'Test2::Event::Waiting' => '1.302052',
              'Test2::Formatter'      => '1.302052',
              'Test2::Formatter::TAP' => '1.302052',
              'Test2::Hub'            => '1.302052',
              'Test2::Hub::Interceptor'=> '1.302052',
              'Test2::Hub::Interceptor::Terminator'=> '1.302052',
              'Test2::Hub::Subtest'   => '1.302052',
              'Test2::IPC'            => '1.302052',
              'Test2::IPC::Driver'    => '1.302052',
              'Test2::IPC::Driver::Files'=> '1.302052',
              'Test2::Util'           => '1.302052',
              'Test2::Util::ExternalMeta'=> '1.302052',
              'Test2::Util::HashBase' => '1.302052',
              'Test2::Util::Trace'    => '1.302052',
              'Test::Builder'         => '1.302052',
              'Test::Builder::Formatter'=> '1.302052',
              'Test::Builder::Module' => '1.302052',
              'Test::Builder::Tester' => '1.302052',
              'Test::Builder::Tester::Color'=> '1.302052',
              'Test::Builder::TodoDiag'=> '1.302052',
              'Test::Harness'         => '3.36_01',
              'Test::More'            => '1.302052',
              'Test::Simple'          => '1.302052',
              'Test::Tester'          => '1.302052',
              'Test::Tester::Capture' => '1.302052',
              'Test::Tester::CaptureRunner'=> '1.302052',
              'Test::Tester::Delegate'=> '1.302052',
              'Test::use::ok'         => '1.302052',
              'Tie::Hash::NamedCapture'=> '0.10',
              'Time::Local'           => '1.24',
              'XS::APItest'           => '0.83',
              'arybase'               => '0.12',
              'base'                  => '2.24',
              'bigint'                => '0.43_01',
              'bignum'                => '0.43_01',
              'bigrat'                => '0.43_01',
              'encoding'              => '2.18',
              'ok'                    => '1.302052',
          },
          removed => {
          }
      },
      5.025005 => {
          delta_from => 5.025004,
          changed => {
              'B::Op_private'         => '5.025005',
              'Config'                => '5.025005',
              'Filter::Simple'        => '0.93',
              'Locale::Codes'         => '3.40',
              'Locale::Codes::Constants'=> '3.40',
              'Locale::Codes::Country'=> '3.40',
              'Locale::Codes::Country_Codes'=> '3.40',
              'Locale::Codes::Country_Retired'=> '3.40',
              'Locale::Codes::Currency'=> '3.40',
              'Locale::Codes::Currency_Codes'=> '3.40',
              'Locale::Codes::Currency_Retired'=> '3.40',
              'Locale::Codes::LangExt'=> '3.40',
              'Locale::Codes::LangExt_Codes'=> '3.40',
              'Locale::Codes::LangExt_Retired'=> '3.40',
              'Locale::Codes::LangFam'=> '3.40',
              'Locale::Codes::LangFam_Codes'=> '3.40',
              'Locale::Codes::LangFam_Retired'=> '3.40',
              'Locale::Codes::LangVar'=> '3.40',
              'Locale::Codes::LangVar_Codes'=> '3.40',
              'Locale::Codes::LangVar_Retired'=> '3.40',
              'Locale::Codes::Language'=> '3.40',
              'Locale::Codes::Language_Codes'=> '3.40',
              'Locale::Codes::Language_Retired'=> '3.40',
              'Locale::Codes::Script' => '3.40',
              'Locale::Codes::Script_Codes'=> '3.40',
              'Locale::Codes::Script_Retired'=> '3.40',
              'Locale::Country'       => '3.40',
              'Locale::Currency'      => '3.40',
              'Locale::Language'      => '3.40',
              'Locale::Script'        => '3.40',
              'Module::CoreList'      => '5.20160920',
              'Module::CoreList::TieHashDelta'=> '5.20160920',
              'Module::CoreList::Utils'=> '5.20160920',
              'POSIX'                 => '1.72',
              'Sys::Syslog'           => '0.35',
              'Test2'                 => '1.302056',
              'Test2::API'            => '1.302056',
              'Test2::API::Breakage'  => '1.302056',
              'Test2::API::Context'   => '1.302056',
              'Test2::API::Instance'  => '1.302056',
              'Test2::API::Stack'     => '1.302056',
              'Test2::Event'          => '1.302056',
              'Test2::Event::Bail'    => '1.302056',
              'Test2::Event::Diag'    => '1.302056',
              'Test2::Event::Exception'=> '1.302056',
              'Test2::Event::Generic' => '1.302056',
              'Test2::Event::Info'    => '1.302056',
              'Test2::Event::Note'    => '1.302056',
              'Test2::Event::Ok'      => '1.302056',
              'Test2::Event::Plan'    => '1.302056',
              'Test2::Event::Skip'    => '1.302056',
              'Test2::Event::Subtest' => '1.302056',
              'Test2::Event::Waiting' => '1.302056',
              'Test2::Formatter'      => '1.302056',
              'Test2::Formatter::TAP' => '1.302056',
              'Test2::Hub'            => '1.302056',
              'Test2::Hub::Interceptor'=> '1.302056',
              'Test2::Hub::Interceptor::Terminator'=> '1.302056',
              'Test2::Hub::Subtest'   => '1.302056',
              'Test2::IPC'            => '1.302056',
              'Test2::IPC::Driver'    => '1.302056',
              'Test2::IPC::Driver::Files'=> '1.302056',
              'Test2::Util'           => '1.302056',
              'Test2::Util::ExternalMeta'=> '1.302056',
              'Test2::Util::HashBase' => '1.302056',
              'Test2::Util::Trace'    => '1.302056',
              'Test::Builder'         => '1.302056',
              'Test::Builder::Formatter'=> '1.302056',
              'Test::Builder::Module' => '1.302056',
              'Test::Builder::Tester' => '1.302056',
              'Test::Builder::Tester::Color'=> '1.302056',
              'Test::Builder::TodoDiag'=> '1.302056',
              'Test::More'            => '1.302056',
              'Test::Simple'          => '1.302056',
              'Test::Tester'          => '1.302056',
              'Test::Tester::Capture' => '1.302056',
              'Test::Tester::CaptureRunner'=> '1.302056',
              'Test::Tester::Delegate'=> '1.302056',
              'Test::use::ok'         => '1.302056',
              'Thread::Semaphore'     => '2.13',
              'XS::APItest'           => '0.84',
              'XSLoader'              => '0.24',
              'ok'                    => '1.302056',
          },
          removed => {
          }
      },
      5.025006 => {
          delta_from => 5.025005,
          changed => {
              'Archive::Tar'          => '2.14',
              'Archive::Tar::Constant'=> '2.14',
              'Archive::Tar::File'    => '2.14',
              'B'                     => '1.64',
              'B::Concise'            => '0.999',
              'B::Deparse'            => '1.39',
              'B::Op_private'         => '5.025006',
              'Config'                => '5.025006',
              'Data::Dumper'          => '2.162',
              'Devel::Peek'           => '1.25',
              'HTTP::Tiny'            => '0.070',
              'List::Util'            => '1.46',
              'List::Util::XS'        => '1.46',
              'Module::CoreList'      => '5.20161020',
              'Module::CoreList::TieHashDelta'=> '5.20161020',
              'Module::CoreList::Utils'=> '5.20161020',
              'Net::Ping'             => '2.51',
              'OS2::DLL'              => '1.07',
              'Opcode'                => '1.38',
              'POSIX'                 => '1.73',
              'PerlIO::encoding'      => '0.25',
              'Pod::Man'              => '4.08',
              'Pod::ParseLink'        => '4.08',
              'Pod::Text'             => '4.08',
              'Pod::Text::Color'      => '4.08',
              'Pod::Text::Overstrike' => '4.08',
              'Pod::Text::Termcap'    => '4.08',
              'Scalar::Util'          => '1.46',
              'Storable'              => '2.58',
              'Sub::Util'             => '1.46',
              'Test2'                 => '1.302059',
              'Test2::API'            => '1.302059',
              'Test2::API::Breakage'  => '1.302059',
              'Test2::API::Context'   => '1.302059',
              'Test2::API::Instance'  => '1.302059',
              'Test2::API::Stack'     => '1.302059',
              'Test2::Event'          => '1.302059',
              'Test2::Event::Bail'    => '1.302059',
              'Test2::Event::Diag'    => '1.302059',
              'Test2::Event::Exception'=> '1.302059',
              'Test2::Event::Generic' => '1.302059',
              'Test2::Event::Info'    => '1.302059',
              'Test2::Event::Note'    => '1.302059',
              'Test2::Event::Ok'      => '1.302059',
              'Test2::Event::Plan'    => '1.302059',
              'Test2::Event::Skip'    => '1.302059',
              'Test2::Event::Subtest' => '1.302059',
              'Test2::Event::Waiting' => '1.302059',
              'Test2::Formatter'      => '1.302059',
              'Test2::Formatter::TAP' => '1.302059',
              'Test2::Hub'            => '1.302059',
              'Test2::Hub::Interceptor'=> '1.302059',
              'Test2::Hub::Interceptor::Terminator'=> '1.302059',
              'Test2::Hub::Subtest'   => '1.302059',
              'Test2::IPC'            => '1.302059',
              'Test2::IPC::Driver'    => '1.302059',
              'Test2::IPC::Driver::Files'=> '1.302059',
              'Test2::Util'           => '1.302059',
              'Test2::Util::ExternalMeta'=> '1.302059',
              'Test2::Util::HashBase' => '1.302059',
              'Test2::Util::Trace'    => '1.302059',
              'Test::Builder'         => '1.302059',
              'Test::Builder::Formatter'=> '1.302059',
              'Test::Builder::Module' => '1.302059',
              'Test::Builder::Tester' => '1.302059',
              'Test::Builder::Tester::Color'=> '1.302059',
              'Test::Builder::TodoDiag'=> '1.302059',
              'Test::More'            => '1.302059',
              'Test::Simple'          => '1.302059',
              'Test::Tester'          => '1.302059',
              'Test::Tester::Capture' => '1.302059',
              'Test::Tester::CaptureRunner'=> '1.302059',
              'Test::Tester::Delegate'=> '1.302059',
              'Test::use::ok'         => '1.302059',
              'Time::HiRes'           => '1.9740_01',
              'VMS::Stdio'            => '2.42',
              'XS::APItest'           => '0.86',
              'attributes'            => '0.28',
              'mro'                   => '1.19',
              'ok'                    => '1.302059',
              'overload'              => '1.27',
              'parent'                => '0.236',
          },
          removed => {
          }
      },
      5.025007 => {
          delta_from => 5.025006,
          changed => {
              'Archive::Tar'          => '2.18',
              'Archive::Tar::Constant'=> '2.18',
              'Archive::Tar::File'    => '2.18',
              'B'                     => '1.65',
              'B::Op_private'         => '5.025007',
              'Config'                => '5.025007',
              'Cwd'                   => '3.66',
              'Data::Dumper'          => '2.165',
              'Devel::Peek'           => '1.26',
              'DynaLoader'            => '1.40',
              'Errno'                 => '1.27',
              'ExtUtils::ParseXS::Utilities'=> '3.34',
              'File::Spec'            => '3.66',
              'File::Spec::AmigaOS'   => '3.66',
              'File::Spec::Cygwin'    => '3.66',
              'File::Spec::Epoc'      => '3.66',
              'File::Spec::Functions' => '3.66',
              'File::Spec::Mac'       => '3.66',
              'File::Spec::OS2'       => '3.66',
              'File::Spec::Unix'      => '3.66',
              'File::Spec::VMS'       => '3.66',
              'File::Spec::Win32'     => '3.66',
              'Hash::Util'            => '0.22',
              'JSON::PP'              => '2.27400_02',
              'List::Util'            => '1.46_02',
              'List::Util::XS'        => '1.46_02',
              'Math::BigFloat'        => '1.999727',
              'Math::BigInt'          => '1.999727',
              'Math::BigInt::Calc'    => '1.999727',
              'Math::BigInt::CalcEmu' => '1.999727',
              'Math::Complex'         => '1.5901',
              'Module::CoreList'      => '5.20161120',
              'Module::CoreList::TieHashDelta'=> '5.20161120',
              'Module::CoreList::Utils'=> '5.20161120',
              'Net::Ping'             => '2.55',
              'Opcode'                => '1.39',
              'POSIX'                 => '1.75',
              'Pod::Man'              => '4.09',
              'Pod::ParseLink'        => '4.09',
              'Pod::Text'             => '4.09',
              'Pod::Text::Color'      => '4.09',
              'Pod::Text::Overstrike' => '4.09',
              'Pod::Text::Termcap'    => '4.09',
              'Scalar::Util'          => '1.46_02',
              'Storable'              => '2.59',
              'Sub::Util'             => '1.46_02',
              'Term::ANSIColor'       => '4.06',
              'Test2'                 => '1.302062',
              'Test2::API'            => '1.302062',
              'Test2::API::Breakage'  => '1.302062',
              'Test2::API::Context'   => '1.302062',
              'Test2::API::Instance'  => '1.302062',
              'Test2::API::Stack'     => '1.302062',
              'Test2::Event'          => '1.302062',
              'Test2::Event::Bail'    => '1.302062',
              'Test2::Event::Diag'    => '1.302062',
              'Test2::Event::Exception'=> '1.302062',
              'Test2::Event::Generic' => '1.302062',
              'Test2::Event::Info'    => '1.302062',
              'Test2::Event::Note'    => '1.302062',
              'Test2::Event::Ok'      => '1.302062',
              'Test2::Event::Plan'    => '1.302062',
              'Test2::Event::Skip'    => '1.302062',
              'Test2::Event::Subtest' => '1.302062',
              'Test2::Event::Waiting' => '1.302062',
              'Test2::Formatter'      => '1.302062',
              'Test2::Formatter::TAP' => '1.302062',
              'Test2::Hub'            => '1.302062',
              'Test2::Hub::Interceptor'=> '1.302062',
              'Test2::Hub::Interceptor::Terminator'=> '1.302062',
              'Test2::Hub::Subtest'   => '1.302062',
              'Test2::IPC'            => '1.302062',
              'Test2::IPC::Driver'    => '1.302062',
              'Test2::IPC::Driver::Files'=> '1.302062',
              'Test2::Util'           => '1.302062',
              'Test2::Util::ExternalMeta'=> '1.302062',
              'Test2::Util::HashBase' => '1.302062',
              'Test2::Util::Trace'    => '1.302062',
              'Test::Builder'         => '1.302062',
              'Test::Builder::Formatter'=> '1.302062',
              'Test::Builder::Module' => '1.302062',
              'Test::Builder::Tester' => '1.302062',
              'Test::Builder::Tester::Color'=> '1.302062',
              'Test::Builder::TodoDiag'=> '1.302062',
              'Test::More'            => '1.302062',
              'Test::Simple'          => '1.302062',
              'Test::Tester'          => '1.302062',
              'Test::Tester::Capture' => '1.302062',
              'Test::Tester::CaptureRunner'=> '1.302062',
              'Test::Tester::Delegate'=> '1.302062',
              'Test::use::ok'         => '1.302062',
              'Time::HiRes'           => '1.9740_03',
              'Unicode::Collate'      => '1.18',
              'Unicode::Collate::CJK::Big5'=> '1.18',
              'Unicode::Collate::CJK::GB2312'=> '1.18',
              'Unicode::Collate::CJK::JISX0208'=> '1.18',
              'Unicode::Collate::CJK::Korean'=> '1.18',
              'Unicode::Collate::CJK::Pinyin'=> '1.18',
              'Unicode::Collate::CJK::Stroke'=> '1.18',
              'Unicode::Collate::CJK::Zhuyin'=> '1.18',
              'Unicode::Collate::Locale'=> '1.18',
              'Unicode::UCD'          => '0.67',
              'XS::APItest'           => '0.87',
              'XS::Typemap'           => '0.15',
              'mro'                   => '1.20',
              'ok'                    => '1.302062',
              'threads'               => '2.10',
          },
          removed => {
          }
      },
      5.025008 => {
          delta_from => 5.025007,
          changed => {
              'Archive::Tar'          => '2.24',
              'Archive::Tar::Constant'=> '2.24',
              'Archive::Tar::File'    => '2.24',
              'B::Debug'              => '1.24',
              'B::Op_private'         => '5.025008',
              'Config'                => '5.025008',
              'Data::Dumper'          => '2.166',
              'Encode'                => '2.88',
              'Encode::Alias'         => '2.21',
              'Encode::CN::HZ'        => '2.08',
              'Encode::MIME::Header'  => '2.24',
              'Encode::MIME::Name'    => '1.02',
              'Encode::Unicode'       => '2.1501',
              'IO'                    => '1.38',
              'Locale::Codes'         => '3.42',
              'Locale::Codes::Constants'=> '3.42',
              'Locale::Codes::Country'=> '3.42',
              'Locale::Codes::Country_Codes'=> '3.42',
              'Locale::Codes::Country_Retired'=> '3.42',
              'Locale::Codes::Currency'=> '3.42',
              'Locale::Codes::Currency_Codes'=> '3.42',
              'Locale::Codes::Currency_Retired'=> '3.42',
              'Locale::Codes::LangExt'=> '3.42',
              'Locale::Codes::LangExt_Codes'=> '3.42',
              'Locale::Codes::LangExt_Retired'=> '3.42',
              'Locale::Codes::LangFam'=> '3.42',
              'Locale::Codes::LangFam_Codes'=> '3.42',
              'Locale::Codes::LangFam_Retired'=> '3.42',
              'Locale::Codes::LangVar'=> '3.42',
              'Locale::Codes::LangVar_Codes'=> '3.42',
              'Locale::Codes::LangVar_Retired'=> '3.42',
              'Locale::Codes::Language'=> '3.42',
              'Locale::Codes::Language_Codes'=> '3.42',
              'Locale::Codes::Language_Retired'=> '3.42',
              'Locale::Codes::Script' => '3.42',
              'Locale::Codes::Script_Codes'=> '3.42',
              'Locale::Codes::Script_Retired'=> '3.42',
              'Locale::Country'       => '3.42',
              'Locale::Currency'      => '3.42',
              'Locale::Language'      => '3.42',
              'Locale::Script'        => '3.42',
              'Math::BigFloat'        => '1.999806',
              'Math::BigFloat::Trace' => '0.47',
              'Math::BigInt'          => '1.999806',
              'Math::BigInt::Calc'    => '1.999806',
              'Math::BigInt::CalcEmu' => '1.999806',
              'Math::BigInt::FastCalc'=> '0.5005',
              'Math::BigInt::Lib'     => '1.999806',
              'Math::BigInt::Trace'   => '0.47',
              'Math::BigRat'          => '0.2611',
              'Module::CoreList'      => '5.20161220',
              'Module::CoreList::TieHashDelta'=> '5.20161220',
              'Module::CoreList::Utils'=> '5.20161220',
              'POSIX'                 => '1.76',
              'PerlIO::scalar'        => '0.25',
              'Pod::Simple'           => '3.35',
              'Pod::Simple::BlackBox' => '3.35',
              'Pod::Simple::Checker'  => '3.35',
              'Pod::Simple::Debug'    => '3.35',
              'Pod::Simple::DumpAsText'=> '3.35',
              'Pod::Simple::DumpAsXML'=> '3.35',
              'Pod::Simple::HTML'     => '3.35',
              'Pod::Simple::HTMLBatch'=> '3.35',
              'Pod::Simple::LinkSection'=> '3.35',
              'Pod::Simple::Methody'  => '3.35',
              'Pod::Simple::Progress' => '3.35',
              'Pod::Simple::PullParser'=> '3.35',
              'Pod::Simple::PullParserEndToken'=> '3.35',
              'Pod::Simple::PullParserStartToken'=> '3.35',
              'Pod::Simple::PullParserTextToken'=> '3.35',
              'Pod::Simple::PullParserToken'=> '3.35',
              'Pod::Simple::RTF'      => '3.35',
              'Pod::Simple::Search'   => '3.35',
              'Pod::Simple::SimpleTree'=> '3.35',
              'Pod::Simple::Text'     => '3.35',
              'Pod::Simple::TextContent'=> '3.35',
              'Pod::Simple::TiedOutFH'=> '3.35',
              'Pod::Simple::Transcode'=> '3.35',
              'Pod::Simple::TranscodeDumb'=> '3.35',
              'Pod::Simple::TranscodeSmart'=> '3.35',
              'Pod::Simple::XHTML'    => '3.35',
              'Pod::Simple::XMLOutStream'=> '3.35',
              'Test2'                 => '1.302073',
              'Test2::API'            => '1.302073',
              'Test2::API::Breakage'  => '1.302073',
              'Test2::API::Context'   => '1.302073',
              'Test2::API::Instance'  => '1.302073',
              'Test2::API::Stack'     => '1.302073',
              'Test2::Event'          => '1.302073',
              'Test2::Event::Bail'    => '1.302073',
              'Test2::Event::Diag'    => '1.302073',
              'Test2::Event::Encoding'=> '1.302073',
              'Test2::Event::Exception'=> '1.302073',
              'Test2::Event::Generic' => '1.302073',
              'Test2::Event::Info'    => '1.302073',
              'Test2::Event::Note'    => '1.302073',
              'Test2::Event::Ok'      => '1.302073',
              'Test2::Event::Plan'    => '1.302073',
              'Test2::Event::Skip'    => '1.302073',
              'Test2::Event::Subtest' => '1.302073',
              'Test2::Event::TAP::Version'=> '1.302073',
              'Test2::Event::Waiting' => '1.302073',
              'Test2::Formatter'      => '1.302073',
              'Test2::Formatter::TAP' => '1.302073',
              'Test2::Hub'            => '1.302073',
              'Test2::Hub::Interceptor'=> '1.302073',
              'Test2::Hub::Interceptor::Terminator'=> '1.302073',
              'Test2::Hub::Subtest'   => '1.302073',
              'Test2::IPC'            => '1.302073',
              'Test2::IPC::Driver'    => '1.302073',
              'Test2::IPC::Driver::Files'=> '1.302073',
              'Test2::Tools::Tiny'    => '1.302073',
              'Test2::Util'           => '1.302073',
              'Test2::Util::ExternalMeta'=> '1.302073',
              'Test2::Util::HashBase' => '0.002',
              'Test2::Util::Trace'    => '1.302073',
              'Test::Builder'         => '1.302073',
              'Test::Builder::Formatter'=> '1.302073',
              'Test::Builder::Module' => '1.302073',
              'Test::Builder::Tester' => '1.302073',
              'Test::Builder::Tester::Color'=> '1.302073',
              'Test::Builder::TodoDiag'=> '1.302073',
              'Test::More'            => '1.302073',
              'Test::Simple'          => '1.302073',
              'Test::Tester'          => '1.302073',
              'Test::Tester::Capture' => '1.302073',
              'Test::Tester::CaptureRunner'=> '1.302073',
              'Test::Tester::Delegate'=> '1.302073',
              'Test::use::ok'         => '1.302073',
              'Time::HiRes'           => '1.9741',
              'Time::Local'           => '1.25',
              'Unicode::Collate'      => '1.19',
              'Unicode::Collate::CJK::Big5'=> '1.19',
              'Unicode::Collate::CJK::GB2312'=> '1.19',
              'Unicode::Collate::CJK::JISX0208'=> '1.19',
              'Unicode::Collate::CJK::Korean'=> '1.19',
              'Unicode::Collate::CJK::Pinyin'=> '1.19',
              'Unicode::Collate::CJK::Stroke'=> '1.19',
              'Unicode::Collate::CJK::Zhuyin'=> '1.19',
              'Unicode::Collate::Locale'=> '1.19',
              'bigint'                => '0.47',
              'bignum'                => '0.47',
              'bigrat'                => '0.47',
              'encoding'              => '2.19',
              'ok'                    => '1.302073',
          },
          removed => {
          }
      },
      5.022003 => {
          delta_from => 5.022002,
          changed => {
              'App::Cpan'             => '1.63_01',
              'App::Prove'            => '3.35_01',
              'App::Prove::State'     => '3.35_01',
              'App::Prove::State::Result'=> '3.35_01',
              'App::Prove::State::Result::Test'=> '3.35_01',
              'Archive::Tar'          => '2.04_01',
              'Archive::Tar::Constant'=> '2.04_01',
              'Archive::Tar::File'    => '2.04_01',
              'B::Op_private'         => '5.022003',
              'CPAN'                  => '2.11_01',
              'Compress::Zlib'        => '2.068_001',
              'Config'                => '5.022003',
              'Cwd'                   => '3.56_02',
              'Digest'                => '1.17_01',
              'Digest::SHA'           => '5.95_01',
              'Encode'                => '2.72_01',
              'ExtUtils::Command'     => '1.20_01',
              'ExtUtils::Command::MM' => '7.04_02',
              'ExtUtils::Liblist'     => '7.04_02',
              'ExtUtils::Liblist::Kid'=> '7.04_02',
              'ExtUtils::MM'          => '7.04_02',
              'ExtUtils::MM_AIX'      => '7.04_02',
              'ExtUtils::MM_Any'      => '7.04_02',
              'ExtUtils::MM_BeOS'     => '7.04_02',
              'ExtUtils::MM_Cygwin'   => '7.04_02',
              'ExtUtils::MM_DOS'      => '7.04_02',
              'ExtUtils::MM_Darwin'   => '7.04_02',
              'ExtUtils::MM_MacOS'    => '7.04_02',
              'ExtUtils::MM_NW5'      => '7.04_02',
              'ExtUtils::MM_OS2'      => '7.04_02',
              'ExtUtils::MM_QNX'      => '7.04_02',
              'ExtUtils::MM_UWIN'     => '7.04_02',
              'ExtUtils::MM_Unix'     => '7.04_02',
              'ExtUtils::MM_VMS'      => '7.04_02',
              'ExtUtils::MM_VOS'      => '7.04_02',
              'ExtUtils::MM_Win32'    => '7.04_02',
              'ExtUtils::MM_Win95'    => '7.04_02',
              'ExtUtils::MY'          => '7.04_02',
              'ExtUtils::MakeMaker'   => '7.04_02',
              'ExtUtils::MakeMaker::Config'=> '7.04_02',
              'ExtUtils::Mkbootstrap' => '7.04_02',
              'ExtUtils::Mksymlists'  => '7.04_02',
              'ExtUtils::testlib'     => '7.04_02',
              'File::Fetch'           => '0.48_01',
              'File::Spec'            => '3.56_02',
              'File::Spec::Cygwin'    => '3.56_02',
              'File::Spec::Epoc'      => '3.56_02',
              'File::Spec::Functions' => '3.56_02',
              'File::Spec::Mac'       => '3.56_02',
              'File::Spec::OS2'       => '3.56_02',
              'File::Spec::Unix'      => '3.56_02',
              'File::Spec::VMS'       => '3.56_02',
              'File::Spec::Win32'     => '3.56_02',
              'HTTP::Tiny'            => '0.054_01',
              'I18N::LangTags::Detect'=> '1.05_01',
              'IO'                    => '1.35_01',
              'IO::Compress::Adapter::Bzip2'=> '2.068_001',
              'IO::Compress::Adapter::Deflate'=> '2.068_001',
              'IO::Compress::Adapter::Identity'=> '2.068_001',
              'IO::Compress::Base'    => '2.068_001',
              'IO::Compress::Base::Common'=> '2.068_001',
              'IO::Compress::Bzip2'   => '2.068_001',
              'IO::Compress::Deflate' => '2.068_001',
              'IO::Compress::Gzip'    => '2.068_001',
              'IO::Compress::Gzip::Constants'=> '2.068_001',
              'IO::Compress::RawDeflate'=> '2.068_001',
              'IO::Compress::Zip'     => '2.068_001',
              'IO::Compress::Zip::Constants'=> '2.068_001',
              'IO::Compress::Zlib::Constants'=> '2.068_001',
              'IO::Compress::Zlib::Extra'=> '2.068_001',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.068_001',
              'IO::Uncompress::Adapter::Identity'=> '2.068_001',
              'IO::Uncompress::Adapter::Inflate'=> '2.068_001',
              'IO::Uncompress::AnyInflate'=> '2.068_001',
              'IO::Uncompress::AnyUncompress'=> '2.068_001',
              'IO::Uncompress::Base'  => '2.068_001',
              'IO::Uncompress::Bunzip2'=> '2.068_001',
              'IO::Uncompress::Gunzip'=> '2.068_001',
              'IO::Uncompress::Inflate'=> '2.068_001',
              'IO::Uncompress::RawInflate'=> '2.068_001',
              'IO::Uncompress::Unzip' => '2.068_001',
              'IPC::Cmd'              => '0.92_01',
              'JSON::PP'              => '2.27300_01',
              'Locale::Maketext'      => '1.26_01',
              'Locale::Maketext::Simple'=> '0.21_01',
              'Memoize'               => '1.03_01',
              'Module::CoreList'      => '5.20170114_22',
              'Module::CoreList::TieHashDelta'=> '5.20170114_22',
              'Module::CoreList::Utils'=> '5.20170114_22',
              'Module::Metadata::corpus::BOMTest::UTF16BE'=> undef,
              'Module::Metadata::corpus::BOMTest::UTF16LE'=> undef,
              'Module::Metadata::corpus::BOMTest::UTF8'=> '1',
              'Net::Cmd'              => '3.05_01',
              'Net::Config'           => '3.05_01',
              'Net::Domain'           => '3.05_01',
              'Net::FTP'              => '3.05_01',
              'Net::FTP::A'           => '3.05_01',
              'Net::FTP::E'           => '3.05_01',
              'Net::FTP::I'           => '3.05_01',
              'Net::FTP::L'           => '3.05_01',
              'Net::FTP::dataconn'    => '3.05_01',
              'Net::NNTP'             => '3.05_01',
              'Net::Netrc'            => '3.05_01',
              'Net::POP3'             => '3.05_01',
              'Net::Ping'             => '2.43_01',
              'Net::SMTP'             => '3.05_01',
              'Net::Time'             => '3.05_01',
              'Parse::CPAN::Meta'     => '1.4414_001',
              'Pod::Html'             => '1.2201',
              'Pod::Perldoc'          => '3.25_01',
              'Storable'              => '2.53_02',
              'Sys::Syslog'           => '0.33_01',
              'TAP::Base'             => '3.35_01',
              'TAP::Formatter::Base'  => '3.35_01',
              'TAP::Formatter::Color' => '3.35_01',
              'TAP::Formatter::Console'=> '3.35_01',
              'TAP::Formatter::Console::ParallelSession'=> '3.35_01',
              'TAP::Formatter::Console::Session'=> '3.35_01',
              'TAP::Formatter::File'  => '3.35_01',
              'TAP::Formatter::File::Session'=> '3.35_01',
              'TAP::Formatter::Session'=> '3.35_01',
              'TAP::Harness'          => '3.35_01',
              'TAP::Harness::Env'     => '3.35_01',
              'TAP::Object'           => '3.35_01',
              'TAP::Parser'           => '3.35_01',
              'TAP::Parser::Aggregator'=> '3.35_01',
              'TAP::Parser::Grammar'  => '3.35_01',
              'TAP::Parser::Iterator' => '3.35_01',
              'TAP::Parser::Iterator::Array'=> '3.35_01',
              'TAP::Parser::Iterator::Process'=> '3.35_01',
              'TAP::Parser::Iterator::Stream'=> '3.35_01',
              'TAP::Parser::IteratorFactory'=> '3.35_01',
              'TAP::Parser::Multiplexer'=> '3.35_01',
              'TAP::Parser::Result'   => '3.35_01',
              'TAP::Parser::Result::Bailout'=> '3.35_01',
              'TAP::Parser::Result::Comment'=> '3.35_01',
              'TAP::Parser::Result::Plan'=> '3.35_01',
              'TAP::Parser::Result::Pragma'=> '3.35_01',
              'TAP::Parser::Result::Test'=> '3.35_01',
              'TAP::Parser::Result::Unknown'=> '3.35_01',
              'TAP::Parser::Result::Version'=> '3.35_01',
              'TAP::Parser::Result::YAML'=> '3.35_01',
              'TAP::Parser::ResultFactory'=> '3.35_01',
              'TAP::Parser::Scheduler'=> '3.35_01',
              'TAP::Parser::Scheduler::Job'=> '3.35_01',
              'TAP::Parser::Scheduler::Spinner'=> '3.35_01',
              'TAP::Parser::Source'   => '3.35_01',
              'TAP::Parser::SourceHandler'=> '3.35_01',
              'TAP::Parser::SourceHandler::Executable'=> '3.35_01',
              'TAP::Parser::SourceHandler::File'=> '3.35_01',
              'TAP::Parser::SourceHandler::Handle'=> '3.35_01',
              'TAP::Parser::SourceHandler::Perl'=> '3.35_01',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.35_01',
              'TAP::Parser::YAMLish::Reader'=> '3.35_01',
              'TAP::Parser::YAMLish::Writer'=> '3.35_01',
              'Test'                  => '1.26_01',
              'Test::Harness'         => '3.35_01',
              'XSLoader'              => '0.20_01',
              'bigint'                => '0.39_01',
              'bignum'                => '0.39_01',
              'bigrat'                => '0.39_01',
          },
          removed => {
          }
      },
      5.024001 => {
          delta_from => 5.024000,
          changed => {
              'App::Cpan'             => '1.63_01',
              'App::Prove'            => '3.36_01',
              'App::Prove::State'     => '3.36_01',
              'App::Prove::State::Result'=> '3.36_01',
              'App::Prove::State::Result::Test'=> '3.36_01',
              'Archive::Tar'          => '2.04_01',
              'Archive::Tar::Constant'=> '2.04_01',
              'Archive::Tar::File'    => '2.04_01',
              'B::Op_private'         => '5.024001',
              'CPAN'                  => '2.11_01',
              'Compress::Zlib'        => '2.069_001',
              'Config'                => '5.024001',
              'Cwd'                   => '3.63_01',
              'Digest'                => '1.17_01',
              'Digest::SHA'           => '5.95_01',
              'Encode'                => '2.80_01',
              'ExtUtils::Command'     => '7.10_02',
              'ExtUtils::Command::MM' => '7.10_02',
              'ExtUtils::Liblist'     => '7.10_02',
              'ExtUtils::Liblist::Kid'=> '7.10_02',
              'ExtUtils::MM'          => '7.10_02',
              'ExtUtils::MM_AIX'      => '7.10_02',
              'ExtUtils::MM_Any'      => '7.10_02',
              'ExtUtils::MM_BeOS'     => '7.10_02',
              'ExtUtils::MM_Cygwin'   => '7.10_02',
              'ExtUtils::MM_DOS'      => '7.10_02',
              'ExtUtils::MM_Darwin'   => '7.10_02',
              'ExtUtils::MM_MacOS'    => '7.10_02',
              'ExtUtils::MM_NW5'      => '7.10_02',
              'ExtUtils::MM_OS2'      => '7.10_02',
              'ExtUtils::MM_QNX'      => '7.10_02',
              'ExtUtils::MM_UWIN'     => '7.10_02',
              'ExtUtils::MM_Unix'     => '7.10_02',
              'ExtUtils::MM_VMS'      => '7.10_02',
              'ExtUtils::MM_VOS'      => '7.10_02',
              'ExtUtils::MM_Win32'    => '7.10_02',
              'ExtUtils::MM_Win95'    => '7.10_02',
              'ExtUtils::MY'          => '7.10_02',
              'ExtUtils::MakeMaker'   => '7.10_02',
              'ExtUtils::MakeMaker::Config'=> '7.10_02',
              'ExtUtils::Mkbootstrap' => '7.10_02',
              'ExtUtils::Mksymlists'  => '7.10_02',
              'ExtUtils::testlib'     => '7.10_02',
              'File::Fetch'           => '0.48_01',
              'File::Spec'            => '3.63_01',
              'File::Spec::Cygwin'    => '3.63_01',
              'File::Spec::Epoc'      => '3.63_01',
              'File::Spec::Functions' => '3.63_01',
              'File::Spec::Mac'       => '3.63_01',
              'File::Spec::OS2'       => '3.63_01',
              'File::Spec::Unix'      => '3.63_01',
              'File::Spec::VMS'       => '3.63_01',
              'File::Spec::Win32'     => '3.63_01',
              'HTTP::Tiny'            => '0.056_001',
              'I18N::LangTags::Detect'=> '1.05_01',
              'IO'                    => '1.36_01',
              'IO::Compress::Adapter::Bzip2'=> '2.069_001',
              'IO::Compress::Adapter::Deflate'=> '2.069_001',
              'IO::Compress::Adapter::Identity'=> '2.069_001',
              'IO::Compress::Base'    => '2.069_001',
              'IO::Compress::Base::Common'=> '2.069_001',
              'IO::Compress::Bzip2'   => '2.069_001',
              'IO::Compress::Deflate' => '2.069_001',
              'IO::Compress::Gzip'    => '2.069_001',
              'IO::Compress::Gzip::Constants'=> '2.069_001',
              'IO::Compress::RawDeflate'=> '2.069_001',
              'IO::Compress::Zip'     => '2.069_001',
              'IO::Compress::Zip::Constants'=> '2.069_001',
              'IO::Compress::Zlib::Constants'=> '2.069_001',
              'IO::Compress::Zlib::Extra'=> '2.069_001',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.069_001',
              'IO::Uncompress::Adapter::Identity'=> '2.069_001',
              'IO::Uncompress::Adapter::Inflate'=> '2.069_001',
              'IO::Uncompress::AnyInflate'=> '2.069_001',
              'IO::Uncompress::AnyUncompress'=> '2.069_001',
              'IO::Uncompress::Base'  => '2.069_001',
              'IO::Uncompress::Bunzip2'=> '2.069_001',
              'IO::Uncompress::Gunzip'=> '2.069_001',
              'IO::Uncompress::Inflate'=> '2.069_001',
              'IO::Uncompress::RawInflate'=> '2.069_001',
              'IO::Uncompress::Unzip' => '2.069_001',
              'IPC::Cmd'              => '0.92_01',
              'JSON::PP'              => '2.27300_01',
              'Locale::Maketext'      => '1.26_01',
              'Locale::Maketext::Simple'=> '0.21_01',
              'Math::BigFloat::Trace' => '0.42_01',
              'Math::BigInt::Trace'   => '0.42_01',
              'Memoize'               => '1.03_01',
              'Module::CoreList'      => '5.20170114_24',
              'Module::CoreList::TieHashDelta'=> '5.20170114_24',
              'Module::CoreList::Utils'=> '5.20170114_24',
              'Module::Metadata::corpus::BOMTest::UTF16BE'=> undef,
              'Module::Metadata::corpus::BOMTest::UTF16LE'=> undef,
              'Module::Metadata::corpus::BOMTest::UTF8'=> '1',
              'Net::Cmd'              => '3.08_01',
              'Net::Config'           => '3.08_01',
              'Net::Domain'           => '3.08_01',
              'Net::FTP'              => '3.08_01',
              'Net::FTP::A'           => '3.08_01',
              'Net::FTP::E'           => '3.08_01',
              'Net::FTP::I'           => '3.08_01',
              'Net::FTP::L'           => '3.08_01',
              'Net::FTP::dataconn'    => '3.08_01',
              'Net::NNTP'             => '3.08_01',
              'Net::Netrc'            => '3.08_01',
              'Net::POP3'             => '3.08_01',
              'Net::Ping'             => '2.43_01',
              'Net::SMTP'             => '3.08_01',
              'Net::Time'             => '3.08_01',
              'Parse::CPAN::Meta'     => '1.4417_001',
              'Pod::Html'             => '1.2201',
              'Pod::Perldoc'          => '3.25_03',
              'Storable'              => '2.56_01',
              'Sys::Syslog'           => '0.33_01',
              'TAP::Base'             => '3.36_01',
              'TAP::Formatter::Base'  => '3.36_01',
              'TAP::Formatter::Color' => '3.36_01',
              'TAP::Formatter::Console'=> '3.36_01',
              'TAP::Formatter::Console::ParallelSession'=> '3.36_01',
              'TAP::Formatter::Console::Session'=> '3.36_01',
              'TAP::Formatter::File'  => '3.36_01',
              'TAP::Formatter::File::Session'=> '3.36_01',
              'TAP::Formatter::Session'=> '3.36_01',
              'TAP::Harness'          => '3.36_01',
              'TAP::Harness::Env'     => '3.36_01',
              'TAP::Object'           => '3.36_01',
              'TAP::Parser'           => '3.36_01',
              'TAP::Parser::Aggregator'=> '3.36_01',
              'TAP::Parser::Grammar'  => '3.36_01',
              'TAP::Parser::Iterator' => '3.36_01',
              'TAP::Parser::Iterator::Array'=> '3.36_01',
              'TAP::Parser::Iterator::Process'=> '3.36_01',
              'TAP::Parser::Iterator::Stream'=> '3.36_01',
              'TAP::Parser::IteratorFactory'=> '3.36_01',
              'TAP::Parser::Multiplexer'=> '3.36_01',
              'TAP::Parser::Result'   => '3.36_01',
              'TAP::Parser::Result::Bailout'=> '3.36_01',
              'TAP::Parser::Result::Comment'=> '3.36_01',
              'TAP::Parser::Result::Plan'=> '3.36_01',
              'TAP::Parser::Result::Pragma'=> '3.36_01',
              'TAP::Parser::Result::Test'=> '3.36_01',
              'TAP::Parser::Result::Unknown'=> '3.36_01',
              'TAP::Parser::Result::Version'=> '3.36_01',
              'TAP::Parser::Result::YAML'=> '3.36_01',
              'TAP::Parser::ResultFactory'=> '3.36_01',
              'TAP::Parser::Scheduler'=> '3.36_01',
              'TAP::Parser::Scheduler::Job'=> '3.36_01',
              'TAP::Parser::Scheduler::Spinner'=> '3.36_01',
              'TAP::Parser::Source'   => '3.36_01',
              'TAP::Parser::SourceHandler'=> '3.36_01',
              'TAP::Parser::SourceHandler::Executable'=> '3.36_01',
              'TAP::Parser::SourceHandler::File'=> '3.36_01',
              'TAP::Parser::SourceHandler::Handle'=> '3.36_01',
              'TAP::Parser::SourceHandler::Perl'=> '3.36_01',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.36_01',
              'TAP::Parser::YAMLish::Reader'=> '3.36_01',
              'TAP::Parser::YAMLish::Writer'=> '3.36_01',
              'Test'                  => '1.28_01',
              'Test::Harness'         => '3.36_01',
              'XSLoader'              => '0.22',
              'bigint'                => '0.42_01',
              'bignum'                => '0.42_01',
              'bigrat'                => '0.42_01',
          },
          removed => {
          }
      },
      5.025009 => {
          delta_from => 5.025008,
          changed => {
              'App::Cpan'             => '1.66',
              'B::Deparse'            => '1.40',
              'B::Op_private'         => '5.025009',
              'B::Terse'              => '1.07',
              'B::Xref'               => '1.06',
              'CPAN'                  => '2.16',
              'CPAN::Bundle'          => '5.5002',
              'CPAN::Distribution'    => '2.16',
              'CPAN::Exception::RecursiveDependency'=> '5.5001',
              'CPAN::FTP'             => '5.5008',
              'CPAN::FirstTime'       => '5.5310',
              'CPAN::HandleConfig'    => '5.5008',
              'CPAN::Module'          => '5.5003',
              'Compress::Raw::Bzip2'  => '2.070',
              'Compress::Raw::Zlib'   => '2.070',
              'Config'                => '5.025009',
              'DB_File'               => '1.840',
              'Data::Dumper'          => '2.167',
              'Devel::SelfStubber'    => '1.06',
              'DynaLoader'            => '1.41',
              'Errno'                 => '1.28',
              'ExtUtils::Embed'       => '1.34',
              'File::Glob'            => '1.28',
              'I18N::LangTags'        => '0.42',
              'Module::CoreList'      => '5.20170120',
              'Module::CoreList::TieHashDelta'=> '5.20170120',
              'Module::CoreList::Utils'=> '5.20170120',
              'OS2::Process'          => '1.12',
              'PerlIO::scalar'        => '0.26',
              'Pod::Html'             => '1.2202',
              'Storable'              => '2.61',
              'Symbol'                => '1.08',
              'Term::ReadLine'        => '1.16',
              'Test'                  => '1.30',
              'Unicode::UCD'          => '0.68',
              'VMS::DCLsym'           => '1.08',
              'XS::APItest'           => '0.88',
              'XSLoader'              => '0.26',
              'attributes'            => '0.29',
              'diagnostics'           => '1.36',
              'feature'               => '1.46',
              'lib'                   => '0.64',
              'overload'              => '1.28',
              're'                    => '0.34',
              'threads'               => '2.12',
              'threads::shared'       => '1.54',
          },
          removed => {
          }
      },
      5.025010 => {
          delta_from => 5.025009,
          changed => {
              'B'                     => '1.68',
              'B::Op_private'         => '5.025010',
              'CPAN'                  => '2.17',
              'CPAN::Distribution'    => '2.17',
              'Config'                => '5.02501',
              'Getopt::Std'           => '1.12',
              'Module::CoreList'      => '5.20170220',
              'Module::CoreList::TieHashDelta'=> '5.20170220',
              'Module::CoreList::Utils'=> '5.20170220',
              'PerlIO'                => '1.10',
              'Storable'              => '2.62',
              'Thread::Queue'         => '3.12',
              'feature'               => '1.47',
              'open'                  => '1.11',
              'threads'               => '2.13',
          },
          removed => {
          }
      },
      5.025011 => {
          delta_from => 5.025010,
          changed => {
              'App::Prove'            => '3.38',
              'App::Prove::State'     => '3.38',
              'App::Prove::State::Result'=> '3.38',
              'App::Prove::State::Result::Test'=> '3.38',
              'B::Op_private'         => '5.025011',
              'Compress::Raw::Bzip2'  => '2.074',
              'Compress::Raw::Zlib'   => '2.074',
              'Compress::Zlib'        => '2.074',
              'Config'                => '5.025011',
              'Config::Perl::V'       => '0.28',
              'Cwd'                   => '3.67',
              'ExtUtils::ParseXS'     => '3.34',
              'ExtUtils::ParseXS::Constants'=> '3.34',
              'ExtUtils::ParseXS::CountLines'=> '3.34',
              'ExtUtils::ParseXS::Eval'=> '3.34',
              'ExtUtils::Typemaps'    => '3.34',
              'ExtUtils::Typemaps::Cmd'=> '3.34',
              'ExtUtils::Typemaps::InputMap'=> '3.34',
              'ExtUtils::Typemaps::OutputMap'=> '3.34',
              'ExtUtils::Typemaps::Type'=> '3.34',
              'File::Spec'            => '3.67',
              'File::Spec::AmigaOS'   => '3.67',
              'File::Spec::Cygwin'    => '3.67',
              'File::Spec::Epoc'      => '3.67',
              'File::Spec::Functions' => '3.67',
              'File::Spec::Mac'       => '3.67',
              'File::Spec::OS2'       => '3.67',
              'File::Spec::Unix'      => '3.67',
              'File::Spec::VMS'       => '3.67',
              'File::Spec::Win32'     => '3.67',
              'IO::Compress::Adapter::Bzip2'=> '2.074',
              'IO::Compress::Adapter::Deflate'=> '2.074',
              'IO::Compress::Adapter::Identity'=> '2.074',
              'IO::Compress::Base'    => '2.074',
              'IO::Compress::Base::Common'=> '2.074',
              'IO::Compress::Bzip2'   => '2.074',
              'IO::Compress::Deflate' => '2.074',
              'IO::Compress::Gzip'    => '2.074',
              'IO::Compress::Gzip::Constants'=> '2.074',
              'IO::Compress::RawDeflate'=> '2.074',
              'IO::Compress::Zip'     => '2.074',
              'IO::Compress::Zip::Constants'=> '2.074',
              'IO::Compress::Zlib::Constants'=> '2.074',
              'IO::Compress::Zlib::Extra'=> '2.074',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.074',
              'IO::Uncompress::Adapter::Identity'=> '2.074',
              'IO::Uncompress::Adapter::Inflate'=> '2.074',
              'IO::Uncompress::AnyInflate'=> '2.074',
              'IO::Uncompress::AnyUncompress'=> '2.074',
              'IO::Uncompress::Base'  => '2.074',
              'IO::Uncompress::Bunzip2'=> '2.074',
              'IO::Uncompress::Gunzip'=> '2.074',
              'IO::Uncompress::Inflate'=> '2.074',
              'IO::Uncompress::RawInflate'=> '2.074',
              'IO::Uncompress::Unzip' => '2.074',
              'Module::CoreList'      => '5.20170320',
              'Module::CoreList::TieHashDelta'=> '5.20170230',
              'Module::CoreList::Utils'=> '5.20170320',
              'Pod::Perldoc'          => '3.28',
              'Pod::Perldoc::BaseTo'  => '3.28',
              'Pod::Perldoc::GetOptsOO'=> '3.28',
              'Pod::Perldoc::ToANSI'  => '3.28',
              'Pod::Perldoc::ToChecker'=> '3.28',
              'Pod::Perldoc::ToMan'   => '3.28',
              'Pod::Perldoc::ToNroff' => '3.28',
              'Pod::Perldoc::ToPod'   => '3.28',
              'Pod::Perldoc::ToRtf'   => '3.28',
              'Pod::Perldoc::ToTerm'  => '3.28',
              'Pod::Perldoc::ToText'  => '3.28',
              'Pod::Perldoc::ToTk'    => '3.28',
              'Pod::Perldoc::ToXml'   => '3.28',
              'TAP::Base'             => '3.38',
              'TAP::Formatter::Base'  => '3.38',
              'TAP::Formatter::Color' => '3.38',
              'TAP::Formatter::Console'=> '3.38',
              'TAP::Formatter::Console::ParallelSession'=> '3.38',
              'TAP::Formatter::Console::Session'=> '3.38',
              'TAP::Formatter::File'  => '3.38',
              'TAP::Formatter::File::Session'=> '3.38',
              'TAP::Formatter::Session'=> '3.38',
              'TAP::Harness'          => '3.38',
              'TAP::Harness::Env'     => '3.38',
              'TAP::Object'           => '3.38',
              'TAP::Parser'           => '3.38',
              'TAP::Parser::Aggregator'=> '3.38',
              'TAP::Parser::Grammar'  => '3.38',
              'TAP::Parser::Iterator' => '3.38',
              'TAP::Parser::Iterator::Array'=> '3.38',
              'TAP::Parser::Iterator::Process'=> '3.38',
              'TAP::Parser::Iterator::Stream'=> '3.38',
              'TAP::Parser::IteratorFactory'=> '3.38',
              'TAP::Parser::Multiplexer'=> '3.38',
              'TAP::Parser::Result'   => '3.38',
              'TAP::Parser::Result::Bailout'=> '3.38',
              'TAP::Parser::Result::Comment'=> '3.38',
              'TAP::Parser::Result::Plan'=> '3.38',
              'TAP::Parser::Result::Pragma'=> '3.38',
              'TAP::Parser::Result::Test'=> '3.38',
              'TAP::Parser::Result::Unknown'=> '3.38',
              'TAP::Parser::Result::Version'=> '3.38',
              'TAP::Parser::Result::YAML'=> '3.38',
              'TAP::Parser::ResultFactory'=> '3.38',
              'TAP::Parser::Scheduler'=> '3.38',
              'TAP::Parser::Scheduler::Job'=> '3.38',
              'TAP::Parser::Scheduler::Spinner'=> '3.38',
              'TAP::Parser::Source'   => '3.38',
              'TAP::Parser::SourceHandler'=> '3.38',
              'TAP::Parser::SourceHandler::Executable'=> '3.38',
              'TAP::Parser::SourceHandler::File'=> '3.38',
              'TAP::Parser::SourceHandler::Handle'=> '3.38',
              'TAP::Parser::SourceHandler::Perl'=> '3.38',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.38',
              'TAP::Parser::YAMLish::Reader'=> '3.38',
              'TAP::Parser::YAMLish::Writer'=> '3.38',
              'Test::Harness'         => '3.38',
              'VMS::Stdio'            => '2.41',
              'threads'               => '2.15',
              'threads::shared'       => '1.55',
          },
          removed => {
          }
      },
      5.025012 => {
          delta_from => 5.025011,
          changed => {
              'B::Op_private'         => '5.025012',
              'CPAN'                  => '2.18',
              'CPAN::Bundle'          => '5.5003',
              'CPAN::Distribution'    => '2.18',
              'Config'                => '5.025012',
              'DynaLoader'            => '1.42',
              'Module::CoreList'      => '5.20170420',
              'Module::CoreList::TieHashDelta'=> '5.20170420',
              'Module::CoreList::Utils'=> '5.20170420',
              'Safe'                  => '2.40',
              'XSLoader'              => '0.27',
              'base'                  => '2.25',
              'threads::shared'       => '1.56',
          },
          removed => {
          }
      },
      5.026000 => {
          delta_from => 5.025012,
          changed => {
              'B::Op_private'         => '5.026000',
              'Config'                => '5.026',
              'Module::CoreList'      => '5.20170530',
              'Module::CoreList::TieHashDelta'=> '5.20170530',
              'Module::CoreList::Utils'=> '5.20170530',
          },
          removed => {
          }
      },
      5.027000 => {
          delta_from => 5.026000,
          changed => {
              'Attribute::Handlers'   => '1.00',
              'B::Concise'            => '1.000',
              'B::Deparse'            => '1.41',
              'B::Op_private'         => '5.027000',
              'Config'                => '5.027',
              'Module::CoreList'      => '5.20170531',
              'Module::CoreList::TieHashDelta'=> '5.20170531',
              'Module::CoreList::Utils'=> '5.20170531',
              'O'                     => '1.02',
              'attributes'            => '0.3',
              'feature'               => '1.48',
          },
          removed => {
          }
      },
      5.027001 => {
          delta_from => 5.027,
          changed => {
              'App::Prove'            => '3.39',
              'App::Prove::State'     => '3.39',
              'App::Prove::State::Result'=> '3.39',
              'App::Prove::State::Result::Test'=> '3.39',
              'Archive::Tar'          => '2.26',
              'Archive::Tar::Constant'=> '2.26',
              'Archive::Tar::File'    => '2.26',
              'B::Op_private'         => '5.027001',
              'B::Terse'              => '1.08',
              'Config'                => '5.027001',
              'Devel::PPPort'         => '3.36',
              'DirHandle'             => '1.05',
              'ExtUtils::Command'     => '7.30',
              'ExtUtils::Command::MM' => '7.30',
              'ExtUtils::Install'     => '2.14',
              'ExtUtils::Installed'   => '2.14',
              'ExtUtils::Liblist'     => '7.30',
              'ExtUtils::Liblist::Kid'=> '7.30',
              'ExtUtils::MM'          => '7.30',
              'ExtUtils::MM_AIX'      => '7.30',
              'ExtUtils::MM_Any'      => '7.30',
              'ExtUtils::MM_BeOS'     => '7.30',
              'ExtUtils::MM_Cygwin'   => '7.30',
              'ExtUtils::MM_DOS'      => '7.30',
              'ExtUtils::MM_Darwin'   => '7.30',
              'ExtUtils::MM_MacOS'    => '7.30',
              'ExtUtils::MM_NW5'      => '7.30',
              'ExtUtils::MM_OS2'      => '7.30',
              'ExtUtils::MM_QNX'      => '7.30',
              'ExtUtils::MM_UWIN'     => '7.30',
              'ExtUtils::MM_Unix'     => '7.30',
              'ExtUtils::MM_VMS'      => '7.30',
              'ExtUtils::MM_VOS'      => '7.30',
              'ExtUtils::MM_Win32'    => '7.30',
              'ExtUtils::MM_Win95'    => '7.30',
              'ExtUtils::MY'          => '7.30',
              'ExtUtils::MakeMaker'   => '7.30',
              'ExtUtils::MakeMaker::Config'=> '7.30',
              'ExtUtils::MakeMaker::Locale'=> '7.30',
              'ExtUtils::MakeMaker::version'=> '7.30',
              'ExtUtils::MakeMaker::version::regex'=> '7.30',
              'ExtUtils::Mkbootstrap' => '7.30',
              'ExtUtils::Mksymlists'  => '7.30',
              'ExtUtils::Packlist'    => '2.14',
              'ExtUtils::testlib'     => '7.30',
              'File::Path'            => '2.14',
              'Filter::Util::Call'    => '1.57',
              'GDBM_File'             => '1.16',
              'Getopt::Long'          => '2.5',
              'IO::Socket::IP'        => '0.39',
              'IPC::Cmd'              => '0.98',
              'JSON::PP'              => '2.94',
              'JSON::PP::Boolean'     => '2.94',
              'Locale::Codes'         => '3.52',
              'Locale::Codes::Constants'=> '3.52',
              'Locale::Codes::Country'=> '3.52',
              'Locale::Codes::Country_Codes'=> '3.52',
              'Locale::Codes::Country_Retired'=> '3.52',
              'Locale::Codes::Currency'=> '3.52',
              'Locale::Codes::Currency_Codes'=> '3.52',
              'Locale::Codes::Currency_Retired'=> '3.52',
              'Locale::Codes::LangExt'=> '3.52',
              'Locale::Codes::LangExt_Codes'=> '3.52',
              'Locale::Codes::LangExt_Retired'=> '3.52',
              'Locale::Codes::LangFam'=> '3.52',
              'Locale::Codes::LangFam_Codes'=> '3.52',
              'Locale::Codes::LangFam_Retired'=> '3.52',
              'Locale::Codes::LangVar'=> '3.52',
              'Locale::Codes::LangVar_Codes'=> '3.52',
              'Locale::Codes::LangVar_Retired'=> '3.52',
              'Locale::Codes::Language'=> '3.52',
              'Locale::Codes::Language_Codes'=> '3.52',
              'Locale::Codes::Language_Retired'=> '3.52',
              'Locale::Codes::Script' => '3.52',
              'Locale::Codes::Script_Codes'=> '3.52',
              'Locale::Codes::Script_Retired'=> '3.52',
              'Locale::Country'       => '3.52',
              'Locale::Currency'      => '3.52',
              'Locale::Language'      => '3.52',
              'Locale::Script'        => '3.52',
              'Module::CoreList'      => '5.20170621',
              'Module::CoreList::TieHashDelta'=> '5.20170621',
              'Module::CoreList::Utils'=> '5.20170621',
              'PerlIO::scalar'        => '0.27',
              'PerlIO::via'           => '0.17',
              'Storable'              => '2.63',
              'TAP::Base'             => '3.39',
              'TAP::Formatter::Base'  => '3.39',
              'TAP::Formatter::Color' => '3.39',
              'TAP::Formatter::Console'=> '3.39',
              'TAP::Formatter::Console::ParallelSession'=> '3.39',
              'TAP::Formatter::Console::Session'=> '3.39',
              'TAP::Formatter::File'  => '3.39',
              'TAP::Formatter::File::Session'=> '3.39',
              'TAP::Formatter::Session'=> '3.39',
              'TAP::Harness'          => '3.39',
              'TAP::Harness::Env'     => '3.39',
              'TAP::Object'           => '3.39',
              'TAP::Parser'           => '3.39',
              'TAP::Parser::Aggregator'=> '3.39',
              'TAP::Parser::Grammar'  => '3.39',
              'TAP::Parser::Iterator' => '3.39',
              'TAP::Parser::Iterator::Array'=> '3.39',
              'TAP::Parser::Iterator::Process'=> '3.39',
              'TAP::Parser::Iterator::Stream'=> '3.39',
              'TAP::Parser::IteratorFactory'=> '3.39',
              'TAP::Parser::Multiplexer'=> '3.39',
              'TAP::Parser::Result'   => '3.39',
              'TAP::Parser::Result::Bailout'=> '3.39',
              'TAP::Parser::Result::Comment'=> '3.39',
              'TAP::Parser::Result::Plan'=> '3.39',
              'TAP::Parser::Result::Pragma'=> '3.39',
              'TAP::Parser::Result::Test'=> '3.39',
              'TAP::Parser::Result::Unknown'=> '3.39',
              'TAP::Parser::Result::Version'=> '3.39',
              'TAP::Parser::Result::YAML'=> '3.39',
              'TAP::Parser::ResultFactory'=> '3.39',
              'TAP::Parser::Scheduler'=> '3.39',
              'TAP::Parser::Scheduler::Job'=> '3.39',
              'TAP::Parser::Scheduler::Spinner'=> '3.39',
              'TAP::Parser::Source'   => '3.39',
              'TAP::Parser::SourceHandler'=> '3.39',
              'TAP::Parser::SourceHandler::Executable'=> '3.39',
              'TAP::Parser::SourceHandler::File'=> '3.39',
              'TAP::Parser::SourceHandler::Handle'=> '3.39',
              'TAP::Parser::SourceHandler::Perl'=> '3.39',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.39',
              'TAP::Parser::YAMLish::Reader'=> '3.39',
              'TAP::Parser::YAMLish::Writer'=> '3.39',
              'Test::Harness'         => '3.39',
              'XS::APItest'           => '0.89',
              '_charnames'            => '1.45',
              'charnames'             => '1.45',
              'if'                    => '0.0607',
              'mro'                   => '1.21',
              'threads'               => '2.16',
              'threads::shared'       => '1.57',
              'version'               => '0.9918',
              'version::regex'        => '0.9918',
          },
          removed => {
          }
      },
      5.022004 => {
          delta_from => 5.022003,
          changed => {
              'B::Op_private'         => '5.022004',
              'Config'                => '5.022004',
              'Module::CoreList'      => '5.20170715_22',
              'Module::CoreList::TieHashDelta'=> '5.20170715_22',
              'Module::CoreList::Utils'=> '5.20170715_22',
              'base'                  => '2.22_01',
          },
          removed => {
          }
      },
      5.024002 => {
          delta_from => 5.024001,
          changed => {
              'B::Op_private'         => '5.024002',
              'Config'                => '5.024002',
              'Module::CoreList'      => '5.20170715_24',
              'Module::CoreList::TieHashDelta'=> '5.20170715_24',
              'Module::CoreList::Utils'=> '5.20170715_24',
              'base'                  => '2.23_01',
          },
          removed => {
          }
      },
      5.027002 => {
          delta_from => 5.027001,
          changed => {
              'B::Op_private'         => '5.027002',
              'Carp'                  => '1.43',
              'Carp::Heavy'           => '1.43',
              'Config'                => '5.027002',
              'Cwd'                   => '3.68',
              'Encode'                => '2.92',
              'Encode::Alias'         => '2.23',
              'Encode::CN::HZ'        => '2.09',
              'Encode::Encoding'      => '2.08',
              'Encode::GSM0338'       => '2.07',
              'Encode::Guess'         => '2.07',
              'Encode::JP::JIS7'      => '2.07',
              'Encode::KR::2022_KR'   => '2.04',
              'Encode::MIME::Header'  => '2.27',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.09',
              'Encode::Unicode'       => '2.16',
              'Encode::Unicode::UTF7' => '2.10',
              'ExtUtils::CBuilder'    => '0.280228',
              'ExtUtils::CBuilder::Base'=> '0.280228',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280228',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280228',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280228',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280228',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280228',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280228',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280228',
              'ExtUtils::CBuilder::Platform::android'=> '0.280228',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280228',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280228',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280228',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280228',
              'File::Glob'            => '1.29',
              'File::Spec'            => '3.68',
              'File::Spec::AmigaOS'   => '3.68',
              'File::Spec::Cygwin'    => '3.68',
              'File::Spec::Epoc'      => '3.68',
              'File::Spec::Functions' => '3.68',
              'File::Spec::Mac'       => '3.68',
              'File::Spec::OS2'       => '3.68',
              'File::Spec::Unix'      => '3.68',
              'File::Spec::VMS'       => '3.68',
              'File::Spec::Win32'     => '3.68',
              'List::Util'            => '1.48',
              'List::Util::XS'        => '1.48',
              'Math::BigRat'          => '0.2613',
              'Module::CoreList'      => '5.20170720',
              'Module::CoreList::TieHashDelta'=> '5.20170720',
              'Module::CoreList::Utils'=> '5.20170720',
              'Opcode'                => '1.40',
              'POSIX'                 => '1.77',
              'PerlIO::scalar'        => '0.29',
              'Scalar::Util'          => '1.48',
              'Sub::Util'             => '1.48',
              'Time::HiRes'           => '1.9743',
              'Time::Piece'           => '1.3201',
              'Time::Seconds'         => '1.3201',
              'Unicode'               => '10.0.0',
              'XS::APItest'           => '0.90',
              'arybase'               => '0.13',
              'encoding'              => '2.20',
              'feature'               => '1.49',
              're'                    => '0.35',
          },
          removed => {
          }
      },
      5.027003 => {
          delta_from => 5.027002,
          changed => {
              'B'                     => '1.69',
              'B::Concise'            => '1.001',
              'B::Debug'              => '1.25',
              'B::Deparse'            => '1.42',
              'B::Op_private'         => '5.027003',
              'Config'                => '5.027003',
              'Data::Dumper'          => '2.167_02',
              'Devel::Peek'           => '1.27',
              'ExtUtils::Constant'    => '0.24',
              'ExtUtils::Constant::Base'=> '0.06',
              'ExtUtils::Constant::ProxySubs'=> '0.09',
              'ExtUtils::Constant::Utils'=> '0.04',
              'ExtUtils::ParseXS'     => '3.35',
              'ExtUtils::ParseXS::Constants'=> '3.35',
              'ExtUtils::ParseXS::CountLines'=> '3.35',
              'ExtUtils::ParseXS::Eval'=> '3.35',
              'ExtUtils::ParseXS::Utilities'=> '3.35',
              'ExtUtils::Typemaps'    => '3.35',
              'ExtUtils::Typemaps::Cmd'=> '3.35',
              'ExtUtils::Typemaps::InputMap'=> '3.35',
              'ExtUtils::Typemaps::OutputMap'=> '3.35',
              'ExtUtils::Typemaps::Type'=> '3.35',
              'Filter::Simple'        => '0.94',
              'Module::CoreList'      => '5.20170821',
              'Module::CoreList::TieHashDelta'=> '5.20170821',
              'Module::CoreList::Utils'=> '5.20170821',
              'SelfLoader'            => '1.24',
              'Storable'              => '2.64',
              'XS::APItest'           => '0.91',
              'base'                  => '2.26',
              'threads'               => '2.17',
              'utf8'                  => '1.20',
          },
          removed => {
          }
      },
      5.027004 => {
          delta_from => 5.027003,
          changed => {
              'B::Op_private'         => '5.027004',
              'Config'                => '5.027004',
              'File::Glob'            => '1.30',
              'I18N::Langinfo'        => '0.14',
              'Module::CoreList'      => '5.20170920',
              'Module::CoreList::TieHashDelta'=> '5.20170920',
              'Module::CoreList::Utils'=> '5.20170920',
              'Term::ReadLine'        => '1.17',
              'VMS::Stdio'            => '2.42',
              'XS::APItest'           => '0.92',
              'attributes'            => '0.31',
              'sort'                  => '2.03',
              'threads'               => '2.18',
          },
          removed => {
          }
      },
      5.024003 => {
          delta_from => 5.024002,
          changed => {
              'B::Op_private'         => '5.024003',
              'Config'                => '5.024003',
              'Module::CoreList'      => '5.20170922_24',
              'Module::CoreList::TieHashDelta'=> '5.20170922_24',
              'Module::CoreList::Utils'=> '5.20170922_24',
              'POSIX'                 => '1.65_01',
              'Time::HiRes'           => '1.9741',
          },
          removed => {
          }
      },
      5.026001 => {
          delta_from => 5.026000,
          changed => {
              'B::Op_private'         => '5.026001',
              'Config'                => '5.026001',
              'Module::CoreList'      => '5.20170922_26',
              'Module::CoreList::TieHashDelta'=> '5.20170922_26',
              'Module::CoreList::Utils'=> '5.20170922_26',
              '_charnames'            => '1.45',
              'base'                  => '2.26',
              'charnames'             => '1.45',
          },
          removed => {
          }
      },
      5.027005 => {
          delta_from => 5.027004,
          changed => {
              'B'                     => '1.70',
              'B::Concise'            => '1.002',
              'B::Deparse'            => '1.43',
              'B::Op_private'         => '5.027005',
              'B::Xref'               => '1.07',
              'Config'                => '5.027005',
              'Config::Perl::V'       => '0.29',
              'Digest::SHA'           => '5.98',
              'Encode'                => '2.93',
              'Encode::CN::HZ'        => '2.10',
              'Encode::JP::JIS7'      => '2.08',
              'Encode::MIME::Header'  => '2.28',
              'Encode::MIME::Name'    => '1.03',
              'File::Fetch'           => '0.54',
              'File::Path'            => '2.15',
              'List::Util'            => '1.49',
              'List::Util::XS'        => '1.49',
              'Locale::Codes'         => '3.54',
              'Locale::Codes::Constants'=> '3.54',
              'Locale::Codes::Country'=> '3.54',
              'Locale::Codes::Country_Codes'=> '3.54',
              'Locale::Codes::Country_Retired'=> '3.54',
              'Locale::Codes::Currency'=> '3.54',
              'Locale::Codes::Currency_Codes'=> '3.54',
              'Locale::Codes::Currency_Retired'=> '3.54',
              'Locale::Codes::LangExt'=> '3.54',
              'Locale::Codes::LangExt_Codes'=> '3.54',
              'Locale::Codes::LangExt_Retired'=> '3.54',
              'Locale::Codes::LangFam'=> '3.54',
              'Locale::Codes::LangFam_Codes'=> '3.54',
              'Locale::Codes::LangFam_Retired'=> '3.54',
              'Locale::Codes::LangVar'=> '3.54',
              'Locale::Codes::LangVar_Codes'=> '3.54',
              'Locale::Codes::LangVar_Retired'=> '3.54',
              'Locale::Codes::Language'=> '3.54',
              'Locale::Codes::Language_Codes'=> '3.54',
              'Locale::Codes::Language_Retired'=> '3.54',
              'Locale::Codes::Script' => '3.54',
              'Locale::Codes::Script_Codes'=> '3.54',
              'Locale::Codes::Script_Retired'=> '3.54',
              'Locale::Country'       => '3.54',
              'Locale::Currency'      => '3.54',
              'Locale::Language'      => '3.54',
              'Locale::Script'        => '3.54',
              'Math::BigFloat'        => '1.999811',
              'Math::BigInt'          => '1.999811',
              'Math::BigInt::Calc'    => '1.999811',
              'Math::BigInt::CalcEmu' => '1.999811',
              'Math::BigInt::FastCalc'=> '0.5006',
              'Math::BigInt::Lib'     => '1.999811',
              'Module::CoreList'      => '5.20171020',
              'Module::CoreList::TieHashDelta'=> '5.20171020',
              'Module::CoreList::Utils'=> '5.20171020',
              'NEXT'                  => '0.67_01',
              'POSIX'                 => '1.78',
              'Pod::Perldoc'          => '3.2801',
              'Scalar::Util'          => '1.49',
              'Sub::Util'             => '1.49',
              'Sys::Hostname'         => '1.21',
              'Test2'                 => '1.302103',
              'Test2::API'            => '1.302103',
              'Test2::API::Breakage'  => '1.302103',
              'Test2::API::Context'   => '1.302103',
              'Test2::API::Instance'  => '1.302103',
              'Test2::API::Stack'     => '1.302103',
              'Test2::Event'          => '1.302103',
              'Test2::Event::Bail'    => '1.302103',
              'Test2::Event::Diag'    => '1.302103',
              'Test2::Event::Encoding'=> '1.302103',
              'Test2::Event::Exception'=> '1.302103',
              'Test2::Event::Fail'    => '1.302103',
              'Test2::Event::Generic' => '1.302103',
              'Test2::Event::Note'    => '1.302103',
              'Test2::Event::Ok'      => '1.302103',
              'Test2::Event::Pass'    => '1.302103',
              'Test2::Event::Plan'    => '1.302103',
              'Test2::Event::Skip'    => '1.302103',
              'Test2::Event::Subtest' => '1.302103',
              'Test2::Event::TAP::Version'=> '1.302103',
              'Test2::Event::Waiting' => '1.302103',
              'Test2::EventFacet'     => '1.302103',
              'Test2::EventFacet::About'=> '1.302103',
              'Test2::EventFacet::Amnesty'=> '1.302103',
              'Test2::EventFacet::Assert'=> '1.302103',
              'Test2::EventFacet::Control'=> '1.302103',
              'Test2::EventFacet::Error'=> '1.302103',
              'Test2::EventFacet::Info'=> '1.302103',
              'Test2::EventFacet::Meta'=> '1.302103',
              'Test2::EventFacet::Parent'=> '1.302103',
              'Test2::EventFacet::Plan'=> '1.302103',
              'Test2::EventFacet::Trace'=> '1.302103',
              'Test2::Formatter'      => '1.302103',
              'Test2::Formatter::TAP' => '1.302103',
              'Test2::Hub'            => '1.302103',
              'Test2::Hub::Interceptor'=> '1.302103',
              'Test2::Hub::Interceptor::Terminator'=> '1.302103',
              'Test2::Hub::Subtest'   => '1.302103',
              'Test2::IPC'            => '1.302103',
              'Test2::IPC::Driver'    => '1.302103',
              'Test2::IPC::Driver::Files'=> '1.302103',
              'Test2::Tools::Tiny'    => '1.302103',
              'Test2::Util'           => '1.302103',
              'Test2::Util::ExternalMeta'=> '1.302103',
              'Test2::Util::Facets2Legacy'=> '1.302103',
              'Test2::Util::HashBase' => '0.005',
              'Test2::Util::Trace'    => '1.302103',
              'Test::Builder'         => '1.302103',
              'Test::Builder::Formatter'=> '1.302103',
              'Test::Builder::IO::Scalar'=> '2.114',
              'Test::Builder::Module' => '1.302103',
              'Test::Builder::Tester' => '1.302103',
              'Test::Builder::Tester::Color'=> '1.302103',
              'Test::Builder::TodoDiag'=> '1.302103',
              'Test::More'            => '1.302103',
              'Test::Simple'          => '1.302103',
              'Test::Tester'          => '1.302103',
              'Test::Tester::Capture' => '1.302103',
              'Test::Tester::CaptureRunner'=> '1.302103',
              'Test::Tester::Delegate'=> '1.302103',
              'Test::use::ok'         => '1.302103',
              'Time::HiRes'           => '1.9746',
              'Time::Piece'           => '1.3202',
              'Time::Seconds'         => '1.3202',
              'arybase'               => '0.14',
              'encoding'              => '2.21',
              'ok'                    => '1.302103',
          },
          removed => {
              'Test2::Event::Info'    => 1,
          }
      },
      5.027006 => {
          delta_from => 5.027005,
          changed => {
              'Attribute::Handlers'   => '1.01',
              'B'                     => '1.72',
              'B::Concise'            => '1.003',
              'B::Deparse'            => '1.45',
              'B::Op_private'         => '5.027006',
              'Carp'                  => '1.44',
              'Carp::Heavy'           => '1.44',
              'Compress::Raw::Zlib'   => '2.075',
              'Config'                => '5.027006',
              'Config::Extensions'    => '0.02',
              'Cwd'                   => '3.70',
              'DynaLoader'            => '1.44',
              'ExtUtils::CBuilder'    => '0.280229',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280229',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280229',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280229',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280229',
              'ExtUtils::CBuilder::Platform::android'=> '0.280229',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280229',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280229',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280229',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280229',
              'ExtUtils::Embed'       => '1.35',
              'ExtUtils::Miniperl'    => '1.07',
              'ExtUtils::ParseXS'     => '3.36',
              'ExtUtils::ParseXS::Constants'=> '3.36',
              'ExtUtils::ParseXS::CountLines'=> '3.36',
              'ExtUtils::ParseXS::Eval'=> '3.36',
              'ExtUtils::ParseXS::Utilities'=> '3.36',
              'ExtUtils::Typemaps'    => '3.36',
              'ExtUtils::Typemaps::Cmd'=> '3.36',
              'ExtUtils::Typemaps::InputMap'=> '3.36',
              'ExtUtils::Typemaps::OutputMap'=> '3.36',
              'ExtUtils::Typemaps::Type'=> '3.36',
              'ExtUtils::XSSymSet'    => '1.4',
              'File::Copy'            => '2.33',
              'File::Spec'            => '3.69',
              'File::Spec::AmigaOS'   => '3.69',
              'File::Spec::Cygwin'    => '3.69',
              'File::Spec::Epoc'      => '3.69',
              'File::Spec::Functions' => '3.69',
              'File::Spec::Mac'       => '3.69',
              'File::Spec::OS2'       => '3.69',
              'File::Spec::Unix'      => '3.69',
              'File::Spec::VMS'       => '3.69',
              'File::Spec::Win32'     => '3.69',
              'File::stat'            => '1.08',
              'FileCache'             => '1.10',
              'Filter::Simple'        => '0.95',
              'Hash::Util::FieldHash' => '1.20',
              'I18N::LangTags'        => '0.43',
              'I18N::LangTags::Detect'=> '1.07',
              'I18N::LangTags::List'  => '0.40',
              'I18N::Langinfo'        => '0.15',
              'IO::Handle'            => '1.37',
              'IO::Select'            => '1.23',
              'Locale::Maketext'      => '1.29',
              'Module::CoreList'      => '5.20171120',
              'Module::CoreList::TieHashDelta'=> '5.20171120',
              'Module::CoreList::Utils'=> '5.20171120',
              'Net::Cmd'              => '3.11',
              'Net::Config'           => '3.11',
              'Net::Domain'           => '3.11',
              'Net::FTP'              => '3.11',
              'Net::FTP::A'           => '3.11',
              'Net::FTP::E'           => '3.11',
              'Net::FTP::I'           => '3.11',
              'Net::FTP::L'           => '3.11',
              'Net::FTP::dataconn'    => '3.11',
              'Net::NNTP'             => '3.11',
              'Net::Netrc'            => '3.11',
              'Net::POP3'             => '3.11',
              'Net::Ping'             => '2.62',
              'Net::SMTP'             => '3.11',
              'Net::Time'             => '3.11',
              'Net::hostent'          => '1.02',
              'Net::netent'           => '1.01',
              'Net::protoent'         => '1.01',
              'Net::servent'          => '1.02',
              'O'                     => '1.03',
              'ODBM_File'             => '1.15',
              'Opcode'                => '1.41',
              'POSIX'                 => '1.80',
              'Pod::Html'             => '1.2203',
              'SelfLoader'            => '1.25',
              'Socket'                => '2.020_04',
              'Storable'              => '2.65',
              'Storable::__Storable__'=> '2.65',
              'Test'                  => '1.31',
              'Test2'                 => '1.302111',
              'Test2::API'            => '1.302111',
              'Test2::API::Breakage'  => '1.302111',
              'Test2::API::Context'   => '1.302111',
              'Test2::API::Instance'  => '1.302111',
              'Test2::API::Stack'     => '1.302111',
              'Test2::Event'          => '1.302111',
              'Test2::Event::Bail'    => '1.302111',
              'Test2::Event::Diag'    => '1.302111',
              'Test2::Event::Encoding'=> '1.302111',
              'Test2::Event::Exception'=> '1.302111',
              'Test2::Event::Fail'    => '1.302111',
              'Test2::Event::Generic' => '1.302111',
              'Test2::Event::Note'    => '1.302111',
              'Test2::Event::Ok'      => '1.302111',
              'Test2::Event::Pass'    => '1.302111',
              'Test2::Event::Plan'    => '1.302111',
              'Test2::Event::Skip'    => '1.302111',
              'Test2::Event::Subtest' => '1.302111',
              'Test2::Event::TAP::Version'=> '1.302111',
              'Test2::Event::Waiting' => '1.302111',
              'Test2::EventFacet'     => '1.302111',
              'Test2::EventFacet::About'=> '1.302111',
              'Test2::EventFacet::Amnesty'=> '1.302111',
              'Test2::EventFacet::Assert'=> '1.302111',
              'Test2::EventFacet::Control'=> '1.302111',
              'Test2::EventFacet::Error'=> '1.302111',
              'Test2::EventFacet::Info'=> '1.302111',
              'Test2::EventFacet::Meta'=> '1.302111',
              'Test2::EventFacet::Parent'=> '1.302111',
              'Test2::EventFacet::Plan'=> '1.302111',
              'Test2::EventFacet::Trace'=> '1.302111',
              'Test2::Formatter'      => '1.302111',
              'Test2::Formatter::TAP' => '1.302111',
              'Test2::Hub'            => '1.302111',
              'Test2::Hub::Interceptor'=> '1.302111',
              'Test2::Hub::Interceptor::Terminator'=> '1.302111',
              'Test2::Hub::Subtest'   => '1.302111',
              'Test2::IPC'            => '1.302111',
              'Test2::IPC::Driver'    => '1.302111',
              'Test2::IPC::Driver::Files'=> '1.302111',
              'Test2::Tools::Tiny'    => '1.302111',
              'Test2::Util'           => '1.302111',
              'Test2::Util::ExternalMeta'=> '1.302111',
              'Test2::Util::Facets2Legacy'=> '1.302111',
              'Test2::Util::HashBase' => '1.302111',
              'Test2::Util::Trace'    => '1.302111',
              'Test::Builder'         => '1.302111',
              'Test::Builder::Formatter'=> '1.302111',
              'Test::Builder::Module' => '1.302111',
              'Test::Builder::Tester' => '1.302111',
              'Test::Builder::Tester::Color'=> '1.302111',
              'Test::Builder::TodoDiag'=> '1.302111',
              'Test::More'            => '1.302111',
              'Test::Simple'          => '1.302111',
              'Test::Tester'          => '1.302111',
              'Test::Tester::Capture' => '1.302111',
              'Test::Tester::CaptureRunner'=> '1.302111',
              'Test::Tester::Delegate'=> '1.302111',
              'Test::use::ok'         => '1.302111',
              'Tie::Array'            => '1.07',
              'Tie::StdHandle'        => '4.5',
              'Time::HiRes'           => '1.9747',
              'Time::gmtime'          => '1.04',
              'Time::localtime'       => '1.03',
              'Unicode::Collate'      => '1.23',
              'Unicode::Collate::CJK::Big5'=> '1.23',
              'Unicode::Collate::CJK::GB2312'=> '1.23',
              'Unicode::Collate::CJK::JISX0208'=> '1.23',
              'Unicode::Collate::CJK::Korean'=> '1.23',
              'Unicode::Collate::CJK::Pinyin'=> '1.23',
              'Unicode::Collate::CJK::Stroke'=> '1.23',
              'Unicode::Collate::CJK::Zhuyin'=> '1.23',
              'Unicode::Collate::Locale'=> '1.23',
              'Unicode::Normalize'    => '1.26',
              'User::grent'           => '1.02',
              'User::pwent'           => '1.01',
              'VMS::DCLsym'           => '1.09',
              'VMS::Stdio'            => '2.44',
              'XS::APItest'           => '0.93',
              'XS::Typemap'           => '0.16',
              'XSLoader'              => '0.28',
              'attributes'            => '0.32',
              'base'                  => '2.27',
              'blib'                  => '1.07',
              'experimental'          => '0.017',
              'fields'                => '2.24',
              'ok'                    => '1.302111',
              're'                    => '0.36',
              'sort'                  => '2.04',
              'threads'               => '2.19',
              'warnings'              => '1.38',
          },
          removed => {
          }
      },
      5.027007 => {
          delta_from => 5.027006,
          changed => {
              'App::Cpan'             => '1.67',
              'B'                     => '1.73',
              'B::Debug'              => '1.26',
              'B::Deparse'            => '1.46',
              'B::Op_private'         => '5.027007',
              'CPAN'                  => '2.20',
              'CPAN::Distribution'    => '2.19',
              'CPAN::FTP'             => '5.5011',
              'CPAN::FirstTime'       => '5.5311',
              'CPAN::Shell'           => '5.5007',
              'Carp'                  => '1.45',
              'Carp::Heavy'           => '1.45',
              'Compress::Raw::Zlib'   => '2.076',
              'Config'                => '5.027007',
              'Cwd'                   => '3.71',
              'Data::Dumper'          => '2.169',
              'Devel::PPPort'         => '3.37',
              'Digest::SHA'           => '6.00',
              'DynaLoader'            => '1.45',
              'ExtUtils::CBuilder'    => '0.280230',
              'ExtUtils::CBuilder::Base'=> '0.280230',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280230',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280230',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280230',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280230',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280230',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280230',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280230',
              'ExtUtils::CBuilder::Platform::android'=> '0.280230',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280230',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280230',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280230',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280230',
              'ExtUtils::Typemaps'    => '3.37',
              'File::Fetch'           => '0.56',
              'File::Spec'            => '3.71',
              'File::Spec::AmigaOS'   => '3.71',
              'File::Spec::Cygwin'    => '3.71',
              'File::Spec::Epoc'      => '3.71',
              'File::Spec::Functions' => '3.71',
              'File::Spec::Mac'       => '3.71',
              'File::Spec::OS2'       => '3.71',
              'File::Spec::Unix'      => '3.71',
              'File::Spec::VMS'       => '3.71',
              'File::Spec::Win32'     => '3.71',
              'Filter::Util::Call'    => '1.58',
              'GDBM_File'             => '1.17',
              'JSON::PP'              => '2.97000',
              'JSON::PP::Boolean'     => '2.97000',
              'Locale::Codes'         => '3.55',
              'Locale::Codes::Constants'=> '3.55',
              'Locale::Codes::Country'=> '3.55',
              'Locale::Codes::Country_Codes'=> '3.55',
              'Locale::Codes::Country_Retired'=> '3.55',
              'Locale::Codes::Currency'=> '3.55',
              'Locale::Codes::Currency_Codes'=> '3.55',
              'Locale::Codes::Currency_Retired'=> '3.55',
              'Locale::Codes::LangExt'=> '3.55',
              'Locale::Codes::LangExt_Codes'=> '3.55',
              'Locale::Codes::LangExt_Retired'=> '3.55',
              'Locale::Codes::LangFam'=> '3.55',
              'Locale::Codes::LangFam_Codes'=> '3.55',
              'Locale::Codes::LangFam_Retired'=> '3.55',
              'Locale::Codes::LangVar'=> '3.55',
              'Locale::Codes::LangVar_Codes'=> '3.55',
              'Locale::Codes::LangVar_Retired'=> '3.55',
              'Locale::Codes::Language'=> '3.55',
              'Locale::Codes::Language_Codes'=> '3.55',
              'Locale::Codes::Language_Retired'=> '3.55',
              'Locale::Codes::Script' => '3.55',
              'Locale::Codes::Script_Codes'=> '3.55',
              'Locale::Codes::Script_Retired'=> '3.55',
              'Locale::Country'       => '3.55',
              'Locale::Currency'      => '3.55',
              'Locale::Language'      => '3.55',
              'Locale::Script'        => '3.55',
              'Module::CoreList'      => '5.20171220',
              'Module::CoreList::TieHashDelta'=> '5.20171220',
              'Module::CoreList::Utils'=> '5.20171220',
              'Opcode'                => '1.42',
              'POSIX'                 => '1.81',
              'Pod::Functions'        => '1.12',
              'Pod::Functions::Functions'=> '1.12',
              'Pod::Html'             => '1.23',
              'Sys::Hostname'         => '1.22',
              'Test2'                 => '1.302120',
              'Test2::API'            => '1.302120',
              'Test2::API::Breakage'  => '1.302120',
              'Test2::API::Context'   => '1.302120',
              'Test2::API::Instance'  => '1.302120',
              'Test2::API::Stack'     => '1.302120',
              'Test2::Event'          => '1.302120',
              'Test2::Event::Bail'    => '1.302120',
              'Test2::Event::Diag'    => '1.302120',
              'Test2::Event::Encoding'=> '1.302120',
              'Test2::Event::Exception'=> '1.302120',
              'Test2::Event::Fail'    => '1.302120',
              'Test2::Event::Generic' => '1.302120',
              'Test2::Event::Note'    => '1.302120',
              'Test2::Event::Ok'      => '1.302120',
              'Test2::Event::Pass'    => '1.302120',
              'Test2::Event::Plan'    => '1.302120',
              'Test2::Event::Skip'    => '1.302120',
              'Test2::Event::Subtest' => '1.302120',
              'Test2::Event::TAP::Version'=> '1.302120',
              'Test2::Event::Waiting' => '1.302120',
              'Test2::EventFacet'     => '1.302120',
              'Test2::EventFacet::About'=> '1.302120',
              'Test2::EventFacet::Amnesty'=> '1.302120',
              'Test2::EventFacet::Assert'=> '1.302120',
              'Test2::EventFacet::Control'=> '1.302120',
              'Test2::EventFacet::Error'=> '1.302120',
              'Test2::EventFacet::Info'=> '1.302120',
              'Test2::EventFacet::Meta'=> '1.302120',
              'Test2::EventFacet::Parent'=> '1.302120',
              'Test2::EventFacet::Plan'=> '1.302120',
              'Test2::EventFacet::Trace'=> '1.302120',
              'Test2::Formatter'      => '1.302120',
              'Test2::Formatter::TAP' => '1.302120',
              'Test2::Hub'            => '1.302120',
              'Test2::Hub::Interceptor'=> '1.302120',
              'Test2::Hub::Interceptor::Terminator'=> '1.302120',
              'Test2::Hub::Subtest'   => '1.302120',
              'Test2::IPC'            => '1.302120',
              'Test2::IPC::Driver'    => '1.302120',
              'Test2::IPC::Driver::Files'=> '1.302120',
              'Test2::Tools::Tiny'    => '1.302120',
              'Test2::Util'           => '1.302120',
              'Test2::Util::ExternalMeta'=> '1.302120',
              'Test2::Util::Facets2Legacy'=> '1.302120',
              'Test2::Util::HashBase' => '1.302120',
              'Test2::Util::Trace'    => '1.302120',
              'Test::Builder'         => '1.302120',
              'Test::Builder::Formatter'=> '1.302120',
              'Test::Builder::Module' => '1.302120',
              'Test::Builder::Tester' => '1.302120',
              'Test::Builder::Tester::Color'=> '1.302120',
              'Test::Builder::TodoDiag'=> '1.302120',
              'Test::More'            => '1.302120',
              'Test::Simple'          => '1.302120',
              'Test::Tester'          => '1.302120',
              'Test::Tester::Capture' => '1.302120',
              'Test::Tester::CaptureRunner'=> '1.302120',
              'Test::Tester::Delegate'=> '1.302120',
              'Test::use::ok'         => '1.302120',
              'Time::HiRes'           => '1.9748',
              'Time::Piece'           => '1.3203',
              'Time::Seconds'         => '1.3203',
              'Unicode::Collate'      => '1.25',
              'Unicode::Collate::CJK::Big5'=> '1.25',
              'Unicode::Collate::CJK::GB2312'=> '1.25',
              'Unicode::Collate::CJK::JISX0208'=> '1.25',
              'Unicode::Collate::CJK::Korean'=> '1.25',
              'Unicode::Collate::CJK::Pinyin'=> '1.25',
              'Unicode::Collate::CJK::Stroke'=> '1.25',
              'Unicode::Collate::CJK::Zhuyin'=> '1.25',
              'Unicode::Collate::Locale'=> '1.25',
              'Unicode::UCD'          => '0.69',
              'XS::APItest'           => '0.94',
              'XSLoader'              => '0.29',
              'arybase'               => '0.15',
              'autodie::exception'    => '2.29001',
              'autodie::hints'        => '2.29001',
              'experimental'          => '0.019',
              'feature'               => '1.50',
              'ok'                    => '1.302120',
              'overload'              => '1.29',
              'threads'               => '2.21',
              'threads::shared'       => '1.58',
              'warnings'              => '1.39',
          },
          removed => {
          }
      },
      5.027008 => {
          delta_from => 5.027007,
          changed => {
              'B'                     => '1.74',
              'B::Deparse'            => '1.47',
              'B::Op_private'         => '5.027008',
              'Config'                => '5.027008',
              'Cwd'                   => '3.72',
              'Data::Dumper'          => '2.170',
              'Devel::PPPort'         => '3.38',
              'Digest::SHA'           => '6.01',
              'Encode'                => '2.94',
              'Encode::Alias'         => '2.24',
              'ExtUtils::Miniperl'    => '1.08',
              'File::Spec'            => '3.72',
              'File::Spec::AmigaOS'   => '3.72',
              'File::Spec::Cygwin'    => '3.72',
              'File::Spec::Epoc'      => '3.72',
              'File::Spec::Functions' => '3.72',
              'File::Spec::Mac'       => '3.72',
              'File::Spec::OS2'       => '3.72',
              'File::Spec::Unix'      => '3.72',
              'File::Spec::VMS'       => '3.72',
              'File::Spec::Win32'     => '3.72',
              'JSON::PP'              => '2.97001',
              'JSON::PP::Boolean'     => '2.97001',
              'Module::CoreList'      => '5.20180120',
              'Module::CoreList::TieHashDelta'=> '5.20180120',
              'Module::CoreList::Utils'=> '5.20180120',
              'Opcode'                => '1.43',
              'Pod::Functions'        => '1.13',
              'Pod::Functions::Functions'=> '1.13',
              'Pod::Html'             => '1.24',
              'Pod::Man'              => '4.10',
              'Pod::ParseLink'        => '4.10',
              'Pod::Text'             => '4.10',
              'Pod::Text::Color'      => '4.10',
              'Pod::Text::Overstrike' => '4.10',
              'Pod::Text::Termcap'    => '4.10',
              'Socket'                => '2.027',
              'Time::HiRes'           => '1.9752',
              'Unicode::UCD'          => '0.70',
              'XS::APItest'           => '0.95',
              'XSLoader'              => '0.30',
              'autodie::exception'    => '2.29002',
              'feature'               => '1.51',
              'overload'              => '1.30',
              'utf8'                  => '1.21',
              'warnings'              => '1.40',
          },
          removed => {
          }
      },
  );
  
  sub is_core
  {
      shift if defined $_[1] and $_[1] =~ /^\w/ and _looks_like_invocant $_[0];
      my $module = shift;
      my $module_version = @_ > 0 ? shift : undef;
      my $perl_version   = @_ > 0 ? shift : $];
  
      my $first_release = first_release($module);
  
      return 0 if !defined($first_release) || $first_release > $perl_version;
  
      my $final_release = removed_from($module);
  
      return 0 if defined($final_release) && $perl_version >= $final_release;
  
      # If a minimum version of the module was specified:
      # Step through all perl releases ($prn)
      # so we can find what version of the module
      # was included in the specified version of perl.
      # On the way if we pass the required module version, we can
      # short-circuit and return true
      if (defined($module_version)) {
          # The Perl releases aren't a linear sequence, but a tree. We need to build the path
          # of releases from 5 to the specified release, and follow the module's version(s)
          # along that path.
          my @releases = ($perl_version);
          my $rel = $perl_version;
          while (defined($rel)) {
              # XXX: This line is a sign of failure. -- rjbs, 2015-04-15
              my $this_delta = $delta{$rel} || $delta{ sprintf '%0.6f', $rel };
              $rel = $this_delta->{delta_from};
              unshift(@releases, $rel) if defined($rel);
          }
          RELEASE:
          foreach my $prn (@releases) {
              next RELEASE if $prn < $first_release;
              last RELEASE if $prn > $perl_version;
              next unless defined(my $next_module_version
                                     = $delta{$prn}->{changed}->{$module});
              return 1 if version->parse($next_module_version) >= version->parse($module_version);
          }
          return 0;
      }
  
      return 1 if !defined($final_release);
  
      return $perl_version <= $final_release;
  }
  
  %version = _undelta(\%delta);
  
  %deprecated = (
      5.011    => {
          changed => { map { $_ => 1 } qw/
              Class::ISA
              Pod::Plainer
              Shell
              Switch
          /},
      },
      5.011001 => { delta_from => 5.011 },
      5.011002 => { delta_from => 5.011001 },
      5.011003 => { delta_from => 5.011002 },
      5.011004 => { delta_from => 5.011003 },
      5.011005 => { delta_from => 5.011004 },
  
      5.012    => { delta_from => 5.011005 },
      5.012001 => { delta_from => 5.012 },
      5.012002 => { delta_from => 5.012001 },
      5.012003 => { delta_from => 5.012002 },
      5.012004 => { delta_from => 5.012003 },
      5.012005 => { delta_from => 5.012004 },
  
      5.013    => { delta_from => 5.012005 },
      5.013001 => {
          delta_from => 5.013,
          removed => { map { $_ => 1 } qw/
              Class::ISA
              Pod::Plainer
              Switch
          /},
      },
      5.013002 => { delta_from => 5.013001 },
      5.013003 => { delta_from => 5.013002 },
      5.013004 => { delta_from => 5.013003 },
      5.013005 => { delta_from => 5.013004 },
      5.013006 => { delta_from => 5.013005 },
      5.013007 => { delta_from => 5.013006 },
      5.013008 => { delta_from => 5.013007 },
      5.013009 => { delta_from => 5.013008 },
      5.01301  => { delta_from => 5.013009 },
      5.013011 => { delta_from => 5.01301  },
  
      5.014    => { delta_from => 5.013011 },
      5.014001 => { delta_from => 5.014    },
      5.014002 => { delta_from => 5.014001 },
      5.014003 => { delta_from => 5.014002 },
      5.014004 => { delta_from => 5.014003 },
  
      5.015    => {
          delta_from => 5.014004,
          removed => { Shell => 1 },
      },
      5.015001 => { delta_from => 5.015    },
      5.015002 => { delta_from => 5.015001 },
      5.015003 => { delta_from => 5.015002 },
      5.015004 => { delta_from => 5.015003 },
      5.015005 => { delta_from => 5.015004 },
      5.015006 => { delta_from => 5.015005 },
      5.015007 => { delta_from => 5.015006 },
      5.015008 => { delta_from => 5.015007 },
      5.015009 => { delta_from => 5.015008 },
  
      5.016    => { delta_from => 5.015009 },
      5.016001 => { delta_from => 5.016    },
      5.016002 => { delta_from => 5.016001 },
      5.016003 => { delta_from => 5.016002 },
  
      5.017    => { delta_from => 5.016003 },
      5.017001 => { delta_from => 5.017    },
      5.017002 => { delta_from => 5.017001 },
      5.017003 => { delta_from => 5.017002 },
      5.017004 => { delta_from => 5.017003 },
      5.017005 => { delta_from => 5.017004 },
      5.017006 => { delta_from => 5.017005 },
      5.017007 => { delta_from => 5.017006 },
      5.017008 => {
          delta_from => 5.017007,
          changed => { 'Pod::LaTeX' => 1 },
      },
      5.017009 => {
          delta_from => 5.017008,
          changed => { map { $_ => 1 } qw/
              Archive::Extract
              B::Lint
              B::Lint::Debug
              CPANPLUS
              CPANPLUS::Backend
              CPANPLUS::Backend::RV
              CPANPLUS::Config
              CPANPLUS::Config::HomeEnv
              CPANPLUS::Configure
              CPANPLUS::Configure::Setup
              CPANPLUS::Dist
              CPANPLUS::Dist::Autobundle
              CPANPLUS::Dist::Base
              CPANPLUS::Dist::Build
              CPANPLUS::Dist::Build::Constants
              CPANPLUS::Dist::MM
              CPANPLUS::Dist::Sample
              CPANPLUS::Error
              CPANPLUS::Internals
              CPANPLUS::Internals::Constants
              CPANPLUS::Internals::Constants::Report
              CPANPLUS::Internals::Extract
              CPANPLUS::Internals::Fetch
              CPANPLUS::Internals::Report
              CPANPLUS::Internals::Search
              CPANPLUS::Internals::Source
              CPANPLUS::Internals::Source::Memory
              CPANPLUS::Internals::Source::SQLite
              CPANPLUS::Internals::Source::SQLite::Tie
              CPANPLUS::Internals::Utils
              CPANPLUS::Internals::Utils::Autoflush
              CPANPLUS::Module
              CPANPLUS::Module::Author
              CPANPLUS::Module::Author::Fake
              CPANPLUS::Module::Checksums
              CPANPLUS::Module::Fake
              CPANPLUS::Module::Signature
              CPANPLUS::Selfupdate
              CPANPLUS::Shell
              CPANPLUS::Shell::Classic
              CPANPLUS::Shell::Default
              CPANPLUS::Shell::Default::Plugins::CustomSource
              CPANPLUS::Shell::Default::Plugins::Remote
              CPANPLUS::Shell::Default::Plugins::Source
              Devel::InnerPackage
              File::CheckTree
              Log::Message
              Log::Message::Config
              Log::Message::Handlers
              Log::Message::Item
              Log::Message::Simple
              Module::Pluggable
              Module::Pluggable::Object
              Object::Accessor
              Term::UI
              Term::UI::History
              Text::Soundex
          /},
      },
      5.01701  => { delta_from => 5.017009 },
      5.017011 => { delta_from => 5.01701  },
  
      5.018    => { delta_from => 5.017011 },
      5.018001 => {
          delta_from => 5.018,
          changed => {
          },
          removed => {
          }
      },
      5.018002 => {
          delta_from => 5.018001,
          changed => {
          },
          removed => {
          }
      },
      5.018003 => {
          delta_from => 5.018,
          changed => {
          },
          removed => {
          }
      },
      5.018004 => {
          delta_from => 5.018,
          changed => {
          },
          removed => {
          }
      },
  
      5.019    => {
          delta_from => 5.018,
          changed => { 'Module::Build' => 1 },
          removed => { map { $_ => 1 } qw/
              Archive::Extract
              B::Lint
              B::Lint::Debug
              CPANPLUS
              CPANPLUS::Backend
              CPANPLUS::Backend::RV
              CPANPLUS::Config
              CPANPLUS::Config::HomeEnv
              CPANPLUS::Configure
              CPANPLUS::Configure::Setup
              CPANPLUS::Dist
              CPANPLUS::Dist::Autobundle
              CPANPLUS::Dist::Base
              CPANPLUS::Dist::Build
              CPANPLUS::Dist::Build::Constants
              CPANPLUS::Dist::MM
              CPANPLUS::Dist::Sample
              CPANPLUS::Error
              CPANPLUS::Internals
              CPANPLUS::Internals::Constants
              CPANPLUS::Internals::Constants::Report
              CPANPLUS::Internals::Extract
              CPANPLUS::Internals::Fetch
              CPANPLUS::Internals::Report
              CPANPLUS::Internals::Search
              CPANPLUS::Internals::Source
              CPANPLUS::Internals::Source::Memory
              CPANPLUS::Internals::Source::SQLite
              CPANPLUS::Internals::Source::SQLite::Tie
              CPANPLUS::Internals::Utils
              CPANPLUS::Internals::Utils::Autoflush
              CPANPLUS::Module
              CPANPLUS::Module::Author
              CPANPLUS::Module::Author::Fake
              CPANPLUS::Module::Checksums
              CPANPLUS::Module::Fake
              CPANPLUS::Module::Signature
              CPANPLUS::Selfupdate
              CPANPLUS::Shell
              CPANPLUS::Shell::Classic
              CPANPLUS::Shell::Default
              CPANPLUS::Shell::Default::Plugins::CustomSource
              CPANPLUS::Shell::Default::Plugins::Remote
              CPANPLUS::Shell::Default::Plugins::Source
              Devel::InnerPackage
              File::CheckTree
              Log::Message
              Log::Message::Config
              Log::Message::Handlers
              Log::Message::Item
              Log::Message::Simple
              Module::Pluggable
              Module::Pluggable::Object
              Object::Accessor
              Pod::LaTeX
              Term::UI
              Term::UI::History
              Text::Soundex
          /}
      },
      5.019001 => {
          delta_from => 5.019,
          changed => {
          },
          removed => {
          }
      },
      5.019002 => {
          delta_from => 5.019001,
          changed => {
          },
          removed => {
          }
      },
      5.019003 => {
          delta_from => 5.019002,
          changed => {
          },
          removed => {
          }
      },
      5.019004 => {
          delta_from => 5.019003,
          changed => {
              'Module::Build::Base'   => '1',
              'Module::Build::Compat' => '1',
              'Module::Build::Config' => '1',
              'Module::Build::ConfigData'=> '1',
              'Module::Build::Cookbook'=> '1',
              'Module::Build::Dumper' => '1',
              'Module::Build::ModuleInfo'=> '1',
              'Module::Build::Notes'  => '1',
              'Module::Build::PPMMaker'=> '1',
              'Module::Build::Platform::Default'=> '1',
              'Module::Build::Platform::MacOS'=> '1',
              'Module::Build::Platform::Unix'=> '1',
              'Module::Build::Platform::VMS'=> '1',
              'Module::Build::Platform::VOS'=> '1',
              'Module::Build::Platform::Windows'=> '1',
              'Module::Build::Platform::aix'=> '1',
              'Module::Build::Platform::cygwin'=> '1',
              'Module::Build::Platform::darwin'=> '1',
              'Module::Build::Platform::os2'=> '1',
              'Module::Build::PodParser'=> '1',
              'Module::Build::Version'=> '1',
              'Module::Build::YAML'   => '1',
              'inc::latest'           => '1',
          },
          removed => {
          }
      },
      5.019005 => {
          delta_from => 5.019004,
          changed => {
          },
          removed => {
          }
      },
      5.019006 => {
          delta_from => 5.019005,
          changed => {
              'Package::Constants'    => '1',
          },
          removed => {
          }
      },
      5.019007 => {
          delta_from => 5.019006,
          changed => {
              'CGI'                   => '1',
              'CGI::Apache'           => '1',
              'CGI::Carp'             => '1',
              'CGI::Cookie'           => '1',
              'CGI::Fast'             => '1',
              'CGI::Pretty'           => '1',
              'CGI::Push'             => '1',
              'CGI::Switch'           => '1',
              'CGI::Util'             => '1',
          },
          removed => {
          }
      },
      5.019008 => {
          delta_from => 5.019007,
          changed => {
          },
          removed => {
          }
      },
      5.019009 => {
          delta_from => 5.019008,
          changed => {
          },
          removed => {
          }
      },
      5.01901 => {
          delta_from => 5.019009,
          changed => {
          },
          removed => {
          }
      },
      5.019011 => {
          delta_from => 5.019010,
          changed => {
          },
          removed => {
          }
      },
      5.020000 => {
          delta_from => 5.019011,
          changed => {
          },
          removed => {
          }
      },
      5.021000 => {
          delta_from => 5.020000,
          changed => {
          },
          removed => {
              'CGI'                   => 1,
              'CGI::Apache'           => 1,
              'CGI::Carp'             => 1,
              'CGI::Cookie'           => 1,
              'CGI::Fast'             => 1,
              'CGI::Pretty'           => 1,
              'CGI::Push'             => 1,
              'CGI::Switch'           => 1,
              'CGI::Util'             => 1,
              'Module::Build'         => 1,
              'Module::Build::Base'   => 1,
              'Module::Build::Compat' => 1,
              'Module::Build::Config' => 1,
              'Module::Build::ConfigData'=> 1,
              'Module::Build::Cookbook'=> 1,
              'Module::Build::Dumper' => 1,
              'Module::Build::ModuleInfo'=> 1,
              'Module::Build::Notes'  => 1,
              'Module::Build::PPMMaker'=> 1,
              'Module::Build::Platform::Default'=> 1,
              'Module::Build::Platform::MacOS'=> 1,
              'Module::Build::Platform::Unix'=> 1,
              'Module::Build::Platform::VMS'=> 1,
              'Module::Build::Platform::VOS'=> 1,
              'Module::Build::Platform::Windows'=> 1,
              'Module::Build::Platform::aix'=> 1,
              'Module::Build::Platform::cygwin'=> 1,
              'Module::Build::Platform::darwin'=> 1,
              'Module::Build::Platform::os2'=> 1,
              'Module::Build::PodParser'=> 1,
              'Module::Build::Version'=> 1,
              'Module::Build::YAML'   => 1,
              'Package::Constants'    => 1,
              'inc::latest'           => 1,
          }
      },
      5.021001 => {
          delta_from => 5.021000,
          changed => {
          },
          removed => {
          }
      },
      5.021002 => {
          delta_from => 5.021001,
          changed => {
          },
          removed => {
          }
      },
      5.021003 => {
          delta_from => 5.021002,
          changed => {
          },
          removed => {
          }
      },
      5.020001 => {
          delta_from => 5.020000,
          changed => {
          },
          removed => {
          }
      },
      5.021004 => {
          delta_from => 5.021003,
          changed => {
          },
          removed => {
          }
      },
      5.021005 => {
          delta_from => 5.021004,
          changed => {
          },
          removed => {
          }
      },
      5.021006 => {
          delta_from => 5.021005,
          changed => {
          },
          removed => {
          }
      },
      5.021007 => {
          delta_from => 5.021006,
          changed => {
          },
          removed => {
          }
      },
      5.021008 => {
          delta_from => 5.021007,
          changed => {
          },
          removed => {
          }
      },
      5.020002 => {
          delta_from => 5.020001,
          changed => {
          },
          removed => {
          }
      },
      5.021009 => {
          delta_from => 5.021008,
          changed => {
          },
          removed => {
          }
      },
      5.021010 => {
          delta_from => 5.021009,
          changed => {
          },
          removed => {
          }
      },
      5.021011 => {
          delta_from => 5.02101,
          changed => {
          },
          removed => {
          }
      },
      5.022000 => {
          delta_from => 5.021011,
          changed => {
          },
          removed => {
          }
      },
      5.023000 => {
          delta_from => 5.022000,
          changed => {
          },
          removed => {
          }
      },
      5.023001 => {
          delta_from => 5.023000,
          changed => {
          },
          removed => {
          }
      },
      5.023002 => {
          delta_from => 5.023001,
          changed => {
          },
          removed => {
          }
      },
      5.020003 => {
          delta_from => 5.020002,
          changed => {
          },
          removed => {
          }
      },
      5.023003 => {
          delta_from => 5.023002,
          changed => {
          },
          removed => {
          }
      },
      5.023004 => {
          delta_from => 5.023003,
          changed => {
          },
          removed => {
          }
      },
      5.023005 => {
          delta_from => 5.023004,
          changed => {
          },
          removed => {
          }
      },
      5.022001 => {
          delta_from => 5.022,
          changed => {
          },
          removed => {
          }
      },
      5.023006 => {
          delta_from => 5.023005,
          changed => {
          },
          removed => {
          }
      },
      5.023007 => {
          delta_from => 5.023006,
          changed => {
          },
          removed => {
          }
      },
      5.023008 => {
          delta_from => 5.023007,
          changed => {
          },
          removed => {
          }
      },
      5.023009 => {
          delta_from => 5.023008,
          changed => {
          },
          removed => {
          }
      },
      5.022002 => {
          delta_from => 5.022001,
          changed => {
          },
          removed => {
          }
      },
      5.024000 => {
          delta_from => 5.023009,
          changed => {
          },
          removed => {
          }
      },
      5.025000 => {
          delta_from => 5.024,
          changed => {
          },
          removed => {
          }
      },
      5.025001 => {
          delta_from => 5.025,
          changed => {
          },
          removed => {
          }
      },
      5.025002 => {
          delta_from => 5.025001,
          changed => {
          },
          removed => {
          }
      },
      5.025003 => {
          delta_from => 5.025002,
          changed => {
          },
          removed => {
          }
      },
      5.025004 => {
          delta_from => 5.025003,
          changed => {
          },
          removed => {
          }
      },
      5.025005 => {
          delta_from => 5.025004,
          changed => {
          },
          removed => {
          }
      },
      5.025006 => {
          delta_from => 5.025005,
          changed => {
          },
          removed => {
          }
      },
      5.025007 => {
          delta_from => 5.025006,
          changed => {
          },
          removed => {
          }
      },
      5.025008 => {
          delta_from => 5.025007,
          changed => {
          },
          removed => {
          }
      },
      5.022003 => {
          delta_from => 5.022002,
          changed => {
          },
          removed => {
          }
      },
      5.024001 => {
          delta_from => 5.024000,
          changed => {
          },
          removed => {
          }
      },
      5.025009 => {
          delta_from => 5.025008,
          changed => {
          },
          removed => {
          }
      },
      5.025010 => {
          delta_from => 5.025009,
          changed => {
          },
          removed => {
          }
      },
      5.025011 => {
          delta_from => 5.025010,
          changed => {
          },
          removed => {
          }
      },
      5.025012 => {
          delta_from => 5.025011,
          changed => {
          },
          removed => {
          }
      },
      5.026000 => {
          delta_from => 5.025012,
          changed => {
          },
          removed => {
          }
      },
      5.027000 => {
          delta_from => 5.026,
          changed => {
          },
          removed => {
          }
      },
      5.027001 => {
          delta_from => 5.027,
          changed => {
          },
          removed => {
          }
      },
      5.022004 => {
          delta_from => 5.022003,
          changed => {
          },
          removed => {
          }
      },
      5.024002 => {
          delta_from => 5.024001,
          changed => {
          },
          removed => {
          }
      },
      5.027002 => {
          delta_from => 5.027001,
          changed => {
          },
          removed => {
          }
      },
      5.027003 => {
          delta_from => 5.027002,
          changed => {
              'B::Debug'              => '1',
          },
          removed => {
          }
      },
      5.027004 => {
          delta_from => 5.027003,
          changed => {
          },
          removed => {
          }
      },
      5.024003 => {
          delta_from => 5.024002,
          changed => {
          },
          removed => {
          }
      },
      5.026001 => {
          delta_from => 5.026000,
          changed => {
          },
          removed => {
          }
      },
      5.027005 => {
          delta_from => 5.027004,
          changed => {
          },
          removed => {
          }
      },
      5.027006 => {
          delta_from => 5.027005,
          changed => {
          },
          removed => {
          }
      },
      5.027007 => {
          delta_from => 5.027006,
          changed => {
          },
          removed => {
          }
      },
      5.027008 => {
          delta_from => 5.027007,
          changed => {
          },
          removed => {
          }
      },
  );
  
  %deprecated = _undelta(\%deprecated);
  
  %upstream = (
      'App::Cpan'             => 'cpan',
      'App::Prove'            => 'cpan',
      'App::Prove::State'     => 'cpan',
      'App::Prove::State::Result'=> 'cpan',
      'App::Prove::State::Result::Test'=> 'cpan',
      'Archive::Tar'          => 'cpan',
      'Archive::Tar::Constant'=> 'cpan',
      'Archive::Tar::File'    => 'cpan',
      'AutoLoader'            => 'cpan',
      'AutoSplit'             => 'cpan',
      'B::Debug'              => 'cpan',
      'CPAN'                  => 'cpan',
      'CPAN::Author'          => 'cpan',
      'CPAN::Bundle'          => 'cpan',
      'CPAN::CacheMgr'        => 'cpan',
      'CPAN::Complete'        => 'cpan',
      'CPAN::Debug'           => 'cpan',
      'CPAN::DeferredCode'    => 'cpan',
      'CPAN::Distribution'    => 'cpan',
      'CPAN::Distroprefs'     => 'cpan',
      'CPAN::Distrostatus'    => 'cpan',
      'CPAN::Exception::RecursiveDependency'=> 'cpan',
      'CPAN::Exception::blocked_urllist'=> 'cpan',
      'CPAN::Exception::yaml_not_installed'=> 'cpan',
      'CPAN::Exception::yaml_process_error'=> 'cpan',
      'CPAN::FTP'             => 'cpan',
      'CPAN::FTP::netrc'      => 'cpan',
      'CPAN::FirstTime'       => 'cpan',
      'CPAN::HTTP::Client'    => 'cpan',
      'CPAN::HTTP::Credentials'=> 'cpan',
      'CPAN::HandleConfig'    => 'cpan',
      'CPAN::Index'           => 'cpan',
      'CPAN::InfoObj'         => 'cpan',
      'CPAN::Kwalify'         => 'cpan',
      'CPAN::LWP::UserAgent'  => 'cpan',
      'CPAN::Meta'            => 'cpan',
      'CPAN::Meta::Converter' => 'cpan',
      'CPAN::Meta::Feature'   => 'cpan',
      'CPAN::Meta::History'   => 'cpan',
      'CPAN::Meta::Merge'     => 'cpan',
      'CPAN::Meta::Prereqs'   => 'cpan',
      'CPAN::Meta::Requirements'=> 'cpan',
      'CPAN::Meta::Spec'      => 'cpan',
      'CPAN::Meta::Validator' => 'cpan',
      'CPAN::Meta::YAML'      => 'cpan',
      'CPAN::Mirrors'         => 'cpan',
      'CPAN::Module'          => 'cpan',
      'CPAN::Nox'             => 'cpan',
      'CPAN::Plugin'          => 'cpan',
      'CPAN::Plugin::Specfile'=> 'cpan',
      'CPAN::Prompt'          => 'cpan',
      'CPAN::Queue'           => 'cpan',
      'CPAN::Shell'           => 'cpan',
      'CPAN::Tarzip'          => 'cpan',
      'CPAN::URL'             => 'cpan',
      'CPAN::Version'         => 'cpan',
      'Compress::Raw::Bzip2'  => 'cpan',
      'Compress::Raw::Zlib'   => 'cpan',
      'Compress::Zlib'        => 'cpan',
      'Config::Perl::V'       => 'cpan',
      'DB_File'               => 'cpan',
      'Digest'                => 'cpan',
      'Digest::MD5'           => 'cpan',
      'Digest::SHA'           => 'cpan',
      'Digest::base'          => 'cpan',
      'Digest::file'          => 'cpan',
      'Encode'                => 'cpan',
      'Encode::Alias'         => 'cpan',
      'Encode::Byte'          => 'cpan',
      'Encode::CJKConstants'  => 'cpan',
      'Encode::CN'            => 'cpan',
      'Encode::CN::HZ'        => 'cpan',
      'Encode::Config'        => 'cpan',
      'Encode::EBCDIC'        => 'cpan',
      'Encode::Encoder'       => 'cpan',
      'Encode::Encoding'      => 'cpan',
      'Encode::GSM0338'       => 'cpan',
      'Encode::Guess'         => 'cpan',
      'Encode::JP'            => 'cpan',
      'Encode::JP::H2Z'       => 'cpan',
      'Encode::JP::JIS7'      => 'cpan',
      'Encode::KR'            => 'cpan',
      'Encode::KR::2022_KR'   => 'cpan',
      'Encode::MIME::Header'  => 'cpan',
      'Encode::MIME::Header::ISO_2022_JP'=> 'cpan',
      'Encode::MIME::Name'    => 'cpan',
      'Encode::Symbol'        => 'cpan',
      'Encode::TW'            => 'cpan',
      'Encode::Unicode'       => 'cpan',
      'Encode::Unicode::UTF7' => 'cpan',
      'ExtUtils::Command'     => 'cpan',
      'ExtUtils::Command::MM' => 'cpan',
      'ExtUtils::Constant'    => 'cpan',
      'ExtUtils::Constant::Base'=> 'cpan',
      'ExtUtils::Constant::ProxySubs'=> 'cpan',
      'ExtUtils::Constant::Utils'=> 'cpan',
      'ExtUtils::Constant::XS'=> 'cpan',
      'ExtUtils::Install'     => 'cpan',
      'ExtUtils::Installed'   => 'cpan',
      'ExtUtils::Liblist'     => 'cpan',
      'ExtUtils::Liblist::Kid'=> 'cpan',
      'ExtUtils::MM'          => 'cpan',
      'ExtUtils::MM_AIX'      => 'cpan',
      'ExtUtils::MM_Any'      => 'cpan',
      'ExtUtils::MM_BeOS'     => 'cpan',
      'ExtUtils::MM_Cygwin'   => 'cpan',
      'ExtUtils::MM_DOS'      => 'cpan',
      'ExtUtils::MM_Darwin'   => 'cpan',
      'ExtUtils::MM_MacOS'    => 'cpan',
      'ExtUtils::MM_NW5'      => 'cpan',
      'ExtUtils::MM_OS2'      => 'cpan',
      'ExtUtils::MM_QNX'      => 'cpan',
      'ExtUtils::MM_UWIN'     => 'cpan',
      'ExtUtils::MM_Unix'     => 'cpan',
      'ExtUtils::MM_VMS'      => 'cpan',
      'ExtUtils::MM_VOS'      => 'cpan',
      'ExtUtils::MM_Win32'    => 'cpan',
      'ExtUtils::MM_Win95'    => 'cpan',
      'ExtUtils::MY'          => 'cpan',
      'ExtUtils::MakeMaker'   => 'cpan',
      'ExtUtils::MakeMaker::Config'=> 'cpan',
      'ExtUtils::MakeMaker::Locale'=> 'cpan',
      'ExtUtils::MakeMaker::version'=> 'cpan',
      'ExtUtils::MakeMaker::version::regex'=> 'cpan',
      'ExtUtils::Manifest'    => 'cpan',
      'ExtUtils::Mkbootstrap' => 'cpan',
      'ExtUtils::Mksymlists'  => 'cpan',
      'ExtUtils::Packlist'    => 'cpan',
      'ExtUtils::testlib'     => 'cpan',
      'Fatal'                 => 'cpan',
      'File::Fetch'           => 'cpan',
      'File::GlobMapper'      => 'cpan',
      'File::Path'            => 'cpan',
      'File::Temp'            => 'cpan',
      'Filter::Util::Call'    => 'cpan',
      'Getopt::Long'          => 'cpan',
      'HTTP::Tiny'            => 'cpan',
      'IO::Compress::Adapter::Bzip2'=> 'cpan',
      'IO::Compress::Adapter::Deflate'=> 'cpan',
      'IO::Compress::Adapter::Identity'=> 'cpan',
      'IO::Compress::Base'    => 'cpan',
      'IO::Compress::Base::Common'=> 'cpan',
      'IO::Compress::Bzip2'   => 'cpan',
      'IO::Compress::Deflate' => 'cpan',
      'IO::Compress::Gzip'    => 'cpan',
      'IO::Compress::Gzip::Constants'=> 'cpan',
      'IO::Compress::RawDeflate'=> 'cpan',
      'IO::Compress::Zip'     => 'cpan',
      'IO::Compress::Zip::Constants'=> 'cpan',
      'IO::Compress::Zlib::Constants'=> 'cpan',
      'IO::Compress::Zlib::Extra'=> 'cpan',
      'IO::Socket::IP'        => 'cpan',
      'IO::Uncompress::Adapter::Bunzip2'=> 'cpan',
      'IO::Uncompress::Adapter::Identity'=> 'cpan',
      'IO::Uncompress::Adapter::Inflate'=> 'cpan',
      'IO::Uncompress::AnyInflate'=> 'cpan',
      'IO::Uncompress::AnyUncompress'=> 'cpan',
      'IO::Uncompress::Base'  => 'cpan',
      'IO::Uncompress::Bunzip2'=> 'cpan',
      'IO::Uncompress::Gunzip'=> 'cpan',
      'IO::Uncompress::Inflate'=> 'cpan',
      'IO::Uncompress::RawInflate'=> 'cpan',
      'IO::Uncompress::Unzip' => 'cpan',
      'IO::Zlib'              => 'cpan',
      'IPC::Cmd'              => 'cpan',
      'IPC::Msg'              => 'cpan',
      'IPC::Semaphore'        => 'cpan',
      'IPC::SharedMem'        => 'cpan',
      'IPC::SysV'             => 'cpan',
      'JSON::PP'              => 'cpan',
      'JSON::PP::Boolean'     => 'cpan',
      'List::Util'            => 'cpan',
      'List::Util::XS'        => 'cpan',
      'Locale::Codes'         => 'cpan',
      'Locale::Codes::Constants'=> 'cpan',
      'Locale::Codes::Country'=> 'cpan',
      'Locale::Codes::Country_Codes'=> 'cpan',
      'Locale::Codes::Country_Retired'=> 'cpan',
      'Locale::Codes::Currency'=> 'cpan',
      'Locale::Codes::Currency_Codes'=> 'cpan',
      'Locale::Codes::Currency_Retired'=> 'cpan',
      'Locale::Codes::LangExt'=> 'cpan',
      'Locale::Codes::LangExt_Codes'=> 'cpan',
      'Locale::Codes::LangExt_Retired'=> 'cpan',
      'Locale::Codes::LangFam'=> 'cpan',
      'Locale::Codes::LangFam_Codes'=> 'cpan',
      'Locale::Codes::LangFam_Retired'=> 'cpan',
      'Locale::Codes::LangVar'=> 'cpan',
      'Locale::Codes::LangVar_Codes'=> 'cpan',
      'Locale::Codes::LangVar_Retired'=> 'cpan',
      'Locale::Codes::Language'=> 'cpan',
      'Locale::Codes::Language_Codes'=> 'cpan',
      'Locale::Codes::Language_Retired'=> 'cpan',
      'Locale::Codes::Script' => 'cpan',
      'Locale::Codes::Script_Codes'=> 'cpan',
      'Locale::Codes::Script_Retired'=> 'cpan',
      'Locale::Country'       => 'cpan',
      'Locale::Currency'      => 'cpan',
      'Locale::Language'      => 'cpan',
      'Locale::Maketext::Simple'=> 'cpan',
      'Locale::Script'        => 'cpan',
      'MIME::Base64'          => 'cpan',
      'MIME::QuotedPrint'     => 'cpan',
      'Math::BigFloat'        => 'cpan',
      'Math::BigFloat::Trace' => 'cpan',
      'Math::BigInt'          => 'cpan',
      'Math::BigInt::Calc'    => 'cpan',
      'Math::BigInt::CalcEmu' => 'cpan',
      'Math::BigInt::FastCalc'=> 'cpan',
      'Math::BigInt::Lib'     => 'cpan',
      'Math::BigInt::Trace'   => 'cpan',
      'Math::BigRat'          => 'cpan',
      'Math::Complex'         => 'cpan',
      'Math::Trig'            => 'cpan',
      'Memoize'               => 'cpan',
      'Memoize::AnyDBM_File'  => 'cpan',
      'Memoize::Expire'       => 'cpan',
      'Memoize::ExpireFile'   => 'cpan',
      'Memoize::ExpireTest'   => 'cpan',
      'Memoize::NDBM_File'    => 'cpan',
      'Memoize::SDBM_File'    => 'cpan',
      'Memoize::Storable'     => 'cpan',
      'Module::Load'          => 'cpan',
      'Module::Load::Conditional'=> 'cpan',
      'Module::Loaded'        => 'cpan',
      'Module::Metadata'      => 'cpan',
      'NEXT'                  => 'cpan',
      'Net::Cmd'              => 'cpan',
      'Net::Config'           => 'cpan',
      'Net::Domain'           => 'cpan',
      'Net::FTP'              => 'cpan',
      'Net::FTP::A'           => 'cpan',
      'Net::FTP::E'           => 'cpan',
      'Net::FTP::I'           => 'cpan',
      'Net::FTP::L'           => 'cpan',
      'Net::FTP::dataconn'    => 'cpan',
      'Net::NNTP'             => 'cpan',
      'Net::Netrc'            => 'cpan',
      'Net::POP3'             => 'cpan',
      'Net::SMTP'             => 'cpan',
      'Net::Time'             => 'cpan',
      'Params::Check'         => 'cpan',
      'Parse::CPAN::Meta'     => 'cpan',
      'Perl::OSType'          => 'cpan',
      'PerlIO::via::QuotedPrint'=> 'cpan',
      'Pod::Checker'          => 'cpan',
      'Pod::Escapes'          => 'cpan',
      'Pod::Find'             => 'cpan',
      'Pod::InputObjects'     => 'cpan',
      'Pod::Man'              => 'cpan',
      'Pod::ParseLink'        => 'cpan',
      'Pod::ParseUtils'       => 'cpan',
      'Pod::Parser'           => 'cpan',
      'Pod::Perldoc'          => 'cpan',
      'Pod::Perldoc::BaseTo'  => 'cpan',
      'Pod::Perldoc::GetOptsOO'=> 'cpan',
      'Pod::Perldoc::ToANSI'  => 'cpan',
      'Pod::Perldoc::ToChecker'=> 'cpan',
      'Pod::Perldoc::ToMan'   => 'cpan',
      'Pod::Perldoc::ToNroff' => 'cpan',
      'Pod::Perldoc::ToPod'   => 'cpan',
      'Pod::Perldoc::ToRtf'   => 'cpan',
      'Pod::Perldoc::ToTerm'  => 'cpan',
      'Pod::Perldoc::ToText'  => 'cpan',
      'Pod::Perldoc::ToTk'    => 'cpan',
      'Pod::Perldoc::ToXml'   => 'cpan',
      'Pod::PlainText'        => 'cpan',
      'Pod::Select'           => 'cpan',
      'Pod::Simple'           => 'cpan',
      'Pod::Simple::BlackBox' => 'cpan',
      'Pod::Simple::Checker'  => 'cpan',
      'Pod::Simple::Debug'    => 'cpan',
      'Pod::Simple::DumpAsText'=> 'cpan',
      'Pod::Simple::DumpAsXML'=> 'cpan',
      'Pod::Simple::HTML'     => 'cpan',
      'Pod::Simple::HTMLBatch'=> 'cpan',
      'Pod::Simple::HTMLLegacy'=> 'cpan',
      'Pod::Simple::LinkSection'=> 'cpan',
      'Pod::Simple::Methody'  => 'cpan',
      'Pod::Simple::Progress' => 'cpan',
      'Pod::Simple::PullParser'=> 'cpan',
      'Pod::Simple::PullParserEndToken'=> 'cpan',
      'Pod::Simple::PullParserStartToken'=> 'cpan',
      'Pod::Simple::PullParserTextToken'=> 'cpan',
      'Pod::Simple::PullParserToken'=> 'cpan',
      'Pod::Simple::RTF'      => 'cpan',
      'Pod::Simple::Search'   => 'cpan',
      'Pod::Simple::SimpleTree'=> 'cpan',
      'Pod::Simple::Text'     => 'cpan',
      'Pod::Simple::TextContent'=> 'cpan',
      'Pod::Simple::TiedOutFH'=> 'cpan',
      'Pod::Simple::Transcode'=> 'cpan',
      'Pod::Simple::TranscodeDumb'=> 'cpan',
      'Pod::Simple::TranscodeSmart'=> 'cpan',
      'Pod::Simple::XHTML'    => 'cpan',
      'Pod::Simple::XMLOutStream'=> 'cpan',
      'Pod::Text'             => 'cpan',
      'Pod::Text::Color'      => 'cpan',
      'Pod::Text::Overstrike' => 'cpan',
      'Pod::Text::Termcap'    => 'cpan',
      'Pod::Usage'            => 'cpan',
      'Scalar::Util'          => 'cpan',
      'Socket'                => 'cpan',
      'Sub::Util'             => 'cpan',
      'Sys::Syslog'           => 'cpan',
      'Sys::Syslog::Win32'    => 'cpan',
      'TAP::Base'             => 'cpan',
      'TAP::Formatter::Base'  => 'cpan',
      'TAP::Formatter::Color' => 'cpan',
      'TAP::Formatter::Console'=> 'cpan',
      'TAP::Formatter::Console::ParallelSession'=> 'cpan',
      'TAP::Formatter::Console::Session'=> 'cpan',
      'TAP::Formatter::File'  => 'cpan',
      'TAP::Formatter::File::Session'=> 'cpan',
      'TAP::Formatter::Session'=> 'cpan',
      'TAP::Harness'          => 'cpan',
      'TAP::Harness::Env'     => 'cpan',
      'TAP::Object'           => 'cpan',
      'TAP::Parser'           => 'cpan',
      'TAP::Parser::Aggregator'=> 'cpan',
      'TAP::Parser::Grammar'  => 'cpan',
      'TAP::Parser::Iterator' => 'cpan',
      'TAP::Parser::Iterator::Array'=> 'cpan',
      'TAP::Parser::Iterator::Process'=> 'cpan',
      'TAP::Parser::Iterator::Stream'=> 'cpan',
      'TAP::Parser::IteratorFactory'=> 'cpan',
      'TAP::Parser::Multiplexer'=> 'cpan',
      'TAP::Parser::Result'   => 'cpan',
      'TAP::Parser::Result::Bailout'=> 'cpan',
      'TAP::Parser::Result::Comment'=> 'cpan',
      'TAP::Parser::Result::Plan'=> 'cpan',
      'TAP::Parser::Result::Pragma'=> 'cpan',
      'TAP::Parser::Result::Test'=> 'cpan',
      'TAP::Parser::Result::Unknown'=> 'cpan',
      'TAP::Parser::Result::Version'=> 'cpan',
      'TAP::Parser::Result::YAML'=> 'cpan',
      'TAP::Parser::ResultFactory'=> 'cpan',
      'TAP::Parser::Scheduler'=> 'cpan',
      'TAP::Parser::Scheduler::Job'=> 'cpan',
      'TAP::Parser::Scheduler::Spinner'=> 'cpan',
      'TAP::Parser::Source'   => 'cpan',
      'TAP::Parser::SourceHandler'=> 'cpan',
      'TAP::Parser::SourceHandler::Executable'=> 'cpan',
      'TAP::Parser::SourceHandler::File'=> 'cpan',
      'TAP::Parser::SourceHandler::Handle'=> 'cpan',
      'TAP::Parser::SourceHandler::Perl'=> 'cpan',
      'TAP::Parser::SourceHandler::RawTAP'=> 'cpan',
      'TAP::Parser::YAMLish::Reader'=> 'cpan',
      'TAP::Parser::YAMLish::Writer'=> 'cpan',
      'Term::ANSIColor'       => 'cpan',
      'Term::Cap'             => 'cpan',
      'Test2'                 => 'cpan',
      'Test2::API'            => 'cpan',
      'Test2::API::Breakage'  => 'cpan',
      'Test2::API::Context'   => 'cpan',
      'Test2::API::Instance'  => 'cpan',
      'Test2::API::Stack'     => 'cpan',
      'Test2::Event'          => 'cpan',
      'Test2::Event::Bail'    => 'cpan',
      'Test2::Event::Diag'    => 'cpan',
      'Test2::Event::Encoding'=> 'cpan',
      'Test2::Event::Exception'=> 'cpan',
      'Test2::Event::Fail'    => 'cpan',
      'Test2::Event::Generic' => 'cpan',
      'Test2::Event::Note'    => 'cpan',
      'Test2::Event::Ok'      => 'cpan',
      'Test2::Event::Pass'    => 'cpan',
      'Test2::Event::Plan'    => 'cpan',
      'Test2::Event::Skip'    => 'cpan',
      'Test2::Event::Subtest' => 'cpan',
      'Test2::Event::TAP::Version'=> 'cpan',
      'Test2::Event::Waiting' => 'cpan',
      'Test2::EventFacet'     => 'cpan',
      'Test2::EventFacet::About'=> 'cpan',
      'Test2::EventFacet::Amnesty'=> 'cpan',
      'Test2::EventFacet::Assert'=> 'cpan',
      'Test2::EventFacet::Control'=> 'cpan',
      'Test2::EventFacet::Error'=> 'cpan',
      'Test2::EventFacet::Info'=> 'cpan',
      'Test2::EventFacet::Meta'=> 'cpan',
      'Test2::EventFacet::Parent'=> 'cpan',
      'Test2::EventFacet::Plan'=> 'cpan',
      'Test2::EventFacet::Trace'=> 'cpan',
      'Test2::Formatter'      => 'cpan',
      'Test2::Formatter::TAP' => 'cpan',
      'Test2::Hub'            => 'cpan',
      'Test2::Hub::Interceptor'=> 'cpan',
      'Test2::Hub::Interceptor::Terminator'=> 'cpan',
      'Test2::Hub::Subtest'   => 'cpan',
      'Test2::IPC'            => 'cpan',
      'Test2::IPC::Driver'    => 'cpan',
      'Test2::IPC::Driver::Files'=> 'cpan',
      'Test2::Tools::Tiny'    => 'cpan',
      'Test2::Util'           => 'cpan',
      'Test2::Util::ExternalMeta'=> 'cpan',
      'Test2::Util::Facets2Legacy'=> 'cpan',
      'Test2::Util::HashBase' => 'cpan',
      'Test2::Util::Trace'    => 'cpan',
      'Test::Builder'         => 'cpan',
      'Test::Builder::Formatter'=> 'cpan',
      'Test::Builder::IO::Scalar'=> 'cpan',
      'Test::Builder::Module' => 'cpan',
      'Test::Builder::Tester' => 'cpan',
      'Test::Builder::Tester::Color'=> 'cpan',
      'Test::Builder::TodoDiag'=> 'cpan',
      'Test::Harness'         => 'cpan',
      'Test::More'            => 'cpan',
      'Test::Simple'          => 'cpan',
      'Test::Tester'          => 'cpan',
      'Test::Tester::Capture' => 'cpan',
      'Test::Tester::CaptureRunner'=> 'cpan',
      'Test::Tester::Delegate'=> 'cpan',
      'Test::use::ok'         => 'cpan',
      'Text::Balanced'        => 'cpan',
      'Text::ParseWords'      => 'cpan',
      'Text::Tabs'            => 'cpan',
      'Text::Wrap'            => 'cpan',
      'Tie::RefHash'          => 'cpan',
      'Time::Local'           => 'cpan',
      'Time::Piece'           => 'cpan',
      'Time::Seconds'         => 'cpan',
      'Unicode::Collate'      => 'cpan',
      'Unicode::Collate::CJK::Big5'=> 'cpan',
      'Unicode::Collate::CJK::GB2312'=> 'cpan',
      'Unicode::Collate::CJK::JISX0208'=> 'cpan',
      'Unicode::Collate::CJK::Korean'=> 'cpan',
      'Unicode::Collate::CJK::Pinyin'=> 'cpan',
      'Unicode::Collate::CJK::Stroke'=> 'cpan',
      'Unicode::Collate::CJK::Zhuyin'=> 'cpan',
      'Unicode::Collate::Locale'=> 'cpan',
      'Win32'                 => 'cpan',
      'Win32API::File'        => 'cpan',
      'Win32API::File::inc::ExtUtils::Myconst2perl'=> 'cpan',
      'autodie'               => 'cpan',
      'autodie::Scope::Guard' => 'cpan',
      'autodie::Scope::GuardStack'=> 'cpan',
      'autodie::Util'         => 'cpan',
      'autodie::exception'    => 'cpan',
      'autodie::exception::system'=> 'cpan',
      'autodie::hints'        => 'cpan',
      'autodie::skip'         => 'cpan',
      'bigint'                => 'cpan',
      'bignum'                => 'cpan',
      'bigrat'                => 'cpan',
      'encoding'              => 'cpan',
      'experimental'          => 'cpan',
      'ok'                    => 'cpan',
      'parent'                => 'cpan',
      'perlfaq'               => 'cpan',
      'version'               => 'cpan',
      'version::regex'        => 'cpan',
  );
  
  %bug_tracker = (
      'App::Cpan'             => undef,
      'App::Prove'            => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'App::Prove::State'     => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'App::Prove::State::Result'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'App::Prove::State::Result::Test'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'Archive::Tar'          => undef,
      'Archive::Tar::Constant'=> undef,
      'Archive::Tar::File'    => undef,
      'B::Debug'              => undef,
      'CPAN'                  => undef,
      'CPAN::Author'          => undef,
      'CPAN::Bundle'          => undef,
      'CPAN::CacheMgr'        => undef,
      'CPAN::Complete'        => undef,
      'CPAN::Debug'           => undef,
      'CPAN::DeferredCode'    => undef,
      'CPAN::Distribution'    => undef,
      'CPAN::Distroprefs'     => undef,
      'CPAN::Distrostatus'    => undef,
      'CPAN::Exception::RecursiveDependency'=> undef,
      'CPAN::Exception::blocked_urllist'=> undef,
      'CPAN::Exception::yaml_not_installed'=> undef,
      'CPAN::Exception::yaml_process_error'=> undef,
      'CPAN::FTP'             => undef,
      'CPAN::FTP::netrc'      => undef,
      'CPAN::FirstTime'       => undef,
      'CPAN::HTTP::Client'    => undef,
      'CPAN::HTTP::Credentials'=> undef,
      'CPAN::HandleConfig'    => undef,
      'CPAN::Index'           => undef,
      'CPAN::InfoObj'         => undef,
      'CPAN::Kwalify'         => undef,
      'CPAN::LWP::UserAgent'  => undef,
      'CPAN::Meta'            => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Converter' => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Feature'   => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::History'   => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Merge'     => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Prereqs'   => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Requirements'=> 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues',
      'CPAN::Meta::Spec'      => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Validator' => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::YAML'      => 'https://github.com/Perl-Toolchain-Gang/YAML-Tiny/issues',
      'CPAN::Mirrors'         => undef,
      'CPAN::Module'          => undef,
      'CPAN::Nox'             => undef,
      'CPAN::Plugin'          => undef,
      'CPAN::Plugin::Specfile'=> undef,
      'CPAN::Prompt'          => undef,
      'CPAN::Queue'           => undef,
      'CPAN::Shell'           => undef,
      'CPAN::Tarzip'          => undef,
      'CPAN::URL'             => undef,
      'CPAN::Version'         => undef,
      'Compress::Raw::Bzip2'  => undef,
      'Compress::Raw::Zlib'   => undef,
      'Compress::Zlib'        => undef,
      'Config::Perl::V'       => undef,
      'DB_File'               => undef,
      'Digest'                => undef,
      'Digest::MD5'           => undef,
      'Digest::SHA'           => undef,
      'Digest::base'          => undef,
      'Digest::file'          => undef,
      'Encode'                => undef,
      'Encode::Alias'         => undef,
      'Encode::Byte'          => undef,
      'Encode::CJKConstants'  => undef,
      'Encode::CN'            => undef,
      'Encode::CN::HZ'        => undef,
      'Encode::Config'        => undef,
      'Encode::EBCDIC'        => undef,
      'Encode::Encoder'       => undef,
      'Encode::Encoding'      => undef,
      'Encode::GSM0338'       => undef,
      'Encode::Guess'         => undef,
      'Encode::JP'            => undef,
      'Encode::JP::H2Z'       => undef,
      'Encode::JP::JIS7'      => undef,
      'Encode::KR'            => undef,
      'Encode::KR::2022_KR'   => undef,
      'Encode::MIME::Header'  => undef,
      'Encode::MIME::Header::ISO_2022_JP'=> undef,
      'Encode::MIME::Name'    => undef,
      'Encode::Symbol'        => undef,
      'Encode::TW'            => undef,
      'Encode::Unicode'       => undef,
      'Encode::Unicode::UTF7' => undef,
      'ExtUtils::Command'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Command::MM' => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Constant'    => undef,
      'ExtUtils::Constant::Base'=> undef,
      'ExtUtils::Constant::ProxySubs'=> undef,
      'ExtUtils::Constant::Utils'=> undef,
      'ExtUtils::Constant::XS'=> undef,
      'ExtUtils::Install'     => 'https://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-Install',
      'ExtUtils::Installed'   => 'https://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-Install',
      'ExtUtils::Liblist'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Liblist::Kid'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM'          => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_AIX'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Any'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_BeOS'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Cygwin'   => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_DOS'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Darwin'   => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_MacOS'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_NW5'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_OS2'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_QNX'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_UWIN'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Unix'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_VMS'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_VOS'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Win32'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Win95'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MY'          => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker'   => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::Config'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::Locale'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::version'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::version::regex'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Manifest'    => 'http://github.com/Perl-Toolchain-Gang/ExtUtils-Manifest/issues',
      'ExtUtils::Mkbootstrap' => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Mksymlists'  => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Packlist'    => 'https://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-Install',
      'ExtUtils::testlib'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'Fatal'                 => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'File::Fetch'           => undef,
      'File::GlobMapper'      => undef,
      'File::Path'            => undef,
      'File::Temp'            => 'http://rt.cpan.org/Public/Dist/Display.html?Name=File-Temp',
      'Filter::Util::Call'    => undef,
      'Getopt::Long'          => undef,
      'HTTP::Tiny'            => 'https://github.com/chansen/p5-http-tiny/issues',
      'IO::Compress::Adapter::Bzip2'=> undef,
      'IO::Compress::Adapter::Deflate'=> undef,
      'IO::Compress::Adapter::Identity'=> undef,
      'IO::Compress::Base'    => undef,
      'IO::Compress::Base::Common'=> undef,
      'IO::Compress::Bzip2'   => undef,
      'IO::Compress::Deflate' => undef,
      'IO::Compress::Gzip'    => undef,
      'IO::Compress::Gzip::Constants'=> undef,
      'IO::Compress::RawDeflate'=> undef,
      'IO::Compress::Zip'     => undef,
      'IO::Compress::Zip::Constants'=> undef,
      'IO::Compress::Zlib::Constants'=> undef,
      'IO::Compress::Zlib::Extra'=> undef,
      'IO::Socket::IP'        => undef,
      'IO::Uncompress::Adapter::Bunzip2'=> undef,
      'IO::Uncompress::Adapter::Identity'=> undef,
      'IO::Uncompress::Adapter::Inflate'=> undef,
      'IO::Uncompress::AnyInflate'=> undef,
      'IO::Uncompress::AnyUncompress'=> undef,
      'IO::Uncompress::Base'  => undef,
      'IO::Uncompress::Bunzip2'=> undef,
      'IO::Uncompress::Gunzip'=> undef,
      'IO::Uncompress::Inflate'=> undef,
      'IO::Uncompress::RawInflate'=> undef,
      'IO::Uncompress::Unzip' => undef,
      'IO::Zlib'              => undef,
      'IPC::Cmd'              => undef,
      'IPC::Msg'              => undef,
      'IPC::Semaphore'        => undef,
      'IPC::SharedMem'        => undef,
      'IPC::SysV'             => undef,
      'JSON::PP'              => undef,
      'JSON::PP::Boolean'     => undef,
      'List::Util'            => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'List::Util::XS'        => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'Locale::Codes'         => undef,
      'Locale::Codes::Constants'=> undef,
      'Locale::Codes::Country'=> undef,
      'Locale::Codes::Country_Codes'=> undef,
      'Locale::Codes::Country_Retired'=> undef,
      'Locale::Codes::Currency'=> undef,
      'Locale::Codes::Currency_Codes'=> undef,
      'Locale::Codes::Currency_Retired'=> undef,
      'Locale::Codes::LangExt'=> undef,
      'Locale::Codes::LangExt_Codes'=> undef,
      'Locale::Codes::LangExt_Retired'=> undef,
      'Locale::Codes::LangFam'=> undef,
      'Locale::Codes::LangFam_Codes'=> undef,
      'Locale::Codes::LangFam_Retired'=> undef,
      'Locale::Codes::LangVar'=> undef,
      'Locale::Codes::LangVar_Codes'=> undef,
      'Locale::Codes::LangVar_Retired'=> undef,
      'Locale::Codes::Language'=> undef,
      'Locale::Codes::Language_Codes'=> undef,
      'Locale::Codes::Language_Retired'=> undef,
      'Locale::Codes::Script' => undef,
      'Locale::Codes::Script_Codes'=> undef,
      'Locale::Codes::Script_Retired'=> undef,
      'Locale::Country'       => undef,
      'Locale::Currency'      => undef,
      'Locale::Language'      => undef,
      'Locale::Maketext::Simple'=> undef,
      'Locale::Script'        => undef,
      'MIME::Base64'          => undef,
      'MIME::QuotedPrint'     => undef,
      'Math::BigFloat'        => undef,
      'Math::BigFloat::Trace' => undef,
      'Math::BigInt'          => undef,
      'Math::BigInt::Calc'    => undef,
      'Math::BigInt::CalcEmu' => undef,
      'Math::BigInt::FastCalc'=> undef,
      'Math::BigInt::Lib'     => undef,
      'Math::BigInt::Trace'   => undef,
      'Math::BigRat'          => undef,
      'Math::Complex'         => undef,
      'Math::Trig'            => undef,
      'Memoize'               => undef,
      'Memoize::AnyDBM_File'  => undef,
      'Memoize::Expire'       => undef,
      'Memoize::ExpireFile'   => undef,
      'Memoize::ExpireTest'   => undef,
      'Memoize::NDBM_File'    => undef,
      'Memoize::SDBM_File'    => undef,
      'Memoize::Storable'     => undef,
      'Module::Load'          => undef,
      'Module::Load::Conditional'=> undef,
      'Module::Loaded'        => undef,
      'Module::Metadata'      => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Module-Metadata',
      'NEXT'                  => undef,
      'Net::Cmd'              => undef,
      'Net::Config'           => undef,
      'Net::Domain'           => undef,
      'Net::FTP'              => undef,
      'Net::FTP::A'           => undef,
      'Net::FTP::E'           => undef,
      'Net::FTP::I'           => undef,
      'Net::FTP::L'           => undef,
      'Net::FTP::dataconn'    => undef,
      'Net::NNTP'             => undef,
      'Net::Netrc'            => undef,
      'Net::POP3'             => undef,
      'Net::SMTP'             => undef,
      'Net::Time'             => undef,
      'Params::Check'         => undef,
      'Parse::CPAN::Meta'     => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'Perl::OSType'          => 'https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues',
      'PerlIO::via::QuotedPrint'=> undef,
      'Pod::Checker'          => undef,
      'Pod::Escapes'          => undef,
      'Pod::Find'             => undef,
      'Pod::InputObjects'     => undef,
      'Pod::Man'              => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::ParseLink'        => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::ParseUtils'       => undef,
      'Pod::Parser'           => undef,
      'Pod::Perldoc'          => undef,
      'Pod::Perldoc::BaseTo'  => undef,
      'Pod::Perldoc::GetOptsOO'=> undef,
      'Pod::Perldoc::ToANSI'  => undef,
      'Pod::Perldoc::ToChecker'=> undef,
      'Pod::Perldoc::ToMan'   => undef,
      'Pod::Perldoc::ToNroff' => undef,
      'Pod::Perldoc::ToPod'   => undef,
      'Pod::Perldoc::ToRtf'   => undef,
      'Pod::Perldoc::ToTerm'  => undef,
      'Pod::Perldoc::ToText'  => undef,
      'Pod::Perldoc::ToTk'    => undef,
      'Pod::Perldoc::ToXml'   => undef,
      'Pod::PlainText'        => undef,
      'Pod::Select'           => undef,
      'Pod::Simple'           => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::BlackBox' => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Checker'  => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Debug'    => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::DumpAsText'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::DumpAsXML'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::HTML'     => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::HTMLBatch'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::HTMLLegacy'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::LinkSection'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Methody'  => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Progress' => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParser'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserEndToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserStartToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserTextToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::RTF'      => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Search'   => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::SimpleTree'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Text'     => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TextContent'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TiedOutFH'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Transcode'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TranscodeDumb'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TranscodeSmart'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::XHTML'    => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::XMLOutStream'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Text'             => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Text::Color'      => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Text::Overstrike' => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Text::Termcap'    => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Usage'            => undef,
      'Scalar::Util'          => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'Socket'                => undef,
      'Sub::Util'             => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'Sys::Syslog'           => undef,
      'Sys::Syslog::Win32'    => undef,
      'TAP::Base'             => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Base'  => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Color' => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Console'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Console::ParallelSession'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Console::Session'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::File'  => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::File::Session'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Session'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Harness'          => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Harness::Env'     => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Object'           => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser'           => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Aggregator'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Grammar'  => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator' => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator::Array'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator::Process'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator::Stream'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::IteratorFactory'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Multiplexer'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result'   => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Bailout'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Comment'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Plan'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Pragma'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Test'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Unknown'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Version'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::YAML'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::ResultFactory'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Scheduler'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Scheduler::Job'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Scheduler::Spinner'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Source'   => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::Executable'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::File'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::Handle'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::Perl'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::RawTAP'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::YAMLish::Reader'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::YAMLish::Writer'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'Term::ANSIColor'       => 'https://rt.cpan.org/Dist/Display.html?Name=Term-ANSIColor',
      'Term::Cap'             => undef,
      'Test2'                 => 'http://github.com/Test-More/test-more/issues',
      'Test2::API'            => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Breakage'  => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Context'   => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Instance'  => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Stack'     => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event'          => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Bail'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Diag'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Encoding'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Exception'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Fail'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Generic' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Note'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Ok'      => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Pass'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Plan'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Skip'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Subtest' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::TAP::Version'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Waiting' => 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet'     => 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::About'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Amnesty'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Assert'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Control'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Error'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Info'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Meta'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Parent'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Plan'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::EventFacet::Trace'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Formatter'      => 'http://github.com/Test-More/test-more/issues',
      'Test2::Formatter::TAP' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub'            => 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub::Interceptor'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub::Interceptor::Terminator'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub::Subtest'   => 'http://github.com/Test-More/test-more/issues',
      'Test2::IPC'            => 'http://github.com/Test-More/test-more/issues',
      'Test2::IPC::Driver'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::IPC::Driver::Files'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Tools::Tiny'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Util'           => 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::ExternalMeta'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::Facets2Legacy'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::HashBase' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::Trace'    => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder'         => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Formatter'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::IO::Scalar'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Module' => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Tester' => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Tester::Color'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::TodoDiag'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Harness'         => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'Test::More'            => 'http://github.com/Test-More/test-more/issues',
      'Test::Simple'          => 'http://github.com/Test-More/test-more/issues',
      'Test::Tester'          => 'http://github.com/Test-More/test-more/issues',
      'Test::Tester::Capture' => 'http://github.com/Test-More/test-more/issues',
      'Test::Tester::CaptureRunner'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Tester::Delegate'=> 'http://github.com/Test-More/test-more/issues',
      'Test::use::ok'         => 'http://github.com/Test-More/test-more/issues',
      'Text::Balanced'        => undef,
      'Text::ParseWords'      => undef,
      'Text::Tabs'            => undef,
      'Text::Wrap'            => undef,
      'Tie::RefHash'          => undef,
      'Time::Local'           => 'https://github.com/houseabsolute/Time-Local/issues',
      'Time::Piece'           => undef,
      'Time::Seconds'         => undef,
      'Unicode::Collate'      => undef,
      'Unicode::Collate::CJK::Big5'=> undef,
      'Unicode::Collate::CJK::GB2312'=> undef,
      'Unicode::Collate::CJK::JISX0208'=> undef,
      'Unicode::Collate::CJK::Korean'=> undef,
      'Unicode::Collate::CJK::Pinyin'=> undef,
      'Unicode::Collate::CJK::Stroke'=> undef,
      'Unicode::Collate::CJK::Zhuyin'=> undef,
      'Unicode::Collate::Locale'=> undef,
      'Win32'                 => undef,
      'Win32API::File'        => undef,
      'Win32API::File::inc::ExtUtils::Myconst2perl'=> undef,
      'autodie'               => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::Scope::Guard' => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::Scope::GuardStack'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::Util'         => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::exception'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::exception::system'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::hints'        => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::skip'         => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'bigint'                => undef,
      'bignum'                => undef,
      'bigrat'                => undef,
      'encoding'              => undef,
      'experimental'          => 'http://rt.cpan.org/Public/Dist/Display.html?Name=experimental',
      'ok'                    => 'http://github.com/Test-More/test-more/issues',
      'parent'                => undef,
      'perlfaq'               => 'https://github.com/perl-doc-cats/perlfaq/issues',
      'version'               => 'https://rt.cpan.org/Public/Dist/Display.html?Name=version',
      'version::regex'        => 'https://rt.cpan.org/Public/Dist/Display.html?Name=version',
  );
  
  # Create aliases with trailing zeros for $] use
  
  $released{'5.000'} = $released{5};
  $version{'5.000'} = $version{5};
  
  _create_aliases(\%delta);
  _create_aliases(\%released);
  _create_aliases(\%version);
  _create_aliases(\%deprecated);
  
  sub _create_aliases {
      my ($hash) = @_;
  
      for my $version (keys %$hash) {
          next unless $version >= 5.006;
  
          my $padded = sprintf "%0.6f", $version;
  
          # If the version in string form isn't the same as the numeric version,
          # alias it.
          if ($padded ne $version && $version == $padded) {
              $hash->{$padded} = $hash->{$version};
          }
      }
  }
  
  1;
  __END__
MODULE_CORELIST

$fatpacked{"Module/CoreList/TieHashDelta.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_CORELIST_TIEHASHDELTA';
  # For internal Module::CoreList use only.
  package Module::CoreList::TieHashDelta;
  use strict;
  our $VERSION = '5.20180120';
  
  sub TIEHASH {
      my ($class, $changed, $removed, $parent) = @_;
  
      return bless {
          changed => $changed,
          removed => $removed,
          parent => $parent,
          keys_inflated => 0,
      }, $class;
  }
  
  sub FETCH {
      my ($self, $key) = @_;
  
      if (exists $self->{changed}{$key}) {
          return $self->{changed}{$key};
      } elsif (exists $self->{removed}{$key}) {
          return undef;
      } elsif (defined $self->{parent}) {
          return $self->{parent}{$key};
      }
      return undef;
  }
  
  sub EXISTS {
      my ($self, $key) = @_;
  
      restart:
      if (exists $self->{changed}{$key}) {
          return 1;
      } elsif (exists $self->{removed}{$key}) {
          return '';
      } elsif (defined $self->{parent}) {
          $self = tied %{$self->{parent}}; #avoid extreme magic/tie recursion
          goto restart;
      }
      return '';
  }
  
  sub FIRSTKEY {
      my ($self) = @_;
  
      if (not $self->{keys_inflated}) {
          # exceeds the warning limit of 100 calls since 5.23.2
          no warnings 'recursion';
  
          # This inflates the whole set of hashes... Somewhat expensive, but saves
          # many tied hash calls later.
          my @parent_keys;
          if (defined $self->{parent}) {
              @parent_keys = keys %{$self->{parent}};
          }
  
          @parent_keys = grep !exists $self->{removed}{$_}, @parent_keys;
          for my $key (@parent_keys) {
              next if exists $self->{changed}->{$key};
              $self->{changed}{$key} = $self->{parent}{$key};
          }
  
          $self->{keys_inflated} = 1;
      }
  
      keys %{$self->{changed}}; # reset each
      $self->NEXTKEY;
  }
  
  sub NEXTKEY {
      my ($self) = @_;
      each %{$self->{changed}};
  }
  
  1;
MODULE_CORELIST_TIEHASHDELTA

$fatpacked{"Module/CoreList/Utils.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_CORELIST_UTILS';
  package Module::CoreList::Utils;
  
  use strict;
  use warnings;
  use Module::CoreList;
  
  our $VERSION = '5.20180120';
  our %utilities;
  
  sub utilities {
      my $perl = shift;
      $perl = shift if eval { $perl->isa(__PACKAGE__) };
      return unless $perl or exists $utilities{$perl};
      return sort keys %{ $utilities{$perl} };
  }
  
  sub _released_order {   # Sort helper, to make '?' sort after everything else
      (substr($Module::CoreList::released{$a}, 0, 1) eq "?")
      ? ((substr($Module::CoreList::released{$b}, 0, 1) eq "?")
          ? 0
          : 1)
      : ((substr($Module::CoreList::released{$b}, 0, 1) eq "?")
          ? -1
          : $Module::CoreList::released{$a} cmp $Module::CoreList::released{$b} )
  }
  
  sub first_release_raw {
      my $util = shift;
      $util = shift if eval { $util->isa(__PACKAGE__) };
        #and scalar @_ and $_[0] =~ m#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z#;
      my $version = shift;
  
      my @perls = $version
          ? grep { exists $utilities{$_}{ $util } &&
                          $utilities{$_}{ $util } ge $version } keys %utilities
          : grep { exists $utilities{$_}{ $util }             } keys %utilities;
  
      return grep { exists $Module::CoreList::released{$_} } @perls;
  }
  
  sub first_release_by_date {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort _released_order @perls)[0];
  }
  
  sub first_release {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort { $a cmp $b } @perls)[0];
  }
  
  sub removed_from {
    my @perls = &removed_raw;
    return shift @perls;
  }
  
  sub removed_from_by_date {
    my @perls = sort _released_order &removed_raw;
    return shift @perls;
  }
  
  sub removed_raw {
    my $util = shift;
    $util = shift if eval { $util->isa(__PACKAGE__) };
    return unless my @perls = sort { $a cmp $b } first_release_raw($util);
    @perls = grep { exists $Module::CoreList::released{$_} } @perls;
    my $last = pop @perls;
    my @removed = grep { $_ > $last } sort { $a cmp $b } keys %utilities;
    return @removed;
  }
  
  my %delta = (
      5 => {
          changed => {
              'a2p'                   => '1',
              'c2ph'                  => '1',
              'cppstdin'              => '1',
              'find2perl'             => '1',
              'pstruct'               => '1',
              's2p'                   => '1',
          },
          removed => {
          }
      },
  
      5.001 => {
          delta_from => 5,
          changed => {
              'h2xs'                  => '1',
          },
          removed => {
          }
      },
  
      5.002 => {
          delta_from => 5.001,
          changed => {
              'h2ph'                  => '1',
              'perlbug'               => '1',
              'perldoc'               => '1',
              'pod2html'              => '1',
              'pod2latex'             => '1',
              'pod2man'               => '1',
              'pod2text'              => '1',
          },
          removed => {
          }
      },
  
      5.00307 => {
          delta_from => 5.002,
          changed => {
              'pl2pm'                 => '1',
          },
          removed => {
             'cppstdin'              => 1,
             'pstruct'               => 1,
          }
      },
  
      5.004 => {
          delta_from => 5.00307,
          changed => {
              'splain'                => '1',
          },
          removed => {
          }
      },
  
      5.005 => {
          delta_from => 5.00405,
          changed => {
              'perlcc'                => '1',
          },
          removed => {
          }
      },
  
      5.00503 => {
          delta_from => 5.005,
          changed => {
          },
          removed => {
          }
      },
  
      5.00405 => {
          delta_from => 5.004,
          changed => {
          },
          removed => {
          }
      },
  
      5.006 => {
          delta_from => 5.00504,
          changed => {
              'dprofpp'               => '1',
              'pod2usage'             => '1',
              'podchecker'            => '1',
              'podselect'             => '1',
              'pstruct'               => '1',
          },
          removed => {
          }
      },
  
      5.006001 => {
          delta_from => 5.006,
          changed => {
          },
          removed => {
          }
      },
  
      5.007003 => {
          delta_from => 5.006002,
          changed => {
              'libnetcfg'             => '1',
              'perlivp'               => '1',
              'psed'                  => '1',
              'xsubpp'                => '1',
          },
          removed => {
          }
      },
  
      5.008 => {
          delta_from => 5.007003,
          changed => {
              'enc2xs'                => '1',
              'piconv'                => '1',
          },
          removed => {
          }
      },
  
      5.008001 => {
          delta_from => 5.008,
          changed => {
              'cpan'                  => '1',
          },
          removed => {
          }
      },
  
      5.009 => {
          delta_from => 5.008009,
          changed => {
          },
          removed => {
             'corelist'              => 1,
             'instmodsh'             => 1,
             'prove'                 => 1,
          }
      },
  
      5.008002 => {
          delta_from => 5.008001,
          changed => {
          },
          removed => {
          }
      },
  
      5.006002 => {
          delta_from => 5.006001,
          changed => {
          },
          removed => {
          }
      },
  
      5.008003 => {
          delta_from => 5.008002,
          changed => {
              'instmodsh'             => '1',
              'prove'                 => '1',
          },
          removed => {
          }
      },
  
      5.00504 => {
          delta_from => 5.00503,
          changed => {
          },
          removed => {
          }
      },
  
      5.009001 => {
          delta_from => 5.009,
          changed => {
              'instmodsh'             => '1',
              'prove'                 => '1',
          },
          removed => {
          }
      },
  
      5.008004 => {
          delta_from => 5.008003,
          changed => {
          },
          removed => {
          }
      },
  
      5.008005 => {
          delta_from => 5.008004,
          changed => {
          },
          removed => {
          }
      },
  
      5.008006 => {
          delta_from => 5.008005,
          changed => {
          },
          removed => {
          }
      },
  
      5.009002 => {
          delta_from => 5.009001,
          changed => {
              'corelist'              => '1',
          },
          removed => {
          }
      },
  
      5.008007 => {
          delta_from => 5.008006,
          changed => {
          },
          removed => {
          }
      },
  
      5.009003 => {
          delta_from => 5.009002,
          changed => {
              'ptar'                  => '1',
              'ptardiff'              => '1',
              'shasum'                => '1',
          },
          removed => {
          }
      },
  
      5.008008 => {
          delta_from => 5.008007,
          changed => {
          },
          removed => {
          }
      },
  
      5.009004 => {
          delta_from => 5.009003,
          changed => {
              'config_data'           => '1',
          },
          removed => {
          }
      },
  
      5.009005 => {
          delta_from => 5.009004,
          changed => {
              'cpan2dist'             => '1',
              'cpanp'                 => '1',
              'cpanp-run-perl'        => '1',
          },
          removed => {
             'perlcc'                => 1,
          }
      },
  
      5.010000 => {
          delta_from => 5.009005,
          changed => {
          },
          removed => {
          }
      },
  
      5.008009 => {
          delta_from => 5.008008,
          changed => {
              'corelist'              => '1',
          },
          removed => {
          }
      },
  
      5.010001 => {
          delta_from => 5.010000,
          changed => {
          },
          removed => {
          }
      },
  
      5.011 => {
          delta_from => 5.010001,
          changed => {
          },
          removed => {
          }
      },
  
      5.011001 => {
          delta_from => 5.011,
          changed => {
          },
          removed => {
          }
      },
  
      5.011002 => {
          delta_from => 5.011001,
          changed => {
              'perlthanks'            => '1',
          },
          removed => {
          }
      },
  
      5.011003 => {
          delta_from => 5.011002,
          changed => {
          },
          removed => {
          }
      },
  
      5.011004 => {
          delta_from => 5.011003,
          changed => {
          },
          removed => {
          }
      },
  
      5.011005 => {
          delta_from => 5.011004,
          changed => {
          },
          removed => {
          }
      },
  
      5.012 => {
          delta_from => 5.011005,
          changed => {
          },
          removed => {
          }
      },
  
      5.013 => {
          delta_from => 5.012005,
          changed => {
          },
          removed => {
          }
      },
  
      5.012001 => {
          delta_from => 5.012,
          changed => {
          },
          removed => {
          }
      },
  
      5.013001 => {
          delta_from => 5.013,
          changed => {
          },
          removed => {
          }
      },
  
      5.013002 => {
          delta_from => 5.013001,
          changed => {
          },
          removed => {
          }
      },
  
      5.013003 => {
          delta_from => 5.013002,
          changed => {
          },
          removed => {
          }
      },
  
      5.013004 => {
          delta_from => 5.013003,
          changed => {
          },
          removed => {
          }
      },
  
      5.012002 => {
          delta_from => 5.012001,
          changed => {
          },
          removed => {
          }
      },
  
      5.013005 => {
          delta_from => 5.013004,
          changed => {
          },
          removed => {
          }
      },
  
      5.013006 => {
          delta_from => 5.013005,
          changed => {
          },
          removed => {
          }
      },
  
      5.013007 => {
          delta_from => 5.013006,
          changed => {
              'ptargrep'              => '1',
          },
          removed => {
          }
      },
  
      5.013008 => {
          delta_from => 5.013007,
          changed => {
          },
          removed => {
          }
      },
  
      5.013009 => {
          delta_from => 5.013008,
          changed => {
              'json_pp'               => '1',
          },
          removed => {
          }
      },
  
      5.012003 => {
          delta_from => 5.012002,
          changed => {
          },
          removed => {
          }
      },
  
      5.013010 => {
          delta_from => 5.013009,
          changed => {
          },
          removed => {
          }
      },
  
      5.013011 => {
          delta_from => 5.013010,
          changed => {
          },
          removed => {
          }
      },
  
      5.014 => {
          delta_from => 5.013011,
          changed => {
          },
          removed => {
          }
      },
  
      5.014001 => {
          delta_from => 5.014,
          changed => {
          },
          removed => {
          }
      },
  
      5.015 => {
          delta_from => 5.014004,
          changed => {
          },
          removed => {
             'dprofpp'               => 1,
          }
      },
  
      5.012004 => {
          delta_from => 5.012003,
          changed => {
          },
          removed => {
          }
      },
  
      5.015001 => {
          delta_from => 5.015,
          changed => {
          },
          removed => {
          }
      },
  
      5.015002 => {
          delta_from => 5.015001,
          changed => {
          },
          removed => {
          }
      },
  
      5.015003 => {
          delta_from => 5.015002,
          changed => {
          },
          removed => {
          }
      },
  
      5.014002 => {
          delta_from => 5.014001,
          changed => {
          },
          removed => {
          }
      },
  
      5.015004 => {
          delta_from => 5.015003,
          changed => {
          },
          removed => {
          }
      },
  
      5.015005 => {
          delta_from => 5.015004,
          changed => {
          },
          removed => {
          }
      },
  
      5.015006 => {
          delta_from => 5.015005,
          changed => {
              'zipdetails'            => '1',
          },
          removed => {
          }
      },
  
      5.015007 => {
          delta_from => 5.015006,
          changed => {
          },
          removed => {
          }
      },
  
      5.015008 => {
          delta_from => 5.015007,
          changed => {
          },
          removed => {
          }
      },
  
      5.015009 => {
          delta_from => 5.015008,
          changed => {
          },
          removed => {
          }
      },
  
      5.016 => {
          delta_from => 5.015009,
          changed => {
          },
          removed => {
          }
      },
  
      5.017 => {
          delta_from => 5.016003,
          changed => {
          },
          removed => {
          }
      },
  
      5.017001 => {
          delta_from => 5.017,
          changed => {
          },
          removed => {
          }
      },
  
      5.017002 => {
          delta_from => 5.017001,
          changed => {
          },
          removed => {
          }
      },
  
      5.016001 => {
          delta_from => 5.016,
          changed => {
          },
          removed => {
          }
      },
  
      5.017003 => {
          delta_from => 5.017002,
          changed => {
          },
          removed => {
          }
      },
  
      5.017004 => {
          delta_from => 5.017003,
          changed => {
          },
          removed => {
          }
      },
  
      5.014003 => {
          delta_from => 5.014002,
          changed => {
          },
          removed => {
          }
      },
  
      5.017005 => {
          delta_from => 5.017004,
          changed => {
          },
          removed => {
          }
      },
  
      5.016002 => {
          delta_from => 5.016001,
          changed => {
          },
          removed => {
          }
      },
  
      5.012005 => {
          delta_from => 5.012004,
          changed => {
          },
          removed => {
          }
      },
  
      5.017006 => {
          delta_from => 5.017005,
          changed => {
          },
          removed => {
          }
      },
  
      5.017007 => {
          delta_from => 5.017006,
          changed => {
          },
          removed => {
          }
      },
  
      5.017008 => {
          delta_from => 5.017007,
          changed => {
          },
          removed => {
          }
      },
  
      5.017009 => {
          delta_from => 5.017008,
          changed => {
          },
          removed => {
          }
      },
  
      5.014004 => {
          delta_from => 5.014003,
          changed => {
          },
          removed => {
          }
      },
  
      5.016003 => {
          delta_from => 5.016002,
          changed => {
          },
          removed => {
          }
      },
  
      5.017010 => {
          delta_from => 5.017009,
          changed => {
          },
          removed => {
          }
      },
  
      5.017011 => {
          delta_from => 5.017010,
          changed => {
          },
          removed => {
          }
      },
      5.018000 => {
          delta_from => 5.017011,
          changed => {
          },
          removed => {
          }
      },
      5.018001 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
          }
      },
      5.018002 => {
          delta_from => 5.018001,
          changed => {
          },
          removed => {
          }
      },
      5.018003 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
          }
      },
      5.018004 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
          }
      },
      5.019000 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
              'cpan2dist'             => '1',
              'cpanp'                 => '1',
              'cpanp-run-perl'        => '1',
              'pod2latex'             => '1',
          }
      },
      5.019001 => {
          delta_from => 5.019000,
          changed => {
          },
          removed => {
          }
      },
      5.019002 => {
          delta_from => 5.019001,
          changed => {
          },
          removed => {
          }
      },
      5.019003 => {
          delta_from => 5.019002,
          changed => {
          },
          removed => {
          }
      },
      5.019004 => {
          delta_from => 5.019003,
          changed => {
          },
          removed => {
          }
      },
      5.019005 => {
          delta_from => 5.019004,
          changed => {
          },
          removed => {
          }
      },
      5.019006 => {
          delta_from => 5.019005,
          changed => {
          },
          removed => {
          }
      },
      5.019007 => {
          delta_from => 5.019006,
          changed => {
          },
          removed => {
          }
      },
      5.019008 => {
          delta_from => 5.019007,
          changed => {
          },
          removed => {
          }
      },
      5.019009 => {
          delta_from => 5.019008,
          changed => {
          },
          removed => {
          }
      },
      5.019010 => {
          delta_from => 5.019009,
          changed => {
          },
          removed => {
          }
      },
      5.019011 => {
          delta_from => 5.019010,
          changed => {
          },
          removed => {
          }
      },
      5.020000 => {
          delta_from => 5.019011,
          changed => {
          },
          removed => {
          }
      },
      5.021000 => {
          delta_from => 5.020000,
          changed => {
          },
          removed => {
          }
      },
      5.021001 => {
          delta_from => 5.021000,
          changed => {
          },
          removed => {
              'a2p'                   => 1,
              'config_data'           => 1,
              'find2perl'             => 1,
              'psed'                  => 1,
              's2p'                   => 1,
          }
      },
      5.021002 => {
          delta_from => 5.021001,
          changed => {
          },
          removed => {
          }
      },
      5.021003 => {
          delta_from => 5.021002,
          changed => {
          },
          removed => {
          }
      },
      5.020001 => {
          delta_from => 5.02,
          changed => {
          },
          removed => {
          }
      },
      5.021004 => {
          delta_from => 5.021003,
          changed => {
          },
          removed => {
          }
      },
      5.021005 => {
          delta_from => 5.021004,
          changed => {
          },
          removed => {
          }
      },
      5.021006 => {
          delta_from => 5.021005,
          changed => {
          },
          removed => {
          }
      },
      5.021007 => {
          delta_from => 5.021006,
          changed => {
          },
          removed => {
          }
      },
      5.021008 => {
          delta_from => 5.021007,
          changed => {
          },
          removed => {
          }
      },
      5.020002 => {
          delta_from => 5.020001,
          changed => {
          },
          removed => {
          }
      },
      5.021009 => {
          delta_from => 5.021008,
          changed => {
              'encguess'              => '1',
          },
          removed => {
          }
      },
      5.021010 => {
          delta_from => 5.021009,
          changed => {
          },
          removed => {
          }
      },
      5.021011 => {
          delta_from => 5.02101,
          changed => {
          },
          removed => {
          }
      },
      5.022000 => {
          delta_from => 5.021011,
          changed => {
          },
          removed => {
          }
      },
      5.023000 => {
          delta_from => 5.022000,
          changed => {
          },
          removed => {
          }
      },
      5.023001 => {
          delta_from => 5.023,
          changed => {
          },
          removed => {
          }
      },
      5.023002 => {
          delta_from => 5.023001,
          changed => {
          },
          removed => {
          }
      },
      5.020003 => {
          delta_from => 5.020002,
          changed => {
          },
          removed => {
          }
      },
      5.023003 => {
          delta_from => 5.023002,
          changed => {
          },
          removed => {
          }
      },
      5.023004 => {
          delta_from => 5.023003,
          changed => {
          },
          removed => {
          }
      },
      5.023005 => {
          delta_from => 5.023004,
          changed => {
          },
          removed => {
          }
      },
      5.022001 => {
          delta_from => 5.022,
          changed => {
          },
          removed => {
          }
      },
      5.023006 => {
          delta_from => 5.023005,
          changed => {
          },
          removed => {
          }
      },
      5.023007 => {
          delta_from => 5.023006,
          changed => {
          },
          removed => {
          }
      },
      5.023008 => {
          delta_from => 5.023007,
          changed => {
          },
          removed => {
          }
      },
      5.023009 => {
          delta_from => 5.023008,
          changed => {
          },
          removed => {
          }
      },
      5.022002 => {
          delta_from => 5.022001,
          changed => {
          },
          removed => {
          }
      },
      5.024000 => {
          delta_from => 5.023009,
          changed => {
          },
          removed => {
          }
      },
      5.025000 => {
          delta_from => 5.024000,
          changed => {
          },
          removed => {
          }
      },
      5.025001 => {
          delta_from => 5.025000,
          changed => {
          },
          removed => {
          }
      },
      5.025002 => {
          delta_from => 5.025001,
          changed => {
          },
          removed => {
          }
      },
      5.025003 => {
          delta_from => 5.025002,
          changed => {
          },
          removed => {
          }
      },
      5.025004 => {
          delta_from => 5.025003,
          changed => {
          },
          removed => {
          }
      },
      5.025005 => {
          delta_from => 5.025004,
          changed => {
          },
          removed => {
          }
      },
      5.025006 => {
          delta_from => 5.025005,
          changed => {
          },
          removed => {
          }
      },
      5.025007 => {
          delta_from => 5.025006,
          changed => {
          },
          removed => {
          }
      },
      5.025008 => {
          delta_from => 5.025007,
          changed => {
          },
          removed => {
          }
      },
      5.022003 => {
          delta_from => 5.022002,
          changed => {
          },
          removed => {
          }
      },
      5.024001 => {
          delta_from => 5.024000,
          changed => {
          },
          removed => {
          }
      },
      5.025009 => {
          delta_from => 5.025008,
          changed => {
          },
          removed => {
              'c2ph'                  => 1,
              'pstruct'               => 1,
          }
      },
      5.025010 => {
          delta_from => 5.025009,
          changed => {
          },
          removed => {
          }
      },
      5.025011 => {
          delta_from => 5.025010,
          changed => {
          },
          removed => {
          }
      },
      5.025012 => {
          delta_from => 5.025011,
          changed => {
          },
          removed => {
          }
      },
      5.026000 => {
          delta_from => 5.025012,
          changed => {
          },
          removed => {
          }
      },
      5.027000 => {
          delta_from => 5.026000,
          changed => {
          },
          removed => {
          }
      },
      5.027001 => {
          delta_from => 5.027000,
          changed => {
          },
          removed => {
          }
      },
      5.022004 => {
          delta_from => 5.022003,
          changed => {
          },
          removed => {
          }
      },
      5.024002 => {
          delta_from => 5.024001,
          changed => {
          },
          removed => {
          }
      },
      5.027002 => {
          delta_from => 5.027001,
          changed => {
          },
          removed => {
          }
      },
      5.027003 => {
          delta_from => 5.027002,
          changed => {
          },
          removed => {
          }
      },
      5.027004 => {
          delta_from => 5.027003,
          changed => {
          },
          removed => {
          }
      },
      5.024003 => {
          delta_from => 5.024002,
          changed => {
          },
          removed => {
          }
      },
      5.026001 => {
          delta_from => 5.026000,
          changed => {
          },
          removed => {
          }
      },
      5.027005 => {
          delta_from => 5.027004,
          changed => {
          },
          removed => {
          }
      },
      5.027006 => {
          delta_from => 5.027005,
          changed => {
          },
          removed => {
          }
      },
      5.027007 => {
          delta_from => 5.027006,
          changed => {
          },
          removed => {
          }
      },
      5.027008 => {
          delta_from => 5.027007,
          changed => {
          },
          removed => {
          }
      },
  );
  
  %utilities = Module::CoreList::_undelta(\%delta);
  
  # Create aliases with trailing zeros for $] use
  
  $utilities{'5.000'} = $utilities{5};
  
  _create_aliases(\%utilities);
  
  sub _create_aliases {
      my ($hash) = @_;
  
      for my $version (keys %$hash) {
          next unless $version >= 5.010;
  
          my $padded = sprintf "%0.6f", $version;
  
          # If the version in string form isn't the same as the numeric version,
          # alias it.
          if ($padded ne $version && $version == $padded) {
              $hash->{$padded} = $hash->{$version};
          }
      }
  }
  
  'foo';
  
  =pod
  
  =head1 NAME
  
  Module::CoreList::Utils - what utilities shipped with versions of perl
  
  =head1 SYNOPSIS
  
   use Module::CoreList::Utils;
  
   print $Module::CoreList::Utils::utilities{5.009003}{ptar}; # prints 1
  
   print Module::CoreList::Utils->first_release('corelist');
   # prints 5.008009
  
   print Module::CoreList::Utils->first_release_by_date('corelist');
   # prints 5.009002
  
  =head1 DESCRIPTION
  
  Module::CoreList::Utils provides information on which core and dual-life utilities shipped
  with each version of L<perl>.
  
  It provides a number of mechanisms for querying this information.
  
  There is a functional programming API available for programmers to query
  information.
  
  Programmers may also query the contained hash structure to find relevant
  information.
  
  =head1 FUNCTIONS API
  
  These are the functions that are available, they may either be called as functions or class methods:
  
    Module::CoreList::Utils::first_release('corelist'); # as a function
  
    Module::CoreList::Utils->first_release('corelist'); # class method
  
  =over
  
  =item C<utilities>
  
  Requires a perl version as an argument, returns a list of utilities that shipped with
  that version of perl, or undef/empty list if that perl doesn't exist.
  
  =item C<first_release( UTILITY )>
  
  Requires a UTILITY name as an argument, returns the perl version when that utility first
  appeared in core as ordered by perl version number or undef ( in scalar context )
  or an empty list ( in list context ) if that utility is not in core.
  
  =item C<first_release_by_date( UTILITY )>
  
  Requires a UTILITY name as an argument, returns the perl version when that utility first
  appeared in core as ordered by release date or undef ( in scalar context )
  or an empty list ( in list context ) if that utility is not in core.
  
  =item C<removed_from( UTILITY )>
  
  Takes a UTILITY name as an argument, returns the first perl version where that utility
  was removed from core. Returns undef if the given utility was never in core or remains
  in core.
  
  =item C<removed_from_by_date( UTILITY )>
  
  Takes a UTILITY name as an argument, returns the first perl version by release date where that
  utility was removed from core. Returns undef if the given utility was never in core or remains
  in core.
  
  =back
  
  =head1 DATA STRUCTURES
  
  These are the hash data structures that are available:
  
  =over
  
  =item C<%Module::CoreList::Utils::utilities>
  
  A hash of hashes that is keyed on perl version as indicated
  in $].  The second level hash is utility / defined pairs.
  
  =back
  
  =head1 AUTHOR
  
  Chris C<BinGOs> Williams <chris@bingosnet.co.uk>
  
  Currently maintained by the perl 5 porters E<lt>perl5-porters@perl.orgE<gt>.
  
  This module is the result of archaeology undertaken during QA Hackathon
  in Lancaster, April 2013.
  
  =head1 LICENSE
  
  Copyright (C) 2013 Chris Williams.  All Rights Reserved.
  
  This module is free software; you can redistribute it and/or modify it
  under the same terms as Perl itself.
  
  =head1 SEE ALSO
  
  L<corelist>, L<Module::CoreList>, L<perl>, L<http://perlpunks.de/corelist>
  
  =cut
MODULE_CORELIST_UTILS

$fatpacked{"Module/Metadata.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_METADATA';
  # -*- mode: cperl; tab-width: 8; indent-tabs-mode: nil; basic-offset: 2 -*-
  # vim:ts=8:sw=2:et:sta:sts=2:tw=78
  package Module::Metadata; # git description: v1.000032-7-gb4e8a3f
  # ABSTRACT: Gather package and POD information from perl module files
  
  # Adapted from Perl-licensed code originally distributed with
  # Module-Build by Ken Williams
  
  # This module provides routines to gather information about
  # perl modules (assuming this may be expanded in the distant
  # parrot future to look at other types of modules).
  
  sub __clean_eval { eval $_[0] }
  use strict;
  use warnings;
  
  our $VERSION = '1.000033';
  
  use Carp qw/croak/;
  use File::Spec;
  BEGIN {
         # Try really hard to not depend ony any DynaLoaded module, such as IO::File or Fcntl
         eval {
                 require Fcntl; Fcntl->import('SEEK_SET'); 1;
         } or *SEEK_SET = sub { 0 }
  }
  use version 0.87;
  BEGIN {
    if ($INC{'Log/Contextual.pm'}) {
      require "Log/Contextual/WarnLogger.pm"; # Hide from AutoPrereqs
      Log::Contextual->import('log_info',
        '-default_logger' => Log::Contextual::WarnLogger->new({ env_prefix => 'MODULE_METADATA', }),
      );
    }
    else {
      *log_info = sub (&) { warn $_[0]->() };
    }
  }
  use File::Find qw(find);
  
  my $V_NUM_REGEXP = qr{v?[0-9._]+};  # crudely, a v-string or decimal
  
  my $PKG_FIRST_WORD_REGEXP = qr{ # the FIRST word in a package name
    [a-zA-Z_]                     # the first word CANNOT start with a digit
      (?:
        [\w']?                    # can contain letters, digits, _, or ticks
        \w                        # But, NO multi-ticks or trailing ticks
      )*
  }x;
  
  my $PKG_ADDL_WORD_REGEXP = qr{ # the 2nd+ word in a package name
    \w                           # the 2nd+ word CAN start with digits
      (?:
        [\w']?                   # and can contain letters or ticks
        \w                       # But, NO multi-ticks or trailing ticks
      )*
  }x;
  
  my $PKG_NAME_REGEXP = qr{ # match a package name
    (?: :: )?               # a pkg name can start with arisdottle
    $PKG_FIRST_WORD_REGEXP  # a package word
    (?:
      (?: :: )+             ### arisdottle (allow one or many times)
      $PKG_ADDL_WORD_REGEXP ### a package word
    )*                      # ^ zero, one or many times
    (?:
      ::                    # allow trailing arisdottle
    )?
  }x;
  
  my $PKG_REGEXP  = qr{   # match a package declaration
    ^[\s\{;]*             # intro chars on a line
    package               # the word 'package'
    \s+                   # whitespace
    ($PKG_NAME_REGEXP)    # a package name
    \s*                   # optional whitespace
    ($V_NUM_REGEXP)?        # optional version number
    \s*                   # optional whitesapce
    [;\{]                 # semicolon line terminator or block start (since 5.16)
  }x;
  
  my $VARNAME_REGEXP = qr{ # match fully-qualified VERSION name
    ([\$*])         # sigil - $ or *
    (
      (             # optional leading package name
        (?:::|\')?  # possibly starting like just :: (a la $::VERSION)
        (?:\w+(?:::|\'))*  # Foo::Bar:: ...
      )?
      VERSION
    )\b
  }x;
  
  my $VERS_REGEXP = qr{ # match a VERSION definition
    (?:
      \(\s*$VARNAME_REGEXP\s*\) # with parens
    |
      $VARNAME_REGEXP           # without parens
    )
    \s*
    =[^=~>]  # = but not ==, nor =~, nor =>
  }x;
  
  sub new_from_file {
    my $class    = shift;
    my $filename = File::Spec->rel2abs( shift );
  
    return undef unless defined( $filename ) && -f $filename;
    return $class->_init(undef, $filename, @_);
  }
  
  sub new_from_handle {
    my $class    = shift;
    my $handle   = shift;
    my $filename = shift;
    return undef unless defined($handle) && defined($filename);
    $filename = File::Spec->rel2abs( $filename );
  
    return $class->_init(undef, $filename, @_, handle => $handle);
  
  }
  
  
  sub new_from_module {
    my $class   = shift;
    my $module  = shift;
    my %props   = @_;
  
    $props{inc} ||= \@INC;
    my $filename = $class->find_module_by_name( $module, $props{inc} );
    return undef unless defined( $filename ) && -f $filename;
    return $class->_init($module, $filename, %props);
  }
  
  {
  
    my $compare_versions = sub {
      my ($v1, $op, $v2) = @_;
      $v1 = version->new($v1)
        unless UNIVERSAL::isa($v1,'version');
  
      my $eval_str = "\$v1 $op \$v2";
      my $result   = eval $eval_str;
      log_info { "error comparing versions: '$eval_str' $@" } if $@;
  
      return $result;
    };
  
    my $normalize_version = sub {
      my ($version) = @_;
      if ( $version =~ /[=<>!,]/ ) { # logic, not just version
        # take as is without modification
      }
      elsif ( ref $version eq 'version' ) { # version objects
        $version = $version->is_qv ? $version->normal : $version->stringify;
      }
      elsif ( $version =~ /^[^v][^.]*\.[^.]+\./ ) { # no leading v, multiple dots
        # normalize string tuples without "v": "1.2.3" -> "v1.2.3"
        $version = "v$version";
      }
      else {
        # leave alone
      }
      return $version;
    };
  
    # separate out some of the conflict resolution logic
  
    my $resolve_module_versions = sub {
      my $packages = shift;
  
      my( $file, $version );
      my $err = '';
        foreach my $p ( @$packages ) {
          if ( defined( $p->{version} ) ) {
            if ( defined( $version ) ) {
              if ( $compare_versions->( $version, '!=', $p->{version} ) ) {
                $err .= "  $p->{file} ($p->{version})\n";
              }
              else {
                # same version declared multiple times, ignore
              }
            }
            else {
              $file    = $p->{file};
              $version = $p->{version};
            }
          }
        $file ||= $p->{file} if defined( $p->{file} );
      }
  
      if ( $err ) {
        $err = "  $file ($version)\n" . $err;
      }
  
      my %result = (
        file    => $file,
        version => $version,
        err     => $err
      );
  
      return \%result;
    };
  
    sub provides {
      my $class = shift;
  
      croak "provides() requires key/value pairs \n" if @_ % 2;
      my %args = @_;
  
      croak "provides() takes only one of 'dir' or 'files'\n"
        if $args{dir} && $args{files};
  
      croak "provides() requires a 'version' argument"
        unless defined $args{version};
  
      croak "provides() does not support version '$args{version}' metadata"
          unless grep { $args{version} eq $_ } qw/1.4 2/;
  
      $args{prefix} = 'lib' unless defined $args{prefix};
  
      my $p;
      if ( $args{dir} ) {
        $p = $class->package_versions_from_directory($args{dir});
      }
      else {
        croak "provides() requires 'files' to be an array reference\n"
          unless ref $args{files} eq 'ARRAY';
        $p = $class->package_versions_from_directory($args{files});
      }
  
      # Now, fix up files with prefix
      if ( length $args{prefix} ) { # check in case disabled with q{}
        $args{prefix} =~ s{/$}{};
        for my $v ( values %$p ) {
          $v->{file} = "$args{prefix}/$v->{file}";
        }
      }
  
      return $p
    }
  
    sub package_versions_from_directory {
      my ( $class, $dir, $files ) = @_;
  
      my @files;
  
      if ( $files ) {
        @files = @$files;
      }
      else {
        find( {
          wanted => sub {
            push @files, $_ if -f $_ && /\.pm$/;
          },
          no_chdir => 1,
        }, $dir );
      }
  
      # First, we enumerate all packages & versions,
      # separating into primary & alternative candidates
      my( %prime, %alt );
      foreach my $file (@files) {
        my $mapped_filename = File::Spec::Unix->abs2rel( $file, $dir );
        my @path = split( /\//, $mapped_filename );
        (my $prime_package = join( '::', @path )) =~ s/\.pm$//;
  
        my $pm_info = $class->new_from_file( $file );
  
        foreach my $package ( $pm_info->packages_inside ) {
          next if $package eq 'main';  # main can appear numerous times, ignore
          next if $package eq 'DB';    # special debugging package, ignore
          next if grep /^_/, split( /::/, $package ); # private package, ignore
  
          my $version = $pm_info->version( $package );
  
          $prime_package = $package if lc($prime_package) eq lc($package);
          if ( $package eq $prime_package ) {
            if ( exists( $prime{$package} ) ) {
              croak "Unexpected conflict in '$package'; multiple versions found.\n";
            }
            else {
              $mapped_filename = "$package.pm" if lc("$package.pm") eq lc($mapped_filename);
              $prime{$package}{file} = $mapped_filename;
              $prime{$package}{version} = $version if defined( $version );
            }
          }
          else {
            push( @{$alt{$package}}, {
                                      file    => $mapped_filename,
                                      version => $version,
                                     } );
          }
        }
      }
  
      # Then we iterate over all the packages found above, identifying conflicts
      # and selecting the "best" candidate for recording the file & version
      # for each package.
      foreach my $package ( keys( %alt ) ) {
        my $result = $resolve_module_versions->( $alt{$package} );
  
        if ( exists( $prime{$package} ) ) { # primary package selected
  
          if ( $result->{err} ) {
          # Use the selected primary package, but there are conflicting
          # errors among multiple alternative packages that need to be
          # reported
            log_info {
              "Found conflicting versions for package '$package'\n" .
              "  $prime{$package}{file} ($prime{$package}{version})\n" .
              $result->{err}
            };
  
          }
          elsif ( defined( $result->{version} ) ) {
          # There is a primary package selected, and exactly one
          # alternative package
  
          if ( exists( $prime{$package}{version} ) &&
               defined( $prime{$package}{version} ) ) {
            # Unless the version of the primary package agrees with the
            # version of the alternative package, report a conflict
          if ( $compare_versions->(
                   $prime{$package}{version}, '!=', $result->{version}
                 )
               ) {
  
              log_info {
                "Found conflicting versions for package '$package'\n" .
                "  $prime{$package}{file} ($prime{$package}{version})\n" .
                "  $result->{file} ($result->{version})\n"
              };
            }
  
          }
          else {
            # The prime package selected has no version so, we choose to
            # use any alternative package that does have a version
            $prime{$package}{file}    = $result->{file};
            $prime{$package}{version} = $result->{version};
          }
  
          }
          else {
          # no alt package found with a version, but we have a prime
          # package so we use it whether it has a version or not
          }
  
        }
        else { # No primary package was selected, use the best alternative
  
          if ( $result->{err} ) {
            log_info {
              "Found conflicting versions for package '$package'\n" .
              $result->{err}
            };
          }
  
          # Despite possible conflicting versions, we choose to record
          # something rather than nothing
          $prime{$package}{file}    = $result->{file};
          $prime{$package}{version} = $result->{version}
            if defined( $result->{version} );
        }
      }
  
      # Normalize versions.  Can't use exists() here because of bug in YAML::Node.
      # XXX "bug in YAML::Node" comment seems irrelevant -- dagolden, 2009-05-18
      for (grep defined $_->{version}, values %prime) {
        $_->{version} = $normalize_version->( $_->{version} );
      }
  
      return \%prime;
    }
  }
  
  
  sub _init {
    my $class    = shift;
    my $module   = shift;
    my $filename = shift;
    my %props = @_;
  
    my $handle = delete $props{handle};
    my( %valid_props, @valid_props );
    @valid_props = qw( collect_pod inc );
    @valid_props{@valid_props} = delete( @props{@valid_props} );
    warn "Unknown properties: @{[keys %props]}\n" if scalar( %props );
  
    my %data = (
      module       => $module,
      filename     => $filename,
      version      => undef,
      packages     => [],
      versions     => {},
      pod          => {},
      pod_headings => [],
      collect_pod  => 0,
  
      %valid_props,
    );
  
    my $self = bless(\%data, $class);
  
    if ( not $handle ) {
      my $filename = $self->{filename};
      open $handle, '<', $filename
        or croak( "Can't open '$filename': $!" );
  
      $self->_handle_bom($handle, $filename);
    }
    $self->_parse_fh($handle);
  
    @{$self->{packages}} = __uniq(@{$self->{packages}});
  
    unless($self->{module} and length($self->{module})) {
      # CAVEAT (possible TODO): .pmc files not treated the same as .pm
      if ($self->{filename} =~ /\.pm$/) {
        my ($v, $d, $f) = File::Spec->splitpath($self->{filename});
        $f =~ s/\..+$//;
        my @candidates = grep /(^|::)$f$/, @{$self->{packages}};
        $self->{module} = shift(@candidates); # this may be undef
      }
      else {
        # this seems like an atrocious heuristic, albeit marginally better than
        # what was here before. It should be rewritten entirely to be more like
        # "if it's not a .pm file, it's not require()able as a name, therefore
        # name() should be undef."
        if ((grep /main/, @{$self->{packages}})
            or (grep /main/, keys %{$self->{versions}})) {
          $self->{module} = 'main';
        }
        else {
          # TODO: this should maybe default to undef instead
          $self->{module} = $self->{packages}[0] || '';
        }
      }
    }
  
    $self->{version} = $self->{versions}{$self->{module}}
      if defined( $self->{module} );
  
    return $self;
  }
  
  # class method
  sub _do_find_module {
    my $class   = shift;
    my $module  = shift || croak 'find_module_by_name() requires a package name';
    my $dirs    = shift || \@INC;
  
    my $file = File::Spec->catfile(split( /::/, $module));
    foreach my $dir ( @$dirs ) {
      my $testfile = File::Spec->catfile($dir, $file);
      return [ File::Spec->rel2abs( $testfile ), $dir ]
        if -e $testfile and !-d _;  # For stuff like ExtUtils::xsubpp
      # CAVEAT (possible TODO): .pmc files are not discoverable here
      $testfile .= '.pm';
      return [ File::Spec->rel2abs( $testfile ), $dir ]
        if -e $testfile;
    }
    return;
  }
  
  # class method
  sub find_module_by_name {
    my $found = shift()->_do_find_module(@_) or return;
    return $found->[0];
  }
  
  # class method
  sub find_module_dir_by_name {
    my $found = shift()->_do_find_module(@_) or return;
    return $found->[1];
  }
  
  
  # given a line of perl code, attempt to parse it if it looks like a
  # $VERSION assignment, returning sigil, full name, & package name
  sub _parse_version_expression {
    my $self = shift;
    my $line = shift;
  
    my( $sigil, $variable_name, $package);
    if ( $line =~ /$VERS_REGEXP/o ) {
      ( $sigil, $variable_name, $package) = $2 ? ( $1, $2, $3 ) : ( $4, $5, $6 );
      if ( $package ) {
        $package = ($package eq '::') ? 'main' : $package;
        $package =~ s/::$//;
      }
    }
  
    return ( $sigil, $variable_name, $package );
  }
  
  # Look for a UTF-8/UTF-16BE/UTF-16LE BOM at the beginning of the stream.
  # If there's one, then skip it and set the :encoding layer appropriately.
  sub _handle_bom {
    my ($self, $fh, $filename) = @_;
  
    my $pos = tell $fh;
    return unless defined $pos;
  
    my $buf = ' ' x 2;
    my $count = read $fh, $buf, length $buf;
    return unless defined $count and $count >= 2;
  
    my $encoding;
    if ( $buf eq "\x{FE}\x{FF}" ) {
      $encoding = 'UTF-16BE';
    }
    elsif ( $buf eq "\x{FF}\x{FE}" ) {
      $encoding = 'UTF-16LE';
    }
    elsif ( $buf eq "\x{EF}\x{BB}" ) {
      $buf = ' ';
      $count = read $fh, $buf, length $buf;
      if ( defined $count and $count >= 1 and $buf eq "\x{BF}" ) {
        $encoding = 'UTF-8';
      }
    }
  
    if ( defined $encoding ) {
      if ( "$]" >= 5.008 ) {
        binmode( $fh, ":encoding($encoding)" );
      }
    }
    else {
      seek $fh, $pos, SEEK_SET
        or croak( sprintf "Can't reset position to the top of '$filename'" );
    }
  
    return $encoding;
  }
  
  sub _parse_fh {
    my ($self, $fh) = @_;
  
    my( $in_pod, $seen_end, $need_vers ) = ( 0, 0, 0 );
    my( @packages, %vers, %pod, @pod );
    my $package = 'main';
    my $pod_sect = '';
    my $pod_data = '';
    my $in_end = 0;
  
    while (defined( my $line = <$fh> )) {
      my $line_num = $.;
  
      chomp( $line );
  
      # From toke.c : any line that begins by "=X", where X is an alphabetic
      # character, introduces a POD segment.
      my $is_cut;
      if ( $line =~ /^=([a-zA-Z].*)/ ) {
        my $cmd = $1;
        # Then it goes back to Perl code for "=cutX" where X is a non-alphabetic
        # character (which includes the newline, but here we chomped it away).
        $is_cut = $cmd =~ /^cut(?:[^a-zA-Z]|$)/;
        $in_pod = !$is_cut;
      }
  
      if ( $in_pod ) {
  
        if ( $line =~ /^=head[1-4]\s+(.+)\s*$/ ) {
          push( @pod, $1 );
          if ( $self->{collect_pod} && length( $pod_data ) ) {
            $pod{$pod_sect} = $pod_data;
            $pod_data = '';
          }
          $pod_sect = $1;
        }
        elsif ( $self->{collect_pod} ) {
          $pod_data .= "$line\n";
        }
        next;
      }
      elsif ( $is_cut ) {
        if ( $self->{collect_pod} && length( $pod_data ) ) {
          $pod{$pod_sect} = $pod_data;
          $pod_data = '';
        }
        $pod_sect = '';
        next;
      }
  
      # Skip after __END__
      next if $in_end;
  
      # Skip comments in code
      next if $line =~ /^\s*#/;
  
      # Would be nice if we could also check $in_string or something too
      if ($line eq '__END__') {
        $in_end++;
        next;
      }
  
      last if $line eq '__DATA__';
  
      # parse $line to see if it's a $VERSION declaration
      my( $version_sigil, $version_fullname, $version_package ) =
        index($line, 'VERSION') >= 1
          ? $self->_parse_version_expression( $line )
          : ();
  
      if ( $line =~ /$PKG_REGEXP/o ) {
        $package = $1;
        my $version = $2;
        push( @packages, $package ) unless grep( $package eq $_, @packages );
        $need_vers = defined $version ? 0 : 1;
  
        if ( not exists $vers{$package} and defined $version ){
          # Upgrade to a version object.
          my $dwim_version = eval { _dwim_version($version) };
          croak "Version '$version' from $self->{filename} does not appear to be valid:\n$line\n\nThe fatal error was: $@\n"
            unless defined $dwim_version;  # "0" is OK!
          $vers{$package} = $dwim_version;
        }
      }
  
      # VERSION defined with full package spec, i.e. $Module::VERSION
      elsif ( $version_fullname && $version_package ) {
        # we do NOT save this package in found @packages
        $need_vers = 0 if $version_package eq $package;
  
        unless ( defined $vers{$version_package} && length $vers{$version_package} ) {
          $vers{$version_package} = $self->_evaluate_version_line( $version_sigil, $version_fullname, $line );
        }
      }
  
      # first non-comment line in undeclared package main is VERSION
      elsif ( $package eq 'main' && $version_fullname && !exists($vers{main}) ) {
        $need_vers = 0;
        my $v = $self->_evaluate_version_line( $version_sigil, $version_fullname, $line );
        $vers{$package} = $v;
        push( @packages, 'main' );
      }
  
      # first non-comment line in undeclared package defines package main
      elsif ( $package eq 'main' && !exists($vers{main}) && $line =~ /\w/ ) {
        $need_vers = 1;
        $vers{main} = '';
        push( @packages, 'main' );
      }
  
      # only keep if this is the first $VERSION seen
      elsif ( $version_fullname && $need_vers ) {
        $need_vers = 0;
        my $v = $self->_evaluate_version_line( $version_sigil, $version_fullname, $line );
  
        unless ( defined $vers{$package} && length $vers{$package} ) {
          $vers{$package} = $v;
        }
      }
    } # end loop over each line
  
    if ( $self->{collect_pod} && length($pod_data) ) {
      $pod{$pod_sect} = $pod_data;
    }
  
    $self->{versions} = \%vers;
    $self->{packages} = \@packages;
    $self->{pod} = \%pod;
    $self->{pod_headings} = \@pod;
  }
  
  sub __uniq (@)
  {
      my (%seen, $key);
      grep { not $seen{ $key = $_ }++ } @_;
  }
  
  {
  my $pn = 0;
  sub _evaluate_version_line {
    my $self = shift;
    my( $sigil, $variable_name, $line ) = @_;
  
    # We compile into a local sub because 'use version' would cause
    # compiletime/runtime issues with local()
    $pn++; # everybody gets their own package
    my $eval = qq{ my \$dummy = q#  Hide from _packages_inside()
      #; package Module::Metadata::_version::p${pn};
      use version;
      sub {
        local $sigil$variable_name;
        $line;
        return \$$variable_name if defined \$$variable_name;
        return \$Module::Metadata::_version::p${pn}::$variable_name;
      };
    };
  
    $eval = $1 if $eval =~ m{^(.+)}s;
  
    local $^W;
    # Try to get the $VERSION
    my $vsub = __clean_eval($eval);
    # some modules say $VERSION <equal sign> $Foo::Bar::VERSION, but Foo::Bar isn't
    # installed, so we need to hunt in ./lib for it
    if ( $@ =~ /Can't locate/ && -d 'lib' ) {
      local @INC = ('lib',@INC);
      $vsub = __clean_eval($eval);
    }
    warn "Error evaling version line '$eval' in $self->{filename}: $@\n"
      if $@;
  
    (ref($vsub) eq 'CODE') or
      croak "failed to build version sub for $self->{filename}";
  
    my $result = eval { $vsub->() };
    # FIXME: $eval is not the right thing to print here
    croak "Could not get version from $self->{filename} by executing:\n$eval\n\nThe fatal error was: $@\n"
      if $@;
  
    # Upgrade it into a version object
    my $version = eval { _dwim_version($result) };
  
    # FIXME: $eval is not the right thing to print here
    croak "Version '$result' from $self->{filename} does not appear to be valid:\n$eval\n\nThe fatal error was: $@\n"
      unless defined $version; # "0" is OK!
  
    return $version;
  }
  }
  
  # Try to DWIM when things fail the lax version test in obvious ways
  {
    my @version_prep = (
      # Best case, it just works
      sub { return shift },
  
      # If we still don't have a version, try stripping any
      # trailing junk that is prohibited by lax rules
      sub {
        my $v = shift;
        $v =~ s{([0-9])[a-z-].*$}{$1}i; # 1.23-alpha or 1.23b
        return $v;
      },
  
      # Activestate apparently creates custom versions like '1.23_45_01', which
      # cause version.pm to think it's an invalid alpha.  So check for that
      # and strip them
      sub {
        my $v = shift;
        my $num_dots = () = $v =~ m{(\.)}g;
        my $num_unders = () = $v =~ m{(_)}g;
        my $leading_v = substr($v,0,1) eq 'v';
        if ( ! $leading_v && $num_dots < 2 && $num_unders > 1 ) {
          $v =~ s{_}{}g;
          $num_unders = () = $v =~ m{(_)}g;
        }
        return $v;
      },
  
      # Worst case, try numifying it like we would have before version objects
      sub {
        my $v = shift;
        no warnings 'numeric';
        return 0 + $v;
      },
  
    );
  
    sub _dwim_version {
      my ($result) = shift;
  
      return $result if ref($result) eq 'version';
  
      my ($version, $error);
      for my $f (@version_prep) {
        $result = $f->($result);
        $version = eval { version->new($result) };
        $error ||= $@ if $@; # capture first failure
        last if defined $version;
      }
  
      croak $error unless defined $version;
  
      return $version;
    }
  }
  
  ############################################################
  
  # accessors
  sub name            { $_[0]->{module}            }
  
  sub filename        { $_[0]->{filename}          }
  sub packages_inside { @{$_[0]->{packages}}       }
  sub pod_inside      { @{$_[0]->{pod_headings}}   }
  sub contains_pod    { 0+@{$_[0]->{pod_headings}} }
  
  sub version {
      my $self = shift;
      my $mod  = shift || $self->{module};
      my $vers;
      if ( defined( $mod ) && length( $mod ) &&
           exists( $self->{versions}{$mod} ) ) {
          return $self->{versions}{$mod};
      }
      else {
          return undef;
      }
  }
  
  sub pod {
      my $self = shift;
      my $sect = shift;
      if ( defined( $sect ) && length( $sect ) &&
           exists( $self->{pod}{$sect} ) ) {
          return $self->{pod}{$sect};
      }
      else {
          return undef;
      }
  }
  
  sub is_indexable {
    my ($self, $package) = @_;
  
    my @indexable_packages = grep { $_ ne 'main' } $self->packages_inside;
  
    # check for specific package, if provided
    return !! grep { $_ eq $package } @indexable_packages if $package;
  
    # otherwise, check for any indexable packages at all
    return !! @indexable_packages;
  }
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  Module::Metadata - Gather package and POD information from perl module files
  
  =head1 VERSION
  
  version 1.000033
  
  =head1 SYNOPSIS
  
    use Module::Metadata;
  
    # information about a .pm file
    my $info = Module::Metadata->new_from_file( $file );
    my $version = $info->version;
  
    # CPAN META 'provides' field for .pm files in a directory
    my $provides = Module::Metadata->provides(
      dir => 'lib', version => 2
    );
  
  =head1 DESCRIPTION
  
  This module provides a standard way to gather metadata about a .pm file through
  (mostly) static analysis and (some) code execution.  When determining the
  version of a module, the C<$VERSION> assignment is C<eval>ed, as is traditional
  in the CPAN toolchain.
  
  =head1 CLASS METHODS
  
  =head2 C<< new_from_file($filename, collect_pod => 1) >>
  
  Constructs a C<Module::Metadata> object given the path to a file.  Returns
  undef if the filename does not exist.
  
  C<collect_pod> is a optional boolean argument that determines whether POD
  data is collected and stored for reference.  POD data is not collected by
  default.  POD headings are always collected.
  
  If the file begins by an UTF-8, UTF-16BE or UTF-16LE byte-order mark, then
  it is skipped before processing, and the content of the file is also decoded
  appropriately starting from perl 5.8.
  
  =head2 C<< new_from_handle($handle, $filename, collect_pod => 1) >>
  
  This works just like C<new_from_file>, except that a handle can be provided
  as the first argument.
  
  Note that there is no validation to confirm that the handle is a handle or
  something that can act like one.  Passing something that isn't a handle will
  cause a exception when trying to read from it.  The C<filename> argument is
  mandatory or undef will be returned.
  
  You are responsible for setting the decoding layers on C<$handle> if
  required.
  
  =head2 C<< new_from_module($module, collect_pod => 1, inc => \@dirs) >>
  
  Constructs a C<Module::Metadata> object given a module or package name.
  Returns undef if the module cannot be found.
  
  In addition to accepting the C<collect_pod> argument as described above,
  this method accepts a C<inc> argument which is a reference to an array of
  directories to search for the module.  If none are given, the default is
  @INC.
  
  If the file that contains the module begins by an UTF-8, UTF-16BE or
  UTF-16LE byte-order mark, then it is skipped before processing, and the
  content of the file is also decoded appropriately starting from perl 5.8.
  
  =head2 C<< find_module_by_name($module, \@dirs) >>
  
  Returns the path to a module given the module or package name. A list
  of directories can be passed in as an optional parameter, otherwise
  @INC is searched.
  
  Can be called as either an object or a class method.
  
  =head2 C<< find_module_dir_by_name($module, \@dirs) >>
  
  Returns the entry in C<@dirs> (or C<@INC> by default) that contains
  the module C<$module>. A list of directories can be passed in as an
  optional parameter, otherwise @INC is searched.
  
  Can be called as either an object or a class method.
  
  =head2 C<< provides( %options ) >>
  
  This is a convenience wrapper around C<package_versions_from_directory>
  to generate a CPAN META C<provides> data structure.  It takes key/value
  pairs.  Valid option keys include:
  
  =over
  
  =item version B<(required)>
  
  Specifies which version of the L<CPAN::Meta::Spec> should be used as
  the format of the C<provides> output.  Currently only '1.4' and '2'
  are supported (and their format is identical).  This may change in
  the future as the definition of C<provides> changes.
  
  The C<version> option is required.  If it is omitted or if
  an unsupported version is given, then C<provides> will throw an error.
  
  =item dir
  
  Directory to search recursively for F<.pm> files.  May not be specified with
  C<files>.
  
  =item files
  
  Array reference of files to examine.  May not be specified with C<dir>.
  
  =item prefix
  
  String to prepend to the C<file> field of the resulting output. This defaults
  to F<lib>, which is the common case for most CPAN distributions with their
  F<.pm> files in F<lib>.  This option ensures the META information has the
  correct relative path even when the C<dir> or C<files> arguments are
  absolute or have relative paths from a location other than the distribution
  root.
  
  =back
  
  For example, given C<dir> of 'lib' and C<prefix> of 'lib', the return value
  is a hashref of the form:
  
    {
      'Package::Name' => {
        version => '0.123',
        file => 'lib/Package/Name.pm'
      },
      'OtherPackage::Name' => ...
    }
  
  =head2 C<< package_versions_from_directory($dir, \@files?) >>
  
  Scans C<$dir> for .pm files (unless C<@files> is given, in which case looks
  for those files in C<$dir> - and reads each file for packages and versions,
  returning a hashref of the form:
  
    {
      'Package::Name' => {
        version => '0.123',
        file => 'Package/Name.pm'
      },
      'OtherPackage::Name' => ...
    }
  
  The C<DB> and C<main> packages are always omitted, as are any "private"
  packages that have leading underscores in the namespace (e.g.
  C<Foo::_private>)
  
  Note that the file path is relative to C<$dir> if that is specified.
  This B<must not> be used directly for CPAN META C<provides>.  See
  the C<provides> method instead.
  
  =head2 C<< log_info (internal) >>
  
  Used internally to perform logging; imported from Log::Contextual if
  Log::Contextual has already been loaded, otherwise simply calls warn.
  
  =head1 OBJECT METHODS
  
  =head2 C<< name() >>
  
  Returns the name of the package represented by this module. If there
  is more than one package, it makes a best guess based on the
  filename. If it's a script (i.e. not a *.pm) the package name is
  'main'.
  
  =head2 C<< version($package) >>
  
  Returns the version as defined by the $VERSION variable for the
  package as returned by the C<name> method if no arguments are
  given. If given the name of a package it will attempt to return the
  version of that package if it is specified in the file.
  
  =head2 C<< filename() >>
  
  Returns the absolute path to the file.
  Note that this file may not actually exist on disk yet, e.g. if the module was read from an in-memory filehandle.
  
  =head2 C<< packages_inside() >>
  
  Returns a list of packages. Note: this is a raw list of packages
  discovered (or assumed, in the case of C<main>).  It is not
  filtered for C<DB>, C<main> or private packages the way the
  C<provides> method does.  Invalid package names are not returned,
  for example "Foo:Bar".  Strange but valid package names are
  returned, for example "Foo::Bar::", and are left up to the caller
  on how to handle.
  
  =head2 C<< pod_inside() >>
  
  Returns a list of POD sections.
  
  =head2 C<< contains_pod() >>
  
  Returns true if there is any POD in the file.
  
  =head2 C<< pod($section) >>
  
  Returns the POD data in the given section.
  
  =head2 C<< is_indexable($package) >> or C<< is_indexable() >>
  
  Available since version 1.000020.
  
  Returns a boolean indicating whether the package (if provided) or any package
  (otherwise) is eligible for indexing by PAUSE, the Perl Authors Upload Server.
  Note This only checks for valid C<package> declarations, and does not take any
  ownership information into account.
  
  =head1 SUPPORT
  
  Bugs may be submitted through L<the RT bug tracker|https://rt.cpan.org/Public/Dist/Display.html?Name=Module-Metadata>
  (or L<bug-Module-Metadata@rt.cpan.org|mailto:bug-Module-Metadata@rt.cpan.org>).
  
  There is also a mailing list available for users of this distribution, at
  L<http://lists.perl.org/list/cpan-workers.html>.
  
  There is also an irc channel available for users of this distribution, at
  L<C<#toolchain> on C<irc.perl.org>|irc://irc.perl.org/#toolchain>.
  
  =head1 AUTHOR
  
  Original code from Module::Build::ModuleInfo by Ken Williams
  <kwilliams@cpan.org>, Randy W. Sims <RandyS@ThePierianSpring.org>
  
  Released as Module::Metadata by Matt S Trout (mst) <mst@shadowcat.co.uk> with
  assistance from David Golden (xdg) <dagolden@cpan.org>.
  
  =head1 CONTRIBUTORS
  
  =for stopwords Karen Etheridge David Golden Vincent Pit Matt S Trout Chris Nehren Graham Knop Olivier Mengué Tomas Doran Tatsuhiko Miyagawa tokuhirom Kent Fredric Peter Rabbitson Steve Hay Jerry D. Hedden Craig A. Berry Mitchell Steinbrunner Edward Zborowski Gareth Harper James Raspass 'BinGOs' Williams Josh Jore
  
  =over 4
  
  =item *
  
  Karen Etheridge <ether@cpan.org>
  
  =item *
  
  David Golden <dagolden@cpan.org>
  
  =item *
  
  Vincent Pit <perl@profvince.com>
  
  =item *
  
  Matt S Trout <mst@shadowcat.co.uk>
  
  =item *
  
  Chris Nehren <apeiron@cpan.org>
  
  =item *
  
  Graham Knop <haarg@haarg.org>
  
  =item *
  
  Olivier Mengué <dolmen@cpan.org>
  
  =item *
  
  Tomas Doran <bobtfish@bobtfish.net>
  
  =item *
  
  Tatsuhiko Miyagawa <miyagawa@bulknews.net>
  
  =item *
  
  tokuhirom <tokuhirom@gmail.com>
  
  =item *
  
  Kent Fredric <kentnl@cpan.org>
  
  =item *
  
  Peter Rabbitson <ribasushi@cpan.org>
  
  =item *
  
  Steve Hay <steve.m.hay@googlemail.com>
  
  =item *
  
  Jerry D. Hedden <jdhedden@cpan.org>
  
  =item *
  
  Craig A. Berry <cberry@cpan.org>
  
  =item *
  
  Craig A. Berry <craigberry@mac.com>
  
  =item *
  
  David Mitchell <davem@iabyn.com>
  
  =item *
  
  David Steinbrunner <dsteinbrunner@pobox.com>
  
  =item *
  
  Edward Zborowski <ed@rubensteintech.com>
  
  =item *
  
  Gareth Harper <gareth@broadbean.com>
  
  =item *
  
  James Raspass <jraspass@gmail.com>
  
  =item *
  
  Chris 'BinGOs' Williams <chris@bingosnet.co.uk>
  
  =item *
  
  Josh Jore <jjore@cpan.org>
  
  =back
  
  =head1 COPYRIGHT & LICENSE
  
  Original code Copyright (c) 2001-2011 Ken Williams.
  Additional code Copyright (c) 2010-2011 Matt Trout and David Golden.
  All rights reserved.
  
  This library is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.
  
  =cut
MODULE_METADATA

$fatpacked{"version.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'VERSION';
  #!perl -w
  package version;
  
  use 5.006002;
  use strict;
  use warnings::register;
  if ($] >= 5.015) {
      warnings::register_categories(qw/version/);
  }
  
  use vars qw(@ISA $VERSION $CLASS $STRICT $LAX *declare *qv);
  
  $VERSION = 0.9918;
  $CLASS = 'version';
  
  # !!!!Delete this next block completely when adding to Perl core!!!!
  {
      local $SIG{'__DIE__'};
      eval "use version::vxs $VERSION";
      if ( $@ ) { # don't have the XS version installed
  	eval "use version::vpp $VERSION"; # don't tempt fate
  	die "$@" if ( $@ );
  	push @ISA, "version::vpp";
  	local $^W;
  	*version::qv = \&version::vpp::qv;
  	*version::declare = \&version::vpp::declare;
  	*version::_VERSION = \&version::vpp::_VERSION;
  	*version::vcmp = \&version::vpp::vcmp;
  	*version::new = \&version::vpp::new;
  	*version::numify = \&version::vpp::numify;
  	*version::normal = \&version::vpp::normal;
  	if ($] >= 5.009000) {
  	    no strict 'refs';
  	    *version::stringify = \&version::vpp::stringify;
  	    *{'version::(""'} = \&version::vpp::stringify;
  	    *{'version::(<=>'} = \&version::vpp::vcmp;
  	    *{'version::(cmp'} = \&version::vpp::vcmp;
  	    *version::parse = \&version::vpp::parse;
  	}
      }
      else { # use XS module
  	push @ISA, "version::vxs";
  	local $^W;
  	*version::declare = \&version::vxs::declare;
  	*version::qv = \&version::vxs::qv;
  	*version::_VERSION = \&version::vxs::_VERSION;
  	*version::vcmp = \&version::vxs::VCMP;
  	*version::new = \&version::vxs::new;
  	*version::numify = \&version::vxs::numify;
  	*version::normal = \&version::vxs::normal;
  	if ($] >= 5.009000) {
  	    no strict 'refs';
  	    *version::stringify = \&version::vxs::stringify;
  	    *{'version::(""'} = \&version::vxs::stringify;
  	    *{'version::(<=>'} = \&version::vxs::VCMP;
  	    *{'version::(cmp'} = \&version::vxs::VCMP;
  	    *version::parse = \&version::vxs::parse;
  	}
      }
  }
  
  # avoid using Exporter
  require version::regex;
  *version::is_lax = \&version::regex::is_lax;
  *version::is_strict = \&version::regex::is_strict;
  *LAX = \$version::regex::LAX;
  *LAX_DECIMAL_VERSION = \$version::regex::LAX_DECIMAL_VERSION;
  *LAX_DOTTED_DECIMAL_VERSION = \$version::regex::LAX_DOTTED_DECIMAL_VERSION;
  *STRICT = \$version::regex::STRICT;
  *STRICT_DECIMAL_VERSION = \$version::regex::STRICT_DECIMAL_VERSION;
  *STRICT_DOTTED_DECIMAL_VERSION = \$version::regex::STRICT_DOTTED_DECIMAL_VERSION;
  
  sub import {
      no strict 'refs';
      my ($class) = shift;
  
      # Set up any derived class
      unless ($class eq $CLASS) {
  	local $^W;
  	*{$class.'::declare'} =  \&{$CLASS.'::declare'};
  	*{$class.'::qv'} = \&{$CLASS.'::qv'};
      }
  
      my %args;
      if (@_) { # any remaining terms are arguments
  	map { $args{$_} = 1 } @_
      }
      else { # no parameters at all on use line
  	%args =
  	(
  	    qv => 1,
  	    'UNIVERSAL::VERSION' => 1,
  	);
      }
  
      my $callpkg = caller();
  
      if (exists($args{declare})) {
  	*{$callpkg.'::declare'} =
  	    sub {return $class->declare(shift) }
  	  unless defined(&{$callpkg.'::declare'});
      }
  
      if (exists($args{qv})) {
  	*{$callpkg.'::qv'} =
  	    sub {return $class->qv(shift) }
  	  unless defined(&{$callpkg.'::qv'});
      }
  
      if (exists($args{'UNIVERSAL::VERSION'})) {
  	local $^W;
  	*UNIVERSAL::VERSION
  		= \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'VERSION'})) {
  	*{$callpkg.'::VERSION'} = \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'is_strict'})) {
  	*{$callpkg.'::is_strict'} = \&{$CLASS.'::is_strict'}
  	  unless defined(&{$callpkg.'::is_strict'});
      }
  
      if (exists($args{'is_lax'})) {
  	*{$callpkg.'::is_lax'} = \&{$CLASS.'::is_lax'}
  	  unless defined(&{$callpkg.'::is_lax'});
      }
  }
  
  
  1;
VERSION

$fatpacked{"version/regex.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'VERSION_REGEX';
  package version::regex;
  
  use strict;
  
  use vars qw(
      $VERSION $CLASS $STRICT $LAX
      $STRICT_DECIMAL_VERSION $STRICT_DOTTED_DECIMAL_VERSION
      $LAX_DECIMAL_VERSION $LAX_DOTTED_DECIMAL_VERSION
  );
  
  $VERSION = 0.9918;
  
  #--------------------------------------------------------------------------#
  # Version regexp components
  #--------------------------------------------------------------------------#
  
  # Fraction part of a decimal version number.  This is a common part of
  # both strict and lax decimal versions
  
  my $FRACTION_PART = qr/\.[0-9]+/;
  
  # First part of either decimal or dotted-decimal strict version number.
  # Unsigned integer with no leading zeroes (except for zero itself) to
  # avoid confusion with octal.
  
  my $STRICT_INTEGER_PART = qr/0|[1-9][0-9]*/;
  
  # First part of either decimal or dotted-decimal lax version number.
  # Unsigned integer, but allowing leading zeros.  Always interpreted
  # as decimal.  However, some forms of the resulting syntax give odd
  # results if used as ordinary Perl expressions, due to how perl treats
  # octals.  E.g.
  #   version->new("010" ) == 10
  #   version->new( 010  ) == 8
  #   version->new( 010.2) == 82  # "8" . "2"
  
  my $LAX_INTEGER_PART = qr/[0-9]+/;
  
  # Second and subsequent part of a strict dotted-decimal version number.
  # Leading zeroes are permitted, and the number is always decimal.
  # Limited to three digits to avoid overflow when converting to decimal
  # form and also avoid problematic style with excessive leading zeroes.
  
  my $STRICT_DOTTED_DECIMAL_PART = qr/\.[0-9]{1,3}/;
  
  # Second and subsequent part of a lax dotted-decimal version number.
  # Leading zeroes are permitted, and the number is always decimal.  No
  # limit on the numerical value or number of digits, so there is the
  # possibility of overflow when converting to decimal form.
  
  my $LAX_DOTTED_DECIMAL_PART = qr/\.[0-9]+/;
  
  # Alpha suffix part of lax version number syntax.  Acts like a
  # dotted-decimal part.
  
  my $LAX_ALPHA_PART = qr/_[0-9]+/;
  
  #--------------------------------------------------------------------------#
  # Strict version regexp definitions
  #--------------------------------------------------------------------------#
  
  # Strict decimal version number.
  
  $STRICT_DECIMAL_VERSION =
      qr/ $STRICT_INTEGER_PART $FRACTION_PART? /x;
  
  # Strict dotted-decimal version number.  Must have both leading "v" and
  # at least three parts, to avoid confusion with decimal syntax.
  
  $STRICT_DOTTED_DECIMAL_VERSION =
      qr/ v $STRICT_INTEGER_PART $STRICT_DOTTED_DECIMAL_PART{2,} /x;
  
  # Complete strict version number syntax -- should generally be used
  # anchored: qr/ \A $STRICT \z /x
  
  $STRICT =
      qr/ $STRICT_DECIMAL_VERSION | $STRICT_DOTTED_DECIMAL_VERSION /x;
  
  #--------------------------------------------------------------------------#
  # Lax version regexp definitions
  #--------------------------------------------------------------------------#
  
  # Lax decimal version number.  Just like the strict one except for
  # allowing an alpha suffix or allowing a leading or trailing
  # decimal-point
  
  $LAX_DECIMAL_VERSION =
      qr/ $LAX_INTEGER_PART (?: $FRACTION_PART | \. )? $LAX_ALPHA_PART?
  	|
  	$FRACTION_PART $LAX_ALPHA_PART?
      /x;
  
  # Lax dotted-decimal version number.  Distinguished by having either
  # leading "v" or at least three non-alpha parts.  Alpha part is only
  # permitted if there are at least two non-alpha parts. Strangely
  # enough, without the leading "v", Perl takes .1.2 to mean v0.1.2,
  # so when there is no "v", the leading part is optional
  
  $LAX_DOTTED_DECIMAL_VERSION =
      qr/
  	v $LAX_INTEGER_PART (?: $LAX_DOTTED_DECIMAL_PART+ $LAX_ALPHA_PART? )?
  	|
  	$LAX_INTEGER_PART? $LAX_DOTTED_DECIMAL_PART{2,} $LAX_ALPHA_PART?
      /x;
  
  # Complete lax version number syntax -- should generally be used
  # anchored: qr/ \A $LAX \z /x
  #
  # The string 'undef' is a special case to make for easier handling
  # of return values from ExtUtils::MM->parse_version
  
  $LAX =
      qr/ undef | $LAX_DOTTED_DECIMAL_VERSION | $LAX_DECIMAL_VERSION /x;
  
  #--------------------------------------------------------------------------#
  
  # Preloaded methods go here.
  sub is_strict	{ defined $_[0] && $_[0] =~ qr/ \A $STRICT \z /x }
  sub is_lax	{ defined $_[0] && $_[0] =~ qr/ \A $LAX \z /x }
  
  1;
VERSION_REGEX

$fatpacked{"version/vpp.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'VERSION_VPP';
  package charstar;
  # a little helper class to emulate C char* semantics in Perl
  # so that prescan_version can use the same code as in C
  
  use overload (
      '""'	=> \&thischar,
      '0+'	=> \&thischar,
      '++'	=> \&increment,
      '--'	=> \&decrement,
      '+'		=> \&plus,
      '-'		=> \&minus,
      '*'		=> \&multiply,
      'cmp'	=> \&cmp,
      '<=>'	=> \&spaceship,
      'bool'	=> \&thischar,
      '='		=> \&clone,
  );
  
  sub new {
      my ($self, $string) = @_;
      my $class = ref($self) || $self;
  
      my $obj = {
  	string  => [split(//,$string)],
  	current => 0,
      };
      return bless $obj, $class;
  }
  
  sub thischar {
      my ($self) = @_;
      my $last = $#{$self->{string}};
      my $curr = $self->{current};
      if ($curr >= 0 && $curr <= $last) {
  	return $self->{string}->[$curr];
      }
      else {
  	return '';
      }
  }
  
  sub increment {
      my ($self) = @_;
      $self->{current}++;
  }
  
  sub decrement {
      my ($self) = @_;
      $self->{current}--;
  }
  
  sub plus {
      my ($self, $offset) = @_;
      my $rself = $self->clone;
      $rself->{current} += $offset;
      return $rself;
  }
  
  sub minus {
      my ($self, $offset) = @_;
      my $rself = $self->clone;
      $rself->{current} -= $offset;
      return $rself;
  }
  
  sub multiply {
      my ($left, $right, $swapped) = @_;
      my $char = $left->thischar();
      return $char * $right;
  }
  
  sub spaceship {
      my ($left, $right, $swapped) = @_;
      unless (ref($right)) { # not an object already
  	$right = $left->new($right);
      }
      return $left->{current} <=> $right->{current};
  }
  
  sub cmp {
      my ($left, $right, $swapped) = @_;
      unless (ref($right)) { # not an object already
  	if (length($right) == 1) { # comparing single character only
  	    return $left->thischar cmp $right;
  	}
  	$right = $left->new($right);
      }
      return $left->currstr cmp $right->currstr;
  }
  
  sub bool {
      my ($self) = @_;
      my $char = $self->thischar;
      return ($char ne '');
  }
  
  sub clone {
      my ($left, $right, $swapped) = @_;
      $right = {
  	string  => [@{$left->{string}}],
  	current => $left->{current},
      };
      return bless $right, ref($left);
  }
  
  sub currstr {
      my ($self, $s) = @_;
      my $curr = $self->{current};
      my $last = $#{$self->{string}};
      if (defined($s) && $s->{current} < $last) {
  	$last = $s->{current};
      }
  
      my $string = join('', @{$self->{string}}[$curr..$last]);
      return $string;
  }
  
  package version::vpp;
  
  use 5.006002;
  use strict;
  use warnings::register;
  
  use Config;
  use vars qw($VERSION $CLASS @ISA $LAX $STRICT $WARN_CATEGORY);
  $VERSION = 0.9918;
  $CLASS = 'version::vpp';
  if ($] > 5.015) {
      warnings::register_categories(qw/version/);
      $WARN_CATEGORY = 'version';
  } else {
      $WARN_CATEGORY = 'numeric';
  }
  
  require version::regex;
  *version::vpp::is_strict = \&version::regex::is_strict;
  *version::vpp::is_lax = \&version::regex::is_lax;
  *LAX = \$version::regex::LAX;
  *STRICT = \$version::regex::STRICT;
  
  use overload (
      '""'       => \&stringify,
      '0+'       => \&numify,
      'cmp'      => \&vcmp,
      '<=>'      => \&vcmp,
      'bool'     => \&vbool,
      '+'        => \&vnoop,
      '-'        => \&vnoop,
      '*'        => \&vnoop,
      '/'        => \&vnoop,
      '+='        => \&vnoop,
      '-='        => \&vnoop,
      '*='        => \&vnoop,
      '/='        => \&vnoop,
      'abs'      => \&vnoop,
  );
  
  sub import {
      no strict 'refs';
      my ($class) = shift;
  
      # Set up any derived class
      unless ($class eq $CLASS) {
  	local $^W;
  	*{$class.'::declare'} =  \&{$CLASS.'::declare'};
  	*{$class.'::qv'} = \&{$CLASS.'::qv'};
      }
  
      my %args;
      if (@_) { # any remaining terms are arguments
  	map { $args{$_} = 1 } @_
      }
      else { # no parameters at all on use line
  	%args =
  	(
  	    qv => 1,
  	    'UNIVERSAL::VERSION' => 1,
  	);
      }
  
      my $callpkg = caller();
  
      if (exists($args{declare})) {
  	*{$callpkg.'::declare'} =
  	    sub {return $class->declare(shift) }
  	  unless defined(&{$callpkg.'::declare'});
      }
  
      if (exists($args{qv})) {
  	*{$callpkg.'::qv'} =
  	    sub {return $class->qv(shift) }
  	  unless defined(&{$callpkg.'::qv'});
      }
  
      if (exists($args{'UNIVERSAL::VERSION'})) {
  	no warnings qw/redefine/;
  	*UNIVERSAL::VERSION
  		= \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'VERSION'})) {
  	*{$callpkg.'::VERSION'} = \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'is_strict'})) {
  	*{$callpkg.'::is_strict'} = \&{$CLASS.'::is_strict'}
  	  unless defined(&{$callpkg.'::is_strict'});
      }
  
      if (exists($args{'is_lax'})) {
  	*{$callpkg.'::is_lax'} = \&{$CLASS.'::is_lax'}
  	  unless defined(&{$callpkg.'::is_lax'});
      }
  }
  
  my $VERSION_MAX = 0x7FFFFFFF;
  
  # implement prescan_version as closely to the C version as possible
  use constant TRUE  => 1;
  use constant FALSE => 0;
  
  sub isDIGIT {
      my ($char) = shift->thischar();
      return ($char =~ /\d/);
  }
  
  sub isALPHA {
      my ($char) = shift->thischar();
      return ($char =~ /[a-zA-Z]/);
  }
  
  sub isSPACE {
      my ($char) = shift->thischar();
      return ($char =~ /\s/);
  }
  
  sub BADVERSION {
      my ($s, $errstr, $error) = @_;
      if ($errstr) {
  	$$errstr = $error;
      }
      return $s;
  }
  
  sub prescan_version {
      my ($s, $strict, $errstr, $sqv, $ssaw_decimal, $swidth, $salpha) = @_;
      my $qv          = defined $sqv          ? $$sqv          : FALSE;
      my $saw_decimal = defined $ssaw_decimal ? $$ssaw_decimal : 0;
      my $width       = defined $swidth       ? $$swidth       : 3;
      my $alpha       = defined $salpha       ? $$salpha       : FALSE;
  
      my $d = $s;
  
      if ($qv && isDIGIT($d)) {
  	goto dotted_decimal_version;
      }
  
      if ($d eq 'v') { # explicit v-string
  	$d++;
  	if (isDIGIT($d)) {
  	    $qv = TRUE;
  	}
  	else { # degenerate v-string
  	    # requires v1.2.3
  	    return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions require at least three parts)");
  	}
  
  dotted_decimal_version:
  	if ($strict && $d eq '0' && isDIGIT($d+1)) {
  	    # no leading zeros allowed
  	    return BADVERSION($s,$errstr,"Invalid version format (no leading zeros)");
  	}
  
  	while (isDIGIT($d)) { 	# integer part
  	    $d++;
  	}
  
  	if ($d eq '.')
  	{
  	    $saw_decimal++;
  	    $d++; 		# decimal point
  	}
  	else
  	{
  	    if ($strict) {
  		# require v1.2.3
  		return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions require at least three parts)");
  	    }
  	    else {
  		goto version_prescan_finish;
  	    }
  	}
  
  	{
  	    my $i = 0;
  	    my $j = 0;
  	    while (isDIGIT($d)) {	# just keep reading
  		$i++;
  		while (isDIGIT($d)) {
  		    $d++; $j++;
  		    # maximum 3 digits between decimal
  		    if ($strict && $j > 3) {
  			return BADVERSION($s,$errstr,"Invalid version format (maximum 3 digits between decimals)");
  		    }
  		}
  		if ($d eq '_') {
  		    if ($strict) {
  			return BADVERSION($s,$errstr,"Invalid version format (no underscores)");
  		    }
  		    if ( $alpha ) {
  			return BADVERSION($s,$errstr,"Invalid version format (multiple underscores)");
  		    }
  		    $d++;
  		    $alpha = TRUE;
  		}
  		elsif ($d eq '.') {
  		    if ($alpha) {
  			return BADVERSION($s,$errstr,"Invalid version format (underscores before decimal)");
  		    }
  		    $saw_decimal++;
  		    $d++;
  		}
  		elsif (!isDIGIT($d)) {
  		    last;
  		}
  		$j = 0;
  	    }
  
  	    if ($strict && $i < 2) {
  		# requires v1.2.3
  		return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions require at least three parts)");
  	    }
  	}
      } 					# end if dotted-decimal
      else
      {					# decimal versions
  	my $j = 0;
  	# special $strict case for leading '.' or '0'
  	if ($strict) {
  	    if ($d eq '.') {
  		return BADVERSION($s,$errstr,"Invalid version format (0 before decimal required)");
  	    }
  	    if ($d eq '0' && isDIGIT($d+1)) {
  		return BADVERSION($s,$errstr,"Invalid version format (no leading zeros)");
  	    }
  	}
  
  	# and we never support negative version numbers
  	if ($d eq '-') {
  	    return BADVERSION($s,$errstr,"Invalid version format (negative version number)");
  	}
  
  	# consume all of the integer part
  	while (isDIGIT($d)) {
  	    $d++;
  	}
  
  	# look for a fractional part
  	if ($d eq '.') {
  	    # we found it, so consume it
  	    $saw_decimal++;
  	    $d++;
  	}
  	elsif (!$d || $d eq ';' || isSPACE($d) || $d eq '}') {
  	    if ( $d == $s ) {
  		# found nothing
  		return BADVERSION($s,$errstr,"Invalid version format (version required)");
  	    }
  	    # found just an integer
  	    goto version_prescan_finish;
  	}
  	elsif ( $d == $s ) {
  	    # didn't find either integer or period
  	    return BADVERSION($s,$errstr,"Invalid version format (non-numeric data)");
  	}
  	elsif ($d eq '_') {
  	    # underscore can't come after integer part
  	    if ($strict) {
  		return BADVERSION($s,$errstr,"Invalid version format (no underscores)");
  	    }
  	    elsif (isDIGIT($d+1)) {
  		return BADVERSION($s,$errstr,"Invalid version format (alpha without decimal)");
  	    }
  	    else {
  		return BADVERSION($s,$errstr,"Invalid version format (misplaced underscore)");
  	    }
  	}
  	elsif ($d) {
  	    # anything else after integer part is just invalid data
  	    return BADVERSION($s,$errstr,"Invalid version format (non-numeric data)");
  	}
  
  	# scan the fractional part after the decimal point
  	if ($d && !isDIGIT($d) && ($strict || ! ($d eq ';' || isSPACE($d) || $d eq '}') )) {
  		# $strict or lax-but-not-the-end
  		return BADVERSION($s,$errstr,"Invalid version format (fractional part required)");
  	}
  
  	while (isDIGIT($d)) {
  	    $d++; $j++;
  	    if ($d eq '.' && isDIGIT($d-1)) {
  		if ($alpha) {
  		    return BADVERSION($s,$errstr,"Invalid version format (underscores before decimal)");
  		}
  		if ($strict) {
  		    return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions must begin with 'v')");
  		}
  		$d = $s; # start all over again
  		$qv = TRUE;
  		goto dotted_decimal_version;
  	    }
  	    if ($d eq '_') {
  		if ($strict) {
  		    return BADVERSION($s,$errstr,"Invalid version format (no underscores)");
  		}
  		if ( $alpha ) {
  		    return BADVERSION($s,$errstr,"Invalid version format (multiple underscores)");
  		}
  		if ( ! isDIGIT($d+1) ) {
  		    return BADVERSION($s,$errstr,"Invalid version format (misplaced underscore)");
  		}
  		$width = $j;
  		$d++;
  		$alpha = TRUE;
  	    }
  	}
      }
  
  version_prescan_finish:
      while (isSPACE($d)) {
  	$d++;
      }
  
      if ($d && !isDIGIT($d) && (! ($d eq ';' || $d eq '}') )) {
  	# trailing non-numeric data
  	return BADVERSION($s,$errstr,"Invalid version format (non-numeric data)");
      }
      if ($saw_decimal > 1 && ($d-1) eq '.') {
  	# no trailing period allowed
  	return BADVERSION($s,$errstr,"Invalid version format (trailing decimal)");
      }
  
      if (defined $sqv) {
  	$$sqv = $qv;
      }
      if (defined $swidth) {
  	$$swidth = $width;
      }
      if (defined $ssaw_decimal) {
  	$$ssaw_decimal = $saw_decimal;
      }
      if (defined $salpha) {
  	$$salpha = $alpha;
      }
      return $d;
  }
  
  sub scan_version {
      my ($s, $rv, $qv) = @_;
      my $start;
      my $pos;
      my $last;
      my $errstr;
      my $saw_decimal = 0;
      my $width = 3;
      my $alpha = FALSE;
      my $vinf = FALSE;
      my @av;
  
      $s = new charstar $s;
  
      while (isSPACE($s)) { # leading whitespace is OK
  	$s++;
      }
  
      $last = prescan_version($s, FALSE, \$errstr, \$qv, \$saw_decimal,
  	\$width, \$alpha);
  
      if ($errstr) {
  	# 'undef' is a special case and not an error
  	if ( $s ne 'undef') {
  	    require Carp;
  	    Carp::croak($errstr);
  	}
      }
  
      $start = $s;
      if ($s eq 'v') {
  	$s++;
      }
      $pos = $s;
  
      if ( $qv ) {
  	$$rv->{qv} = $qv;
      }
      if ( $alpha ) {
  	$$rv->{alpha} = $alpha;
      }
      if ( !$qv && $width < 3 ) {
  	$$rv->{width} = $width;
      }
  
      while (isDIGIT($pos) || $pos eq '_') {
  	$pos++;
      }
      if (!isALPHA($pos)) {
  	my $rev;
  
  	for (;;) {
  	    $rev = 0;
  	    {
    		# this is atoi() that delimits on underscores
    		my $end = $pos;
    		my $mult = 1;
  		my $orev;
  
  		#  the following if() will only be true after the decimal
  		#  point of a version originally created with a bare
  		#  floating point number, i.e. not quoted in any way
  		#
   		if ( !$qv && $s > $start && $saw_decimal == 1 ) {
  		    $mult *= 100;
   		    while ( $s < $end ) {
  			next if $s eq '_';
  			$orev = $rev;
   			$rev += $s * $mult;
   			$mult /= 10;
  			if (   (abs($orev) > abs($rev))
  			    || (abs($rev) > $VERSION_MAX )) {
  			    warn("Integer overflow in version %d",
  					   $VERSION_MAX);
  			    $s = $end - 1;
  			    $rev = $VERSION_MAX;
  			    $vinf = 1;
  			}
   			$s++;
  			if ( $s eq '_' ) {
  			    $s++;
  			}
   		    }
    		}
   		else {
   		    while (--$end >= $s) {
  			next if $end eq '_';
  			$orev = $rev;
   			$rev += $end * $mult;
   			$mult *= 10;
  			if (   (abs($orev) > abs($rev))
  			    || (abs($rev) > $VERSION_MAX )) {
  			    warn("Integer overflow in version");
  			    $end = $s - 1;
  			    $rev = $VERSION_MAX;
  			    $vinf = 1;
  			}
   		    }
   		}
    	    }
  
    	    # Append revision
  	    push @av, $rev;
  	    if ( $vinf ) {
  		$s = $last;
  		last;
  	    }
  	    elsif ( $pos eq '.' ) {
  		$s = ++$pos;
  	    }
  	    elsif ( $pos eq '_' && isDIGIT($pos+1) ) {
  		$s = ++$pos;
  	    }
  	    elsif ( $pos eq ',' && isDIGIT($pos+1) ) {
  		$s = ++$pos;
  	    }
  	    elsif ( isDIGIT($pos) ) {
  		$s = $pos;
  	    }
  	    else {
  		$s = $pos;
  		last;
  	    }
  	    if ( $qv ) {
  		while ( isDIGIT($pos) || $pos eq '_') {
  		    $pos++;
  		}
  	    }
  	    else {
  		my $digits = 0;
  		while ( ( isDIGIT($pos) || $pos eq '_' ) && $digits < 3 ) {
  		    if ( $pos ne '_' ) {
  			$digits++;
  		    }
  		    $pos++;
  		}
  	    }
  	}
      }
      if ( $qv ) { # quoted versions always get at least three terms
  	my $len = $#av;
  	#  This for loop appears to trigger a compiler bug on OS X, as it
  	#  loops infinitely. Yes, len is negative. No, it makes no sense.
  	#  Compiler in question is:
  	#  gcc version 3.3 20030304 (Apple Computer, Inc. build 1640)
  	#  for ( len = 2 - len; len > 0; len-- )
  	#  av_push(MUTABLE_AV(sv), newSViv(0));
  	#
  	$len = 2 - $len;
  	while ($len-- > 0) {
  	    push @av, 0;
  	}
      }
  
      # need to save off the current version string for later
      if ( $vinf ) {
  	$$rv->{original} = "v.Inf";
  	$$rv->{vinf} = 1;
      }
      elsif ( $s > $start ) {
  	$$rv->{original} = $start->currstr($s);
  	if ( $qv && $saw_decimal == 1 && $start ne 'v' ) {
  	    # need to insert a v to be consistent
  	    $$rv->{original} = 'v' . $$rv->{original};
  	}
      }
      else {
  	$$rv->{original} = '0';
  	push(@av, 0);
      }
  
      # And finally, store the AV in the hash
      $$rv->{version} = \@av;
  
      # fix RT#19517 - special case 'undef' as string
      if ($s eq 'undef') {
  	$s += 5;
      }
  
      return $s;
  }
  
  sub new {
      my $class = shift;
      unless (defined $class or $#_ > 1) {
  	require Carp;
  	Carp::croak('Usage: version::new(class, version)');
      }
  
      my $self = bless ({}, ref ($class) || $class);
      my $qv = FALSE;
  
      if ( $#_ == 1 ) { # must be CVS-style
  	$qv = TRUE;
      }
      my $value = pop; # always going to be the last element
  
      if ( ref($value) && eval('$value->isa("version")') ) {
  	# Can copy the elements directly
  	$self->{version} = [ @{$value->{version} } ];
  	$self->{qv} = 1 if $value->{qv};
  	$self->{alpha} = 1 if $value->{alpha};
  	$self->{original} = ''.$value->{original};
  	return $self;
      }
  
      if ( not defined $value or $value =~ /^undef$/ ) {
  	# RT #19517 - special case for undef comparison
  	# or someone forgot to pass a value
  	push @{$self->{version}}, 0;
  	$self->{original} = "0";
  	return ($self);
      }
  
  
      if (ref($value) =~ m/ARRAY|HASH/) {
  	require Carp;
  	Carp::croak("Invalid version format (non-numeric data)");
      }
  
      $value = _un_vstring($value);
  
      if ($Config{d_setlocale}) {
  	use POSIX qw/locale_h/;
  	use if $Config{d_setlocale}, 'locale';
  	my $currlocale = setlocale(LC_ALL);
  
  	# if the current locale uses commas for decimal points, we
  	# just replace commas with decimal places, rather than changing
  	# locales
  	if ( localeconv()->{decimal_point} eq ',' ) {
  	    $value =~ tr/,/./;
  	}
      }
  
      # exponential notation
      if ( $value =~ /\d+.?\d*e[-+]?\d+/ ) {
  	$value = sprintf("%.9f",$value);
  	$value =~ s/(0+)$//; # trim trailing zeros
      }
  
      my $s = scan_version($value, \$self, $qv);
  
      if ($s) { # must be something left over
  	warn(sprintf "Version string '%s' contains invalid data; "
  		   ."ignoring: '%s'", $value, $s);
      }
  
      return ($self);
  }
  
  *parse = \&new;
  
  sub numify {
      my ($self) = @_;
      unless (_verify($self)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
      my $alpha = $self->{alpha} || "";
      my $len = $#{$self->{version}};
      my $digit = $self->{version}[0];
      my $string = sprintf("%d.", $digit );
  
      if ($alpha and warnings::enabled()) {
  	warnings::warn($WARN_CATEGORY, 'alpha->numify() is lossy');
      }
  
      for ( my $i = 1 ; $i <= $len ; $i++ ) {
  	$digit = $self->{version}[$i];
  	$string .= sprintf("%03d", $digit);
      }
  
      if ( $len == 0 ) {
  	$string .= sprintf("000");
      }
  
      return $string;
  }
  
  sub normal {
      my ($self) = @_;
      unless (_verify($self)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
  
      my $len = $#{$self->{version}};
      my $digit = $self->{version}[0];
      my $string = sprintf("v%d", $digit );
  
      for ( my $i = 1 ; $i <= $len ; $i++ ) {
  	$digit = $self->{version}[$i];
  	$string .= sprintf(".%d", $digit);
      }
  
      if ( $len <= 2 ) {
  	for ( $len = 2 - $len; $len != 0; $len-- ) {
  	    $string .= sprintf(".%0d", 0);
  	}
      }
  
      return $string;
  }
  
  sub stringify {
      my ($self) = @_;
      unless (_verify($self)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
      return exists $self->{original}
      	? $self->{original}
  	: exists $self->{qv}
  	    ? $self->normal
  	    : $self->numify;
  }
  
  sub vcmp {
      my ($left,$right,$swap) = @_;
      my $class = ref($left);
      unless ( UNIVERSAL::isa($right, $class) ) {
  	$right = $class->new($right);
      }
  
      if ( $swap ) {
  	($left, $right) = ($right, $left);
      }
      unless (_verify($left)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
      unless (_verify($right)) {
  	require Carp;
  	Carp::croak("Invalid version format");
      }
      my $l = $#{$left->{version}};
      my $r = $#{$right->{version}};
      my $m = $l < $r ? $l : $r;
      my $lalpha = $left->is_alpha;
      my $ralpha = $right->is_alpha;
      my $retval = 0;
      my $i = 0;
      while ( $i <= $m && $retval == 0 ) {
  	$retval = $left->{version}[$i] <=> $right->{version}[$i];
  	$i++;
      }
  
      # possible match except for trailing 0's
      if ( $retval == 0 && $l != $r ) {
  	if ( $l < $r ) {
  	    while ( $i <= $r && $retval == 0 ) {
  		if ( $right->{version}[$i] != 0 ) {
  		    $retval = -1; # not a match after all
  		}
  		$i++;
  	    }
  	}
  	else {
  	    while ( $i <= $l && $retval == 0 ) {
  		if ( $left->{version}[$i] != 0 ) {
  		    $retval = +1; # not a match after all
  		}
  		$i++;
  	    }
  	}
      }
  
      return $retval;
  }
  
  sub vbool {
      my ($self) = @_;
      return vcmp($self,$self->new("0"),1);
  }
  
  sub vnoop {
      require Carp;
      Carp::croak("operation not supported with version object");
  }
  
  sub is_alpha {
      my ($self) = @_;
      return (exists $self->{alpha});
  }
  
  sub qv {
      my $value = shift;
      my $class = $CLASS;
      if (@_) {
  	$class = ref($value) || $value;
  	$value = shift;
      }
  
      $value = _un_vstring($value);
      $value = 'v'.$value unless $value =~ /(^v|\d+\.\d+\.\d)/;
      my $obj = $CLASS->new($value);
      return bless $obj, $class;
  }
  
  *declare = \&qv;
  
  sub is_qv {
      my ($self) = @_;
      return (exists $self->{qv});
  }
  
  
  sub _verify {
      my ($self) = @_;
      if ( ref($self)
  	&& eval { exists $self->{version} }
  	&& ref($self->{version}) eq 'ARRAY'
  	) {
  	return 1;
      }
      else {
  	return 0;
      }
  }
  
  sub _is_non_alphanumeric {
      my $s = shift;
      $s = new charstar $s;
      while ($s) {
  	return 0 if isSPACE($s); # early out
  	return 1 unless (isALPHA($s) || isDIGIT($s) || $s =~ /[.-]/);
  	$s++;
      }
      return 0;
  }
  
  sub _un_vstring {
      my $value = shift;
      # may be a v-string
      if ( length($value) >= 1 && $value !~ /[,._]/
  	&& _is_non_alphanumeric($value)) {
  	my $tvalue;
  	if ( $] >= 5.008_001 ) {
  	    $tvalue = _find_magic_vstring($value);
  	    $value = $tvalue if length $tvalue;
  	}
  	elsif ( $] >= 5.006_000 ) {
  	    $tvalue = sprintf("v%vd",$value);
  	    if ( $tvalue =~ /^v\d+(\.\d+)*$/ ) {
  		# must be a v-string
  		$value = $tvalue;
  	    }
  	}
      }
      return $value;
  }
  
  sub _find_magic_vstring {
      my $value = shift;
      my $tvalue = '';
      require B;
      my $sv = B::svref_2object(\$value);
      my $magic = ref($sv) eq 'B::PVMG' ? $sv->MAGIC : undef;
      while ( $magic ) {
  	if ( $magic->TYPE eq 'V' ) {
  	    $tvalue = $magic->PTR;
  	    $tvalue =~ s/^v?(.+)$/v$1/;
  	    last;
  	}
  	else {
  	    $magic = $magic->MOREMAGIC;
  	}
      }
      $tvalue =~ tr/_//d;
      return $tvalue;
  }
  
  sub _VERSION {
      my ($obj, $req) = @_;
      my $class = ref($obj) || $obj;
  
      no strict 'refs';
      if ( exists $INC{"$class.pm"} and not %{"$class\::"} and $] >= 5.008) {
  	 # file but no package
  	require Carp;
  	Carp::croak( "$class defines neither package nor VERSION"
  	    ."--version check failed");
      }
  
      my $version = eval "\$$class\::VERSION";
      if ( defined $version ) {
  	local $^W if $] <= 5.008;
  	$version = version::vpp->new($version);
      }
  
      if ( defined $req ) {
  	unless ( defined $version ) {
  	    require Carp;
  	    my $msg =  $] < 5.006
  	    ? "$class version $req required--this is only version "
  	    : "$class does not define \$$class\::VERSION"
  	      ."--version check failed";
  
  	    if ( $ENV{VERSION_DEBUG} ) {
  		Carp::confess($msg);
  	    }
  	    else {
  		Carp::croak($msg);
  	    }
  	}
  
  	$req = version::vpp->new($req);
  
  	if ( $req > $version ) {
  	    require Carp;
  	    if ( $req->is_qv ) {
  		Carp::croak(
  		    sprintf ("%s version %s required--".
  			"this is only version %s", $class,
  			$req->normal, $version->normal)
  		);
  	    }
  	    else {
  		Carp::croak(
  		    sprintf ("%s version %s required--".
  			"this is only version %s", $class,
  			$req->stringify, $version->stringify)
  		);
  	    }
  	}
      }
  
      return defined $version ? $version->stringify : undef;
  }
  
  1; #this line is important and will help the module return a true value
VERSION_VPP

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


=head1 NAME

dist_surveyor - determine exactly what dist versions are installed

=head1 SYNOPSIS

  dist_surveyor [options] /some/perl/lib/dir

Typically a perl library directory will have an architecture specific library
as a subdirectory. The dist_surveyor script will detect and add it automatically
if the perl being used has the same 'archname' the same as the one in the library.
If not, then specify the "archlib" directory explicitly I<first>:

  dist_surveyor [options] /some/perl/lib/dir/archname /some/perl/lib/dir

=head1 DESCRIPTION

This utility examines all the modules installed within the specified perl
library directory and uses the metacpan API to work out what versions of what
distributions could have provided those modules. It then works out which of
those candidate distributions is the most likely one.

It is fairly robust and copes well with edge cases like installation of
non-released versions from git repos and local modifications.

Distributions are written to stdout. Progress and issues are reported to stderr.

It can take a long time to run for the first time on a directory with a
large number of modules and candidate distributions.  The data fetched from
metacpan is cached so future runs are much faster.  (The system this code was
tested on took about 60 minutes to process around 500 distributions with no
cached data, and under 10 minutes for later runs that could reuse the cached
data. The cache file ended up about 40MB in size.)

=head1 Fatpacked script

A fatpacked version of this script exists in:
L<https://raw.github.com/Grinnz/Dist-Surveyor/master/dist_surveyor_packed.pl>

Please note that the packed version expects that any standard core perl
modules, including the modules L<List::Util>, L<Scalar::Util>, and L<Storable>,
are already installed on the local system. If you are planing to --makecpan,
you also need L<Compress::Zlib>.

=head1 OPTIONS

    --version    Print script and Perl version

    --verbose    Show more detailed progress

    --debug      Show much more information

    --match R    Ignore modules that don't match regex R (unanchored)

    --perlver V  Ignore modules that are shipped with perl version V

    --remnants   Include old distribution versions that have left old modules behind

    --uncached   Don't use or update the persistent cache

    --makecpan D Create a CPAN repository in directory D

    --output S   List of field names to output, separate by spaces.
                 
    --format S   Printf format string with a %s for each field in --output

=head2 --makecpan

Creates a CPAN repository in the specified directory by fetching the selected
distributions into authors/id/... and writing the index files into modules/...

If the directory already exists then selected distributions that already exist
are not refetched, any distributions that already exist but aren't selected by
this run are left in place.

New package distribution information is merged into the modules/02packages index file.

Some additional files are written into a dist_surveyor subdirectory:

=head3 dist_surveyor/token_packages.txt

This file lists one unique 'token package' per distribution. It's very useful
to speed up re-running a full install after some distributions have failed.

=head1 SURVEY USAGE

Run a survey and create a mini-CPAN repository containing the distributions:

    dist_surveyor --makecpan my_cpan /some/perl/lib/dir > installed_dists.txt

It's important to give the correct perl lib directory path.

It's important to check the results related to any modules that generated
warnings during the run.

=head1 INSTALLATION USAGE

Then, to install those distributions into a new library:

    cpanm --from file:$PWD/my_cpan [-l new_lib] < installed_dists.txt

It's very likely that some distributions will fail tests and not install,
which will, in turn, cause others to fail. Once the initial run is complete
study the cpam build log file carefully and resolve the test failures.

Running cpanm with a list of distributions, as above, will always reinstall
I<all> the listed distributions. Even those already sucessfully installed.

It's much (I<much>) faster to give cpanm a list of package names as that allows
it to skip those that it knows are already installed. The L</--makecpan> option
writes a list of 'token packages', one per distribution, so you can use that
with cpanm:

    cpanm --from file:$PWD/my_cpan [-l new_lib] < my_cpan/dist_surveyor/token_packages.txt

When a distro fails tests I use the cpanm C<--look> option to investigate:

    cpanm --from file:$PWD/my_cpan --look Some::Package

I'll often end up building, testing and installing the distro from within that
cpanm look shell. Once installed I'll rerun cpanm using the full C<token_packages.txt>
file again. If there are more failures I'll repeat that sequence till they're all resolved.

=head1 BUGS

Probably.

=head1 TODO

    * Auto-detect when directory given isn't the root of a perl library dir tree.
        E.g. by matching file names to module names

    * Add support for matching Foo.pm.PL files (e.g. FCGI and common::sense)

    * For installed modules get the file modification time (last commit time)
        and use it to eliminate candidate dists that were released after that time.

    * Consider factoring in release status ('authorized') so rogue releases
        that ship copies of many other modules (like Net-Braintree-0.1.1)
        are given a lower priority.

    * Sort out ExtUtils::Perllocal::Parser situation
        Avoid hard-coded %distro_key_mod_names related to perllocal.pod where the
        dist name doesn't match the key module name.
        Or maybe just remove use of distro_key_mod_names and perllocal entirely?

    * Optimise use of metacpan. Check caching. Use ElasticSearch.pm.

    * Fully handle merging of pre-existing --makecpan directory data files.

    * Consider factoring install date in the output ordering. May help with edge cases
        where a package P is installed via distros A then B. If A is reinstalled after B
        then the reinstalled P will be from A but should be from B. (I don't know of any
        cases, but it's certainly a possibility. The LWP breakup and Class::MOP spring to
        mind as possible candidates.)

=cut

use strict;
use warnings;
use Getopt::Long qw(:config auto_version); # core
use Config; # core

$| = 1;

use Dist::Surveyor;
use Dist::Surveyor::Inquiry; # internal
use Dist::Surveyor::MakeCpan;

our $VERSION = '0.022';

use constant PROGNAME => 'dist_surveyor';

GetOptions(
    'match=s' => \my $opt_match,
    'v|verbose!' => \my $opt_verbose,
    'd|debug!' => \my $opt_debug,
    # target perl version, re core modules
    'perlver=s' => \my $opt_perlver,
    # include old dists that have remnant/orphaned modules installed
    'remnants!' => \my $opt_remnants,
    # don't use a persistent cache
    'uncached!' => \my $opt_uncached,
    'makecpan=s' => \my $opt_makecpan,
    # e.g., 'download_url author'
    'output=s' => \(my $opt_output ||= 'url'),
    # e.g., 'some-command --foo --file %s --authorid %s'
    'format=s' => \my $opt_format,
) or exit 1;

$opt_verbose++ if $opt_debug;
$opt_perlver = version->parse($opt_perlver || $])->numify;

our $VERBOSE = $opt_verbose;
our $DEBUG = $opt_debug;

my $major_error_count = 0; # exit status

my $distro_key_mod_names = {
    'PathTools' => 'File::Spec',
    'Template-Toolkit' => 'Template',
    'TermReadKey' => 'Term::ReadKey',
    'libwww-perl' => 'LWP',
    'ack' => 'App::Ack',
};

sub main {

    die "Usage: $0 perl-lib-directory [...]\n"
        unless @ARGV;
    my @libdirs = @ARGV;

    # check dirs and add archlib's if appropriate
    for my $libdir (@libdirs) {
        die "$libdir isn't a directory\n"
            unless -d $libdir;

        my $archdir = "$libdir/$Config{archname}";
        if (-d $archdir) {
            unshift @libdirs, $archdir
                unless grep { $_ eq $archdir } @libdirs;
        }
    }

    $::DEBUG = $opt_debug;
    $::VERBOSE = $opt_verbose;
    Dist::Surveyor::Inquiry->perma_cache() unless $opt_uncached;

    my $options = {
        opt_match => $opt_match,
        opt_perlver => $opt_perlver,
        opt_remnants => $opt_remnants,
        distro_key_mod_names => $distro_key_mod_names,
    };
    my @installed_releases = determine_installed_releases($options, \@libdirs);
    write_fields(\@installed_releases, $opt_format, [split ' ', $opt_output], \*STDOUT);

    warn sprintf "Completed survey in %.1f minutes using %d metacpan calls.\n",
        (time-$^T)/60, $Dist::Surveyor::Inquiry::metacpan_calls;


    if ($opt_makecpan) {
        my $cpan = Dist::Surveyor::MakeCpan->new(
            $opt_makecpan, PROGNAME, $distro_key_mod_names);

        warn "Updating $opt_makecpan for ".@installed_releases." releases...\n";

        for my $ri (@installed_releases) {
            $cpan->add_release($ri);
        }
        $cpan->close();
        $major_error_count += $cpan->errors();
    }

    exit $major_error_count;
}

sub write_fields {
    my ($releases, $format, $fields, $fh) = @_;

    $format ||= join("\t", ('%s') x @$fields);
    $format .= "\n";

    for my $release_data (@$releases) {
        printf $fh $format, map {
            exists $release_data->{$_} ? $release_data->{$_} : "?$_"
        } @$fields;
    }
}

main(@ARGV);

exit 0;
