#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"CPAN/DistnameInfo.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CPAN_DISTNAMEINFO';
  
  package CPAN::DistnameInfo;
  
  $VERSION = "0.12";
  use strict;
  
  sub distname_info {
    my $file = shift or return;
  
    my ($dist, $version) = $file =~ /^
      ((?:[-+.]*(?:[A-Za-z0-9]+|(?<=\D)_|_(?=\D))*
       (?:
  	[A-Za-z](?=[^A-Za-z]|$)
  	|
  	\d(?=-)
       )(?<![._-][vV])
      )+)(.*)
    $/xs or return ($file,undef,undef);
  
    if ($dist =~ /-undef\z/ and ! length $version) {
      $dist =~ s/-undef\z//;
    }
  
    # Remove potential -withoutworldwriteables suffix
    $version =~ s/-withoutworldwriteables$//;
  
    if ($version =~ /^(-[Vv].*)-(\d.*)/) {
     
      # Catch names like Unicode-Collate-Standard-V3_1_1-0.1
      # where the V3_1_1 is part of the distname
      $dist .= $1;
      $version = $2;
    }
  
    if ($version =~ /(.+_.*)-(\d.*)/) {
        # Catch names like Task-Deprecations5_14-1.00.tar.gz where the 5_14 is
        # part of the distname. However, names like libao-perl_0.03-1.tar.gz
        # should still have 0.03-1 as their version.
        $dist .= $1;
        $version = $2;
    }
  
    # Normalize the Dist.pm-1.23 convention which CGI.pm and
    # a few others use.
    $dist =~ s{\.pm$}{};
  
    $version = $1
      if !length $version and $dist =~ s/-(\d+\w)$//;
  
    $version = $1 . $version
      if $version =~ /^\d+$/ and $dist =~ s/-(\w+)$//;
  
    if ($version =~ /\d\.\d/) {
      $version =~ s/^[-_.]+//;
    }
    else {
      $version =~ s/^[-_]+//;
    }
  
    my $dev;
    if (length $version) {
      if ($file =~ /^perl-?\d+\.(\d+)(?:\D(\d+))?(-(?:TRIAL|RC)\d+)?$/) {
        $dev = 1 if (($1 > 6 and $1 & 1) or ($2 and $2 >= 50)) or $3;
      }
      elsif ($version =~ /\d\D\d+_\d/ or $version =~ /-TRIAL/) {
        $dev = 1;
      }
    }
    else {
      $version = undef;
    }
  
    ($dist, $version, $dev);
  }
  
  sub new {
    my $class = shift;
    my $distfile = shift;
  
    $distfile =~ s,//+,/,g;
  
    my %info = ( pathname => $distfile );
  
    ($info{filename} = $distfile) =~ s,^(((.*?/)?authors/)?id/)?([A-Z])/(\4[A-Z])/(\5[-A-Z0-9]*)/,,
      and $info{cpanid} = $6;
  
    if ($distfile =~ m,([^/]+)\.(tar\.(?:g?z|bz2)|zip|tgz)$,i) { # support more ?
      $info{distvname} = $1;
      $info{extension} = $2;
    }
  
    @info{qw(dist version beta)} = distname_info($info{distvname});
    $info{maturity} = delete $info{beta} ? 'developer' : 'released';
  
    return bless \%info, $class;
  }
  
  sub dist      { shift->{dist} }
  sub version   { shift->{version} }
  sub maturity  { shift->{maturity} }
  sub filename  { shift->{filename} }
  sub cpanid    { shift->{cpanid} }
  sub distvname { shift->{distvname} }
  sub extension { shift->{extension} }
  sub pathname  { shift->{pathname} }
  
  sub properties { %{ $_[0] } }
  
  1;
  
  __END__
  
  =head1 NAME
  
  CPAN::DistnameInfo - Extract distribution name and version from a distribution filename
  
  =head1 SYNOPSIS
  
    my $pathname = "authors/id/G/GB/GBARR/CPAN-DistnameInfo-0.02.tar.gz";
  
    my $d = CPAN::DistnameInfo->new($pathname);
  
    my $dist      = $d->dist;      # "CPAN-DistnameInfo"
    my $version   = $d->version;   # "0.02"
    my $maturity  = $d->maturity;  # "released"
    my $filename  = $d->filename;  # "CPAN-DistnameInfo-0.02.tar.gz"
    my $cpanid    = $d->cpanid;    # "GBARR"
    my $distvname = $d->distvname; # "CPAN-DistnameInfo-0.02"
    my $extension = $d->extension; # "tar.gz"
    my $pathname  = $d->pathname;  # "authors/id/G/GB/GBARR/..."
  
    my %prop = $d->properties;
  
  =head1 DESCRIPTION
  
  Many online services that are centered around CPAN attempt to
  associate multiple uploads by extracting a distribution name from
  the filename of the upload. For most distributions this is easy as
  they have used ExtUtils::MakeMaker or Module::Build to create the
  distribution, which results in a uniform name. But sadly not all
  uploads are created in this way.
  
  C<CPAN::DistnameInfo> uses heuristics that have been learnt by
  L<http://search.cpan.org/> to extract the distribution name and
  version from filenames and also report if the version is to be
  treated as a developer release
  
  The constructor takes a single pathname, returning an object with the following methods
  
  =over
  
  =item cpanid
  
  If the path given looked like a CPAN authors directory path, then this will be the
  the CPAN id of the author.
  
  =item dist
  
  The name of the distribution
  
  =item distvname
  
  The file name with any suffix and leading directory names removed
  
  =item filename
  
  If the path given looked like a CPAN authors directory path, then this will be the
  path to the file relative to the detected CPAN author directory. Otherwise it is the path
  that was passed in.
  
  =item maturity
  
  The maturity of the distribution. This will be either C<released> or C<developer>
  
  =item extension
  
  The extension of the distribution, often used to denote the archive type (e.g. 'tar.gz')
  
  =item pathname
  
  The pathname that was passed to the constructor when creating the object.
  
  =item properties
  
  This will return a list of key-value pairs, suitable for assigning to a hash,
  for the known properties.
  
  =item version
  
  The extracted version
  
  =back
  
  =head1 AUTHOR
  
  Graham Barr <gbarr@pobox.com>
  
  =head1 COPYRIGHT 
  
  Copyright (c) 2003 Graham Barr. All rights reserved. This program is
  free software; you can redistribute it and/or modify it under the same
  terms as Perl itself.
  
  =cut
  
CPAN_DISTNAMEINFO

$fatpacked{"Dist/Surveyor.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR';
  package Dist::Surveyor;
  
  =head1 NAME
  
  Dist::Surveyor - Survey installed modules and determine the specific distribution versions they came from
  
  =head1 SYNOPSIS
  
      my $options = {
          opt_match => $opt_match,
          opt_perlver => $opt_perlver,
          opt_remnants => $opt_remnants,
          distro_key_mod_names => $distro_key_mod_names,
      };
      my @installed_releases = determine_installed_releases($options, \@libdirs);
  
  =head1 DESCRIPTION
  
  Surveys your huge ball of Perl modules, jammed together inside a directory,
  and tells you exactly which module is installed there.
  
  For quick start, and a fine example of this module usage, see L<dist_surveyor>.
  
  This module have one exported function - determine_installed_releases
  
  =cut
  
  use strict;
  use warnings;
  
  use version;
  use Carp; # core
  use Data::Dumper; # core
  use File::Find;  # core
  use File::Spec; # core
  use List::Util qw(max sum); # core
  use Dist::Surveyor::Inquiry; # internal
  use Module::CoreList;
  use Module::Metadata;
  
  use constant ON_WIN32 => $^O eq 'MSWin32';
  use constant ON_VMS   => $^O eq 'VMS';
  
  if (ON_VMS) {
      require File::Spec::Unix;
  }
  
  our ($DEBUG, $VERBOSE);
  *DEBUG = \$::DEBUG;
  *VERBOSE = \$::VERBOSE;
  
  require Exporter;
  our @ISA = qw{Exporter};
  our @EXPORT = qw{determine_installed_releases};
  
  =head1 determine_installed_releases($options, $search_dirs)
  
  $options includes:
  
  =over
  
  =item opt_match
  
  A regex qr//. If exists, will ignore modules that doesn't match this regex
  
  =item opt_perlver
  
  Skip modules that are included as core in this Perl version
  
  =item opt_remnants
  
  If true, output will include old distribution versions that have left old modules behind
  
  =item distro_key_mod_names
  
  A hash-ref, with a list of irregular named releases. i.e. 'libwww-perl' => 'LWP'.
  
  =back
  
  $search_dirs is an array-ref containing the list of directories to survey.
  
  Returns a list, where each element is a hashref representing one installed distibution.
  This hashref is what MetaCPAN returns for http://api.metacpan.org/v0/release/$author/$release,
  with two additional keys: 
  
  =over
  
  =item *
  
  'url' - that same as 'download_url', but without the hostname. can be used to
  download the file for your favorite mirror
  
  =item *
  
  'dist_data' - Hashref containing info about the release, i.e. percent_installed.
  (fully installed releases will have '100.00')
  
  =back
  
  =cut
  
  sub determine_installed_releases {
      my ($options, $search_dirs) = @_;
      $options->{opt_perlver} ||= version->parse( $] )->numify;
  
      my %installed_mod_info;
  
      warn "Finding modules in @$search_dirs\n";
      my ($installed_mod_files, $installed_meta) = find_installed_modules(@$search_dirs);
  
      # get the installed version of each installed module and related info
      warn "Finding candidate releases for the ".keys(%$installed_mod_files)." installed modules\n";
      foreach my $module ( sort keys %$installed_mod_files ) {
          my $mod_file = $installed_mod_files->{$module};
  
          if (my $opt_match = $options->{opt_match}) {
              if ($module !~ m/$opt_match/o) {
                  delete $installed_mod_files->{$module};
                  next;
              }
          }
  
          module_progress_indicator($module) unless $VERBOSE;
          my $mi = get_installed_mod_info($options, $module, $mod_file);
          $installed_mod_info{$module} = $mi if $mi;
      }
  
  
      # Map modules to dists using the accumulated %installed_mod_info info
  
      warn "*** Mapping modules to releases\n";
  
      my %best_dist;
      foreach my $mod ( sort keys %installed_mod_info ) {
          my $mi = $installed_mod_info{$mod};
  
          module_progress_indicator($mod) unless $VERBOSE;
  
          # find best match among the cpan releases that included this module
          my $ccdr = $installed_mod_info{$mod}{candidate_cpan_dist_releases}
              or next; # no candidates, warned about above (for mods with a version)
  
          my $best_dist_cache_key = join " ", sort keys %$ccdr;
          our %best_dist_cache;
          my $best = $best_dist_cache{$best_dist_cache_key}
              ||= pick_best_cpan_dist_release($ccdr, \%installed_mod_info);
  
          my $note = "";
          if ((@$best > 1) and $installed_meta->{perllocalpod}) { 
              # try using perllocal.pod to narrow the options, if there is one
              # XXX TODO move this logic into the per-candidate-distro loop below
              # it doesn't make much sense to be here at the per-module level
              my @in_perllocal = grep {
                  my $distname = $_->{distribution};
                  my ($v, $dist_mod_name) = perllocal_distro_mod_version(
                      $options->{distro_key_mod_names}, $distname, $installed_meta->{perllocalpod});
                  warn "$dist_mod_name in perllocal.pod: ".($v ? "YES" : "NO")."\n"
                      if $DEBUG;
                  $v;
              } @$best;
              if (@in_perllocal && @in_perllocal < @$best) {
                  $note = sprintf "narrowed from %d via perllocal", scalar @$best;
                  $best = \@in_perllocal;
              }
          }
  
          if (@$best > 1 or $note) { # note the poor match for this module
              # but not if there's no version (as that's common)
              my $best_desc = join " or ", map { $_->{release} } @$best;
              my $pct = sprintf "%.2f%%", $best->[0]{fraction_installed} * 100;
              warn "$mod $mi->{version} odd best match: $best_desc $note ($best->[0]{fraction_installed})\n"
                  if $note or $VERBOSE or ($mi->{version} and $best->[0]{fraction_installed} < 0.3);
              # if the module has no version and multiple best matches
              # then it's unlikely make a useful contribution, so ignore it
              # XXX there's a risk that we'd ignore all the modules of a release
              # where none of the modules has a version, but that seems unlikely.
              next if not $mi->{version};
          }
  
          for my $dist (@$best) {
              # two level hash to make it easier to handle versions
              my $di = $best_dist{ $dist->{distribution} }{ $dist->{release} } ||= { dist => $dist };
              push @{ $di->{modules} }, $mi;
              $di->{or}{$_->{release}}++ for grep { $_ != $dist } @$best;
          }
  
      }
  
      warn "*** Refining releases\n";
  
      # $best_dist{ Foo }{ Foo-1.23 }{ dist=>$dist_struct, modules=>, or=>{ Foo-1.22 => $dist_struct } }
  
      my @installed_releases;    # Dist-Name => { ... }
  
      for my $distname ( sort keys %best_dist ) {
          my $releases = $best_dist{$distname};
          push @installed_releases, refine_releases($options, $distname, $releases);
      }
  
      # sorting into dependency order could be added later, maybe
  
      return @installed_releases;
  }
  
  sub refine_releases {
      my ($options, $distname, $releases) = @_;
  
      my @dist_by_version  = sort {
          $a->{dist}{version_obj}        <=> $b->{dist}{version_obj} or
          $a->{dist}{fraction_installed} <=> $b->{dist}{fraction_installed}
      } values %$releases;
      my @dist_by_fraction = sort {
          $a->{dist}{fraction_installed} <=> $b->{dist}{fraction_installed} or
          $a->{dist}{version_obj}        <=> $b->{dist}{version_obj}
      } values %$releases;
      
      my @remnant_dists  = @dist_by_version;
      my $installed_dist = pop @remnant_dists;
  
      # is the most recent candidate dist version also the one with the
      # highest fraction_installed?
      if ($dist_by_version[-1] == $dist_by_fraction[-1]) {
          # this is the common case: we'll assume that's installed and the
          # rest are remnants of earlier versions
      }
      elsif ($dist_by_fraction[-1]{dist}{fraction_installed} == 100) {
          warn "Unsure which $distname is installed from among @{[ keys %$releases ]}\n";
          @remnant_dists  = @dist_by_fraction;
          $installed_dist = pop @remnant_dists;
          warn "Selecting the one that apprears to be 100% installed\n";
      }
      else {
          # else grumble so the user knows to ponder the possibilities
          warn "Can't determine which $distname is installed from among @{[ keys %$releases ]}\n";
          warn Dumper([\@dist_by_version, \@dist_by_fraction]);
          warn "\tSelecting based on latest version\n";
      }
  
      if (@remnant_dists or $DEBUG) {
          warn "Distributions with remnants (chosen release is first):\n"
              unless our $dist_with_remnants_warning++;
          warn "@{[ map { $_->{dist}{release} } reverse @dist_by_fraction ]}\n"; 
          for ($installed_dist, @remnant_dists) {
              my $fi = $_->{dist}{fraction_installed};
              my $modules = $_->{modules};
              my $mv_desc = join(", ", map { "$_->{module} $_->{version}" } @$modules);
              warn sprintf "\t%s\t%s%% installed: %s\n",
                  $_->{dist}{release},
                  $_->{dist}{percent_installed},
                  (@$modules > 4 ? "(".@$modules." modules)" : $mv_desc),
          }
      }
  
      my @installed_releases;
      # note ordering: remnants first
      for (($options->{opt_remnants} ? @remnant_dists : ()), $installed_dist) {
          my ($author, $release)
              = @{$_->{dist}}{qw(author release)};
  
          my $release_data = get_release_info($author, $release);
          next unless $release_data;
          
          # shortcuts
          (my $url = $release_data->{download_url}) =~ s{ .*? \b authors/ }{authors/}x;
  
          push @installed_releases, {
              # 
              %$release_data,
              # extra items mushed inhandy shortcuts
              url => $url,
              # raw data structures
              dist_data => $_->{dist},
          };
      }
      #die Dumper(\@installed_releases);
      return @installed_releases;
  }
  
  # for each installed module, get the list of releases that it exists in
  # Parameters:
  #   $options - uses only opt_perlver
  #   $module - module name (i.e. 'Dist::Surveyor')
  #   $mod_file - the location of this module on the filesystem
  # Return:
  #   undef if this module should be skipped
  #   otherwise, a hashref containing:
  #       file => $mod_file,
  #       module => $module,
  #       version => $mod_version,
  #       version_obj => same as version, but as an object,
  #       size => $mod_file_size,
  #       # optional flags:
  #       file_size_mismatch => 1,
  #       cpan_dist_fallback => 1, # could not find this module/version on cpan,
  #           # but found a release with that version, containing such module
  #       version_not_on_cpan> 1, # can not find this file on CPAN.
  #       # releases info
  #       candidate_cpan_dist_releases => hashref,
  #
  #   candidate_cpan_dist_releases hashref contain a map of all the releases
  #   that this module exists in. see get_candidate_cpan_dist_releases for more
  #   info.
  sub get_installed_mod_info {
      my ($options, $module, $mod_file) = @_;
  
      my $mod_version = do {
          # silence warnings about duplicate VERSION declarations
          # eg Catalyst::Controller::DBIC::API* 2.002001
          local $SIG{__WARN__} = sub { warn @_ if $_[0] !~ /already declared with version/ };
          my $mm = Module::Metadata->new_from_file($mod_file);
          $mm->version; # only one version for one package in file
      };
      $mod_version ||= 0; # XXX
      my $mod_file_size = -s $mod_file;
  
      # Eliminate modules that will be supplied by the target perl version
      if ( my $cv = $Module::CoreList::version{ $options->{opt_perlver} }->{$module} ) {
          $cv =~ s/ //g;
          if (version->parse($cv) >= version->parse($mod_version)) {
              warn "$module is core in perl $options->{opt_perlver} (lib: $mod_version, core: $cv) - skipped\n";
              return;
          }
      }
  
      my $mi = {
          file => $mod_file,
          module => $module,
          version => $mod_version,
          version_obj => version->parse($mod_version),
          size => $mod_file_size,
      };
  
      # ignore modules we know aren't indexed
      return $mi if $module =~ /^Moose::Meta::Method::Accessor::Native::/;
  
      # XXX could also consider file mtime: releases newer than the mtime
      # of the module file can't be the origin of that module file.
      # (assuming clocks and file times haven't been messed with)
  
      eval {
          my $ccdr = get_candidate_cpan_dist_releases($module, $mod_version, $mod_file_size);
          if (not %$ccdr) {
              $ccdr = get_candidate_cpan_dist_releases($module, $mod_version, 0);
              if (%$ccdr) {
                  # probably either a local change/patch or installed direct from repo
                  # but with a version number that matches a release
                  warn "$module $mod_version on CPAN but with different file size (not $mod_file_size)\n"
                      if $mod_version or $VERBOSE;
                  $mi->{file_size_mismatch}++;
              }
              elsif ($ccdr = get_candidate_cpan_dist_releases_fallback($module, $mod_version) and %$ccdr) {
                  warn "$module $mod_version not on CPAN but assumed to be from @{[ sort keys %$ccdr ]}\n"
                      if $mod_version or $VERBOSE;
                  $mi->{cpan_dist_fallback}++;
              }
              else {
                  $mi->{version_not_on_cpan}++;
                  # Possibly:
                  # - a local change/patch or installed direct from repo
                  #   with a version number that was never released.
                  # - a private module never released on cpan.
                  # - a build-time create module eg common/sense.pm.PL
                  warn "$module $mod_version not found on CPAN\n"
                      if $mi->{version} # no version implies uninteresting
                      or $VERBOSE;
                  # XXX could try finding the module with *any* version on cpan
                  # to help with later advice. ie could select as candidates
                  # the version above and the version below the number we have,
                  # and set a flag to inform later logic.
              }
          }
          $mi->{candidate_cpan_dist_releases} = $ccdr if %$ccdr;
      };
      if ($@) {
          warn "Failed get_candidate_cpan_dist_releases($module, $mod_version, $mod_file_size): $@";
      }
      return $mi;
  }
  
  # pick_best_cpan_dist_release - memoized
  # for each %$ccdr adds a fraction_installed based on %$installed_mod_info
  # returns ref to array of %$ccdr values that have the max fraction_installed
  
  sub pick_best_cpan_dist_release {
      my ($ccdr, $installed_mod_info) = @_;
  
      for my $release (sort keys %$ccdr) {
          my $release_info = $ccdr->{$release};
          $release_info->{fraction_installed}
              = dist_fraction_installed($release_info->{author}, $release, $installed_mod_info);
          $release_info->{percent_installed} # for informal use
              = sprintf "%.2f", $release_info->{fraction_installed} * 100;
      }
  
      my $max_fraction_installed = max( map { $_->{fraction_installed} } values %$ccdr );
      my @best = grep { $_->{fraction_installed} == $max_fraction_installed } values %$ccdr;
  
      return \@best;
  }
  
  
  # returns a number from 0 to 1 representing the fraction of the modules
  # in a particular release match the coresponding modules in %$installed_mod_info
  sub dist_fraction_installed {
      my ($author, $release, $installed_mod_info) = @_;
  
      my $tag = "$author/$release";
      my $mods_in_rel = get_module_versions_in_release($author, $release);
      my $mods_in_rel_count = keys %$mods_in_rel;
      my $mods_inst_count = sum( map {
          my $mi = $installed_mod_info->{ $_->{name} };
          # XXX we stash the version_obj into the mods_in_rel hash
          # (though with little/no caching effect with current setup)
          $_->{version_obj} ||= eval { version->parse($_->{version}) };
          my $hit = ($mi && $mi->{version_obj} == $_->{version_obj}) ? 1 : 0;
          # demote to a low-scoring partial match if the file size differs
          # XXX this isn't good as the effect varies with the number of modules
          $hit = 0.1 if $mi && $mi->{size} != $_->{size};
          warn sprintf "%s %s %s %s: %s\n", $tag, $_->{name}, $_->{version_obj}, $_->{size},
                  ($hit == 1) ? "matches"
                      : ($mi) ? "differs ($mi->{version_obj}, $mi->{size})"
                      : "not installed",
              if $DEBUG;
          $hit;
      } values %$mods_in_rel) || 0;
  
      my $fraction_installed = ($mods_in_rel_count) ? $mods_inst_count/$mods_in_rel_count : 0;
      warn "$author/$release:\tfraction_installed $fraction_installed ($mods_inst_count/$mods_in_rel_count)\n"
          if $VERBOSE or !$mods_in_rel_count;
  
      return $fraction_installed;
  }
  
  sub get_file_mtime {
      my ($file) = @_;
      # try to find the time the file was 'installed'
      # by looking for the commit date in svn or git
      # else fallback to the file modification time
      return (stat($file))[9];
  }
  
  
  sub find_installed_modules {
      my (@dirs) = @_;
  
      ### File::Find uses follow_skip => 1 by default, which doesn't die
      ### on duplicates, unless they are directories or symlinks.
      ### Ticket #29796 shows this code dying on Alien::WxWidgets,
      ### which uses symlinks.
      ### File::Find doc says to use follow_skip => 2 to ignore duplicates
      ### so this will stop it from dying.
      my %find_args = ( follow_skip => 2 );
  
      ### File::Find uses lstat, which quietly becomes stat on win32
      ### it then uses -l _ which is not allowed by the statbuffer because
      ### you did a stat, not an lstat (duh!). so don't tell win32 to
      ### follow symlinks, as that will break badly
      # XXX disabled because we want the postprocess hook to work
      #$find_args{'follow_fast'} = 1 unless ON_WIN32;
  
      ### never use the @INC hooks to find installed versions of
      ### modules -- they're just there in case they're not on the
      ### perl install, but the user shouldn't trust them for *other*
      ### modules!
      ### XXX CPANPLUS::inc is now obsolete, remove the calls
      #local @INC = CPANPLUS::inc->original_inc;
  
      # sort @dirs to put longest first to make it easy to handle
      # elements that are within other elements (e.g., an archdir)
      my @dirs_ordered = sort { length $b <=> length $a } @dirs;
  
      my %seen_mod;
      my %dir_done;
      my %meta; # return metadata about the search
      for my $dir (@dirs_ordered) {
          next if $dir eq '.';
  
          ### not a directory after all
          ### may be coderef or some such
          next unless -d $dir;
  
          ### make sure to clean up the directories just in case,
          ### as we're making assumptions about the length
          ### This solves rt.cpan issue #19738
  
          ### John M. notes: On VMS cannonpath can not currently handle
          ### the $dir values that are in UNIX format.
          $dir = File::Spec->canonpath($dir) unless ON_VMS;
  
          ### have to use F::S::Unix on VMS, or things will break
          my $file_spec = ON_VMS ? 'File::Spec::Unix' : 'File::Spec';
  
          ### XXX in some cases File::Find can actually die!
          ### so be safe and wrap it in an eval.
          eval {
              File::Find::find(
                  {   %find_args,
                      postprocess => sub {
                          $dir_done{$File::Find::dir}++;
                      },
                      wanted => sub {
  
                          unless (/\.pm$/i) {
                              # skip all dot-dirs (eg .git .svn)
                              $File::Find::prune = 1
                                  if -d $File::Find::name and /^\.\w/;
                              # don't reenter a dir we've already done
                              $File::Find::prune = 1
                                  if $dir_done{$File::Find::name};
                              # remember perllocal.pod if we see it
                              push @{$meta{perllocalpod}}, $File::Find::name
                                  if $_ eq 'perllocal.pod';
                              return;
                          }
                          my $mod = $File::Find::name;
  
                          ### make sure it's in Unix format, as it
                          ### may be in VMS format on VMS;
                          $mod = VMS::Filespec::unixify($mod) if ON_VMS;
  
                          $mod = substr( $mod, length($dir) + 1, -3 );
                          $mod = join '::', $file_spec->splitdir($mod);
  
                          return if $seen_mod{$mod};
                          $seen_mod{$mod} = $File::Find::name;
  
                          ### ignore files that don't contain a matching package declaration
                          ### warn about those that do contain some kind of package declaration
                          #use File::Slurp;
                          #my $content = read_file($File::Find::name);
                          #unless ( $content =~ m/^ \s* package \s+ (\#.*\n\s*)? $mod \b/xm ) {
                          #warn "No 'package $mod' seen in $File::Find::name\n"
                          #if $VERBOSE && $content =~ /\b package \b/x;
                          #return;
                          #}
  
                      },
                  },
                  $dir
              );
              1;
          }
              or die "File::Find died: $@";
  
      }
  
      return (\%seen_mod, \%meta);
  }
  
  
  sub perllocal_distro_mod_version {
      my ($distro_key_mod_names, $distname, $perllocalpod) = @_;
  
      ( my $dist_mod_name = $distname ) =~ s/-/::/g;
      my $key_mod_name = $distro_key_mod_names->{$distname} || $dist_mod_name;
  
      our $perllocal_distro_mod_version;
      if (not $perllocal_distro_mod_version) { # initial setup
          warn "Only first perllocal.pod file will be processed: @$perllocalpod\n"
              if ref $perllocalpod eq 'ARRAY' and @$perllocalpod > 1;
  
          $perllocal_distro_mod_version = {};
          # extract data from perllocal.pod
          if (my $plp = shift @$perllocalpod) {
              # The VERSION isn't always the same as that in the distro file
              if (eval { require ExtUtils::Perllocal::Parser }) {
                  my $p = ExtUtils::Perllocal::Parser->new;
                  $perllocal_distro_mod_version = { map {
                      $_->name => $_->{data}{VERSION}
                  } $p->parse_from_file($plp) };
                  warn "Details of ".keys(%$perllocal_distro_mod_version)." distributions found in $plp\n";
              }
              else {
                  warn "Wanted to use perllocal.pod but can't because ExtUtils::Perllocal::Parser isn't available\n";
              }
          }
          else {
              warn "No perllocal.pod found to aid disambiguation\n";
          }
      }
  
      return $perllocal_distro_mod_version->{$key_mod_name};
  }
  
  
  sub module_progress_indicator {
      my ($module) = @_;
      my $crnt = (split /::/, $module)[0];
      our $last ||= '';
      if ($last ne $crnt) {
          warn "\t$crnt...\n";
          $last = $crnt;
      }
  }
  
  =head1 OTHERS
  
  This module checks $::DEBUG and $::VERBOSE for obvious proposes.
  
  This module uses L<Dist::Surveyor::Inquiry> to communicate with MetaCPAN. 
  Check that module's documentation for options and caching. 
  
  You can use L<Dist::Surveyor::MakeCpan> to take the list of releases
  and create a mini-cpan containing them.
  
  =head1 AUTHOR
  
  Written by Tim Bunce E<lt>Tim.Bunce@pobox.comE<gt> 
  
  Maintained by Fomberg Shmuel E<lt>shmuelfomberg@gmail.comE<gt>, Dan Book E<lt>dbook@cpan.orgE<gt>
   
  =head1 COPYRIGHT AND LICENSE
   
  Copyright 2011-2013 by Tim Bunce.
   
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
   
  =cut
  
  1;
DIST_SURVEYOR

$fatpacked{"Dist/Surveyor/DB_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR_DB_FILE';
  package Dist::Surveyor::DB_File;
  
  use strict;
  use warnings;
  use Storable qw(freeze thaw);
  
  our @ISA;
  if    (eval { require DB_File;   1; }) {
      @ISA = ('DB_File');
  
  }
  elsif (eval { require SDBM_File; 1; }) {
      @ISA = ('SDBM_File');
  }
  else {
      die "Need either DB_file or SDBM_File installed to run";
  }
  
  # DB_File can store only strings as values, and not Perl structures
  # this small wrapper fixes the problem
  
  sub STORE {
      my ($self, $key, $val) = @_;
      $self->SUPER::STORE($key, freeze($val));
  }
  
  sub FETCH {
      my ($self, $key) = @_;
      my $val = $self->SUPER::FETCH($key);
      return thaw($val);
  }
  
  return 1;
DIST_SURVEYOR_DB_FILE

$fatpacked{"Dist/Surveyor/Inquiry.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR_INQUIRY';
  package Dist::Surveyor::Inquiry;
  
  use strict;
  use warnings;
  use Memoize; # core
  use FindBin;
  use Fcntl qw(:DEFAULT :flock); # core
  use Dist::Surveyor::DB_File; # internal
  use HTTP::Tiny;
  use JSON::MaybeXS qw(JSON decode_json);
  use Scalar::Util qw(looks_like_number); # core
  use Data::Dumper;
  use version;
  
  =head1 NAME
  
  Dist::Surveyor::Inquiry - Handling the meta-cpan API access for Dist::Surveyor
  
  =head1 DESCRIPTION
  
  There are a few things that needed to be known in this module:
  
  =over
  
  =item *
  
  $metacpan_size - internally defined global to limit the maximum size of 
  every API call
  
  =item *
  
  $metacpan_calls - internally defined global counting how many API call happen.
  
  =item *
  
  This module checks $::DEBUG and $::VERBOSE for obvious proposes.
  
  =item *
  
  For initating cache-on-disk, call Dist::Surveyor::Inquiry->perma_cache()
  (this should be usually done, except in testing environment)
  
  =back
  
  =cut
  
  # We have to limit the number of results when using MetaCPAN::API.
  # We can'r make it too large as it hurts the server (it preallocates)
  # but need to make it large enough for worst case distros (eg eBay-API).
  # TODO: switching to the ElasticSearch module, with cursor support, will
  # probably avoid the need for this. Else we could dynamically adjust.
  our $metacpan_size = 2500;
  our $metacpan_calls = 0;
  
  our ($DEBUG, $VERBOSE);
  *DEBUG = \$::DEBUG;
  *VERBOSE = \$::VERBOSE;
  
  my $ua = HTTP::Tiny->new(
      agent => $0,
      timeout => 10,
      keep_alive => 1, 
  );
  
  require Exporter;
  our @ISA = qw{Exporter};
  our @EXPORT = qw{
      get_candidate_cpan_dist_releases
      get_candidate_cpan_dist_releases_fallback
      get_module_versions_in_release
      get_release_info
  };
  
  # caching via persistent memoize
  
  my %memoize_cache;
  my $locking_file;
  
  =head1 CLASS METHODS
  
  =head2 Dist::Surveyor::Inquiry->perma_cache()
  
  Enable caching to disk of all the MetaCPAN API requests.
  This cache can grew to be quite big - 40MB is one case, but it worth it,
  as if you will need to run this program again, it will run much faster.
  
  =cut
  
  sub perma_cache {
      my $class = shift;
      my $db_generation = 3; # XXX increment on incompatible change
      my $pname = $FindBin::Script;
      $pname =~ s/\..*$//;
      my $memoize_file = "$pname-$db_generation.db";
      open $locking_file, ">", "$memoize_file.lock" 
          or die "Unable to open lock file: $!";
      flock ($locking_file, LOCK_EX) || die "flock: $!";
      tie %memoize_cache => 'Dist::Surveyor::DB_File', $memoize_file, O_CREAT|O_RDWR, 0640
          or die "Unable to use persistent cache: $!";
  }
  
  my @memoize_subs = qw(
      get_candidate_cpan_dist_releases
      get_candidate_cpan_dist_releases_fallback
      get_module_versions_in_release
      get_release_info
  );
  for my $subname (@memoize_subs) {
      my %memoize_args = (
          SCALAR_CACHE => [ HASH => \%memoize_cache ],
          LIST_CACHE   => 'FAULT',
          NORMALIZER   => sub { return join("\034", $subname, @_) }
      );
      memoize($subname, %memoize_args);
  }
  
  =head1 FUNCTIONS
  
  =head2 get_release_info($author, $release)
  
  Receive release info, such as:
  
      get_release_info('SEMUELF', 'Dist-Surveyor-0.009')
  
  Returns a hashref containing all that release meta information, returned by
  http://api.metacpan.org/v0/release/$author/$release
  (but not information on the files inside the module)
  
  Dies on HTTP error, and warns on empty response.
  
  =cut
  
  sub get_release_info {
      my ($author, $release) = @_;
      $metacpan_calls++;
      my $response = $ua->get("http://api.metacpan.org/v0/release/$author/$release");
      die "$response->{status} $response->{reason}" unless $response->{success};
      my $release_data = decode_json $response->{content};
      if (!$release_data) {
          warn "Can't find release details for $author/$release - SKIPPED!\n";
          return; # XXX could fake some of $release_data instead
      }
      return $release_data;
  }
  
  =head2 get_candidate_cpan_dist_releases($module, $version, $file_size)
  
  Return a hashref containing all the releases that contain this module 
  (with the specific version and file size combination)
  
  The keys are the release name (i.e. 'Dist-Surveyor-0.009') and the value
  is a hashref containing release information and file information:
  
      'Dist-Surveyor-0.009' => {
          # release information
          'date' => '2013-02-20T06:48:35.000Z',
          'version' => '0.009',
          'author' => 'SEMUELF',
          'version_numified' => '0.009',
          'release' => 'Dist-Surveyor-0.009',
          'distribution' => 'Dist-Surveyor',
          'version_obj' => <version object 0.009>,
  
          # File information
          'path' => 'lib/Dist/Surveyor/DB_File.pm',
          'stat.mtime' => 1361342736,
          'module.version' => '0.009'
          'module.version_numified' => '0.009',
      }
  
  =cut
  
  sub get_candidate_cpan_dist_releases {
      my ($module, $version, $file_size) = @_;
      my $funcstr = "get_candidate_cpan_dist_releases($module, $version, $file_size)";
  
      my $version_qual = _prepare_version_query(0, $version);
  
      my @and_quals = (
          {"term" => {"file.module.name" => $module }},
          (@$version_qual > 1 ? { "or" => $version_qual } : $version_qual->[0]),
      );
      push @and_quals, {"term" => {"file.stat.size" => $file_size }}
          if $file_size;
  
      # XXX doesn't cope with odd cases like 
      # http://explorer.metacpan.org/?url=/module/MLEHMANN/common-sense-3.4/sense.pm.PL
      $metacpan_calls++;
  
      my $query = {
          "size" => $metacpan_size,
          "query" =>  { "filtered" => {
              "filter" => {"and" => \@and_quals },
              "query" => {"match_all" => {}},
          }},
          "fields" => [qw(
              release _parent author version version_numified file.module.version 
              file.module.version_numified date stat.mtime distribution file.path
              )]
      };
  
      my $response = $ua->post(
          'http://api.metacpan.org/v0/file', {
              headers => { 'Content-Type' => 'application/json;charset=UTF-8' },
              content => JSON->new->utf8->canonical->encode($query),
          }
      );
      die "$response->{status} $response->{reason}" unless $response->{success};
      return _process_response($funcstr, $response);
  }
  
  =head2 get_candidate_cpan_dist_releases_fallback($module, $version)
  
  Similar to get_candidate_cpan_dist_releases, but getting called when 
  get_candidate_cpan_dist_releases fails for find matching file and release.
  
  Maybe the file was tempared somehow, so the file size does not match anymore.
  
  =cut
  
  sub get_candidate_cpan_dist_releases_fallback {
      my ($module, $version) = @_;
  
      # fallback to look for distro of the same name as the module
      # for odd cases like
      # http://explorer.metacpan.org/?url=/module/MLEHMANN/common-sense-3.4/sense.pm.PL
      (my $distname = $module) =~ s/::/-/g;
  
      my $version_qual = _prepare_version_query(1, $version);
  
      my @and_quals = (
          {"term" => {"distribution" => $distname }},
          (@$version_qual > 1 ? { "or" => $version_qual } : $version_qual->[0]),
      );
  
      # XXX doesn't cope with odd cases like 
      $metacpan_calls++;
      my $query = {
          "size" => $metacpan_size,
          "query" =>  { "filtered" => {
              "filter" => {"and" => \@and_quals },
              "query" => {"match_all" => {}},
          }},
          "fields" => [qw(
              release _parent author version version_numified file.module.version 
              file.module.version_numified date stat.mtime distribution file.path)]
      };
      my $response = $ua->post(
          'http://api.metacpan.org/v0/file', {
              headers => { 'Content-Type' => 'application/json;charset=UTF-8' },
              content => JSON->new->utf8->canonical->encode($query),
          }
      );
      die "$response->{status} $response->{reason}" unless $response->{success};
      return _process_response("get_candidate_cpan_dist_releases_fallback($module, $version)", $response);
  }
  
  sub _prepare_version_query {
      my ($is_fallback, $version) = @_;
      $version = 0 if not defined $version; # XXX
      my ($v_key, $num_key) = 
          $is_fallback 
          ? qw{ version version_numified } 
          : qw{ file.module.version file.module.version_numified };
  
      # timbunce: So, the current situation is that: version_numified is a float
      # holding version->parse($raw_version)->numify, and version is a string
      # also holding version->parse($raw_version)->numify at the moment, and
      # that'll change to ->stringify at some point. Is that right now? 
      # mo: yes, I already patched the indexer, so new releases are already
      # indexed ok, but for older ones I need to reindex cpan
      my $v = (ref $version && $version->isa('version')) ? $version : version->parse($version);
      my %v = map { $_ => 1 } "$version", $v->stringify, $v->numify;
      my @version_qual;
      push @version_qual, { term => { $v_key => $_ } }
          for keys %v;
      push @version_qual, { term => { $num_key => $_ }}
          for grep { looks_like_number($_) } keys %v;
      return \@version_qual;
  }
  
  sub _process_response {
      my ($funcname, $response) = @_;
  
      my $results = decode_json $response->{content};
  
      my $hits = $results->{hits}{hits};
      die "$funcname: too many results (>$metacpan_size)"
          if @$hits >= $metacpan_size;
      warn "$funcname: ".Dumper($results)
          if grep { not $_->{fields}{release} } @$hits; # XXX temp, seen once but not since
  
      # filter out perl-like releases
      @$hits = 
          grep { $_->{fields}{path} !~ m!^(?:t|xt|tests?|inc|samples?|ex|examples?|bak|local-lib)\b! }
          grep { $_->{fields}{release} !~ /^(perl|ponie|parrot|kurila|SiePerl-)/ } 
          @$hits;
  
      for my $hit (@$hits) {
          $hit->{release_id} = delete $hit->{_parent};
          # add version_obj for convenience (will fail and be undef for releases like "0.08124-TRIAL")
          $hit->{fields}{version_obj} = eval { version->parse($hit->{fields}{version}) };
      }
  
      # we'll return { "Dist-Name-Version" => { details }, ... }
      my %dists = map { $_->{fields}{release} => $_->{fields} } @$hits;
  
      warn "$funcname: @{[ sort keys %dists ]}\n"
          if $VERBOSE;
  
      return \%dists;
  }
  
  =head2 get_module_versions_in_release($author, $release)
  
  Receive release info, such as:
  
      get_module_versions_in_release('SEMUELF', 'Dist-Surveyor-0.009')
  
  And returns a hashref, that contains one entry for each module that exists 
  in the release. module information is the format:
  
      'Dist::Surveyor' => {
          'version' => '0.009',
          'name' => 'Dist::Surveyor',
          'path' => 'lib/Dist/Surveyor.pm',
          'size' => 43879
      },
  
  this function can be called for all sorts of releases that are only vague 
  possibilities and aren't actually installed, so generally it's quiet
  
  =cut
  
  sub get_module_versions_in_release {
      my ($author, $release) = @_;
  
      $metacpan_calls++;
      my $results = eval { 
          my $query = {
              "size" => $metacpan_size,
              "query" =>  { "filtered" => {
                  "filter" => {"and" => [
                      {"term" => {"release" => $release }},
                      {"term" => {"author" => $author }},
                      {"term" => {"mime" => "text/x-script.perl-module"}},
                  ]},
                  "query" => {"match_all" => {}},
              }},
              "fields" => ["path","name","_source.module", "_source.stat.size"],
          }; 
          my $response = $ua->post(
              'http://api.metacpan.org/v0/file', {
                  headers => { 'Content-Type' => 'application/json;charset=UTF-8' },
                  content => JSON->new->utf8->canonical->encode($query),
              }
          );
          die "$response->{status} $response->{reason}" unless $response->{success};
          decode_json $response->{content};
      };
      if (not $results) {
          warn "Failed get_module_versions_in_release for $author/$release: $@";
          return {};
      }
      my $hits = $results->{hits}{hits};
      die "get_module_versions_in_release($author, $release): too many results"
          if @$hits >= $metacpan_size;
  
      my %modules_in_release;
      for my $hit (@$hits) {
          my $path = $hit->{fields}{path};
  
          # XXX try to ignore files that won't get installed
          # XXX should use META noindex!
          if ($path =~ m!^(?:t|xt|tests?|inc|samples?|ex|examples?|bak|local-lib)\b!) {
              warn "$author/$release: ignored non-installed module $path\n"
                  if $DEBUG;
              next;
          }
  
          my $size = $hit->{fields}{"_source.stat.size"};
          # files can contain more than one package ('module')
          my $rel_mods = $hit->{fields}{"_source.module"} || [];
          for my $mod (@$rel_mods) { # actually packages in the file
  
              # Some files may contain multiple packages. We want to ignore
              # all except the one that matches the name of the file.
              # We use a fairly loose (but still very effective) test because we
              # can't rely on $path including the full package name.
              (my $filebasename = $hit->{fields}{name}) =~ s/\.pm$//;
              if ($mod->{name} !~ m/\b$filebasename$/) {
                  warn "$author/$release: ignored $mod->{name} in $path\n"
                      if $DEBUG;
                  next;
              }
  
              # warn if package previously seen in this release
              # with a different version or file size
              if (my $prev = $modules_in_release{$mod->{name}}) {
                  my $version_obj = eval { version->parse($mod->{version}) };
                  die "$author/$release: $mod $mod->{version}: $@" if $@;
  
                  if ($VERBOSE) {
                      # XXX could add a show-only-once cache here
                      my $msg = "$mod->{name} $mod->{version} ($size) seen in $path after $prev->{path} $prev->{version} ($prev->{size})";
                      warn "$release: $msg\n"
                          if ($version_obj != version->parse($prev->{version}) or $size != $prev->{size});
                  }
              }
  
              # keep result small as Storable thawing this is major runtime cost
              # (specifically we avoid storing a version_obj here)
              $modules_in_release{$mod->{name}} = {
                  name => $mod->{name},
                  path => $path,
                  version => $mod->{version},
                  size => $size,
              };
          }
      }
  
      warn "\n$author/$release contains: @{[ map { qq($_->{name} $_->{version}) } values %modules_in_release ]}\n"
          if $DEBUG;
  
      return \%modules_in_release;
  }
  
  =head1 License, Copyright
  
  Please see L<Dist::Surveyor> for details
  
  =cut
  
  1;
DIST_SURVEYOR_INQUIRY

$fatpacked{"Dist/Surveyor/MakeCpan.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DIST_SURVEYOR_MAKECPAN';
  package Dist::Surveyor::MakeCpan;
  
  use strict;
  use warnings;
  use Carp; # core
  use Data::Dumper; # core
  use File::Path; # core
  use CPAN::DistnameInfo;
  use File::Basename qw{dirname};  # core
  use HTTP::Tiny;
  use Dist::Surveyor::Inquiry;
  use List::Util qw(max); # core
  
  our $verbose;
  *verbose = \$::VERBOSE;
  
  sub new {
      my ($class, $cpan_dir, $progname, $irregularities) = @_;
  
      require Compress::Zlib;
      mkpath("$cpan_dir/modules");
  
      # --- write extra data files that may be useful XXX may change
      # XXX these don't all (yet?) merge with existing data
      my $survey_datadump_dir = "$cpan_dir/$progname";
      mkpath($survey_datadump_dir);
  
      # Write list of releases, like default stdout
      open my $rel_fh, ">", "$survey_datadump_dir/releases.txt";
  
      # dump the primary result data for additional info and debugging
      my $gzwrite = Compress::Zlib::gzopen("$survey_datadump_dir/_data_dump.perl.gz", 'wb')
          or croak "Cannot open $survey_datadump_dir/_data_dump.perl.gz for writing: " . $Compress::Zlib::gzerrno;
      $gzwrite->gzwrite("[\n");
  
  
      my $self = {
          errors => 0,
          cpan_dir => $cpan_dir,
          irregularities => $irregularities,
          pkg_ver_rel => {}, # for 02packages
          progname => $progname,
          rel_fh => $rel_fh,
          gzwrite => $gzwrite,
      };
      return bless $self, $class;
  }
  
  sub close {
      my $self = shift;
  
      # --- write 02packages file
  
      my $pkg_lines = _readpkgs($self->{cpan_dir});
      my %packages;
      for my $line (@$pkg_lines, map { $_->{line} } values %{ $self->{pkg_ver_rel} }) {
          my ($pkg) = split(/\s+/, $line, 2);
          if ($packages{$pkg} and $packages{$pkg} ne $line) {
              warn "Old $packages{$pkg}\nNew $line\n" if $verbose;
          }
          $packages{$pkg} = $line;
      };
      _writepkgs($self->{cpan_dir}, [ sort { lc $a cmp lc $b } values %packages ] );
  
  
  
      # Write list of token packages - each should match only one release.
      # This makes it _much_ faster to do installs via cpanm because it
      # can skip the modules it knows are installed (whereas using a list of
      # distros it has to reinstall _all_ of them every time).
      # XXX maybe add as a separate option: "--mainpkgs mainpkgs.lst"
      my %dist_packages;
      while ( my ($pkg, $line) = each %packages) {
          my $distpath = (split /\s+/, $line)[2];
          $dist_packages{$distpath}{$pkg}++;
      }
      my %token_package;
      my %token_package_pri = (       # alter install order for some modules
          'Module::Build' => 100,     # should be near first
          Moose => 50,
  
          # install distros that use Module::Install late so their dependencies
          # have already been resolved (else they try to fetch them directly,
          # bypassing our cpanm --mirror-only goal)
          'Olson::Abbreviations' => -90,
  
          # distros with special needs
          'Term::ReadKey' => -100,    # tests hang if run in background
      );
      for my $distpath (sort keys %dist_packages) {
          my $dp = $dist_packages{$distpath};
          my $di = CPAN::DistnameInfo->new($distpath);
          #warn Dumper([ $distpath, $di->dist, $di]);
          (my $token_pkg = $di->dist) =~ s/-/::/g;
          if (!$dp->{$token_pkg}) {
              if (my $keypkg = $self->{irregularities}->{$di->dist}) {
                  $token_pkg = $keypkg;
              }
              else {
                  # XXX not good - may pick a dummy test package
                  $token_pkg = (grep { $_ } keys %$dp)[0] || $token_pkg;
                  warn "Picked $token_pkg as token package for ".$di->distvname."\n";
              }
          }
          $token_package{$token_pkg} = $token_package_pri{$token_pkg} || 0;
      }
  
      my @main_pkgs = sort { $token_package{$b} <=> $token_package{$a} or $a cmp $b } keys %token_package;
      open my $key_pkg_fh, ">", join('/', $self->{cpan_dir}, $self->{progname}, "token_packages.txt");
      print $key_pkg_fh "$_\n" for @main_pkgs;
      close $key_pkg_fh;
  
      close $self->{rel_fh};
  
      $self->{gzwrite}->gzwrite("]\n");
      $self->{gzwrite}->gzclose;
  
      warn $self->{cpan_dir}." updated.\n";
      return $self->{errors};
  }
  
  sub add_release {
      my ($self, $ri) = @_;
  
      # --- get the file
  
      my $main_url = $ri->{download_url};
      my $di = distname_info_from_url($main_url);
      my $pathfile = "authors/id/".$di->pathname;
      my $destfile = $self->{cpan_dir}."/$pathfile";
      mkpath(dirname($destfile));
  
      my @urls = ($main_url);
      for my $mirror ('http://backpan.perl.org') {
          push @urls, "$mirror/$pathfile";
      }
  
      my $mirror_status;
      my $ua = HTTP::Tiny->new;
      for my $url (@urls) {
          $mirror_status = $ua->mirror($url, $destfile);
          last if $mirror_status->{success};
      }
      if (!$mirror_status->{success}) {
          my $err = $mirror_status->{status} == 599 ? $mirror_status->{content} : $mirror_status->{status};
          my $msg = "Error $err mirroring $main_url";
          if (-f $destfile) {
              warn "$msg - using existing file\n";
          }
          else {
              # better to keep going and add the packages to the index
              # than abort at this stage due to network/mirror problems
              # the user can drop the files in later
              warn "$msg - continuing, ADD FILE MANUALLY!\n";
              $self->{errors}++;
          }
      }
      else {
          warn "$mirror_status->{status} $main_url\n" if $verbose;
      }
  
  
      my $mods_in_rel = get_module_versions_in_release($ri->{author}, $ri->{name});
  
      if (!keys %$mods_in_rel) { # XXX hack for common::sense
          (my $dist_as_pkg = $ri->{distribution}) =~ s/-/::/g;
          warn "$ri->{author}/$ri->{name} has no modules! Adding fake module $dist_as_pkg ".$di->version."\n";
          $mods_in_rel->{$dist_as_pkg} = {
              name => $dist_as_pkg,
              version => $di->version,
              version_obj => version->parse($di->version),
          };
      }
  
  
      # --- accumulate package info for 02packages file
  
      for my $pkg (sort keys %$mods_in_rel ) {
          # pi => { name=>, version=>, version_obj=> }
          my $pi = $mods_in_rel->{$pkg};
  
          # for selecting which dist a package belongs to
          # XXX should factor in authorization status
          my $p_r_match_score = p_r_match_score($pkg, $ri);
  
          if (my $pvr = $self->{pkg_ver_rel}->{$pkg}) {
              # already seen same package name in different distribution
              if ($p_r_match_score < $pvr->{p_r_match_score}) {
                  warn "$pkg seen in $pvr->{ri}{name} so ignoring one in $ri->{name}\n";
                  next;
              }
              warn "$pkg seen in $pvr->{ri}{name} - now overridden by $ri->{name}\n";
          }
  
          my $line = _fmtmodule($pkg, $di->pathname, $pi->{version});
          $self->{pkg_ver_rel}->{$pkg} = { line => $line, pi => $pi, ri => $ri, p_r_match_score => $p_r_match_score };
      }
  
      printf { $self->{rel_fh} } "%s\n", ( exists $ri->{url} ? $ri->{url} : "?url" );
  
      $self->{gzwrite}->gzwrite(Dumper($ri));
      $self->{gzwrite}->gzwrite(",");
  
  }
  
  sub p_r_match_score {
      my ($pkg_name, $ri) = @_;
      my @p = split /\W/, $pkg_name;
      my @r = split /\W/, $ri->{name};
      for my $i (0..max(scalar @p, scalar @r)) {
          return $i if not defined $p[$i]
                    or not defined $r[$i]
                    or $p[$i] ne $r[$i]
      }
      die; # unreached
  }
  
  # copied from CPAN::Mini::Inject and hacked
  
  sub _readpkgs {
      my ($cpandir) = @_;
  
      my $packages_file = $cpandir.'/modules/02packages.details.txt.gz';
      return [] if not -f $packages_file;
  
      my $gzread = Compress::Zlib::gzopen($packages_file, 'rb')
          or croak "Cannot open $packages_file: " . $Compress::Zlib::gzerrno . "\n";
  
      my $inheader = 1;
      my @packages;
      my $package;
  
      while ( $gzread->gzreadline( $package ) ) {
          if ( $inheader ) {
              $inheader = 0 unless $package =~ /\S/;
              next;
          }
          chomp $package;
          push @packages, $package;
      }
  
      $gzread->gzclose;
  
      return \@packages;
  }
  
  sub _writepkgs {
      my ($cpandir, $pkgs) = @_;
  
      my $packages_file = $cpandir.'/modules/02packages.details.txt.gz';
      my $gzwrite = Compress::Zlib::gzopen($packages_file, 'wb')
          or croak "Cannot open $packages_file for writing: " . $Compress::Zlib::gzerrno;
      
      $gzwrite->gzwrite( "File:         02packages.details.txt\n" );
      $gzwrite->gzwrite(
          "URL:          http://www.perl.com/CPAN/modules/02packages.details.txt\n"
      );
      $gzwrite->gzwrite(
          'Description:  Package names found in directory $CPAN/authors/id/'
          . "\n" );
      $gzwrite->gzwrite( "Columns:      package name, version, path\n" );
      $gzwrite->gzwrite(
          "Intended-For: Automated fetch routines, namespace documentation.\n"
      );
      $gzwrite->gzwrite( "Written-By:   $0 0.001\n" ); # XXX TODO
      $gzwrite->gzwrite( "Line-Count:   " . scalar( @$pkgs ) . "\n" );
      # Last-Updated: Sat, 19 Mar 2005 19:49:10 GMT
      my @date = split( /\s+/, scalar( gmtime ) );
      $gzwrite->gzwrite( "Last-Updated: $date[0], $date[2] $date[1] $date[4] $date[3] GMT\n\n" );
      
      $gzwrite->gzwrite( "$_\n" ) for ( @$pkgs );
      
      $gzwrite->gzclose;
  }
  
  sub distname_info_from_url {
      my ($url) = @_;
      $url =~ s{.* \b authors/id/ }{}x
          or warn "No authors/ in '$url'\n";
      my $di = CPAN::DistnameInfo->new($url);
      return $di;
  }
  
  sub _fmtmodule {
      my ( $module, $file, $version ) = @_;
      $version = "undef" if not defined $version;
      my $fw = 38 - length $version;
      $fw = length $module if $fw < length $module;
      return sprintf "%-${fw}s %s  %s", $module, $version, $file;
  }
  
  sub errors {
      my $self = shift;
      return $self->{errors};
  }
  
  1;
  
  =head1 NAME
  
  Dist::Surveyor::MakeCpan - Create a Mini-CPAN for the surveyed modules
  
  =head1 SYNOPSIS
  
      use Dist::Surveyor::MakeCpan;
      my $cpan = Dist::Surveyor::MakeCpan->new(
              $cpan_dir, $progname, $irregularities);
      foreach my $rel (@releases) {
          $cpan->add_release($rel);
      }
      $cpan->close();
      say "There where ", $cpan->errors(), " errors";
  
  =head1 DESCRIPTION
  
  Create a mini-CPAN for the surveyed modules, so you will be able to re-install 
  the same setup in a new computer.
  
  =head1 CONSTRUCTOR
  
      my $cpan = Dist::Surveyor::MakeCpan->new(
              $cpan_dir, $progname, $irregularities, $verbose);
  
  =over
  
  =item $cpan_dir
  
  The directory where the mini-cpan will be created
  
  =item $progname
  
  The name of the running program - will be used to create a subdirectory 
  inside $cpan_dir, that will contain debug information.
  
  =item $irregularities
  
  A hashref with a list of irregular named releases. i.e. 'libwww-perl' => 'LWP'.
  
  =back
  
  =head1 METHODS
  
  =head2 $cpan->add_release($rel)
  
  Add one release to the mini-cpan. the $rel should be a hashref, 
  and contain the following fields:
  
      $rel = {
          download_url => 'http://cpan.metacpan.org/authors/id/S/SE/SEMUELF/Dist-Surveyor-0.009.tar.gz',
          url => 'authors/id/S/SE/SEMUELF/Dist-Surveyor-0.009.tar.gz',
          author => 'SEMUELF',
          name => 'Dist-Surveyor-0.009',
          distribution => 'Dist-Surveyor',
      }
  
  =head2 $cpan->close()
  
  Close the mini-CPAN, and close all the debug data dump files.
  
  =head1 License, Copyright
  
  Please see L<Dist::Surveyor> for details
  
  =cut
DIST_SURVEYOR_MAKECPAN

$fatpacked{"HTTP/Tiny.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'HTTP_TINY';
  # vim: ts=4 sts=4 sw=4 et:
  package HTTP::Tiny;
  use strict;
  use warnings;
  # ABSTRACT: A small, simple, correct HTTP/1.1 client
  
  our $VERSION = '0.058';
  
  use Carp ();
  
  #pod =method new
  #pod
  #pod     $http = HTTP::Tiny->new( %attributes );
  #pod
  #pod This constructor returns a new HTTP::Tiny object.  Valid attributes include:
  #pod
  #pod =for :list
  #pod * C<agent> — A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If
  #pod   C<agent> — ends in a space character, the default user-agent string is
  #pod   appended.
  #pod * C<cookie_jar> — An instance of L<HTTP::CookieJar> — or equivalent class
  #pod   that supports the C<add> and C<cookie_header> methods
  #pod * C<default_headers> — A hashref of default headers to apply to requests
  #pod * C<local_address> — The local IP address to bind to
  #pod * C<keep_alive> — Whether to reuse the last connection (if for the same
  #pod   scheme, host and port) (defaults to 1)
  #pod * C<max_redirect> — Maximum number of redirects allowed (defaults to 5)
  #pod * C<max_size> — Maximum response size in bytes (only when not using a data
  #pod   callback).  If defined, responses larger than this will return an
  #pod   exception.
  #pod * C<http_proxy> — URL of a proxy server to use for HTTP connections
  #pod   (default is C<$ENV{http_proxy}> — if set)
  #pod * C<https_proxy> — URL of a proxy server to use for HTTPS connections
  #pod   (default is C<$ENV{https_proxy}> — if set)
  #pod * C<proxy> — URL of a generic proxy server for both HTTP and HTTPS
  #pod   connections (default is C<$ENV{all_proxy}> — if set)
  #pod * C<no_proxy> — List of domain suffixes that should not be proxied.  Must
  #pod   be a comma-separated string or an array reference. (default is
  #pod   C<$ENV{no_proxy}> —)
  #pod * C<timeout> — Request timeout in seconds (default is 60) If a socket open,
  #pod   read or write takes longer than the timeout, an exception is thrown.
  #pod * C<verify_SSL> — A boolean that indicates whether to validate the SSL
  #pod   certificate of an C<https> — connection (default is false)
  #pod * C<SSL_options> — A hashref of C<SSL_*> — options to pass through to
  #pod   L<IO::Socket::SSL>
  #pod
  #pod Passing an explicit C<undef> for C<proxy>, C<http_proxy> or C<https_proxy> will
  #pod prevent getting the corresponding proxies from the environment.
  #pod
  #pod Exceptions from C<max_size>, C<timeout> or other errors will result in a
  #pod pseudo-HTTP status code of 599 and a reason of "Internal Exception". The
  #pod content field in the response will contain the text of the exception.
  #pod
  #pod The C<keep_alive> parameter enables a persistent connection, but only to a
  #pod single destination scheme, host and port.  Also, if any connection-relevant
  #pod attributes are modified, or if the process ID or thread ID change, the
  #pod persistent connection will be dropped.  If you want persistent connections
  #pod across multiple destinations, use multiple HTTP::Tiny objects.
  #pod
  #pod See L</SSL SUPPORT> for more on the C<verify_SSL> and C<SSL_options> attributes.
  #pod
  #pod =cut
  
  my @attributes;
  BEGIN {
      @attributes = qw(
          cookie_jar default_headers http_proxy https_proxy keep_alive
          local_address max_redirect max_size proxy no_proxy
          SSL_options verify_SSL
      );
      my %persist_ok = map {; $_ => 1 } qw(
          cookie_jar default_headers max_redirect max_size
      );
      no strict 'refs';
      no warnings 'uninitialized';
      for my $accessor ( @attributes ) {
          *{$accessor} = sub {
              @_ > 1
                  ? do {
                      delete $_[0]->{handle} if !$persist_ok{$accessor} && $_[1] ne $_[0]->{$accessor};
                      $_[0]->{$accessor} = $_[1]
                  }
                  : $_[0]->{$accessor};
          };
      }
  }
  
  sub agent {
      my($self, $agent) = @_;
      if( @_ > 1 ){
          $self->{agent} =
              (defined $agent && $agent =~ / $/) ? $agent . $self->_agent : $agent;
      }
      return $self->{agent};
  }
  
  sub timeout {
      my ($self, $timeout) = @_;
      if ( @_ > 1 ) {
          $self->{timeout} = $timeout;
          if ($self->{handle}) {
              $self->{handle}->timeout($timeout);
          }
      }
      return $self->{timeout};
  }
  
  sub new {
      my($class, %args) = @_;
  
      my $self = {
          max_redirect => 5,
          timeout      => 60,
          keep_alive   => 1,
          verify_SSL   => $args{verify_SSL} || $args{verify_ssl} || 0, # no verification by default
          no_proxy     => $ENV{no_proxy},
      };
  
      bless $self, $class;
  
      $class->_validate_cookie_jar( $args{cookie_jar} ) if $args{cookie_jar};
  
      for my $key ( @attributes ) {
          $self->{$key} = $args{$key} if exists $args{$key}
      }
  
      $self->agent( exists $args{agent} ? $args{agent} : $class->_agent );
  
      $self->_set_proxies;
  
      return $self;
  }
  
  sub _set_proxies {
      my ($self) = @_;
  
      # get proxies from %ENV only if not provided; explicit undef will disable
      # getting proxies from the environment
  
      # generic proxy
      if (! exists $self->{proxy} ) {
          $self->{proxy} = $ENV{all_proxy} || $ENV{ALL_PROXY};
      }
  
      if ( defined $self->{proxy} ) {
          $self->_split_proxy( 'generic proxy' => $self->{proxy} ); # validate
      }
      else {
          delete $self->{proxy};
      }
  
      # http proxy
      if (! exists $self->{http_proxy} ) {
          # under CGI, bypass HTTP_PROXY as request sets it from Proxy header
          local $ENV{HTTP_PROXY} if $ENV{REQUEST_METHOD};
          $self->{http_proxy} = $ENV{http_proxy} || $ENV{HTTP_PROXY} || $self->{proxy};
      }
  
      if ( defined $self->{http_proxy} ) {
          $self->_split_proxy( http_proxy => $self->{http_proxy} ); # validate
          $self->{_has_proxy}{http} = 1;
      }
      else {
          delete $self->{http_proxy};
      }
  
      # https proxy
      if (! exists $self->{https_proxy} ) {
          $self->{https_proxy} = $ENV{https_proxy} || $ENV{HTTPS_PROXY} || $self->{proxy};
      }
  
      if ( $self->{https_proxy} ) {
          $self->_split_proxy( https_proxy => $self->{https_proxy} ); # validate
          $self->{_has_proxy}{https} = 1;
      }
      else {
          delete $self->{https_proxy};
      }
  
      # Split no_proxy to array reference if not provided as such
      unless ( ref $self->{no_proxy} eq 'ARRAY' ) {
          $self->{no_proxy} =
              (defined $self->{no_proxy}) ? [ split /\s*,\s*/, $self->{no_proxy} ] : [];
      }
  
      return;
  }
  
  #pod =method get|head|put|post|delete
  #pod
  #pod     $response = $http->get($url);
  #pod     $response = $http->get($url, \%options);
  #pod     $response = $http->head($url);
  #pod
  #pod These methods are shorthand for calling C<request()> for the given method.  The
  #pod URL must have unsafe characters escaped and international domain names encoded.
  #pod See C<request()> for valid options and a description of the response.
  #pod
  #pod The C<success> field of the response will be true if the status code is 2XX.
  #pod
  #pod =cut
  
  for my $sub_name ( qw/get head put post delete/ ) {
      my $req_method = uc $sub_name;
      no strict 'refs';
      eval <<"HERE"; ## no critic
      sub $sub_name {
          my (\$self, \$url, \$args) = \@_;
          \@_ == 2 || (\@_ == 3 && ref \$args eq 'HASH')
          or Carp::croak(q/Usage: \$http->$sub_name(URL, [HASHREF])/ . "\n");
          return \$self->request('$req_method', \$url, \$args || {});
      }
  HERE
  }
  
  #pod =method post_form
  #pod
  #pod     $response = $http->post_form($url, $form_data);
  #pod     $response = $http->post_form($url, $form_data, \%options);
  #pod
  #pod This method executes a C<POST> request and sends the key/value pairs from a
  #pod form data hash or array reference to the given URL with a C<content-type> of
  #pod C<application/x-www-form-urlencoded>.  If data is provided as an array
  #pod reference, the order is preserved; if provided as a hash reference, the terms
  #pod are sorted on key and value for consistency.  See documentation for the
  #pod C<www_form_urlencode> method for details on the encoding.
  #pod
  #pod The URL must have unsafe characters escaped and international domain names
  #pod encoded.  See C<request()> for valid options and a description of the response.
  #pod Any C<content-type> header or content in the options hashref will be ignored.
  #pod
  #pod The C<success> field of the response will be true if the status code is 2XX.
  #pod
  #pod =cut
  
  sub post_form {
      my ($self, $url, $data, $args) = @_;
      (@_ == 3 || @_ == 4 && ref $args eq 'HASH')
          or Carp::croak(q/Usage: $http->post_form(URL, DATAREF, [HASHREF])/ . "\n");
  
      my $headers = {};
      while ( my ($key, $value) = each %{$args->{headers} || {}} ) {
          $headers->{lc $key} = $value;
      }
      delete $args->{headers};
  
      return $self->request('POST', $url, {
              %$args,
              content => $self->www_form_urlencode($data),
              headers => {
                  %$headers,
                  'content-type' => 'application/x-www-form-urlencoded'
              },
          }
      );
  }
  
  #pod =method mirror
  #pod
  #pod     $response = $http->mirror($url, $file, \%options)
  #pod     if ( $response->{success} ) {
  #pod         print "$file is up to date\n";
  #pod     }
  #pod
  #pod Executes a C<GET> request for the URL and saves the response body to the file
  #pod name provided.  The URL must have unsafe characters escaped and international
  #pod domain names encoded.  If the file already exists, the request will include an
  #pod C<If-Modified-Since> header with the modification timestamp of the file.  You
  #pod may specify a different C<If-Modified-Since> header yourself in the C<<
  #pod $options->{headers} >> hash.
  #pod
  #pod The C<success> field of the response will be true if the status code is 2XX
  #pod or if the status code is 304 (unmodified).
  #pod
  #pod If the file was modified and the server response includes a properly
  #pod formatted C<Last-Modified> header, the file modification time will
  #pod be updated accordingly.
  #pod
  #pod =cut
  
  sub mirror {
      my ($self, $url, $file, $args) = @_;
      @_ == 3 || (@_ == 4 && ref $args eq 'HASH')
        or Carp::croak(q/Usage: $http->mirror(URL, FILE, [HASHREF])/ . "\n");
      if ( -e $file and my $mtime = (stat($file))[9] ) {
          $args->{headers}{'if-modified-since'} ||= $self->_http_date($mtime);
      }
      my $tempfile = $file . int(rand(2**31));
  
      require Fcntl;
      sysopen my $fh, $tempfile, Fcntl::O_CREAT()|Fcntl::O_EXCL()|Fcntl::O_WRONLY()
         or Carp::croak(qq/Error: Could not create temporary file $tempfile for downloading: $!\n/);
      binmode $fh;
      $args->{data_callback} = sub { print {$fh} $_[0] };
      my $response = $self->request('GET', $url, $args);
      close $fh
          or Carp::croak(qq/Error: Caught error closing temporary file $tempfile: $!\n/);
  
      if ( $response->{success} ) {
          rename $tempfile, $file
              or Carp::croak(qq/Error replacing $file with $tempfile: $!\n/);
          my $lm = $response->{headers}{'last-modified'};
          if ( $lm and my $mtime = $self->_parse_http_date($lm) ) {
              utime $mtime, $mtime, $file;
          }
      }
      $response->{success} ||= $response->{status} eq '304';
      unlink $tempfile;
      return $response;
  }
  
  #pod =method request
  #pod
  #pod     $response = $http->request($method, $url);
  #pod     $response = $http->request($method, $url, \%options);
  #pod
  #pod Executes an HTTP request of the given method type ('GET', 'HEAD', 'POST',
  #pod 'PUT', etc.) on the given URL.  The URL must have unsafe characters escaped and
  #pod international domain names encoded.
  #pod
  #pod If the URL includes a "user:password" stanza, they will be used for Basic-style
  #pod authorization headers.  (Authorization headers will not be included in a
  #pod redirected request.) For example:
  #pod
  #pod     $http->request('GET', 'http://Aladdin:open sesame@example.com/');
  #pod
  #pod If the "user:password" stanza contains reserved characters, they must
  #pod be percent-escaped:
  #pod
  #pod     $http->request('GET', 'http://john%40example.com:password@example.com/');
  #pod
  #pod A hashref of options may be appended to modify the request.
  #pod
  #pod Valid options are:
  #pod
  #pod =for :list
  #pod * C<headers> —
  #pod     A hashref containing headers to include with the request.  If the value for
  #pod     a header is an array reference, the header will be output multiple times with
  #pod     each value in the array.  These headers over-write any default headers.
  #pod * C<content> —
  #pod     A scalar to include as the body of the request OR a code reference
  #pod     that will be called iteratively to produce the body of the request
  #pod * C<trailer_callback> —
  #pod     A code reference that will be called if it exists to provide a hashref
  #pod     of trailing headers (only used with chunked transfer-encoding)
  #pod * C<data_callback> —
  #pod     A code reference that will be called for each chunks of the response
  #pod     body received.
  #pod * C<peer> —
  #pod     Override host resolution and force all connections to go only to a
  #pod     specific peer address, regardless of the URL of the request.  This will
  #pod     include any redirections!  This options should be used with extreme
  #pod     caution (e.g. debugging or very special circumstances).
  #pod
  #pod The C<Host> header is generated from the URL in accordance with RFC 2616.  It
  #pod is a fatal error to specify C<Host> in the C<headers> option.  Other headers
  #pod may be ignored or overwritten if necessary for transport compliance.
  #pod
  #pod If the C<content> option is a code reference, it will be called iteratively
  #pod to provide the content body of the request.  It should return the empty
  #pod string or undef when the iterator is exhausted.
  #pod
  #pod If the C<content> option is the empty string, no C<content-type> or
  #pod C<content-length> headers will be generated.
  #pod
  #pod If the C<data_callback> option is provided, it will be called iteratively until
  #pod the entire response body is received.  The first argument will be a string
  #pod containing a chunk of the response body, the second argument will be the
  #pod in-progress response hash reference, as described below.  (This allows
  #pod customizing the action of the callback based on the C<status> or C<headers>
  #pod received prior to the content body.)
  #pod
  #pod The C<request> method returns a hashref containing the response.  The hashref
  #pod will have the following keys:
  #pod
  #pod =for :list
  #pod * C<success> —
  #pod     Boolean indicating whether the operation returned a 2XX status code
  #pod * C<url> —
  #pod     URL that provided the response. This is the URL of the request unless
  #pod     there were redirections, in which case it is the last URL queried
  #pod     in a redirection chain
  #pod * C<status> —
  #pod     The HTTP status code of the response
  #pod * C<reason> —
  #pod     The response phrase returned by the server
  #pod * C<content> —
  #pod     The body of the response.  If the response does not have any content
  #pod     or if a data callback is provided to consume the response body,
  #pod     this will be the empty string
  #pod * C<headers> —
  #pod     A hashref of header fields.  All header field names will be normalized
  #pod     to be lower case. If a header is repeated, the value will be an arrayref;
  #pod     it will otherwise be a scalar string containing the value
  #pod * C<redirects>
  #pod     If this field exists, it is an arrayref of response hash references from
  #pod     redirects in the same order that redirections occurred.  If it does
  #pod     not exist, then no redirections occurred.
  #pod
  #pod On an exception during the execution of the request, the C<status> field will
  #pod contain 599, and the C<content> field will contain the text of the exception.
  #pod
  #pod =cut
  
  my %idempotent = map { $_ => 1 } qw/GET HEAD PUT DELETE OPTIONS TRACE/;
  
  sub request {
      my ($self, $method, $url, $args) = @_;
      @_ == 3 || (@_ == 4 && ref $args eq 'HASH')
        or Carp::croak(q/Usage: $http->request(METHOD, URL, [HASHREF])/ . "\n");
      $args ||= {}; # we keep some state in this during _request
  
      # RFC 2616 Section 8.1.4 mandates a single retry on broken socket
      my $response;
      for ( 0 .. 1 ) {
          $response = eval { $self->_request($method, $url, $args) };
          last unless $@ && $idempotent{$method}
              && $@ =~ m{^(?:Socket closed|Unexpected end)};
      }
  
      if (my $e = $@) {
          # maybe we got a response hash thrown from somewhere deep
          if ( ref $e eq 'HASH' && exists $e->{status} ) {
              return $e;
          }
  
          # otherwise, stringify it
          $e = "$e";
          $response = {
              url     => $url,
              success => q{},
              status  => 599,
              reason  => 'Internal Exception',
              content => $e,
              headers => {
                  'content-type'   => 'text/plain',
                  'content-length' => length $e,
              }
          };
      }
      return $response;
  }
  
  #pod =method www_form_urlencode
  #pod
  #pod     $params = $http->www_form_urlencode( $data );
  #pod     $response = $http->get("http://example.com/query?$params");
  #pod
  #pod This method converts the key/value pairs from a data hash or array reference
  #pod into a C<x-www-form-urlencoded> string.  The keys and values from the data
  #pod reference will be UTF-8 encoded and escaped per RFC 3986.  If a value is an
  #pod array reference, the key will be repeated with each of the values of the array
  #pod reference.  If data is provided as a hash reference, the key/value pairs in the
  #pod resulting string will be sorted by key and value for consistent ordering.
  #pod
  #pod =cut
  
  sub www_form_urlencode {
      my ($self, $data) = @_;
      (@_ == 2 && ref $data)
          or Carp::croak(q/Usage: $http->www_form_urlencode(DATAREF)/ . "\n");
      (ref $data eq 'HASH' || ref $data eq 'ARRAY')
          or Carp::croak("form data must be a hash or array reference\n");
  
      my @params = ref $data eq 'HASH' ? %$data : @$data;
      @params % 2 == 0
          or Carp::croak("form data reference must have an even number of terms\n");
  
      my @terms;
      while( @params ) {
          my ($key, $value) = splice(@params, 0, 2);
          if ( ref $value eq 'ARRAY' ) {
              unshift @params, map { $key => $_ } @$value;
          }
          else {
              push @terms, join("=", map { $self->_uri_escape($_) } $key, $value);
          }
      }
  
      return join("&", (ref $data eq 'ARRAY') ? (@terms) : (sort @terms) );
  }
  
  #pod =method can_ssl
  #pod
  #pod     $ok         = HTTP::Tiny->can_ssl;
  #pod     ($ok, $why) = HTTP::Tiny->can_ssl;
  #pod     ($ok, $why) = $http->can_ssl;
  #pod
  #pod Indicates if SSL support is available.  When called as a class object, it
  #pod checks for the correct version of L<Net::SSLeay> and L<IO::Socket::SSL>.
  #pod When called as an object methods, if C<SSL_verify> is true or if C<SSL_verify_mode>
  #pod is set in C<SSL_options>, it checks that a CA file is available.
  #pod
  #pod In scalar context, returns a boolean indicating if SSL is available.
  #pod In list context, returns the boolean and a (possibly multi-line) string of
  #pod errors indicating why SSL isn't available.
  #pod
  #pod =cut
  
  sub can_ssl {
      my ($self) = @_;
  
      my($ok, $reason) = (1, '');
  
      # Need IO::Socket::SSL 1.42 for SSL_create_ctx_callback
      unless (eval {require IO::Socket::SSL; IO::Socket::SSL->VERSION(1.42)}) {
          $ok = 0;
          $reason .= qq/IO::Socket::SSL 1.42 must be installed for https support\n/;
      }
  
      # Need Net::SSLeay 1.49 for MODE_AUTO_RETRY
      unless (eval {require Net::SSLeay; Net::SSLeay->VERSION(1.49)}) {
          $ok = 0;
          $reason .= qq/Net::SSLeay 1.49 must be installed for https support\n/;
      }
  
      # If an object, check that SSL config lets us get a CA if necessary
      if ( ref($self) && ( $self->{verify_SSL} || $self->{SSL_options}{SSL_verify_mode} ) ) {
          my $handle = HTTP::Tiny::Handle->new(
              SSL_options => $self->{SSL_options},
              verify_SSL  => $self->{verify_SSL},
          );
          unless ( eval { $handle->_find_CA_file; 1 } ) {
              $ok = 0;
              $reason .= "$@";
          }
      }
  
      wantarray ? ($ok, $reason) : $ok;
  }
  
  #pod =method connected
  #pod
  #pod     $host = $http->connected;
  #pod     ($host, $port) = $http->connected;
  #pod
  #pod Indicates if a connection to a peer is being kept alive, per the C<keep_alive>
  #pod option.
  #pod
  #pod In scalar context, returns the peer host and port, joined with a colon, or
  #pod C<undef> (if no peer is connected).
  #pod In list context, returns the peer host and port or an empty list (if no peer
  #pod is connected).
  #pod
  #pod B<Note>: This method cannot reliably be used to discover whether the remote
  #pod host has closed its end of the socket.
  #pod
  #pod =cut
  
  sub connected {
      my ($self) = @_;
  
      # If a socket exists...
      if ($self->{handle} && $self->{handle}{fh}) {
          my $socket = $self->{handle}{fh};
  
          # ...and is connected, return the peer host and port.
          if ($socket->connected) {
              return wantarray
                  ? ($socket->peerhost, $socket->peerport)
                  : join(':', $socket->peerhost, $socket->peerport);
          }
      }
      return;
  }
  
  #--------------------------------------------------------------------------#
  # private methods
  #--------------------------------------------------------------------------#
  
  my %DefaultPort = (
      http => 80,
      https => 443,
  );
  
  sub _agent {
      my $class = ref($_[0]) || $_[0];
      (my $default_agent = $class) =~ s{::}{-}g;
      return $default_agent . "/" . $class->VERSION;
  }
  
  sub _request {
      my ($self, $method, $url, $args) = @_;
  
      my ($scheme, $host, $port, $path_query, $auth) = $self->_split_url($url);
  
      my $request = {
          method    => $method,
          scheme    => $scheme,
          host      => $host,
          port      => $port,
          host_port => ($port == $DefaultPort{$scheme} ? $host : "$host:$port"),
          uri       => $path_query,
          headers   => {},
      };
  
      my $peer = $args->{peer} || $host;
  
      # We remove the cached handle so it is not reused in the case of redirect.
      # If all is well, it will be recached at the end of _request.  We only
      # reuse for the same scheme, host and port
      my $handle = delete $self->{handle};
      if ( $handle ) {
          unless ( $handle->can_reuse( $scheme, $host, $port, $peer ) ) {
              $handle->close;
              undef $handle;
          }
      }
      $handle ||= $self->_open_handle( $request, $scheme, $host, $port, $peer );
  
      $self->_prepare_headers_and_cb($request, $args, $url, $auth);
      $handle->write_request($request);
  
      my $response;
      do { $response = $handle->read_response_header }
          until (substr($response->{status},0,1) ne '1');
  
      $self->_update_cookie_jar( $url, $response ) if $self->{cookie_jar};
      my @redir_args = $self->_maybe_redirect($request, $response, $args);
  
      my $known_message_length;
      if ($method eq 'HEAD' || $response->{status} =~ /^[23]04/) {
          # response has no message body
          $known_message_length = 1;
      }
      else {
          # Ignore any data callbacks during redirection.
          my $cb_args = @redir_args ? +{} : $args;
          my $data_cb = $self->_prepare_data_cb($response, $cb_args);
          $known_message_length = $handle->read_body($data_cb, $response);
      }
  
      if ( $self->{keep_alive}
          && $known_message_length
          && $response->{protocol} eq 'HTTP/1.1'
          && ($response->{headers}{connection} || '') ne 'close'
      ) {
          $self->{handle} = $handle;
      }
      else {
          $handle->close;
      }
  
      $response->{success} = substr( $response->{status}, 0, 1 ) eq '2';
      $response->{url} = $url;
  
      # Push the current response onto the stack of redirects if redirecting.
      if (@redir_args) {
          push @{$args->{_redirects}}, $response;
          return $self->_request(@redir_args, $args);
      }
  
      # Copy the stack of redirects into the response before returning.
      $response->{redirects} = delete $args->{_redirects}
        if @{$args->{_redirects}};
      return $response;
  }
  
  sub _open_handle {
      my ($self, $request, $scheme, $host, $port, $peer) = @_;
  
      my $handle  = HTTP::Tiny::Handle->new(
          timeout         => $self->{timeout},
          SSL_options     => $self->{SSL_options},
          verify_SSL      => $self->{verify_SSL},
          local_address   => $self->{local_address},
          keep_alive      => $self->{keep_alive}
      );
  
      if ($self->{_has_proxy}{$scheme} && ! grep { $host =~ /\Q$_\E$/ } @{$self->{no_proxy}}) {
          return $self->_proxy_connect( $request, $handle );
      }
      else {
          return $handle->connect($scheme, $host, $port, $peer);
      }
  }
  
  sub _proxy_connect {
      my ($self, $request, $handle) = @_;
  
      my @proxy_vars;
      if ( $request->{scheme} eq 'https' ) {
          Carp::croak(qq{No https_proxy defined}) unless $self->{https_proxy};
          @proxy_vars = $self->_split_proxy( https_proxy => $self->{https_proxy} );
          if ( $proxy_vars[0] eq 'https' ) {
              Carp::croak(qq{Can't proxy https over https: $request->{uri} via $self->{https_proxy}});
          }
      }
      else {
          Carp::croak(qq{No http_proxy defined}) unless $self->{http_proxy};
          @proxy_vars = $self->_split_proxy( http_proxy => $self->{http_proxy} );
      }
  
      my ($p_scheme, $p_host, $p_port, $p_auth) = @proxy_vars;
  
      if ( length $p_auth && ! defined $request->{headers}{'proxy-authorization'} ) {
          $self->_add_basic_auth_header( $request, 'proxy-authorization' => $p_auth );
      }
  
      $handle->connect($p_scheme, $p_host, $p_port, $p_host);
  
      if ($request->{scheme} eq 'https') {
          $self->_create_proxy_tunnel( $request, $handle );
      }
      else {
          # non-tunneled proxy requires absolute URI
          $request->{uri} = "$request->{scheme}://$request->{host_port}$request->{uri}";
      }
  
      return $handle;
  }
  
  sub _split_proxy {
      my ($self, $type, $proxy) = @_;
  
      my ($scheme, $host, $port, $path_query, $auth) = eval { $self->_split_url($proxy) };
  
      unless(
          defined($scheme) && length($scheme) && length($host) && length($port)
          && $path_query eq '/'
      ) {
          Carp::croak(qq{$type URL must be in format http[s]://[auth@]<host>:<port>/\n});
      }
  
      return ($scheme, $host, $port, $auth);
  }
  
  sub _create_proxy_tunnel {
      my ($self, $request, $handle) = @_;
  
      $handle->_assert_ssl;
  
      my $agent = exists($request->{headers}{'user-agent'})
          ? $request->{headers}{'user-agent'} : $self->{agent};
  
      my $connect_request = {
          method    => 'CONNECT',
          uri       => "$request->{host}:$request->{port}",
          headers   => {
              host => "$request->{host}:$request->{port}",
              'user-agent' => $agent,
          }
      };
  
      if ( $request->{headers}{'proxy-authorization'} ) {
          $connect_request->{headers}{'proxy-authorization'} =
              delete $request->{headers}{'proxy-authorization'};
      }
  
      $handle->write_request($connect_request);
      my $response;
      do { $response = $handle->read_response_header }
          until (substr($response->{status},0,1) ne '1');
  
      # if CONNECT failed, throw the response so it will be
      # returned from the original request() method;
      unless (substr($response->{status},0,1) eq '2') {
          die $response;
      }
  
      # tunnel established, so start SSL handshake
      $handle->start_ssl( $request->{host} );
  
      return;
  }
  
  sub _prepare_headers_and_cb {
      my ($self, $request, $args, $url, $auth) = @_;
  
      for ($self->{default_headers}, $args->{headers}) {
          next unless defined;
          while (my ($k, $v) = each %$_) {
              $request->{headers}{lc $k} = $v;
              $request->{header_case}{lc $k} = $k;
          }
      }
  
      if (exists $request->{headers}{'host'}) {
          die(qq/The 'Host' header must not be provided as header option\n/);
      }
  
      $request->{headers}{'host'}         = $request->{host_port};
      $request->{headers}{'user-agent'} ||= $self->{agent};
      $request->{headers}{'connection'}   = "close"
          unless $self->{keep_alive};
  
      if ( defined $args->{content} ) {
          if (ref $args->{content} eq 'CODE') {
              $request->{headers}{'content-type'} ||= "application/octet-stream";
              $request->{headers}{'transfer-encoding'} = 'chunked'
                unless $request->{headers}{'content-length'}
                    || $request->{headers}{'transfer-encoding'};
              $request->{cb} = $args->{content};
          }
          elsif ( length $args->{content} ) {
              my $content = $args->{content};
              if ( $] ge '5.008' ) {
                  utf8::downgrade($content, 1)
                      or die(qq/Wide character in request message body\n/);
              }
              $request->{headers}{'content-type'} ||= "application/octet-stream";
              $request->{headers}{'content-length'} = length $content
                unless $request->{headers}{'content-length'}
                    || $request->{headers}{'transfer-encoding'};
              $request->{cb} = sub { substr $content, 0, length $content, '' };
          }
          $request->{trailer_cb} = $args->{trailer_callback}
              if ref $args->{trailer_callback} eq 'CODE';
      }
  
      ### If we have a cookie jar, then maybe add relevant cookies
      if ( $self->{cookie_jar} ) {
          my $cookies = $self->cookie_jar->cookie_header( $url );
          $request->{headers}{cookie} = $cookies if length $cookies;
      }
  
      # if we have Basic auth parameters, add them
      if ( length $auth && ! defined $request->{headers}{authorization} ) {
          $self->_add_basic_auth_header( $request, 'authorization' => $auth );
      }
  
      return;
  }
  
  sub _add_basic_auth_header {
      my ($self, $request, $header, $auth) = @_;
      require MIME::Base64;
      $request->{headers}{$header} =
          "Basic " . MIME::Base64::encode_base64($auth, "");
      return;
  }
  
  sub _prepare_data_cb {
      my ($self, $response, $args) = @_;
      my $data_cb = $args->{data_callback};
      $response->{content} = '';
  
      if (!$data_cb || $response->{status} !~ /^2/) {
          if (defined $self->{max_size}) {
              $data_cb = sub {
                  $_[1]->{content} .= $_[0];
                  die(qq/Size of response body exceeds the maximum allowed of $self->{max_size}\n/)
                    if length $_[1]->{content} > $self->{max_size};
              };
          }
          else {
              $data_cb = sub { $_[1]->{content} .= $_[0] };
          }
      }
      return $data_cb;
  }
  
  sub _update_cookie_jar {
      my ($self, $url, $response) = @_;
  
      my $cookies = $response->{headers}->{'set-cookie'};
      return unless defined $cookies;
  
      my @cookies = ref $cookies ? @$cookies : $cookies;
  
      $self->cookie_jar->add( $url, $_ ) for @cookies;
  
      return;
  }
  
  sub _validate_cookie_jar {
      my ($class, $jar) = @_;
  
      # duck typing
      for my $method ( qw/add cookie_header/ ) {
          Carp::croak(qq/Cookie jar must provide the '$method' method\n/)
              unless ref($jar) && ref($jar)->can($method);
      }
  
      return;
  }
  
  sub _maybe_redirect {
      my ($self, $request, $response, $args) = @_;
      my $headers = $response->{headers};
      my ($status, $method) = ($response->{status}, $request->{method});
      $args->{_redirects} ||= [];
  
      if (($status eq '303' or ($status =~ /^30[1278]/ && $method =~ /^GET|HEAD$/))
          and $headers->{location}
          and @{$args->{_redirects}} < $self->{max_redirect}
      ) {
          my $location = ($headers->{location} =~ /^\//)
              ? "$request->{scheme}://$request->{host_port}$headers->{location}"
              : $headers->{location} ;
          return (($status eq '303' ? 'GET' : $method), $location);
      }
      return;
  }
  
  sub _split_url {
      my $url = pop;
  
      # URI regex adapted from the URI module
      my ($scheme, $host, $path_query) = $url =~ m<\A([^:/?#]+)://([^/?#]*)([^#]*)>
        or die(qq/Cannot parse URL: '$url'\n/);
  
      $scheme     = lc $scheme;
      $path_query = "/$path_query" unless $path_query =~ m<\A/>;
  
      my $auth = '';
      if ( (my $i = index $host, '@') != -1 ) {
          # user:pass@host
          $auth = substr $host, 0, $i, ''; # take up to the @ for auth
          substr $host, 0, 1, '';          # knock the @ off the host
  
          # userinfo might be percent escaped, so recover real auth info
          $auth =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;
      }
      my $port = $host =~ s/:(\d*)\z// && length $1 ? $1
               : $scheme eq 'http'                  ? 80
               : $scheme eq 'https'                 ? 443
               : undef;
  
      return ($scheme, (length $host ? lc $host : "localhost") , $port, $path_query, $auth);
  }
  
  # Date conversions adapted from HTTP::Date
  my $DoW = "Sun|Mon|Tue|Wed|Thu|Fri|Sat";
  my $MoY = "Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec";
  sub _http_date {
      my ($sec, $min, $hour, $mday, $mon, $year, $wday) = gmtime($_[1]);
      return sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",
          substr($DoW,$wday*4,3),
          $mday, substr($MoY,$mon*4,3), $year+1900,
          $hour, $min, $sec
      );
  }
  
  sub _parse_http_date {
      my ($self, $str) = @_;
      require Time::Local;
      my @tl_parts;
      if ($str =~ /^[SMTWF][a-z]+, +(\d{1,2}) ($MoY) +(\d\d\d\d) +(\d\d):(\d\d):(\d\d) +GMT$/) {
          @tl_parts = ($6, $5, $4, $1, (index($MoY,$2)/4), $3);
      }
      elsif ($str =~ /^[SMTWF][a-z]+, +(\d\d)-($MoY)-(\d{2,4}) +(\d\d):(\d\d):(\d\d) +GMT$/ ) {
          @tl_parts = ($6, $5, $4, $1, (index($MoY,$2)/4), $3);
      }
      elsif ($str =~ /^[SMTWF][a-z]+ +($MoY) +(\d{1,2}) +(\d\d):(\d\d):(\d\d) +(?:[^0-9]+ +)?(\d\d\d\d)$/ ) {
          @tl_parts = ($5, $4, $3, $2, (index($MoY,$1)/4), $6);
      }
      return eval {
          my $t = @tl_parts ? Time::Local::timegm(@tl_parts) : -1;
          $t < 0 ? undef : $t;
      };
  }
  
  # URI escaping adapted from URI::Escape
  # c.f. http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1
  # perl 5.6 ready UTF-8 encoding adapted from JSON::PP
  my %escapes = map { chr($_) => sprintf("%%%02X", $_) } 0..255;
  $escapes{' '}="+";
  my $unsafe_char = qr/[^A-Za-z0-9\-\._~]/;
  
  sub _uri_escape {
      my ($self, $str) = @_;
      if ( $] ge '5.008' ) {
          utf8::encode($str);
      }
      else {
          $str = pack("U*", unpack("C*", $str)) # UTF-8 encode a byte string
              if ( length $str == do { use bytes; length $str } );
          $str = pack("C*", unpack("C*", $str)); # clear UTF-8 flag
      }
      $str =~ s/($unsafe_char)/$escapes{$1}/ge;
      return $str;
  }
  
  package
      HTTP::Tiny::Handle; # hide from PAUSE/indexers
  use strict;
  use warnings;
  
  use Errno      qw[EINTR EPIPE];
  use IO::Socket qw[SOCK_STREAM];
  use Socket     qw[SOL_SOCKET SO_KEEPALIVE];
  
  # PERL_HTTP_TINY_IPV4_ONLY is a private environment variable to force old
  # behavior if someone is unable to boostrap CPAN from a new perl install; it is
  # not intended for general, per-client use and may be removed in the future
  my $SOCKET_CLASS =
      $ENV{PERL_HTTP_TINY_IPV4_ONLY} ? 'IO::Socket::INET' :
      eval { require IO::Socket::IP; IO::Socket::IP->VERSION(0.25) } ? 'IO::Socket::IP' :
      'IO::Socket::INET';
  
  sub BUFSIZE () { 32768 } ## no critic
  
  my $Printable = sub {
      local $_ = shift;
      s/\r/\\r/g;
      s/\n/\\n/g;
      s/\t/\\t/g;
      s/([^\x20-\x7E])/sprintf('\\x%.2X', ord($1))/ge;
      $_;
  };
  
  my $Token = qr/[\x21\x23-\x27\x2A\x2B\x2D\x2E\x30-\x39\x41-\x5A\x5E-\x7A\x7C\x7E]/;
  my $Field_Content = qr/[[:print:]]+ (?: [\x20\x09]+ [[:print:]]+ )*/x;
  
  sub new {
      my ($class, %args) = @_;
      return bless {
          rbuf             => '',
          timeout          => 60,
          max_line_size    => 16384,
          max_header_lines => 64,
          verify_SSL       => 0,
          SSL_options      => {},
          %args
      }, $class;
  }
  
  sub timeout {
      my ($self, $timeout) = @_;
      if ( @_ > 1 ) {
          $self->{timeout} = $timeout;
          if ( $self->{fh} && $self->{fh}->can('timeout') ) {
              $self->{fh}->timeout($timeout);
          }
      }
      return $self->{timeout};
  }
  
  sub connect {
      @_ == 5 || die(q/Usage: $handle->connect(scheme, host, port, peer)/ . "\n");
      my ($self, $scheme, $host, $port, $peer) = @_;
  
      if ( $scheme eq 'https' ) {
          $self->_assert_ssl;
      }
      elsif ( $scheme ne 'http' ) {
        die(qq/Unsupported URL scheme '$scheme'\n/);
      }
      $self->{fh} = $SOCKET_CLASS->new(
          PeerHost  => $peer,
          PeerPort  => $port,
          $self->{local_address} ?
              ( LocalAddr => $self->{local_address} ) : (),
          Proto     => 'tcp',
          Type      => SOCK_STREAM,
          Timeout   => $self->{timeout},
      ) or die(qq/Could not connect to '$host:$port': $@\n/);
  
      binmode($self->{fh})
        or die(qq/Could not binmode() socket: '$!'\n/);
  
      if ( $self->{keep_alive} ) {
          unless ( defined( $self->{fh}->setsockopt( SOL_SOCKET, SO_KEEPALIVE, 1 ) ) ) {
              CORE::close($self->{fh});
              die(qq/Could not set SO_KEEPALIVE on socket: '$!'\n/);
          }
      }
  
      $self->start_ssl($host) if $scheme eq 'https';
  
      $self->{scheme} = $scheme;
      $self->{host} = $host;
      $self->{peer} = $peer;
      $self->{port} = $port;
      $self->{pid} = $$;
      $self->{tid} = _get_tid();
  
      return $self;
  }
  
  sub start_ssl {
      my ($self, $host) = @_;
  
      # As this might be used via CONNECT after an SSL session
      # to a proxy, we shut down any existing SSL before attempting
      # the handshake
      if ( ref($self->{fh}) eq 'IO::Socket::SSL' ) {
          unless ( $self->{fh}->stop_SSL ) {
              my $ssl_err = IO::Socket::SSL->errstr;
              die(qq/Error halting prior SSL connection: $ssl_err/);
          }
      }
  
      my $ssl_args = $self->_ssl_args($host);
      IO::Socket::SSL->start_SSL(
          $self->{fh},
          %$ssl_args,
          SSL_create_ctx_callback => sub {
              my $ctx = shift;
              Net::SSLeay::CTX_set_mode($ctx, Net::SSLeay::MODE_AUTO_RETRY());
          },
      );
  
      unless ( ref($self->{fh}) eq 'IO::Socket::SSL' ) {
          my $ssl_err = IO::Socket::SSL->errstr;
          die(qq/SSL connection failed for $host: $ssl_err\n/);
      }
  }
  
  sub close {
      @_ == 1 || die(q/Usage: $handle->close()/ . "\n");
      my ($self) = @_;
      CORE::close($self->{fh})
        or die(qq/Could not close socket: '$!'\n/);
  }
  
  sub write {
      @_ == 2 || die(q/Usage: $handle->write(buf)/ . "\n");
      my ($self, $buf) = @_;
  
      if ( $] ge '5.008' ) {
          utf8::downgrade($buf, 1)
              or die(qq/Wide character in write()\n/);
      }
  
      my $len = length $buf;
      my $off = 0;
  
      local $SIG{PIPE} = 'IGNORE';
  
      while () {
          $self->can_write
            or die(qq/Timed out while waiting for socket to become ready for writing\n/);
          my $r = syswrite($self->{fh}, $buf, $len, $off);
          if (defined $r) {
              $len -= $r;
              $off += $r;
              last unless $len > 0;
          }
          elsif ($! == EPIPE) {
              die(qq/Socket closed by remote server: $!\n/);
          }
          elsif ($! != EINTR) {
              if ($self->{fh}->can('errstr')){
                  my $err = $self->{fh}->errstr();
                  die (qq/Could not write to SSL socket: '$err'\n /);
              }
              else {
                  die(qq/Could not write to socket: '$!'\n/);
              }
  
          }
      }
      return $off;
  }
  
  sub read {
      @_ == 2 || @_ == 3 || die(q/Usage: $handle->read(len [, allow_partial])/ . "\n");
      my ($self, $len, $allow_partial) = @_;
  
      my $buf  = '';
      my $got = length $self->{rbuf};
  
      if ($got) {
          my $take = ($got < $len) ? $got : $len;
          $buf  = substr($self->{rbuf}, 0, $take, '');
          $len -= $take;
      }
  
      while ($len > 0) {
          $self->can_read
            or die(q/Timed out while waiting for socket to become ready for reading/ . "\n");
          my $r = sysread($self->{fh}, $buf, $len, length $buf);
          if (defined $r) {
              last unless $r;
              $len -= $r;
          }
          elsif ($! != EINTR) {
              if ($self->{fh}->can('errstr')){
                  my $err = $self->{fh}->errstr();
                  die (qq/Could not read from SSL socket: '$err'\n /);
              }
              else {
                  die(qq/Could not read from socket: '$!'\n/);
              }
          }
      }
      if ($len && !$allow_partial) {
          die(qq/Unexpected end of stream\n/);
      }
      return $buf;
  }
  
  sub readline {
      @_ == 1 || die(q/Usage: $handle->readline()/ . "\n");
      my ($self) = @_;
  
      while () {
          if ($self->{rbuf} =~ s/\A ([^\x0D\x0A]* \x0D?\x0A)//x) {
              return $1;
          }
          if (length $self->{rbuf} >= $self->{max_line_size}) {
              die(qq/Line size exceeds the maximum allowed size of $self->{max_line_size}\n/);
          }
          $self->can_read
            or die(qq/Timed out while waiting for socket to become ready for reading\n/);
          my $r = sysread($self->{fh}, $self->{rbuf}, BUFSIZE, length $self->{rbuf});
          if (defined $r) {
              last unless $r;
          }
          elsif ($! != EINTR) {
              if ($self->{fh}->can('errstr')){
                  my $err = $self->{fh}->errstr();
                  die (qq/Could not read from SSL socket: '$err'\n /);
              }
              else {
                  die(qq/Could not read from socket: '$!'\n/);
              }
          }
      }
      die(qq/Unexpected end of stream while looking for line\n/);
  }
  
  sub read_header_lines {
      @_ == 1 || @_ == 2 || die(q/Usage: $handle->read_header_lines([headers])/ . "\n");
      my ($self, $headers) = @_;
      $headers ||= {};
      my $lines   = 0;
      my $val;
  
      while () {
           my $line = $self->readline;
  
           if (++$lines >= $self->{max_header_lines}) {
               die(qq/Header lines exceeds maximum number allowed of $self->{max_header_lines}\n/);
           }
           elsif ($line =~ /\A ([^\x00-\x1F\x7F:]+) : [\x09\x20]* ([^\x0D\x0A]*)/x) {
               my ($field_name) = lc $1;
               if (exists $headers->{$field_name}) {
                   for ($headers->{$field_name}) {
                       $_ = [$_] unless ref $_ eq "ARRAY";
                       push @$_, $2;
                       $val = \$_->[-1];
                   }
               }
               else {
                   $val = \($headers->{$field_name} = $2);
               }
           }
           elsif ($line =~ /\A [\x09\x20]+ ([^\x0D\x0A]*)/x) {
               $val
                 or die(qq/Unexpected header continuation line\n/);
               next unless length $1;
               $$val .= ' ' if length $$val;
               $$val .= $1;
           }
           elsif ($line =~ /\A \x0D?\x0A \z/x) {
              last;
           }
           else {
              die(q/Malformed header line: / . $Printable->($line) . "\n");
           }
      }
      return $headers;
  }
  
  sub write_request {
      @_ == 2 || die(q/Usage: $handle->write_request(request)/ . "\n");
      my($self, $request) = @_;
      $self->write_request_header(@{$request}{qw/method uri headers header_case/});
      $self->write_body($request) if $request->{cb};
      return;
  }
  
  # Standard request header names/case from HTTP/1.1 RFCs
  my @rfc_request_headers = qw(
    Accept Accept-Charset Accept-Encoding Accept-Language Authorization
    Cache-Control Connection Content-Length Expect From Host
    If-Match If-Modified-Since If-None-Match If-Range If-Unmodified-Since
    Max-Forwards Pragma Proxy-Authorization Range Referer TE Trailer
    Transfer-Encoding Upgrade User-Agent Via
  );
  
  my @other_request_headers = qw(
    Content-Encoding Content-MD5 Content-Type Cookie DNT Date Origin
    X-XSS-Protection
  );
  
  my %HeaderCase = map { lc($_) => $_ } @rfc_request_headers, @other_request_headers;
  
  # to avoid multiple small writes and hence nagle, you can pass the method line or anything else to
  # combine writes.
  sub write_header_lines {
      (@_ >= 2 && @_ <= 4 && ref $_[1] eq 'HASH') || die(q/Usage: $handle->write_header_lines(headers, [header_case, prefix])/ . "\n");
      my($self, $headers, $header_case, $prefix_data) = @_;
      $header_case ||= {};
  
      my $buf = (defined $prefix_data ? $prefix_data : '');
  
      # Per RFC, control fields should be listed first
      my %seen;
      for my $k ( qw/host cache-control expect max-forwards pragma range te/ ) {
          next unless exists $headers->{$k};
          $seen{$k}++;
          my $field_name = $HeaderCase{$k};
          my $v = $headers->{$k};
          for (ref $v eq 'ARRAY' ? @$v : $v) {
              $_ = '' unless defined $_;
              $buf .= "$field_name: $_\x0D\x0A";
          }
      }
  
      # Other headers sent in arbitrary order
      while (my ($k, $v) = each %$headers) {
          my $field_name = lc $k;
          next if $seen{$field_name};
          if (exists $HeaderCase{$field_name}) {
              $field_name = $HeaderCase{$field_name};
          }
          else {
              if (exists $header_case->{$field_name}) {
                  $field_name = $header_case->{$field_name};
              }
              else {
                  $field_name =~ s/\b(\w)/\u$1/g;
              }
              $field_name =~ /\A $Token+ \z/xo
                or die(q/Invalid HTTP header field name: / . $Printable->($field_name) . "\n");
              $HeaderCase{lc $field_name} = $field_name;
          }
          for (ref $v eq 'ARRAY' ? @$v : $v) {
              # unwrap a field value if pre-wrapped by user
              s/\x0D?\x0A\s+/ /g;
              die(qq/Invalid HTTP header field value ($field_name): / . $Printable->($_). "\n")
                unless $_ eq '' || /\A $Field_Content \z/xo;
              $_ = '' unless defined $_;
              $buf .= "$field_name: $_\x0D\x0A";
          }
      }
      $buf .= "\x0D\x0A";
      return $self->write($buf);
  }
  
  # return value indicates whether message length was defined; this is generally
  # true unless there was no content-length header and we just read until EOF.
  # Other message length errors are thrown as exceptions
  sub read_body {
      @_ == 3 || die(q/Usage: $handle->read_body(callback, response)/ . "\n");
      my ($self, $cb, $response) = @_;
      my $te = $response->{headers}{'transfer-encoding'} || '';
      my $chunked = grep { /chunked/i } ( ref $te eq 'ARRAY' ? @$te : $te ) ;
      return $chunked
          ? $self->read_chunked_body($cb, $response)
          : $self->read_content_body($cb, $response);
  }
  
  sub write_body {
      @_ == 2 || die(q/Usage: $handle->write_body(request)/ . "\n");
      my ($self, $request) = @_;
      if ($request->{headers}{'content-length'}) {
          return $self->write_content_body($request);
      }
      else {
          return $self->write_chunked_body($request);
      }
  }
  
  sub read_content_body {
      @_ == 3 || @_ == 4 || die(q/Usage: $handle->read_content_body(callback, response, [read_length])/ . "\n");
      my ($self, $cb, $response, $content_length) = @_;
      $content_length ||= $response->{headers}{'content-length'};
  
      if ( defined $content_length ) {
          my $len = $content_length;
          while ($len > 0) {
              my $read = ($len > BUFSIZE) ? BUFSIZE : $len;
              $cb->($self->read($read, 0), $response);
              $len -= $read;
          }
          return length($self->{rbuf}) == 0;
      }
  
      my $chunk;
      $cb->($chunk, $response) while length( $chunk = $self->read(BUFSIZE, 1) );
  
      return;
  }
  
  sub write_content_body {
      @_ == 2 || die(q/Usage: $handle->write_content_body(request)/ . "\n");
      my ($self, $request) = @_;
  
      my ($len, $content_length) = (0, $request->{headers}{'content-length'});
      while () {
          my $data = $request->{cb}->();
  
          defined $data && length $data
            or last;
  
          if ( $] ge '5.008' ) {
              utf8::downgrade($data, 1)
                  or die(qq/Wide character in write_content()\n/);
          }
  
          $len += $self->write($data);
      }
  
      $len == $content_length
        or die(qq/Content-Length mismatch (got: $len expected: $content_length)\n/);
  
      return $len;
  }
  
  sub read_chunked_body {
      @_ == 3 || die(q/Usage: $handle->read_chunked_body(callback, $response)/ . "\n");
      my ($self, $cb, $response) = @_;
  
      while () {
          my $head = $self->readline;
  
          $head =~ /\A ([A-Fa-f0-9]+)/x
            or die(q/Malformed chunk head: / . $Printable->($head) . "\n");
  
          my $len = hex($1)
            or last;
  
          $self->read_content_body($cb, $response, $len);
  
          $self->read(2) eq "\x0D\x0A"
            or die(qq/Malformed chunk: missing CRLF after chunk data\n/);
      }
      $self->read_header_lines($response->{headers});
      return 1;
  }
  
  sub write_chunked_body {
      @_ == 2 || die(q/Usage: $handle->write_chunked_body(request)/ . "\n");
      my ($self, $request) = @_;
  
      my $len = 0;
      while () {
          my $data = $request->{cb}->();
  
          defined $data && length $data
            or last;
  
          if ( $] ge '5.008' ) {
              utf8::downgrade($data, 1)
                  or die(qq/Wide character in write_chunked_body()\n/);
          }
  
          $len += length $data;
  
          my $chunk  = sprintf '%X', length $data;
             $chunk .= "\x0D\x0A";
             $chunk .= $data;
             $chunk .= "\x0D\x0A";
  
          $self->write($chunk);
      }
      $self->write("0\x0D\x0A");
      $self->write_header_lines($request->{trailer_cb}->())
          if ref $request->{trailer_cb} eq 'CODE';
      return $len;
  }
  
  sub read_response_header {
      @_ == 1 || die(q/Usage: $handle->read_response_header()/ . "\n");
      my ($self) = @_;
  
      my $line = $self->readline;
  
      $line =~ /\A (HTTP\/(0*\d+\.0*\d+)) [\x09\x20]+ ([0-9]{3}) [\x09\x20]+ ([^\x0D\x0A]*) \x0D?\x0A/x
        or die(q/Malformed Status-Line: / . $Printable->($line). "\n");
  
      my ($protocol, $version, $status, $reason) = ($1, $2, $3, $4);
  
      die (qq/Unsupported HTTP protocol: $protocol\n/)
          unless $version =~ /0*1\.0*[01]/;
  
      return {
          status       => $status,
          reason       => $reason,
          headers      => $self->read_header_lines,
          protocol     => $protocol,
      };
  }
  
  sub write_request_header {
      @_ == 5 || die(q/Usage: $handle->write_request_header(method, request_uri, headers, header_case)/ . "\n");
      my ($self, $method, $request_uri, $headers, $header_case) = @_;
  
      return $self->write_header_lines($headers, $header_case, "$method $request_uri HTTP/1.1\x0D\x0A");
  }
  
  sub _do_timeout {
      my ($self, $type, $timeout) = @_;
      $timeout = $self->{timeout}
          unless defined $timeout && $timeout >= 0;
  
      my $fd = fileno $self->{fh};
      defined $fd && $fd >= 0
        or die(qq/select(2): 'Bad file descriptor'\n/);
  
      my $initial = time;
      my $pending = $timeout;
      my $nfound;
  
      vec(my $fdset = '', $fd, 1) = 1;
  
      while () {
          $nfound = ($type eq 'read')
              ? select($fdset, undef, undef, $pending)
              : select(undef, $fdset, undef, $pending) ;
          if ($nfound == -1) {
              $! == EINTR
                or die(qq/select(2): '$!'\n/);
              redo if !$timeout || ($pending = $timeout - (time - $initial)) > 0;
              $nfound = 0;
          }
          last;
      }
      $! = 0;
      return $nfound;
  }
  
  sub can_read {
      @_ == 1 || @_ == 2 || die(q/Usage: $handle->can_read([timeout])/ . "\n");
      my $self = shift;
      if ( ref($self->{fh}) eq 'IO::Socket::SSL' ) {
          return 1 if $self->{fh}->pending;
      }
      return $self->_do_timeout('read', @_)
  }
  
  sub can_write {
      @_ == 1 || @_ == 2 || die(q/Usage: $handle->can_write([timeout])/ . "\n");
      my $self = shift;
      return $self->_do_timeout('write', @_)
  }
  
  sub _assert_ssl {
      my($ok, $reason) = HTTP::Tiny->can_ssl();
      die $reason unless $ok;
  }
  
  sub can_reuse {
      my ($self,$scheme,$host,$port,$peer) = @_;
      return 0 if
          $self->{pid} != $$
          || $self->{tid} != _get_tid()
          || length($self->{rbuf})
          || $scheme ne $self->{scheme}
          || $host ne $self->{host}
          || $port ne $self->{port}
          || $peer ne $self->{peer}
          || eval { $self->can_read(0) }
          || $@ ;
          return 1;
  }
  
  # Try to find a CA bundle to validate the SSL cert,
  # prefer Mozilla::CA or fallback to a system file
  sub _find_CA_file {
      my $self = shift();
  
      my $ca_file =
        defined( $self->{SSL_options}->{SSL_ca_file} )
        ? $self->{SSL_options}->{SSL_ca_file}
        : $ENV{SSL_CERT_FILE};
  
      if ( defined $ca_file ) {
          unless ( -r $ca_file ) {
              die qq/SSL_ca_file '$ca_file' not found or not readable\n/;
          }
          return $ca_file;
      }
  
      return Mozilla::CA::SSL_ca_file()
          if eval { require Mozilla::CA; 1 };
  
      # cert list copied from golang src/crypto/x509/root_unix.go
      foreach my $ca_bundle (
          "/etc/ssl/certs/ca-certificates.crt",     # Debian/Ubuntu/Gentoo etc.
          "/etc/pki/tls/certs/ca-bundle.crt",       # Fedora/RHEL
          "/etc/ssl/ca-bundle.pem",                 # OpenSUSE
          "/etc/openssl/certs/ca-certificates.crt", # NetBSD
          "/etc/ssl/cert.pem",                      # OpenBSD
          "/usr/local/share/certs/ca-root-nss.crt", # FreeBSD/DragonFly
          "/etc/pki/tls/cacert.pem",                # OpenELEC
          "/etc/certs/ca-certificates.crt",         # Solaris 11.2+
      ) {
          return $ca_bundle if -e $ca_bundle;
      }
  
      die qq/Couldn't find a CA bundle with which to verify the SSL certificate.\n/
        . qq/Try installing Mozilla::CA from CPAN\n/;
  }
  
  # for thread safety, we need to know thread id if threads are loaded
  sub _get_tid {
      no warnings 'reserved'; # for 'threads'
      return threads->can("tid") ? threads->tid : 0;
  }
  
  sub _ssl_args {
      my ($self, $host) = @_;
  
      my %ssl_args;
  
      # This test reimplements IO::Socket::SSL::can_client_sni(), which wasn't
      # added until IO::Socket::SSL 1.84
      if ( Net::SSLeay::OPENSSL_VERSION_NUMBER() >= 0x01000000 ) {
          $ssl_args{SSL_hostname} = $host,          # Sane SNI support
      }
  
      if ($self->{verify_SSL}) {
          $ssl_args{SSL_verifycn_scheme}  = 'http'; # enable CN validation
          $ssl_args{SSL_verifycn_name}    = $host;  # set validation hostname
          $ssl_args{SSL_verify_mode}      = 0x01;   # enable cert validation
          $ssl_args{SSL_ca_file}          = $self->_find_CA_file;
      }
      else {
          $ssl_args{SSL_verifycn_scheme}  = 'none'; # disable CN validation
          $ssl_args{SSL_verify_mode}      = 0x00;   # disable cert validation
      }
  
      # user options override settings from verify_SSL
      for my $k ( keys %{$self->{SSL_options}} ) {
          $ssl_args{$k} = $self->{SSL_options}{$k} if $k =~ m/^SSL_/;
      }
  
      return \%ssl_args;
  }
  
  1;
  
  __END__
  
  =pod
  
  =encoding UTF-8
  
  =head1 NAME
  
  HTTP::Tiny - A small, simple, correct HTTP/1.1 client
  
  =head1 VERSION
  
  version 0.058
  
  =head1 SYNOPSIS
  
      use HTTP::Tiny;
  
      my $response = HTTP::Tiny->new->get('http://example.com/');
  
      die "Failed!\n" unless $response->{success};
  
      print "$response->{status} $response->{reason}\n";
  
      while (my ($k, $v) = each %{$response->{headers}}) {
          for (ref $v eq 'ARRAY' ? @$v : $v) {
              print "$k: $_\n";
          }
      }
  
      print $response->{content} if length $response->{content};
  
  =head1 DESCRIPTION
  
  This is a very simple HTTP/1.1 client, designed for doing simple
  requests without the overhead of a large framework like L<LWP::UserAgent>.
  
  It is more correct and more complete than L<HTTP::Lite>.  It supports
  proxies and redirection.  It also correctly resumes after EINTR.
  
  If L<IO::Socket::IP> 0.25 or later is installed, HTTP::Tiny will use it instead
  of L<IO::Socket::INET> for transparent support for both IPv4 and IPv6.
  
  Cookie support requires L<HTTP::CookieJar> or an equivalent class.
  
  =head1 METHODS
  
  =head2 new
  
      $http = HTTP::Tiny->new( %attributes );
  
  This constructor returns a new HTTP::Tiny object.  Valid attributes include:
  
  =over 4
  
  =item *
  
  C<agent> — A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If C<agent> — ends in a space character, the default user-agent string is appended.
  
  =item *
  
  C<cookie_jar> — An instance of L<HTTP::CookieJar> — or equivalent class that supports the C<add> and C<cookie_header> methods
  
  =item *
  
  C<default_headers> — A hashref of default headers to apply to requests
  
  =item *
  
  C<local_address> — The local IP address to bind to
  
  =item *
  
  C<keep_alive> — Whether to reuse the last connection (if for the same scheme, host and port) (defaults to 1)
  
  =item *
  
  C<max_redirect> — Maximum number of redirects allowed (defaults to 5)
  
  =item *
  
  C<max_size> — Maximum response size in bytes (only when not using a data callback).  If defined, responses larger than this will return an exception.
  
  =item *
  
  C<http_proxy> — URL of a proxy server to use for HTTP connections (default is C<$ENV{http_proxy}> — if set)
  
  =item *
  
  C<https_proxy> — URL of a proxy server to use for HTTPS connections (default is C<$ENV{https_proxy}> — if set)
  
  =item *
  
  C<proxy> — URL of a generic proxy server for both HTTP and HTTPS connections (default is C<$ENV{all_proxy}> — if set)
  
  =item *
  
  C<no_proxy> — List of domain suffixes that should not be proxied.  Must be a comma-separated string or an array reference. (default is C<$ENV{no_proxy}> —)
  
  =item *
  
  C<timeout> — Request timeout in seconds (default is 60) If a socket open, read or write takes longer than the timeout, an exception is thrown.
  
  =item *
  
  C<verify_SSL> — A boolean that indicates whether to validate the SSL certificate of an C<https> — connection (default is false)
  
  =item *
  
  C<SSL_options> — A hashref of C<SSL_*> — options to pass through to L<IO::Socket::SSL>
  
  =back
  
  Passing an explicit C<undef> for C<proxy>, C<http_proxy> or C<https_proxy> will
  prevent getting the corresponding proxies from the environment.
  
  Exceptions from C<max_size>, C<timeout> or other errors will result in a
  pseudo-HTTP status code of 599 and a reason of "Internal Exception". The
  content field in the response will contain the text of the exception.
  
  The C<keep_alive> parameter enables a persistent connection, but only to a
  single destination scheme, host and port.  Also, if any connection-relevant
  attributes are modified, or if the process ID or thread ID change, the
  persistent connection will be dropped.  If you want persistent connections
  across multiple destinations, use multiple HTTP::Tiny objects.
  
  See L</SSL SUPPORT> for more on the C<verify_SSL> and C<SSL_options> attributes.
  
  =head2 get|head|put|post|delete
  
      $response = $http->get($url);
      $response = $http->get($url, \%options);
      $response = $http->head($url);
  
  These methods are shorthand for calling C<request()> for the given method.  The
  URL must have unsafe characters escaped and international domain names encoded.
  See C<request()> for valid options and a description of the response.
  
  The C<success> field of the response will be true if the status code is 2XX.
  
  =head2 post_form
  
      $response = $http->post_form($url, $form_data);
      $response = $http->post_form($url, $form_data, \%options);
  
  This method executes a C<POST> request and sends the key/value pairs from a
  form data hash or array reference to the given URL with a C<content-type> of
  C<application/x-www-form-urlencoded>.  If data is provided as an array
  reference, the order is preserved; if provided as a hash reference, the terms
  are sorted on key and value for consistency.  See documentation for the
  C<www_form_urlencode> method for details on the encoding.
  
  The URL must have unsafe characters escaped and international domain names
  encoded.  See C<request()> for valid options and a description of the response.
  Any C<content-type> header or content in the options hashref will be ignored.
  
  The C<success> field of the response will be true if the status code is 2XX.
  
  =head2 mirror
  
      $response = $http->mirror($url, $file, \%options)
      if ( $response->{success} ) {
          print "$file is up to date\n";
      }
  
  Executes a C<GET> request for the URL and saves the response body to the file
  name provided.  The URL must have unsafe characters escaped and international
  domain names encoded.  If the file already exists, the request will include an
  C<If-Modified-Since> header with the modification timestamp of the file.  You
  may specify a different C<If-Modified-Since> header yourself in the C<<
  $options->{headers} >> hash.
  
  The C<success> field of the response will be true if the status code is 2XX
  or if the status code is 304 (unmodified).
  
  If the file was modified and the server response includes a properly
  formatted C<Last-Modified> header, the file modification time will
  be updated accordingly.
  
  =head2 request
  
      $response = $http->request($method, $url);
      $response = $http->request($method, $url, \%options);
  
  Executes an HTTP request of the given method type ('GET', 'HEAD', 'POST',
  'PUT', etc.) on the given URL.  The URL must have unsafe characters escaped and
  international domain names encoded.
  
  If the URL includes a "user:password" stanza, they will be used for Basic-style
  authorization headers.  (Authorization headers will not be included in a
  redirected request.) For example:
  
      $http->request('GET', 'http://Aladdin:open sesame@example.com/');
  
  If the "user:password" stanza contains reserved characters, they must
  be percent-escaped:
  
      $http->request('GET', 'http://john%40example.com:password@example.com/');
  
  A hashref of options may be appended to modify the request.
  
  Valid options are:
  
  =over 4
  
  =item *
  
  C<headers> — A hashref containing headers to include with the request.  If the value for a header is an array reference, the header will be output multiple times with each value in the array.  These headers over-write any default headers.
  
  =item *
  
  C<content> — A scalar to include as the body of the request OR a code reference that will be called iteratively to produce the body of the request
  
  =item *
  
  C<trailer_callback> — A code reference that will be called if it exists to provide a hashref of trailing headers (only used with chunked transfer-encoding)
  
  =item *
  
  C<data_callback> — A code reference that will be called for each chunks of the response body received.
  
  =item *
  
  C<peer> — Override host resolution and force all connections to go only to a specific peer address, regardless of the URL of the request.  This will include any redirections!  This options should be used with extreme caution (e.g. debugging or very special circumstances).
  
  =back
  
  The C<Host> header is generated from the URL in accordance with RFC 2616.  It
  is a fatal error to specify C<Host> in the C<headers> option.  Other headers
  may be ignored or overwritten if necessary for transport compliance.
  
  If the C<content> option is a code reference, it will be called iteratively
  to provide the content body of the request.  It should return the empty
  string or undef when the iterator is exhausted.
  
  If the C<content> option is the empty string, no C<content-type> or
  C<content-length> headers will be generated.
  
  If the C<data_callback> option is provided, it will be called iteratively until
  the entire response body is received.  The first argument will be a string
  containing a chunk of the response body, the second argument will be the
  in-progress response hash reference, as described below.  (This allows
  customizing the action of the callback based on the C<status> or C<headers>
  received prior to the content body.)
  
  The C<request> method returns a hashref containing the response.  The hashref
  will have the following keys:
  
  =over 4
  
  =item *
  
  C<success> — Boolean indicating whether the operation returned a 2XX status code
  
  =item *
  
  C<url> — URL that provided the response. This is the URL of the request unless there were redirections, in which case it is the last URL queried in a redirection chain
  
  =item *
  
  C<status> — The HTTP status code of the response
  
  =item *
  
  C<reason> — The response phrase returned by the server
  
  =item *
  
  C<content> — The body of the response.  If the response does not have any content or if a data callback is provided to consume the response body, this will be the empty string
  
  =item *
  
  C<headers> — A hashref of header fields.  All header field names will be normalized to be lower case. If a header is repeated, the value will be an arrayref; it will otherwise be a scalar string containing the value
  
  =item *
  
  C<redirects> If this field exists, it is an arrayref of response hash references from redirects in the same order that redirections occurred.  If it does not exist, then no redirections occurred.
  
  =back
  
  On an exception during the execution of the request, the C<status> field will
  contain 599, and the C<content> field will contain the text of the exception.
  
  =head2 www_form_urlencode
  
      $params = $http->www_form_urlencode( $data );
      $response = $http->get("http://example.com/query?$params");
  
  This method converts the key/value pairs from a data hash or array reference
  into a C<x-www-form-urlencoded> string.  The keys and values from the data
  reference will be UTF-8 encoded and escaped per RFC 3986.  If a value is an
  array reference, the key will be repeated with each of the values of the array
  reference.  If data is provided as a hash reference, the key/value pairs in the
  resulting string will be sorted by key and value for consistent ordering.
  
  =head2 can_ssl
  
      $ok         = HTTP::Tiny->can_ssl;
      ($ok, $why) = HTTP::Tiny->can_ssl;
      ($ok, $why) = $http->can_ssl;
  
  Indicates if SSL support is available.  When called as a class object, it
  checks for the correct version of L<Net::SSLeay> and L<IO::Socket::SSL>.
  When called as an object methods, if C<SSL_verify> is true or if C<SSL_verify_mode>
  is set in C<SSL_options>, it checks that a CA file is available.
  
  In scalar context, returns a boolean indicating if SSL is available.
  In list context, returns the boolean and a (possibly multi-line) string of
  errors indicating why SSL isn't available.
  
  =head2 connected
  
      $host = $http->connected;
      ($host, $port) = $http->connected;
  
  Indicates if a connection to a peer is being kept alive, per the C<keep_alive>
  option.
  
  In scalar context, returns the peer host and port, joined with a colon, or
  C<undef> (if no peer is connected).
  In list context, returns the peer host and port or an empty list (if no peer
  is connected).
  
  B<Note>: This method cannot reliably be used to discover whether the remote
  host has closed its end of the socket.
  
  =for Pod::Coverage SSL_options
  agent
  cookie_jar
  default_headers
  http_proxy
  https_proxy
  keep_alive
  local_address
  max_redirect
  max_size
  no_proxy
  proxy
  timeout
  verify_SSL
  
  =head1 SSL SUPPORT
  
  Direct C<https> connections are supported only if L<IO::Socket::SSL> 1.56 or
  greater and L<Net::SSLeay> 1.49 or greater are installed. An exception will be
  thrown if new enough versions of these modules are not installed or if the SSL
  encryption fails. You can also use C<HTTP::Tiny::can_ssl()> utility function
  that returns boolean to see if the required modules are installed.
  
  An C<https> connection may be made via an C<http> proxy that supports the CONNECT
  command (i.e. RFC 2817).  You may not proxy C<https> via a proxy that itself
  requires C<https> to communicate.
  
  SSL provides two distinct capabilities:
  
  =over 4
  
  =item *
  
  Encrypted communication channel
  
  =item *
  
  Verification of server identity
  
  =back
  
  B<By default, HTTP::Tiny does not verify server identity>.
  
  Server identity verification is controversial and potentially tricky because it
  depends on a (usually paid) third-party Certificate Authority (CA) trust model
  to validate a certificate as legitimate.  This discriminates against servers
  with self-signed certificates or certificates signed by free, community-driven
  CA's such as L<CAcert.org|http://cacert.org>.
  
  By default, HTTP::Tiny does not make any assumptions about your trust model,
  threat level or risk tolerance.  It just aims to give you an encrypted channel
  when you need one.
  
  Setting the C<verify_SSL> attribute to a true value will make HTTP::Tiny verify
  that an SSL connection has a valid SSL certificate corresponding to the host
  name of the connection and that the SSL certificate has been verified by a CA.
  Assuming you trust the CA, this will protect against a L<man-in-the-middle
  attack|http://en.wikipedia.org/wiki/Man-in-the-middle_attack>.  If you are
  concerned about security, you should enable this option.
  
  Certificate verification requires a file containing trusted CA certificates.
  
  If the environment variable C<SSL_CERT_FILE> is present, HTTP::Tiny
  will try to find a CA certificate file in that location.
  
  If the L<Mozilla::CA> module is installed, HTTP::Tiny will use the CA file
  included with it as a source of trusted CA's.  (This means you trust Mozilla,
  the author of Mozilla::CA, the CPAN mirror where you got Mozilla::CA, the
  toolchain used to install it, and your operating system security, right?)
  
  If that module is not available, then HTTP::Tiny will search several
  system-specific default locations for a CA certificate file:
  
  =over 4
  
  =item *
  
  /etc/ssl/certs/ca-certificates.crt
  
  =item *
  
  /etc/pki/tls/certs/ca-bundle.crt
  
  =item *
  
  /etc/ssl/ca-bundle.pem
  
  =back
  
  An exception will be raised if C<verify_SSL> is true and no CA certificate file
  is available.
  
  If you desire complete control over SSL connections, the C<SSL_options> attribute
  lets you provide a hash reference that will be passed through to
  C<IO::Socket::SSL::start_SSL()>, overriding any options set by HTTP::Tiny. For
  example, to provide your own trusted CA file:
  
      SSL_options => {
          SSL_ca_file => $file_path,
      }
  
  The C<SSL_options> attribute could also be used for such things as providing a
  client certificate for authentication to a server or controlling the choice of
  cipher used for the SSL connection. See L<IO::Socket::SSL> documentation for
  details.
  
  =head1 PROXY SUPPORT
  
  HTTP::Tiny can proxy both C<http> and C<https> requests.  Only Basic proxy
  authorization is supported and it must be provided as part of the proxy URL:
  C<http://user:pass@proxy.example.com/>.
  
  HTTP::Tiny supports the following proxy environment variables:
  
  =over 4
  
  =item *
  
  http_proxy or HTTP_PROXY
  
  =item *
  
  https_proxy or HTTPS_PROXY
  
  =item *
  
  all_proxy or ALL_PROXY
  
  =back
  
  If the C<REQUEST_METHOD> environment variable is set, then this might be a CGI
  process and C<HTTP_PROXY> would be set from the C<Proxy:> header, which is a
  security risk.  If C<REQUEST_METHOD> is set, C<HTTP_PROXY> (the upper case
  variant only) is ignored.
  
  Tunnelling C<https> over an C<http> proxy using the CONNECT method is
  supported.  If your proxy uses C<https> itself, you can not tunnel C<https>
  over it.
  
  Be warned that proxying an C<https> connection opens you to the risk of a
  man-in-the-middle attack by the proxy server.
  
  The C<no_proxy> environment variable is supported in the format of a
  comma-separated list of domain extensions proxy should not be used for.
  
  Proxy arguments passed to C<new> will override their corresponding
  environment variables.
  
  =head1 LIMITATIONS
  
  HTTP::Tiny is I<conditionally compliant> with the
  L<HTTP/1.1 specifications|http://www.w3.org/Protocols/>:
  
  =over 4
  
  =item *
  
  "Message Syntax and Routing" [RFC7230]
  
  =item *
  
  "Semantics and Content" [RFC7231]
  
  =item *
  
  "Conditional Requests" [RFC7232]
  
  =item *
  
  "Range Requests" [RFC7233]
  
  =item *
  
  "Caching" [RFC7234]
  
  =item *
  
  "Authentication" [RFC7235]
  
  =back
  
  It attempts to meet all "MUST" requirements of the specification, but does not
  implement all "SHOULD" requirements.  (Note: it was developed against the
  earlier RFC 2616 specification and may not yet meet the revised RFC 7230-7235
  spec.)
  
  Some particular limitations of note include:
  
  =over
  
  =item *
  
  HTTP::Tiny focuses on correct transport.  Users are responsible for ensuring
  that user-defined headers and content are compliant with the HTTP/1.1
  specification.
  
  =item *
  
  Users must ensure that URLs are properly escaped for unsafe characters and that
  international domain names are properly encoded to ASCII. See L<URI::Escape>,
  L<URI::_punycode> and L<Net::IDN::Encode>.
  
  =item *
  
  Redirection is very strict against the specification.  Redirection is only
  automatic for response codes 301, 302, 307 and 308 if the request method is
  'GET' or 'HEAD'.  Response code 303 is always converted into a 'GET'
  redirection, as mandated by the specification.  There is no automatic support
  for status 305 ("Use proxy") redirections.
  
  =item *
  
  There is no provision for delaying a request body using an C<Expect> header.
  Unexpected C<1XX> responses are silently ignored as per the specification.
  
  =item *
  
  Only 'chunked' C<Transfer-Encoding> is supported.
  
  =item *
  
  There is no support for a Request-URI of '*' for the 'OPTIONS' request.
  
  =item *
  
  Headers mentioned in the RFCs and some other, well-known headers are
  generated with their canonical case.  Other headers are sent in the
  case provided by the user.  Except for control headers (which are sent first),
  headers are sent in arbitrary order.
  
  =back
  
  Despite the limitations listed above, HTTP::Tiny is considered
  feature-complete.  New feature requests should be directed to
  L<HTTP::Tiny::UA>.
  
  =head1 SEE ALSO
  
  =over 4
  
  =item *
  
  L<HTTP::Tiny::UA> - Higher level UA features for HTTP::Tiny
  
  =item *
  
  L<HTTP::Thin> - HTTP::Tiny wrapper with L<HTTP::Request>/L<HTTP::Response> compatibility
  
  =item *
  
  L<HTTP::Tiny::Mech> - Wrap L<WWW::Mechanize> instance in HTTP::Tiny compatible interface
  
  =item *
  
  L<IO::Socket::IP> - Required for IPv6 support
  
  =item *
  
  L<IO::Socket::SSL> - Required for SSL support
  
  =item *
  
  L<LWP::UserAgent> - If HTTP::Tiny isn't enough for you, this is the "standard" way to do things
  
  =item *
  
  L<Mozilla::CA> - Required if you want to validate SSL certificates
  
  =item *
  
  L<Net::SSLeay> - Required for SSL support
  
  =back
  
  =for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan
  
  =head1 SUPPORT
  
  =head2 Bugs / Feature Requests
  
  Please report any bugs or feature requests through the issue tracker
  at L<https://github.com/chansen/p5-http-tiny/issues>.
  You will be notified automatically of any progress on your issue.
  
  =head2 Source Code
  
  This is open source software.  The code repository is available for
  public review and contribution under the terms of the license.
  
  L<https://github.com/chansen/p5-http-tiny>
  
    git clone https://github.com/chansen/p5-http-tiny.git
  
  =head1 AUTHORS
  
  =over 4
  
  =item *
  
  Christian Hansen <chansen@cpan.org>
  
  =item *
  
  David Golden <dagolden@cpan.org>
  
  =back
  
  =head1 CONTRIBUTORS
  
  =for stopwords Alan Gardner Alessandro Ghedini A. Sinan Unur Brad Gilbert brian m. carlson Chris Nehren Weyl Claes Jakobsson Clinton Gormley David Golden Dean Pearce Edward Zborowski James Raspass Jeremy Mates Jess Robinson Lukas Eklund Martin J. Evans Martin-Louis Bright Mike Doherty Olaf Alders Olivier Mengué Petr Písař SkyMarshal Sören Kornetzki Syohei YOSHIDA Tatsuhiko Miyagawa Tom Hukins Tony Cook
  
  =over 4
  
  =item *
  
  Alan Gardner <gardner@pythian.com>
  
  =item *
  
  Alessandro Ghedini <al3xbio@gmail.com>
  
  =item *
  
  A. Sinan Unur <nanis@cpan.org>
  
  =item *
  
  Brad Gilbert <bgills@cpan.org>
  
  =item *
  
  brian m. carlson <sandals@crustytoothpaste.net>
  
  =item *
  
  Chris Nehren <apeiron@cpan.org>
  
  =item *
  
  Chris Weyl <cweyl@alumni.drew.edu>
  
  =item *
  
  Claes Jakobsson <claes@surfar.nu>
  
  =item *
  
  Clinton Gormley <clint@traveljury.com>
  
  =item *
  
  David Golden <xdg@xdg.me>
  
  =item *
  
  Dean Pearce <pearce@pythian.com>
  
  =item *
  
  Edward Zborowski <ed@rubensteintech.com>
  
  =item *
  
  James Raspass <jraspass@gmail.com>
  
  =item *
  
  Jeremy Mates <jmates@cpan.org>
  
  =item *
  
  Jess Robinson <castaway@desert-island.me.uk>
  
  =item *
  
  Lukas Eklund <leklund@gmail.com>
  
  =item *
  
  Martin J. Evans <mjegh@ntlworld.com>
  
  =item *
  
  Martin-Louis Bright <mlbright@gmail.com>
  
  =item *
  
  Mike Doherty <doherty@cpan.org>
  
  =item *
  
  Olaf Alders <olaf@wundersolutions.com>
  
  =item *
  
  Olivier Mengué <dolmen@cpan.org>
  
  =item *
  
  Petr Písař <ppisar@redhat.com>
  
  =item *
  
  SkyMarshal <skymarshal1729@gmail.com>
  
  =item *
  
  Sören Kornetzki <soeren.kornetzki@delti.com>
  
  =item *
  
  Syohei YOSHIDA <syohex@gmail.com>
  
  =item *
  
  Tatsuhiko Miyagawa <miyagawa@bulknews.net>
  
  =item *
  
  Tom Hukins <tom@eborcom.com>
  
  =item *
  
  Tony Cook <tony@develop-help.com>
  
  =back
  
  =head1 COPYRIGHT AND LICENSE
  
  This software is copyright (c) 2016 by Christian Hansen.
  
  This is free software; you can redistribute it and/or modify it under
  the same terms as the Perl 5 programming language system itself.
  
  =cut
HTTP_TINY

$fatpacked{"JSON/MaybeXS.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'JSON_MAYBEXS';
  package JSON::MaybeXS;
  
  use strict;
  use warnings FATAL => 'all';
  use base qw(Exporter);
  
  our $VERSION = '1.003005';
  $VERSION = eval $VERSION;
  
  sub _choose_json_module {
      return 'Cpanel::JSON::XS' if $INC{'Cpanel/JSON/XS.pm'};
      return 'JSON::XS'         if $INC{'JSON/XS.pm'};
  
      my @err;
  
      return 'Cpanel::JSON::XS' if eval { require Cpanel::JSON::XS; 1; };
      push @err, "Error loading Cpanel::JSON::XS: $@";
  
      return 'JSON::XS' if eval { require JSON::XS; 1; };
      push @err, "Error loading JSON::XS: $@";
  
      return 'JSON::PP' if eval { require JSON::PP; 1 };
      push @err, "Error loading JSON::PP: $@";
  
      die join( "\n", "Couldn't load a JSON module:", @err );
  
  }
  
  BEGIN {
      our $JSON_Class = _choose_json_module();
      $JSON_Class->import(qw(encode_json decode_json));
  }
  
  our @EXPORT = qw(encode_json decode_json JSON);
  my @EXPORT_ALL = qw(is_bool);
  our @EXPORT_OK = qw(is_bool to_json from_json);
  our %EXPORT_TAGS = ( all => [ @EXPORT, @EXPORT_ALL ],
                       legacy => [ @EXPORT, @EXPORT_OK ],
                     );
  
  sub JSON () { our $JSON_Class }
  
  sub new {
    shift;
    my %args = @_ == 1 ? %{$_[0]} : @_;
    my $new = (our $JSON_Class)->new;
    $new->$_($args{$_}) for keys %args;
    return $new;
  }
  
  use Scalar::Util ();
  
  sub is_bool {
    die 'is_bool is not a method' if $_[1];
  
    Scalar::Util::blessed($_[0])
      and ($_[0]->isa('JSON::XS::Boolean')
        or $_[0]->isa('Cpanel::JSON::XS::Boolean')
        or $_[0]->isa('JSON::PP::Boolean'));
  }
  
  # (mostly) CopyPasta from JSON.pm version 2.90
  use Carp ();
  
  sub from_json ($@) {
      if ( ref($_[0]) =~ /^JSON/ or $_[0] =~ /^JSON/ ) {
          Carp::croak "from_json should not be called as a method.";
      }
      my $json = JSON()->new;
  
      if (@_ == 2 and ref $_[1] eq 'HASH') {
          my $opt  = $_[1];
          for my $method (keys %$opt) {
              $json->$method( $opt->{$method} );
          }
      }
  
      return $json->decode( $_[0] );
  }
  
  sub to_json ($@) {
      if (
          ref($_[0]) =~ /^JSON/
          or (@_ > 2 and $_[0] =~ /^JSON/)
            ) {
                 Carp::croak "to_json should not be called as a method.";
      }
      my $json = JSON()->new;
  
      if (@_ == 2 and ref $_[1] eq 'HASH') {
          my $opt  = $_[1];
          for my $method (keys %$opt) {
              $json->$method( $opt->{$method} );
          }
      }
  
      $json->encode($_[0]);
  }
  
  1;
  
  =head1 NAME
  
  JSON::MaybeXS - Use L<Cpanel::JSON::XS> with a fallback to L<JSON::XS> and L<JSON::PP>
  
  =head1 SYNOPSIS
  
    use JSON::MaybeXS;
  
    my $data_structure = decode_json($json_input);
  
    my $json_output = encode_json($data_structure);
  
    my $json = JSON->new;
  
    my $json_with_args = JSON::MaybeXS->new(utf8 => 1); # or { utf8 => 1 }
  
  =head1 DESCRIPTION
  
  This module first checks to see if either L<Cpanel::JSON::XS> or
  L<JSON::XS> is already loaded, in which case it uses that module. Otherwise
  it tries to load L<Cpanel::JSON::XS>, then L<JSON::XS>, then L<JSON::PP>
  in order, and either uses the first module it finds or throws an error.
  
  It then exports the C<encode_json> and C<decode_json> functions from the
  loaded module, along with a C<JSON> constant that returns the class name
  for calling C<new> on.
  
  If you're writing fresh code rather than replacing L<JSON.pm|JSON> usage, you might
  want to pass options as constructor args rather than calling mutators, so
  we provide our own C<new> method that supports that.
  
  =head1 EXPORTS
  
  C<encode_json>, C<decode_json> and C<JSON> are exported by default; C<is_bool>
  is exported on request.
  
  To import only some symbols, specify them on the C<use> line:
  
    use JSON::MaybeXS qw(encode_json decode_json is_bool); # functions only
  
    use JSON::MaybeXS qw(JSON); # JSON constant only
  
  To import all available sensible symbols (C<encode_json>, C<decode_json>, and
  C<is_bool>), use C<:all>:
  
    use JSON::MaybeXS ':all';
  
  To import all symbols including those needed by legacy apps that use L<JSON::PP>:
  
    use JSON::MaybeXS ':legacy';
  
  This imports the C<to_json> and C<from_json> symbols as well as everything in
  C<:all>.  NOTE: This is to support legacy code that makes extensive
  use of C<to_json> and C<from_json> which you are not yet in a position to
  refactor.  DO NOT use this import tag in new code, in order to avoid
  the crawling horrors of getting UTF8 support subtly wrong.  See the
  documentation for L<JSON> for further details.
  
  =head2 encode_json
  
  This is the C<encode_json> function provided by the selected implementation
  module, and takes a perl data structure which is serialised to JSON text.
  
    my $json_text = encode_json($data_structure);
  
  =head2 decode_json
  
  This is the C<decode_json> function provided by the selected implementation
  module, and takes a string of JSON text to deserialise to a perl data structure.
  
    my $data_structure = decode_json($json_text);
  
  =head2 to_json, from_json
  
  See L<JSON> for details.  These are included to support legacy code
  B<only>.
  
  =head2 JSON
  
  The C<JSON> constant returns the selected implementation module's name for
  use as a class name - so:
  
    my $json_obj = JSON->new; # returns a Cpanel::JSON::XS or JSON::PP object
  
  and that object can then be used normally:
  
    my $data_structure = $json_obj->decode($json_text); # etc.
  
  =head2 is_bool
  
    $is_boolean = is_bool($scalar)
  
  Returns true if the passed scalar represents either C<true> or
  C<false>, two constants that act like C<1> and C<0>, respectively
  and are used to represent JSON C<true> and C<false> values in Perl.
  
  Since this is a bare sub in the various backend classes, it cannot be called as
  a class method like the other interfaces; it must be called as a function, with
  no invocant.  It supports the representation used in all JSON backends.
  
  =head1 CONSTRUCTOR
  
  =head2 new
  
  With L<JSON::PP>, L<JSON::XS> and L<Cpanel::JSON::XS> you are required to call
  mutators to set options, such as:
  
    my $json = $class->new->utf8(1)->pretty(1);
  
  Since this is a trifle irritating and noticeably un-perlish, we also offer:
  
    my $json = JSON::MaybeXS->new(utf8 => 1, pretty => 1);
  
  which works equivalently to the above (and in the usual tradition will accept
  a hashref instead of a hash, should you so desire).
  
  =head1 BOOLEANS
  
  To include JSON-aware booleans (C<true>, C<false>) in your data, just do:
  
      use JSON::MaybeXS;
      my $true = JSON->true;
      my $false = JSON->false;
  
  =head1 CAVEATS
  
  The C<new()> method in this module is technically a factory, not a
  constructor, because the objects it returns will I<NOT> be blessed into the
  C<JSON::MaybeXS> class.
  
  If you are using an object returned by this module as a Moo(se) attribute,
  this type constraint code:
  
      is 'json' => ( isa => 'JSON::MaybeXS' );
  
  will I<NOT> do what you expect. Instead, either rely on the C<JSON> class
  constant described above, as so:
  
      is 'json' => ( isa => JSON::MaybeXS::JSON() );
  
  Alternatively, you can use duck typing:
  
      use Moose::Util::TypeConstraints 'duck_type';
      is 'json' => ( isa => Object , duck_type([qw/ encode decode /]));
  
  =head1 AUTHOR
  
  mst - Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
  
  =head1 CONTRIBUTORS
  
  =over 4
  
  =item * Clinton Gormley <drtech@cpan.org>
  
  =item * Karen Etheridge <ether@cpan.org>
  
  =item * Kieren Diment <diment@gmail.com>
  
  =back
  
  =head1 COPYRIGHT
  
  Copyright (c) 2013 the C<JSON::MaybeXS> L</AUTHOR> and L</CONTRIBUTORS>
  as listed above.
  
  =head1 LICENSE
  
  This library is free software and may be distributed under the same terms
  as perl itself.
  
  =cut
JSON_MAYBEXS

$fatpacked{"JSON/PP.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'JSON_PP';
  package JSON::PP;
  
  # JSON-2.0
  
  use 5.005;
  use strict;
  use base qw(Exporter);
  use overload ();
  
  use Carp ();
  use B ();
  #use Devel::Peek;
  
  $JSON::PP::VERSION = '2.27400';
  
  @JSON::PP::EXPORT = qw(encode_json decode_json from_json to_json);
  
  # instead of hash-access, i tried index-access for speed.
  # but this method is not faster than what i expected. so it will be changed.
  
  use constant P_ASCII                => 0;
  use constant P_LATIN1               => 1;
  use constant P_UTF8                 => 2;
  use constant P_INDENT               => 3;
  use constant P_CANONICAL            => 4;
  use constant P_SPACE_BEFORE         => 5;
  use constant P_SPACE_AFTER          => 6;
  use constant P_ALLOW_NONREF         => 7;
  use constant P_SHRINK               => 8;
  use constant P_ALLOW_BLESSED        => 9;
  use constant P_CONVERT_BLESSED      => 10;
  use constant P_RELAXED              => 11;
  
  use constant P_LOOSE                => 12;
  use constant P_ALLOW_BIGNUM         => 13;
  use constant P_ALLOW_BAREKEY        => 14;
  use constant P_ALLOW_SINGLEQUOTE    => 15;
  use constant P_ESCAPE_SLASH         => 16;
  use constant P_AS_NONBLESSED        => 17;
  
  use constant P_ALLOW_UNKNOWN        => 18;
  
  use constant OLD_PERL => $] < 5.008 ? 1 : 0;
  
  BEGIN {
      my @xs_compati_bit_properties = qw(
              latin1 ascii utf8 indent canonical space_before space_after allow_nonref shrink
              allow_blessed convert_blessed relaxed allow_unknown
      );
      my @pp_bit_properties = qw(
              allow_singlequote allow_bignum loose
              allow_barekey escape_slash as_nonblessed
      );
  
      # Perl version check, Unicode handling is enabled?
      # Helper module sets @JSON::PP::_properties.
      if ($] < 5.008 ) {
          my $helper = $] >= 5.006 ? 'JSON::PP::Compat5006' : 'JSON::PP::Compat5005';
          eval qq| require $helper |;
          if ($@) { Carp::croak $@; }
      }
  
      for my $name (@xs_compati_bit_properties, @pp_bit_properties) {
          my $flag_name = 'P_' . uc($name);
  
          eval qq/
              sub $name {
                  my \$enable = defined \$_[1] ? \$_[1] : 1;
  
                  if (\$enable) {
                      \$_[0]->{PROPS}->[$flag_name] = 1;
                  }
                  else {
                      \$_[0]->{PROPS}->[$flag_name] = 0;
                  }
  
                  \$_[0];
              }
  
              sub get_$name {
                  \$_[0]->{PROPS}->[$flag_name] ? 1 : '';
              }
          /;
      }
  
  }
  
  
  
  # Functions
  
  my %encode_allow_method
       = map {($_ => 1)} qw/utf8 pretty allow_nonref latin1 self_encode escape_slash
                            allow_blessed convert_blessed indent indent_length allow_bignum
                            as_nonblessed
                          /;
  my %decode_allow_method
       = map {($_ => 1)} qw/utf8 allow_nonref loose allow_singlequote allow_bignum
                            allow_barekey max_size relaxed/;
  
  
  my $JSON; # cache
  
  sub encode_json ($) { # encode
      ($JSON ||= __PACKAGE__->new->utf8)->encode(@_);
  }
  
  
  sub decode_json { # decode
      ($JSON ||= __PACKAGE__->new->utf8)->decode(@_);
  }
  
  # Obsoleted
  
  sub to_json($) {
     Carp::croak ("JSON::PP::to_json has been renamed to encode_json.");
  }
  
  
  sub from_json($) {
     Carp::croak ("JSON::PP::from_json has been renamed to decode_json.");
  }
  
  
  # Methods
  
  sub new {
      my $class = shift;
      my $self  = {
          max_depth   => 512,
          max_size    => 0,
          indent      => 0,
          FLAGS       => 0,
          fallback      => sub { encode_error('Invalid value. JSON can only reference.') },
          indent_length => 3,
      };
  
      bless $self, $class;
  }
  
  
  sub encode {
      return $_[0]->PP_encode_json($_[1]);
  }
  
  
  sub decode {
      return $_[0]->PP_decode_json($_[1], 0x00000000);
  }
  
  
  sub decode_prefix {
      return $_[0]->PP_decode_json($_[1], 0x00000001);
  }
  
  
  # accessor
  
  
  # pretty printing
  
  sub pretty {
      my ($self, $v) = @_;
      my $enable = defined $v ? $v : 1;
  
      if ($enable) { # indent_length(3) for JSON::XS compatibility
          $self->indent(1)->indent_length(3)->space_before(1)->space_after(1);
      }
      else {
          $self->indent(0)->space_before(0)->space_after(0);
      }
  
      $self;
  }
  
  # etc
  
  sub max_depth {
      my $max  = defined $_[1] ? $_[1] : 0x80000000;
      $_[0]->{max_depth} = $max;
      $_[0];
  }
  
  
  sub get_max_depth { $_[0]->{max_depth}; }
  
  
  sub max_size {
      my $max  = defined $_[1] ? $_[1] : 0;
      $_[0]->{max_size} = $max;
      $_[0];
  }
  
  
  sub get_max_size { $_[0]->{max_size}; }
  
  
  sub filter_json_object {
      $_[0]->{cb_object} = defined $_[1] ? $_[1] : 0;
      $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
      $_[0];
  }
  
  sub filter_json_single_key_object {
      if (@_ > 1) {
          $_[0]->{cb_sk_object}->{$_[1]} = $_[2];
      }
      $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
      $_[0];
  }
  
  sub indent_length {
      if (!defined $_[1] or $_[1] > 15 or $_[1] < 0) {
          Carp::carp "The acceptable range of indent_length() is 0 to 15.";
      }
      else {
          $_[0]->{indent_length} = $_[1];
      }
      $_[0];
  }
  
  sub get_indent_length {
      $_[0]->{indent_length};
  }
  
  sub sort_by {
      $_[0]->{sort_by} = defined $_[1] ? $_[1] : 1;
      $_[0];
  }
  
  sub allow_bigint {
      Carp::carp("allow_bigint() is obsoleted. use allow_bignum() insted.");
  }
  
  ###############################
  
  ###
  ### Perl => JSON
  ###
  
  
  { # Convert
  
      my $max_depth;
      my $indent;
      my $ascii;
      my $latin1;
      my $utf8;
      my $space_before;
      my $space_after;
      my $canonical;
      my $allow_blessed;
      my $convert_blessed;
  
      my $indent_length;
      my $escape_slash;
      my $bignum;
      my $as_nonblessed;
  
      my $depth;
      my $indent_count;
      my $keysort;
  
  
      sub PP_encode_json {
          my $self = shift;
          my $obj  = shift;
  
          $indent_count = 0;
          $depth        = 0;
  
          my $idx = $self->{PROPS};
  
          ($ascii, $latin1, $utf8, $indent, $canonical, $space_before, $space_after, $allow_blessed,
              $convert_blessed, $escape_slash, $bignum, $as_nonblessed)
           = @{$idx}[P_ASCII .. P_SPACE_AFTER, P_ALLOW_BLESSED, P_CONVERT_BLESSED,
                      P_ESCAPE_SLASH, P_ALLOW_BIGNUM, P_AS_NONBLESSED];
  
          ($max_depth, $indent_length) = @{$self}{qw/max_depth indent_length/};
  
          $keysort = $canonical ? sub { $a cmp $b } : undef;
  
          if ($self->{sort_by}) {
              $keysort = ref($self->{sort_by}) eq 'CODE' ? $self->{sort_by}
                       : $self->{sort_by} =~ /\D+/       ? $self->{sort_by}
                       : sub { $a cmp $b };
          }
  
          encode_error("hash- or arrayref expected (not a simple scalar, use allow_nonref to allow this)")
               if(!ref $obj and !$idx->[ P_ALLOW_NONREF ]);
  
          my $str  = $self->object_to_json($obj);
  
          $str .= "\n" if ( $indent ); # JSON::XS 2.26 compatible
  
          unless ($ascii or $latin1 or $utf8) {
              utf8::upgrade($str);
          }
  
          if ($idx->[ P_SHRINK ]) {
              utf8::downgrade($str, 1);
          }
  
          return $str;
      }
  
  
      sub object_to_json {
          my ($self, $obj) = @_;
          my $type = ref($obj);
  
          if($type eq 'HASH'){
              return $self->hash_to_json($obj);
          }
          elsif($type eq 'ARRAY'){
              return $self->array_to_json($obj);
          }
          elsif ($type) { # blessed object?
              if (blessed($obj)) {
  
                  return $self->value_to_json($obj) if ( $obj->isa('JSON::PP::Boolean') );
  
                  if ( $convert_blessed and $obj->can('TO_JSON') ) {
                      my $result = $obj->TO_JSON();
                      if ( defined $result and ref( $result ) ) {
                          if ( refaddr( $obj ) eq refaddr( $result ) ) {
                              encode_error( sprintf(
                                  "%s::TO_JSON method returned same object as was passed instead of a new one",
                                  ref $obj
                              ) );
                          }
                      }
  
                      return $self->object_to_json( $result );
                  }
  
                  return "$obj" if ( $bignum and _is_bignum($obj) );
                  return $self->blessed_to_json($obj) if ($allow_blessed and $as_nonblessed); # will be removed.
  
                  encode_error( sprintf("encountered object '%s', but neither allow_blessed "
                      . "nor convert_blessed settings are enabled", $obj)
                  ) unless ($allow_blessed);
  
                  return 'null';
              }
              else {
                  return $self->value_to_json($obj);
              }
          }
          else{
              return $self->value_to_json($obj);
          }
      }
  
  
      sub hash_to_json {
          my ($self, $obj) = @_;
          my @res;
  
          encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                           if (++$depth > $max_depth);
  
          my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
          my $del = ($space_before ? ' ' : '') . ':' . ($space_after ? ' ' : '');
  
          for my $k ( _sort( $obj ) ) {
              if ( OLD_PERL ) { utf8::decode($k) } # key for Perl 5.6 / be optimized
              push @res, string_to_json( $self, $k )
                            .  $del
                            . ( $self->object_to_json( $obj->{$k} ) || $self->value_to_json( $obj->{$k} ) );
          }
  
          --$depth;
          $self->_down_indent() if ($indent);
  
          return   '{' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' )  . '}';
      }
  
  
      sub array_to_json {
          my ($self, $obj) = @_;
          my @res;
  
          encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                           if (++$depth > $max_depth);
  
          my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
  
          for my $v (@$obj){
              push @res, $self->object_to_json($v) || $self->value_to_json($v);
          }
  
          --$depth;
          $self->_down_indent() if ($indent);
  
          return '[' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' ) . ']';
      }
  
  
      sub value_to_json {
          my ($self, $value) = @_;
  
          return 'null' if(!defined $value);
  
          my $b_obj = B::svref_2object(\$value);  # for round trip problem
          my $flags = $b_obj->FLAGS;
  
          return $value # as is 
              if $flags & ( B::SVp_IOK | B::SVp_NOK ) and !( $flags & B::SVp_POK ); # SvTYPE is IV or NV?
  
          my $type = ref($value);
  
          if(!$type){
              return string_to_json($self, $value);
          }
          elsif( blessed($value) and  $value->isa('JSON::PP::Boolean') ){
              return $$value == 1 ? 'true' : 'false';
          }
          elsif ($type) {
              if ((overload::StrVal($value) =~ /=(\w+)/)[0]) {
                  return $self->value_to_json("$value");
              }
  
              if ($type eq 'SCALAR' and defined $$value) {
                  return   $$value eq '1' ? 'true'
                         : $$value eq '0' ? 'false'
                         : $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ? 'null'
                         : encode_error("cannot encode reference to scalar");
              }
  
               if ( $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ) {
                   return 'null';
               }
               else {
                   if ( $type eq 'SCALAR' or $type eq 'REF' ) {
                      encode_error("cannot encode reference to scalar");
                   }
                   else {
                      encode_error("encountered $value, but JSON can only represent references to arrays or hashes");
                   }
               }
  
          }
          else {
              return $self->{fallback}->($value)
                   if ($self->{fallback} and ref($self->{fallback}) eq 'CODE');
              return 'null';
          }
  
      }
  
  
      my %esc = (
          "\n" => '\n',
          "\r" => '\r',
          "\t" => '\t',
          "\f" => '\f',
          "\b" => '\b',
          "\"" => '\"',
          "\\" => '\\\\',
          "\'" => '\\\'',
      );
  
  
      sub string_to_json {
          my ($self, $arg) = @_;
  
          $arg =~ s/([\x22\x5c\n\r\t\f\b])/$esc{$1}/g;
          $arg =~ s/\//\\\//g if ($escape_slash);
          $arg =~ s/([\x00-\x08\x0b\x0e-\x1f])/'\\u00' . unpack('H2', $1)/eg;
  
          if ($ascii) {
              $arg = JSON_PP_encode_ascii($arg);
          }
  
          if ($latin1) {
              $arg = JSON_PP_encode_latin1($arg);
          }
  
          if ($utf8) {
              utf8::encode($arg);
          }
  
          return '"' . $arg . '"';
      }
  
  
      sub blessed_to_json {
          my $reftype = reftype($_[1]) || '';
          if ($reftype eq 'HASH') {
              return $_[0]->hash_to_json($_[1]);
          }
          elsif ($reftype eq 'ARRAY') {
              return $_[0]->array_to_json($_[1]);
          }
          else {
              return 'null';
          }
      }
  
  
      sub encode_error {
          my $error  = shift;
          Carp::croak "$error";
      }
  
  
      sub _sort {
          defined $keysort ? (sort $keysort (keys %{$_[0]})) : keys %{$_[0]};
      }
  
  
      sub _up_indent {
          my $self  = shift;
          my $space = ' ' x $indent_length;
  
          my ($pre,$post) = ('','');
  
          $post = "\n" . $space x $indent_count;
  
          $indent_count++;
  
          $pre = "\n" . $space x $indent_count;
  
          return ($pre,$post);
      }
  
  
      sub _down_indent { $indent_count--; }
  
  
      sub PP_encode_box {
          {
              depth        => $depth,
              indent_count => $indent_count,
          };
      }
  
  } # Convert
  
  
  sub _encode_ascii {
      join('',
          map {
              $_ <= 127 ?
                  chr($_) :
              $_ <= 65535 ?
                  sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
          } unpack('U*', $_[0])
      );
  }
  
  
  sub _encode_latin1 {
      join('',
          map {
              $_ <= 255 ?
                  chr($_) :
              $_ <= 65535 ?
                  sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
          } unpack('U*', $_[0])
      );
  }
  
  
  sub _encode_surrogates { # from perlunicode
      my $uni = $_[0] - 0x10000;
      return ($uni / 0x400 + 0xD800, $uni % 0x400 + 0xDC00);
  }
  
  
  sub _is_bignum {
      $_[0]->isa('Math::BigInt') or $_[0]->isa('Math::BigFloat');
  }
  
  
  
  #
  # JSON => Perl
  #
  
  my $max_intsize;
  
  BEGIN {
      my $checkint = 1111;
      for my $d (5..64) {
          $checkint .= 1;
          my $int   = eval qq| $checkint |;
          if ($int =~ /[eE]/) {
              $max_intsize = $d - 1;
              last;
          }
      }
  }
  
  { # PARSE 
  
      my %escapes = ( #  by Jeremy Muhlich <jmuhlich [at] bitflood.org>
          b    => "\x8",
          t    => "\x9",
          n    => "\xA",
          f    => "\xC",
          r    => "\xD",
          '\\' => '\\',
          '"'  => '"',
          '/'  => '/',
      );
  
      my $text; # json data
      my $at;   # offset
      my $ch;   # first character
      my $len;  # text length (changed according to UTF8 or NON UTF8)
      # INTERNAL
      my $depth;          # nest counter
      my $encoding;       # json text encoding
      my $is_valid_utf8;  # temp variable
      my $utf8_len;       # utf8 byte length
      # FLAGS
      my $utf8;           # must be utf8
      my $max_depth;      # max nest number of objects and arrays
      my $max_size;
      my $relaxed;
      my $cb_object;
      my $cb_sk_object;
  
      my $F_HOOK;
  
      my $allow_bigint;   # using Math::BigInt
      my $singlequote;    # loosely quoting
      my $loose;          # 
      my $allow_barekey;  # bareKey
  
      # $opt flag
      # 0x00000001 .... decode_prefix
      # 0x10000000 .... incr_parse
  
      sub PP_decode_json {
          my ($self, $opt); # $opt is an effective flag during this decode_json.
  
          ($self, $text, $opt) = @_;
  
          ($at, $ch, $depth) = (0, '', 0);
  
          if ( !defined $text or ref $text ) {
              decode_error("malformed JSON string, neither array, object, number, string or atom");
          }
  
          my $idx = $self->{PROPS};
  
          ($utf8, $relaxed, $loose, $allow_bigint, $allow_barekey, $singlequote)
              = @{$idx}[P_UTF8, P_RELAXED, P_LOOSE .. P_ALLOW_SINGLEQUOTE];
  
          if ( $utf8 ) {
              utf8::downgrade( $text, 1 ) or Carp::croak("Wide character in subroutine entry");
          }
          else {
              utf8::upgrade( $text );
              utf8::encode( $text );
          }
  
          $len = length $text;
  
          ($max_depth, $max_size, $cb_object, $cb_sk_object, $F_HOOK)
               = @{$self}{qw/max_depth  max_size cb_object cb_sk_object F_HOOK/};
  
          if ($max_size > 1) {
              use bytes;
              my $bytes = length $text;
              decode_error(
                  sprintf("attempted decode of JSON text of %s bytes size, but max_size is set to %s"
                      , $bytes, $max_size), 1
              ) if ($bytes > $max_size);
          }
  
          # Currently no effect
          # should use regexp
          my @octets = unpack('C4', $text);
          $encoding =   ( $octets[0] and  $octets[1]) ? 'UTF-8'
                      : (!$octets[0] and  $octets[1]) ? 'UTF-16BE'
                      : (!$octets[0] and !$octets[1]) ? 'UTF-32BE'
                      : ( $octets[2]                ) ? 'UTF-16LE'
                      : (!$octets[2]                ) ? 'UTF-32LE'
                      : 'unknown';
  
          white(); # remove head white space
  
          my $valid_start = defined $ch; # Is there a first character for JSON structure?
  
          my $result = value();
  
          return undef if ( !$result && ( $opt & 0x10000000 ) ); # for incr_parse
  
          decode_error("malformed JSON string, neither array, object, number, string or atom") unless $valid_start;
  
          if ( !$idx->[ P_ALLOW_NONREF ] and !ref $result ) {
                  decode_error(
                  'JSON text must be an object or array (but found number, string, true, false or null,'
                         . ' use allow_nonref to allow this)', 1);
          }
  
          Carp::croak('something wrong.') if $len < $at; # we won't arrive here.
  
          my $consumed = defined $ch ? $at - 1 : $at; # consumed JSON text length
  
          white(); # remove tail white space
  
          if ( $ch ) {
              return ( $result, $consumed ) if ($opt & 0x00000001); # all right if decode_prefix
              decode_error("garbage after JSON object");
          }
  
          ( $opt & 0x00000001 ) ? ( $result, $consumed ) : $result;
      }
  
  
      sub next_chr {
          return $ch = undef if($at >= $len);
          $ch = substr($text, $at++, 1);
      }
  
  
      sub value {
          white();
          return          if(!defined $ch);
          return object() if($ch eq '{');
          return array()  if($ch eq '[');
          return string() if($ch eq '"' or ($singlequote and $ch eq "'"));
          return number() if($ch =~ /[0-9]/ or $ch eq '-');
          return word();
      }
  
      sub string {
          my ($i, $s, $t, $u);
          my $utf16;
          my $is_utf8;
  
          ($is_valid_utf8, $utf8_len) = ('', 0);
  
          $s = ''; # basically UTF8 flag on
  
          if($ch eq '"' or ($singlequote and $ch eq "'")){
              my $boundChar = $ch;
  
              OUTER: while( defined(next_chr()) ){
  
                  if($ch eq $boundChar){
                      next_chr();
  
                      if ($utf16) {
                          decode_error("missing low surrogate character in surrogate pair");
                      }
  
                      utf8::decode($s) if($is_utf8);
  
                      return $s;
                  }
                  elsif($ch eq '\\'){
                      next_chr();
                      if(exists $escapes{$ch}){
                          $s .= $escapes{$ch};
                      }
                      elsif($ch eq 'u'){ # UNICODE handling
                          my $u = '';
  
                          for(1..4){
                              $ch = next_chr();
                              last OUTER if($ch !~ /[0-9a-fA-F]/);
                              $u .= $ch;
                          }
  
                          # U+D800 - U+DBFF
                          if ($u =~ /^[dD][89abAB][0-9a-fA-F]{2}/) { # UTF-16 high surrogate?
                              $utf16 = $u;
                          }
                          # U+DC00 - U+DFFF
                          elsif ($u =~ /^[dD][c-fC-F][0-9a-fA-F]{2}/) { # UTF-16 low surrogate?
                              unless (defined $utf16) {
                                  decode_error("missing high surrogate character in surrogate pair");
                              }
                              $is_utf8 = 1;
                              $s .= JSON_PP_decode_surrogates($utf16, $u) || next;
                              $utf16 = undef;
                          }
                          else {
                              if (defined $utf16) {
                                  decode_error("surrogate pair expected");
                              }
  
                              if ( ( my $hex = hex( $u ) ) > 127 ) {
                                  $is_utf8 = 1;
                                  $s .= JSON_PP_decode_unicode($u) || next;
                              }
                              else {
                                  $s .= chr $hex;
                              }
                          }
  
                      }
                      else{
                          unless ($loose) {
                              $at -= 2;
                              decode_error('illegal backslash escape sequence in string');
                          }
                          $s .= $ch;
                      }
                  }
                  else{
  
                      if ( ord $ch  > 127 ) {
                          unless( $ch = is_valid_utf8($ch) ) {
                              $at -= 1;
                              decode_error("malformed UTF-8 character in JSON string");
                          }
                          else {
                              $at += $utf8_len - 1;
                          }
  
                          $is_utf8 = 1;
                      }
  
                      if (!$loose) {
                          if ($ch =~ /[\x00-\x1f\x22\x5c]/)  { # '/' ok
                              $at--;
                              decode_error('invalid character encountered while parsing JSON string');
                          }
                      }
  
                      $s .= $ch;
                  }
              }
          }
  
          decode_error("unexpected end of string while parsing JSON string");
      }
  
  
      sub white {
          while( defined $ch  ){
              if($ch le ' '){
                  next_chr();
              }
              elsif($ch eq '/'){
                  next_chr();
                  if(defined $ch and $ch eq '/'){
                      1 while(defined(next_chr()) and $ch ne "\n" and $ch ne "\r");
                  }
                  elsif(defined $ch and $ch eq '*'){
                      next_chr();
                      while(1){
                          if(defined $ch){
                              if($ch eq '*'){
                                  if(defined(next_chr()) and $ch eq '/'){
                                      next_chr();
                                      last;
                                  }
                              }
                              else{
                                  next_chr();
                              }
                          }
                          else{
                              decode_error("Unterminated comment");
                          }
                      }
                      next;
                  }
                  else{
                      $at--;
                      decode_error("malformed JSON string, neither array, object, number, string or atom");
                  }
              }
              else{
                  if ($relaxed and $ch eq '#') { # correctly?
                      pos($text) = $at;
                      $text =~ /\G([^\n]*(?:\r\n|\r|\n|$))/g;
                      $at = pos($text);
                      next_chr;
                      next;
                  }
  
                  last;
              }
          }
      }
  
  
      sub array {
          my $a  = $_[0] || []; # you can use this code to use another array ref object.
  
          decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                      if (++$depth > $max_depth);
  
          next_chr();
          white();
  
          if(defined $ch and $ch eq ']'){
              --$depth;
              next_chr();
              return $a;
          }
          else {
              while(defined($ch)){
                  push @$a, value();
  
                  white();
  
                  if (!defined $ch) {
                      last;
                  }
  
                  if($ch eq ']'){
                      --$depth;
                      next_chr();
                      return $a;
                  }
  
                  if($ch ne ','){
                      last;
                  }
  
                  next_chr();
                  white();
  
                  if ($relaxed and $ch eq ']') {
                      --$depth;
                      next_chr();
                      return $a;
                  }
  
              }
          }
  
          decode_error(", or ] expected while parsing array");
      }
  
  
      sub object {
          my $o = $_[0] || {}; # you can use this code to use another hash ref object.
          my $k;
  
          decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                  if (++$depth > $max_depth);
          next_chr();
          white();
  
          if(defined $ch and $ch eq '}'){
              --$depth;
              next_chr();
              if ($F_HOOK) {
                  return _json_object_hook($o);
              }
              return $o;
          }
          else {
              while (defined $ch) {
                  $k = ($allow_barekey and $ch ne '"' and $ch ne "'") ? bareKey() : string();
                  white();
  
                  if(!defined $ch or $ch ne ':'){
                      $at--;
                      decode_error("':' expected");
                  }
  
                  next_chr();
                  $o->{$k} = value();
                  white();
  
                  last if (!defined $ch);
  
                  if($ch eq '}'){
                      --$depth;
                      next_chr();
                      if ($F_HOOK) {
                          return _json_object_hook($o);
                      }
                      return $o;
                  }
  
                  if($ch ne ','){
                      last;
                  }
  
                  next_chr();
                  white();
  
                  if ($relaxed and $ch eq '}') {
                      --$depth;
                      next_chr();
                      if ($F_HOOK) {
                          return _json_object_hook($o);
                      }
                      return $o;
                  }
  
              }
  
          }
  
          $at--;
          decode_error(", or } expected while parsing object/hash");
      }
  
  
      sub bareKey { # doesn't strictly follow Standard ECMA-262 3rd Edition
          my $key;
          while($ch =~ /[^\x00-\x23\x25-\x2F\x3A-\x40\x5B-\x5E\x60\x7B-\x7F]/){
              $key .= $ch;
              next_chr();
          }
          return $key;
      }
  
  
      sub word {
          my $word =  substr($text,$at-1,4);
  
          if($word eq 'true'){
              $at += 3;
              next_chr;
              return $JSON::PP::true;
          }
          elsif($word eq 'null'){
              $at += 3;
              next_chr;
              return undef;
          }
          elsif($word eq 'fals'){
              $at += 3;
              if(substr($text,$at,1) eq 'e'){
                  $at++;
                  next_chr;
                  return $JSON::PP::false;
              }
          }
  
          $at--; # for decode_error report
  
          decode_error("'null' expected")  if ($word =~ /^n/);
          decode_error("'true' expected")  if ($word =~ /^t/);
          decode_error("'false' expected") if ($word =~ /^f/);
          decode_error("malformed JSON string, neither array, object, number, string or atom");
      }
  
  
      sub number {
          my $n    = '';
          my $v;
          my $is_dec;
  
          # According to RFC4627, hex or oct digits are invalid.
          if($ch eq '0'){
              my $peek = substr($text,$at,1);
              my $hex  = $peek =~ /[xX]/; # 0 or 1
  
              if($hex){
                  decode_error("malformed number (leading zero must not be followed by another digit)");
                  ($n) = ( substr($text, $at+1) =~ /^([0-9a-fA-F]+)/);
              }
              else{ # oct
                  ($n) = ( substr($text, $at) =~ /^([0-7]+)/);
                  if (defined $n and length $n > 1) {
                      decode_error("malformed number (leading zero must not be followed by another digit)");
                  }
              }
  
              if(defined $n and length($n)){
                  if (!$hex and length($n) == 1) {
                     decode_error("malformed number (leading zero must not be followed by another digit)");
                  }
                  $at += length($n) + $hex;
                  next_chr;
                  return $hex ? hex($n) : oct($n);
              }
          }
  
          if($ch eq '-'){
              $n = '-';
              next_chr;
              if (!defined $ch or $ch !~ /\d/) {
                  decode_error("malformed number (no digits after initial minus)");
              }
          }
  
          while(defined $ch and $ch =~ /\d/){
              $n .= $ch;
              next_chr;
          }
  
          if(defined $ch and $ch eq '.'){
              $n .= '.';
              $is_dec = 1;
  
              next_chr;
              if (!defined $ch or $ch !~ /\d/) {
                  decode_error("malformed number (no digits after decimal point)");
              }
              else {
                  $n .= $ch;
              }
  
              while(defined(next_chr) and $ch =~ /\d/){
                  $n .= $ch;
              }
          }
  
          if(defined $ch and ($ch eq 'e' or $ch eq 'E')){
              $n .= $ch;
              next_chr;
  
              if(defined($ch) and ($ch eq '+' or $ch eq '-')){
                  $n .= $ch;
                  next_chr;
                  if (!defined $ch or $ch =~ /\D/) {
                      decode_error("malformed number (no digits after exp sign)");
                  }
                  $n .= $ch;
              }
              elsif(defined($ch) and $ch =~ /\d/){
                  $n .= $ch;
              }
              else {
                  decode_error("malformed number (no digits after exp sign)");
              }
  
              while(defined(next_chr) and $ch =~ /\d/){
                  $n .= $ch;
              }
  
          }
  
          $v .= $n;
  
          if ($v !~ /[.eE]/ and length $v > $max_intsize) {
              if ($allow_bigint) { # from Adam Sussman
                  require Math::BigInt;
                  return Math::BigInt->new($v);
              }
              else {
                  return "$v";
              }
          }
          elsif ($allow_bigint) {
              require Math::BigFloat;
              return Math::BigFloat->new($v);
          }
  
          return $is_dec ? $v/1.0 : 0+$v;
      }
  
  
      sub is_valid_utf8 {
  
          $utf8_len = $_[0] =~ /[\x00-\x7F]/  ? 1
                    : $_[0] =~ /[\xC2-\xDF]/  ? 2
                    : $_[0] =~ /[\xE0-\xEF]/  ? 3
                    : $_[0] =~ /[\xF0-\xF4]/  ? 4
                    : 0
                    ;
  
          return unless $utf8_len;
  
          my $is_valid_utf8 = substr($text, $at - 1, $utf8_len);
  
          return ( $is_valid_utf8 =~ /^(?:
               [\x00-\x7F]
              |[\xC2-\xDF][\x80-\xBF]
              |[\xE0][\xA0-\xBF][\x80-\xBF]
              |[\xE1-\xEC][\x80-\xBF][\x80-\xBF]
              |[\xED][\x80-\x9F][\x80-\xBF]
              |[\xEE-\xEF][\x80-\xBF][\x80-\xBF]
              |[\xF0][\x90-\xBF][\x80-\xBF][\x80-\xBF]
              |[\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF]
              |[\xF4][\x80-\x8F][\x80-\xBF][\x80-\xBF]
          )$/x )  ? $is_valid_utf8 : '';
      }
  
  
      sub decode_error {
          my $error  = shift;
          my $no_rep = shift;
          my $str    = defined $text ? substr($text, $at) : '';
          my $mess   = '';
          my $type   = $] >= 5.008           ? 'U*'
                     : $] <  5.006           ? 'C*'
                     : utf8::is_utf8( $str ) ? 'U*' # 5.6
                     : 'C*'
                     ;
  
          for my $c ( unpack( $type, $str ) ) { # emulate pv_uni_display() ?
              $mess .=  $c == 0x07 ? '\a'
                      : $c == 0x09 ? '\t'
                      : $c == 0x0a ? '\n'
                      : $c == 0x0d ? '\r'
                      : $c == 0x0c ? '\f'
                      : $c <  0x20 ? sprintf('\x{%x}', $c)
                      : $c == 0x5c ? '\\\\'
                      : $c <  0x80 ? chr($c)
                      : sprintf('\x{%x}', $c)
                      ;
              if ( length $mess >= 20 ) {
                  $mess .= '...';
                  last;
              }
          }
  
          unless ( length $mess ) {
              $mess = '(end of string)';
          }
  
          Carp::croak (
              $no_rep ? "$error" : "$error, at character offset $at (before \"$mess\")"
          );
  
      }
  
  
      sub _json_object_hook {
          my $o    = $_[0];
          my @ks = keys %{$o};
  
          if ( $cb_sk_object and @ks == 1 and exists $cb_sk_object->{ $ks[0] } and ref $cb_sk_object->{ $ks[0] } ) {
              my @val = $cb_sk_object->{ $ks[0] }->( $o->{$ks[0]} );
              if (@val == 1) {
                  return $val[0];
              }
          }
  
          my @val = $cb_object->($o) if ($cb_object);
          if (@val == 0 or @val > 1) {
              return $o;
          }
          else {
              return $val[0];
          }
      }
  
  
      sub PP_decode_box {
          {
              text    => $text,
              at      => $at,
              ch      => $ch,
              len     => $len,
              depth   => $depth,
              encoding      => $encoding,
              is_valid_utf8 => $is_valid_utf8,
          };
      }
  
  } # PARSE
  
  
  sub _decode_surrogates { # from perlunicode
      my $uni = 0x10000 + (hex($_[0]) - 0xD800) * 0x400 + (hex($_[1]) - 0xDC00);
      my $un  = pack('U*', $uni);
      utf8::encode( $un );
      return $un;
  }
  
  
  sub _decode_unicode {
      my $un = pack('U', hex shift);
      utf8::encode( $un );
      return $un;
  }
  
  #
  # Setup for various Perl versions (the code from JSON::PP58)
  #
  
  BEGIN {
  
      unless ( defined &utf8::is_utf8 ) {
         require Encode;
         *utf8::is_utf8 = *Encode::is_utf8;
      }
  
      if ( $] >= 5.008 ) {
          *JSON::PP::JSON_PP_encode_ascii      = \&_encode_ascii;
          *JSON::PP::JSON_PP_encode_latin1     = \&_encode_latin1;
          *JSON::PP::JSON_PP_decode_surrogates = \&_decode_surrogates;
          *JSON::PP::JSON_PP_decode_unicode    = \&_decode_unicode;
      }
  
      if ($] >= 5.008 and $] < 5.008003) { # join() in 5.8.0 - 5.8.2 is broken.
          package JSON::PP;
          require subs;
          subs->import('join');
          eval q|
              sub join {
                  return '' if (@_ < 2);
                  my $j   = shift;
                  my $str = shift;
                  for (@_) { $str .= $j . $_; }
                  return $str;
              }
          |;
      }
  
  
      sub JSON::PP::incr_parse {
          local $Carp::CarpLevel = 1;
          ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_parse( @_ );
      }
  
  
      sub JSON::PP::incr_skip {
          ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_skip;
      }
  
  
      sub JSON::PP::incr_reset {
          ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_reset;
      }
  
      eval q{
          sub JSON::PP::incr_text : lvalue {
              $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new;
  
              if ( $_[0]->{_incr_parser}->{incr_parsing} ) {
                  Carp::croak("incr_text cannot be called when the incremental parser already started parsing");
              }
              $_[0]->{_incr_parser}->{incr_text};
          }
      } if ( $] >= 5.006 );
  
  } # Setup for various Perl versions (the code from JSON::PP58)
  
  
  ###############################
  # Utilities
  #
  
  BEGIN {
      eval 'require Scalar::Util';
      unless($@){
          *JSON::PP::blessed = \&Scalar::Util::blessed;
          *JSON::PP::reftype = \&Scalar::Util::reftype;
          *JSON::PP::refaddr = \&Scalar::Util::refaddr;
      }
      else{ # This code is from Sclar::Util.
          # warn $@;
          eval 'sub UNIVERSAL::a_sub_not_likely_to_be_here { ref($_[0]) }';
          *JSON::PP::blessed = sub {
              local($@, $SIG{__DIE__}, $SIG{__WARN__});
              ref($_[0]) ? eval { $_[0]->a_sub_not_likely_to_be_here } : undef;
          };
          my %tmap = qw(
              B::NULL   SCALAR
              B::HV     HASH
              B::AV     ARRAY
              B::CV     CODE
              B::IO     IO
              B::GV     GLOB
              B::REGEXP REGEXP
          );
          *JSON::PP::reftype = sub {
              my $r = shift;
  
              return undef unless length(ref($r));
  
              my $t = ref(B::svref_2object($r));
  
              return
                  exists $tmap{$t} ? $tmap{$t}
                : length(ref($$r)) ? 'REF'
                :                    'SCALAR';
          };
          *JSON::PP::refaddr = sub {
            return undef unless length(ref($_[0]));
  
            my $addr;
            if(defined(my $pkg = blessed($_[0]))) {
              $addr .= bless $_[0], 'Scalar::Util::Fake';
              bless $_[0], $pkg;
            }
            else {
              $addr .= $_[0]
            }
  
            $addr =~ /0x(\w+)/;
            local $^W;
            #no warnings 'portable';
            hex($1);
          }
      }
  }
  
  
  # shamelessly copied and modified from JSON::XS code.
  
  $JSON::PP::true  = do { bless \(my $dummy = 1), "JSON::PP::Boolean" };
  $JSON::PP::false = do { bless \(my $dummy = 0), "JSON::PP::Boolean" };
  
  sub is_bool { defined $_[0] and UNIVERSAL::isa($_[0], "JSON::PP::Boolean"); }
  
  sub true  { $JSON::PP::true  }
  sub false { $JSON::PP::false }
  sub null  { undef; }
  
  ###############################
  
  package JSON::PP::Boolean;
  
  use overload (
     "0+"     => sub { ${$_[0]} },
     "++"     => sub { $_[0] = ${$_[0]} + 1 },
     "--"     => sub { $_[0] = ${$_[0]} - 1 },
     fallback => 1,
  );
  
  
  ###############################
  
  package JSON::PP::IncrParser;
  
  use strict;
  
  use constant INCR_M_WS   => 0; # initial whitespace skipping
  use constant INCR_M_STR  => 1; # inside string
  use constant INCR_M_BS   => 2; # inside backslash
  use constant INCR_M_JSON => 3; # outside anything, count nesting
  use constant INCR_M_C0   => 4;
  use constant INCR_M_C1   => 5;
  
  $JSON::PP::IncrParser::VERSION = '1.01';
  
  my $unpack_format = $] < 5.006 ? 'C*' : 'U*';
  
  sub new {
      my ( $class ) = @_;
  
      bless {
          incr_nest    => 0,
          incr_text    => undef,
          incr_parsing => 0,
          incr_p       => 0,
      }, $class;
  }
  
  
  sub incr_parse {
      my ( $self, $coder, $text ) = @_;
  
      $self->{incr_text} = '' unless ( defined $self->{incr_text} );
  
      if ( defined $text ) {
          if ( utf8::is_utf8( $text ) and !utf8::is_utf8( $self->{incr_text} ) ) {
              utf8::upgrade( $self->{incr_text} ) ;
              utf8::decode( $self->{incr_text} ) ;
          }
          $self->{incr_text} .= $text;
      }
  
  
      my $max_size = $coder->get_max_size;
  
      if ( defined wantarray ) {
  
          $self->{incr_mode} = INCR_M_WS unless defined $self->{incr_mode};
  
          if ( wantarray ) {
              my @ret;
  
              $self->{incr_parsing} = 1;
  
              do {
                  push @ret, $self->_incr_parse( $coder, $self->{incr_text} );
  
                  unless ( !$self->{incr_nest} and $self->{incr_mode} == INCR_M_JSON ) {
                      $self->{incr_mode} = INCR_M_WS if $self->{incr_mode} != INCR_M_STR;
                  }
  
              } until ( length $self->{incr_text} >= $self->{incr_p} );
  
              $self->{incr_parsing} = 0;
  
              return @ret;
          }
          else { # in scalar context
              $self->{incr_parsing} = 1;
              my $obj = $self->_incr_parse( $coder, $self->{incr_text} );
              $self->{incr_parsing} = 0 if defined $obj; # pointed by Martin J. Evans
              return $obj ? $obj : undef; # $obj is an empty string, parsing was completed.
          }
  
      }
  
  }
  
  
  sub _incr_parse {
      my ( $self, $coder, $text, $skip ) = @_;
      my $p = $self->{incr_p};
      my $restore = $p;
  
      my @obj;
      my $len = length $text;
  
      if ( $self->{incr_mode} == INCR_M_WS ) {
          while ( $len > $p ) {
              my $s = substr( $text, $p, 1 );
              $p++ and next if ( 0x20 >= unpack($unpack_format, $s) );
              $self->{incr_mode} = INCR_M_JSON;
              last;
         }
      }
  
      while ( $len > $p ) {
          my $s = substr( $text, $p++, 1 );
  
          if ( $s eq '"' ) {
              if (substr( $text, $p - 2, 1 ) eq '\\' ) {
                  next;
              }
  
              if ( $self->{incr_mode} != INCR_M_STR  ) {
                  $self->{incr_mode} = INCR_M_STR;
              }
              else {
                  $self->{incr_mode} = INCR_M_JSON;
                  unless ( $self->{incr_nest} ) {
                      last;
                  }
              }
          }
  
          if ( $self->{incr_mode} == INCR_M_JSON ) {
  
              if ( $s eq '[' or $s eq '{' ) {
                  if ( ++$self->{incr_nest} > $coder->get_max_depth ) {
                      Carp::croak('json text or perl structure exceeds maximum nesting level (max_depth set too low?)');
                  }
              }
              elsif ( $s eq ']' or $s eq '}' ) {
                  last if ( --$self->{incr_nest} <= 0 );
              }
              elsif ( $s eq '#' ) {
                  while ( $len > $p ) {
                      last if substr( $text, $p++, 1 ) eq "\n";
                  }
              }
  
          }
  
      }
  
      $self->{incr_p} = $p;
  
      return if ( $self->{incr_mode} == INCR_M_STR and not $self->{incr_nest} );
      return if ( $self->{incr_mode} == INCR_M_JSON and $self->{incr_nest} > 0 );
  
      return '' unless ( length substr( $self->{incr_text}, 0, $p ) );
  
      local $Carp::CarpLevel = 2;
  
      $self->{incr_p} = $restore;
      $self->{incr_c} = $p;
  
      my ( $obj, $tail ) = $coder->PP_decode_json( substr( $self->{incr_text}, 0, $p ), 0x10000001 );
  
      $self->{incr_text} = substr( $self->{incr_text}, $p );
      $self->{incr_p} = 0;
  
      return $obj || '';
  }
  
  
  sub incr_text {
      if ( $_[0]->{incr_parsing} ) {
          Carp::croak("incr_text cannot be called when the incremental parser already started parsing");
      }
      $_[0]->{incr_text};
  }
  
  
  sub incr_skip {
      my $self  = shift;
      $self->{incr_text} = substr( $self->{incr_text}, $self->{incr_c} );
      $self->{incr_p} = 0;
  }
  
  
  sub incr_reset {
      my $self = shift;
      $self->{incr_text}    = undef;
      $self->{incr_p}       = 0;
      $self->{incr_mode}    = 0;
      $self->{incr_nest}    = 0;
      $self->{incr_parsing} = 0;
  }
  
  ###############################
  
  
  1;
  __END__
  =pod
  
  =head1 NAME
  
  JSON::PP - JSON::XS compatible pure-Perl module.
  
  =head1 SYNOPSIS
  
   use JSON::PP;
  
   # exported functions, they croak on error
   # and expect/generate UTF-8
  
   $utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;
   $perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;
  
   # OO-interface
  
   $coder = JSON::PP->new->ascii->pretty->allow_nonref;
   
   $json_text   = $json->encode( $perl_scalar );
   $perl_scalar = $json->decode( $json_text );
   
   $pretty_printed = $json->pretty->encode( $perl_scalar ); # pretty-printing
   
   # Note that JSON version 2.0 and above will automatically use
   # JSON::XS or JSON::PP, so you should be able to just:
   
   use JSON;
  
  
  =head1 VERSION
  
      2.27400
  
  L<JSON::XS> 2.27 (~2.30) compatible.
  
  =head1 NOTE
  
  JSON::PP had been included in JSON distribution (CPAN module).
  It was a perl core module in Perl 5.14.
  
  =head1 DESCRIPTION
  
  This module is L<JSON::XS> compatible pure Perl module.
  (Perl 5.8 or later is recommended)
  
  JSON::XS is the fastest and most proper JSON module on CPAN.
  It is written by Marc Lehmann in C, so must be compiled and
  installed in the used environment.
  
  JSON::PP is a pure-Perl module and has compatibility to JSON::XS.
  
  
  =head2 FEATURES
  
  =over
  
  =item * correct unicode handling
  
  This module knows how to handle Unicode (depending on Perl version).
  
  See to L<JSON::XS/A FEW NOTES ON UNICODE AND PERL> and L<UNICODE HANDLING ON PERLS>.
  
  
  =item * round-trip integrity
  
  When you serialise a perl data structure using only data types supported
  by JSON and Perl, the deserialised data structure is identical on the Perl
  level. (e.g. the string "2.0" doesn't suddenly become "2" just because
  it looks like a number). There I<are> minor exceptions to this, read the
  MAPPING section below to learn about those.
  
  
  =item * strict checking of JSON correctness
  
  There is no guessing, no generating of illegal JSON texts by default,
  and only JSON is accepted as input by default (the latter is a security feature).
  But when some options are set, loose checking features are available.
  
  =back
  
  =head1 FUNCTIONAL INTERFACE
  
  Some documents are copied and modified from L<JSON::XS/FUNCTIONAL INTERFACE>.
  
  =head2 encode_json
  
      $json_text = encode_json $perl_scalar
  
  Converts the given Perl data structure to a UTF-8 encoded, binary string.
  
  This function call is functionally identical to:
  
      $json_text = JSON::PP->new->utf8->encode($perl_scalar)
  
  =head2 decode_json
  
      $perl_scalar = decode_json $json_text
  
  The opposite of C<encode_json>: expects an UTF-8 (binary) string and tries
  to parse that as an UTF-8 encoded JSON text, returning the resulting
  reference.
  
  This function call is functionally identical to:
  
      $perl_scalar = JSON::PP->new->utf8->decode($json_text)
  
  =head2 JSON::PP::is_bool
  
      $is_boolean = JSON::PP::is_bool($scalar)
  
  Returns true if the passed scalar represents either JSON::PP::true or
  JSON::PP::false, two constants that act like C<1> and C<0> respectively
  and are also used to represent JSON C<true> and C<false> in Perl strings.
  
  =head2 JSON::PP::true
  
  Returns JSON true value which is blessed object.
  It C<isa> JSON::PP::Boolean object.
  
  =head2 JSON::PP::false
  
  Returns JSON false value which is blessed object.
  It C<isa> JSON::PP::Boolean object.
  
  =head2 JSON::PP::null
  
  Returns C<undef>.
  
  See L<MAPPING>, below, for more information on how JSON values are mapped to
  Perl.
  
  
  =head1 HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER
  
  This section supposes that your perl version is 5.8 or later.
  
  If you know a JSON text from an outer world - a network, a file content, and so on,
  is encoded in UTF-8, you should use C<decode_json> or C<JSON> module object
  with C<utf8> enabled. And the decoded result will contain UNICODE characters.
  
    # from network
    my $json        = JSON::PP->new->utf8;
    my $json_text   = CGI->new->param( 'json_data' );
    my $perl_scalar = $json->decode( $json_text );
    
    # from file content
    local $/;
    open( my $fh, '<', 'json.data' );
    $json_text   = <$fh>;
    $perl_scalar = decode_json( $json_text );
  
  If an outer data is not encoded in UTF-8, firstly you should C<decode> it.
  
    use Encode;
    local $/;
    open( my $fh, '<', 'json.data' );
    my $encoding = 'cp932';
    my $unicode_json_text = decode( $encoding, <$fh> ); # UNICODE
    
    # or you can write the below code.
    #
    # open( my $fh, "<:encoding($encoding)", 'json.data' );
    # $unicode_json_text = <$fh>;
  
  In this case, C<$unicode_json_text> is of course UNICODE string.
  So you B<cannot> use C<decode_json> nor C<JSON> module object with C<utf8> enabled.
  Instead of them, you use C<JSON> module object with C<utf8> disable.
  
    $perl_scalar = $json->utf8(0)->decode( $unicode_json_text );
  
  Or C<encode 'utf8'> and C<decode_json>:
  
    $perl_scalar = decode_json( encode( 'utf8', $unicode_json_text ) );
    # this way is not efficient.
  
  And now, you want to convert your C<$perl_scalar> into JSON data and
  send it to an outer world - a network or a file content, and so on.
  
  Your data usually contains UNICODE strings and you want the converted data to be encoded
  in UTF-8, you should use C<encode_json> or C<JSON> module object with C<utf8> enabled.
  
    print encode_json( $perl_scalar ); # to a network? file? or display?
    # or
    print $json->utf8->encode( $perl_scalar );
  
  If C<$perl_scalar> does not contain UNICODE but C<$encoding>-encoded strings
  for some reason, then its characters are regarded as B<latin1> for perl
  (because it does not concern with your $encoding).
  You B<cannot> use C<encode_json> nor C<JSON> module object with C<utf8> enabled.
  Instead of them, you use C<JSON> module object with C<utf8> disable.
  Note that the resulted text is a UNICODE string but no problem to print it.
  
    # $perl_scalar contains $encoding encoded string values
    $unicode_json_text = $json->utf8(0)->encode( $perl_scalar );
    # $unicode_json_text consists of characters less than 0x100
    print $unicode_json_text;
  
  Or C<decode $encoding> all string values and C<encode_json>:
  
    $perl_scalar->{ foo } = decode( $encoding, $perl_scalar->{ foo } );
    # ... do it to each string values, then encode_json
    $json_text = encode_json( $perl_scalar );
  
  This method is a proper way but probably not efficient.
  
  See to L<Encode>, L<perluniintro>.
  
  
  =head1 METHODS
  
  Basically, check to L<JSON> or L<JSON::XS>.
  
  =head2 new
  
      $json = JSON::PP->new
  
  Returns a new JSON::PP object that can be used to de/encode JSON
  strings.
  
  All boolean flags described below are by default I<disabled>.
  
  The mutators for flags all return the JSON object again and thus calls can
  be chained:
  
     my $json = JSON::PP->new->utf8->space_after->encode({a => [1,2]})
     => {"a": [1, 2]}
  
  =head2 ascii
  
      $json = $json->ascii([$enable])
      
      $enabled = $json->get_ascii
  
  If $enable is true (or missing), then the encode method will not generate characters outside
  the code range 0..127. Any Unicode characters outside that range will be escaped using either
  a single \uXXXX or a double \uHHHH\uLLLLL escape sequence, as per RFC4627.
  (See to L<JSON::XS/OBJECT-ORIENTED INTERFACE>).
  
  In Perl 5.005, there is no character having high value (more than 255).
  See to L<UNICODE HANDLING ON PERLS>.
  
  If $enable is false, then the encode method will not escape Unicode characters unless
  required by the JSON syntax or other flags. This results in a faster and more compact format.
  
    JSON::PP->new->ascii(1)->encode([chr 0x10401])
    => ["\ud801\udc01"]
  
  =head2 latin1
  
      $json = $json->latin1([$enable])
      
      $enabled = $json->get_latin1
  
  If $enable is true (or missing), then the encode method will encode the resulting JSON
  text as latin1 (or iso-8859-1), escaping any characters outside the code range 0..255.
  
  If $enable is false, then the encode method will not escape Unicode characters
  unless required by the JSON syntax or other flags.
  
    JSON::XS->new->latin1->encode (["\x{89}\x{abc}"]
    => ["\x{89}\\u0abc"]    # (perl syntax, U+abc escaped, U+89 not)
  
  See to L<UNICODE HANDLING ON PERLS>.
  
  =head2 utf8
  
      $json = $json->utf8([$enable])
      
      $enabled = $json->get_utf8
  
  If $enable is true (or missing), then the encode method will encode the JSON result
  into UTF-8, as required by many protocols, while the decode method expects to be handled
  an UTF-8-encoded string. Please note that UTF-8-encoded strings do not contain any
  characters outside the range 0..255, they are thus useful for bytewise/binary I/O.
  
  (In Perl 5.005, any character outside the range 0..255 does not exist.
  See to L<UNICODE HANDLING ON PERLS>.)
  
  In future versions, enabling this option might enable autodetection of the UTF-16 and UTF-32
  encoding families, as described in RFC4627.
  
  If $enable is false, then the encode method will return the JSON string as a (non-encoded)
  Unicode string, while decode expects thus a Unicode string. Any decoding or encoding
  (e.g. to UTF-8 or UTF-16) needs to be done yourself, e.g. using the Encode module.
  
  Example, output UTF-16BE-encoded JSON:
  
    use Encode;
    $jsontext = encode "UTF-16BE", JSON::PP->new->encode ($object);
  
  Example, decode UTF-32LE-encoded JSON:
  
    use Encode;
    $object = JSON::PP->new->decode (decode "UTF-32LE", $jsontext);
  
  
  =head2 pretty
  
      $json = $json->pretty([$enable])
  
  This enables (or disables) all of the C<indent>, C<space_before> and
  C<space_after> flags in one call to generate the most readable
  (or most compact) form possible.
  
  Equivalent to:
  
     $json->indent->space_before->space_after
  
  =head2 indent
  
      $json = $json->indent([$enable])
      
      $enabled = $json->get_indent
  
  The default indent space length is three.
  You can use C<indent_length> to change the length.
  
  =head2 space_before
  
      $json = $json->space_before([$enable])
      
      $enabled = $json->get_space_before
  
  If C<$enable> is true (or missing), then the C<encode> method will add an extra
  optional space before the C<:> separating keys from values in JSON objects.
  
  If C<$enable> is false, then the C<encode> method will not add any extra
  space at those places.
  
  This setting has no effect when decoding JSON texts.
  
  Example, space_before enabled, space_after and indent disabled:
  
     {"key" :"value"}
  
  =head2 space_after
  
      $json = $json->space_after([$enable])
      
      $enabled = $json->get_space_after
  
  If C<$enable> is true (or missing), then the C<encode> method will add an extra
  optional space after the C<:> separating keys from values in JSON objects
  and extra whitespace after the C<,> separating key-value pairs and array
  members.
  
  If C<$enable> is false, then the C<encode> method will not add any extra
  space at those places.
  
  This setting has no effect when decoding JSON texts.
  
  Example, space_before and indent disabled, space_after enabled:
  
     {"key": "value"}
  
  =head2 relaxed
  
      $json = $json->relaxed([$enable])
      
      $enabled = $json->get_relaxed
  
  If C<$enable> is true (or missing), then C<decode> will accept some
  extensions to normal JSON syntax (see below). C<encode> will not be
  affected in anyway. I<Be aware that this option makes you accept invalid
  JSON texts as if they were valid!>. I suggest only to use this option to
  parse application-specific files written by humans (configuration files,
  resource files etc.)
  
  If C<$enable> is false (the default), then C<decode> will only accept
  valid JSON texts.
  
  Currently accepted extensions are:
  
  =over 4
  
  =item * list items can have an end-comma
  
  JSON I<separates> array elements and key-value pairs with commas. This
  can be annoying if you write JSON texts manually and want to be able to
  quickly append elements, so this extension accepts comma at the end of
  such items not just between them:
  
     [
        1,
        2, <- this comma not normally allowed
     ]
     {
        "k1": "v1",
        "k2": "v2", <- this comma not normally allowed
     }
  
  =item * shell-style '#'-comments
  
  Whenever JSON allows whitespace, shell-style comments are additionally
  allowed. They are terminated by the first carriage-return or line-feed
  character, after which more white-space and comments are allowed.
  
    [
       1, # this comment not allowed in JSON
          # neither this one...
    ]
  
  =back
  
  =head2 canonical
  
      $json = $json->canonical([$enable])
      
      $enabled = $json->get_canonical
  
  If C<$enable> is true (or missing), then the C<encode> method will output JSON objects
  by sorting their keys. This is adding a comparatively high overhead.
  
  If C<$enable> is false, then the C<encode> method will output key-value
  pairs in the order Perl stores them (which will likely change between runs
  of the same script).
  
  This option is useful if you want the same data structure to be encoded as
  the same JSON text (given the same overall settings). If it is disabled,
  the same hash might be encoded differently even if contains the same data,
  as key-value pairs have no inherent ordering in Perl.
  
  This setting has no effect when decoding JSON texts.
  
  If you want your own sorting routine, you can give a code reference
  or a subroutine name to C<sort_by>. See to C<JSON::PP OWN METHODS>.
  
  =head2 allow_nonref
  
      $json = $json->allow_nonref([$enable])
      
      $enabled = $json->get_allow_nonref
  
  If C<$enable> is true (or missing), then the C<encode> method can convert a
  non-reference into its corresponding string, number or null JSON value,
  which is an extension to RFC4627. Likewise, C<decode> will accept those JSON
  values instead of croaking.
  
  If C<$enable> is false, then the C<encode> method will croak if it isn't
  passed an arrayref or hashref, as JSON texts must either be an object
  or array. Likewise, C<decode> will croak if given something that is not a
  JSON object or array.
  
     JSON::PP->new->allow_nonref->encode ("Hello, World!")
     => "Hello, World!"
  
  =head2 allow_unknown
  
      $json = $json->allow_unknown ([$enable])
      
      $enabled = $json->get_allow_unknown
  
  If $enable is true (or missing), then "encode" will *not* throw an
  exception when it encounters values it cannot represent in JSON (for
  example, filehandles) but instead will encode a JSON "null" value.
  Note that blessed objects are not included here and are handled
  separately by c<allow_nonref>.
  
  If $enable is false (the default), then "encode" will throw an
  exception when it encounters anything it cannot encode as JSON.
  
  This option does not affect "decode" in any way, and it is
  recommended to leave it off unless you know your communications
  partner.
  
  =head2 allow_blessed
  
      $json = $json->allow_blessed([$enable])
      
      $enabled = $json->get_allow_blessed
  
  If C<$enable> is true (or missing), then the C<encode> method will not
  barf when it encounters a blessed reference. Instead, the value of the
  B<convert_blessed> option will decide whether C<null> (C<convert_blessed>
  disabled or no C<TO_JSON> method found) or a representation of the
  object (C<convert_blessed> enabled and C<TO_JSON> method found) is being
  encoded. Has no effect on C<decode>.
  
  If C<$enable> is false (the default), then C<encode> will throw an
  exception when it encounters a blessed object.
  
  =head2 convert_blessed
  
      $json = $json->convert_blessed([$enable])
      
      $enabled = $json->get_convert_blessed
  
  If C<$enable> is true (or missing), then C<encode>, upon encountering a
  blessed object, will check for the availability of the C<TO_JSON> method
  on the object's class. If found, it will be called in scalar context
  and the resulting scalar will be encoded instead of the object. If no
  C<TO_JSON> method is found, the value of C<allow_blessed> will decide what
  to do.
  
  The C<TO_JSON> method may safely call die if it wants. If C<TO_JSON>
  returns other blessed objects, those will be handled in the same
  way. C<TO_JSON> must take care of not causing an endless recursion cycle
  (== crash) in this case. The name of C<TO_JSON> was chosen because other
  methods called by the Perl core (== not by the user of the object) are
  usually in upper case letters and to avoid collisions with the C<to_json>
  function or method.
  
  This setting does not yet influence C<decode> in any way.
  
  If C<$enable> is false, then the C<allow_blessed> setting will decide what
  to do when a blessed object is found.
  
  =head2 filter_json_object
  
      $json = $json->filter_json_object([$coderef])
  
  When C<$coderef> is specified, it will be called from C<decode> each
  time it decodes a JSON object. The only argument passed to the coderef
  is a reference to the newly-created hash. If the code references returns
  a single scalar (which need not be a reference), this value
  (i.e. a copy of that scalar to avoid aliasing) is inserted into the
  deserialised data structure. If it returns an empty list
  (NOTE: I<not> C<undef>, which is a valid scalar), the original deserialised
  hash will be inserted. This setting can slow down decoding considerably.
  
  When C<$coderef> is omitted or undefined, any existing callback will
  be removed and C<decode> will not change the deserialised hash in any
  way.
  
  Example, convert all JSON objects into the integer 5:
  
     my $js = JSON::PP->new->filter_json_object (sub { 5 });
     # returns [5]
     $js->decode ('[{}]'); # the given subroutine takes a hash reference.
     # throw an exception because allow_nonref is not enabled
     # so a lone 5 is not allowed.
     $js->decode ('{"a":1, "b":2}');
  
  =head2 filter_json_single_key_object
  
      $json = $json->filter_json_single_key_object($key [=> $coderef])
  
  Works remotely similar to C<filter_json_object>, but is only called for
  JSON objects having a single key named C<$key>.
  
  This C<$coderef> is called before the one specified via
  C<filter_json_object>, if any. It gets passed the single value in the JSON
  object. If it returns a single value, it will be inserted into the data
  structure. If it returns nothing (not even C<undef> but the empty list),
  the callback from C<filter_json_object> will be called next, as if no
  single-key callback were specified.
  
  If C<$coderef> is omitted or undefined, the corresponding callback will be
  disabled. There can only ever be one callback for a given key.
  
  As this callback gets called less often then the C<filter_json_object>
  one, decoding speed will not usually suffer as much. Therefore, single-key
  objects make excellent targets to serialise Perl objects into, especially
  as single-key JSON objects are as close to the type-tagged value concept
  as JSON gets (it's basically an ID/VALUE tuple). Of course, JSON does not
  support this in any way, so you need to make sure your data never looks
  like a serialised Perl hash.
  
  Typical names for the single object key are C<__class_whatever__>, or
  C<$__dollars_are_rarely_used__$> or C<}ugly_brace_placement>, or even
  things like C<__class_md5sum(classname)__>, to reduce the risk of clashing
  with real hashes.
  
  Example, decode JSON objects of the form C<< { "__widget__" => <id> } >>
  into the corresponding C<< $WIDGET{<id>} >> object:
  
     # return whatever is in $WIDGET{5}:
     JSON::PP
        ->new
        ->filter_json_single_key_object (__widget__ => sub {
              $WIDGET{ $_[0] }
           })
        ->decode ('{"__widget__": 5')
  
     # this can be used with a TO_JSON method in some "widget" class
     # for serialisation to json:
     sub WidgetBase::TO_JSON {
        my ($self) = @_;
  
        unless ($self->{id}) {
           $self->{id} = ..get..some..id..;
           $WIDGET{$self->{id}} = $self;
        }
  
        { __widget__ => $self->{id} }
     }
  
  =head2 shrink
  
      $json = $json->shrink([$enable])
      
      $enabled = $json->get_shrink
  
  In JSON::XS, this flag resizes strings generated by either
  C<encode> or C<decode> to their minimum size possible.
  It will also try to downgrade any strings to octet-form if possible.
  
  In JSON::PP, it is noop about resizing strings but tries
  C<utf8::downgrade> to the returned string by C<encode>.
  See to L<utf8>.
  
  See to L<JSON::XS/OBJECT-ORIENTED INTERFACE>
  
  =head2 max_depth
  
      $json = $json->max_depth([$maximum_nesting_depth])
      
      $max_depth = $json->get_max_depth
  
  Sets the maximum nesting level (default C<512>) accepted while encoding
  or decoding. If a higher nesting level is detected in JSON text or a Perl
  data structure, then the encoder and decoder will stop and croak at that
  point.
  
  Nesting level is defined by number of hash- or arrayrefs that the encoder
  needs to traverse to reach a given point or the number of C<{> or C<[>
  characters without their matching closing parenthesis crossed to reach a
  given character in a string.
  
  If no argument is given, the highest possible setting will be used, which
  is rarely useful.
  
  See L<JSON::XS/SECURITY CONSIDERATIONS> for more info on why this is useful.
  
  When a large value (100 or more) was set and it de/encodes a deep nested object/text,
  it may raise a warning 'Deep recursion on subroutine' at the perl runtime phase.
  
  =head2 max_size
  
      $json = $json->max_size([$maximum_string_size])
      
      $max_size = $json->get_max_size
  
  Set the maximum length a JSON text may have (in bytes) where decoding is
  being attempted. The default is C<0>, meaning no limit. When C<decode>
  is called on a string that is longer then this many bytes, it will not
  attempt to decode the string but throw an exception. This setting has no
  effect on C<encode> (yet).
  
  If no argument is given, the limit check will be deactivated (same as when
  C<0> is specified).
  
  See L<JSON::XS/SECURITY CONSIDERATIONS> for more info on why this is useful.
  
  =head2 encode
  
      $json_text = $json->encode($perl_scalar)
  
  Converts the given Perl data structure (a simple scalar or a reference
  to a hash or array) to its JSON representation. Simple scalars will be
  converted into JSON string or number sequences, while references to arrays
  become JSON arrays and references to hashes become JSON objects. Undefined
  Perl values (e.g. C<undef>) become JSON C<null> values.
  References to the integers C<0> and C<1> are converted into C<true> and C<false>.
  
  =head2 decode
  
      $perl_scalar = $json->decode($json_text)
  
  The opposite of C<encode>: expects a JSON text and tries to parse it,
  returning the resulting simple scalar or reference. Croaks on error.
  
  JSON numbers and strings become simple Perl scalars. JSON arrays become
  Perl arrayrefs and JSON objects become Perl hashrefs. C<true> becomes
  C<1> (C<JSON::true>), C<false> becomes C<0> (C<JSON::false>) and
  C<null> becomes C<undef>.
  
  =head2 decode_prefix
  
      ($perl_scalar, $characters) = $json->decode_prefix($json_text)
  
  This works like the C<decode> method, but instead of raising an exception
  when there is trailing garbage after the first JSON object, it will
  silently stop parsing there and return the number of characters consumed
  so far.
  
     JSON->new->decode_prefix ("[1] the tail")
     => ([], 3)
  
  =head1 INCREMENTAL PARSING
  
  Most of this section are copied and modified from L<JSON::XS/INCREMENTAL PARSING>.
  
  In some cases, there is the need for incremental parsing of JSON texts.
  This module does allow you to parse a JSON stream incrementally.
  It does so by accumulating text until it has a full JSON object, which
  it then can decode. This process is similar to using C<decode_prefix>
  to see if a full JSON object is available, but is much more efficient
  (and can be implemented with a minimum of method calls).
  
  This module will only attempt to parse the JSON text once it is sure it
  has enough text to get a decisive result, using a very simple but
  truly incremental parser. This means that it sometimes won't stop as
  early as the full parser, for example, it doesn't detect parentheses
  mismatches. The only thing it guarantees is that it starts decoding as
  soon as a syntactically valid JSON text has been seen. This means you need
  to set resource limits (e.g. C<max_size>) to ensure the parser will stop
  parsing in the presence if syntax errors.
  
  The following methods implement this incremental parser.
  
  =head2 incr_parse
  
      $json->incr_parse( [$string] ) # void context
      
      $obj_or_undef = $json->incr_parse( [$string] ) # scalar context
      
      @obj_or_empty = $json->incr_parse( [$string] ) # list context
  
  This is the central parsing function. It can both append new text and
  extract objects from the stream accumulated so far (both of these
  functions are optional).
  
  If C<$string> is given, then this string is appended to the already
  existing JSON fragment stored in the C<$json> object.
  
  After that, if the function is called in void context, it will simply
  return without doing anything further. This can be used to add more text
  in as many chunks as you want.
  
  If the method is called in scalar context, then it will try to extract
  exactly I<one> JSON object. If that is successful, it will return this
  object, otherwise it will return C<undef>. If there is a parse error,
  this method will croak just as C<decode> would do (one can then use
  C<incr_skip> to skip the erroneous part). This is the most common way of
  using the method.
  
  And finally, in list context, it will try to extract as many objects
  from the stream as it can find and return them, or the empty list
  otherwise. For this to work, there must be no separators between the JSON
  objects or arrays, instead they must be concatenated back-to-back. If
  an error occurs, an exception will be raised as in the scalar context
  case. Note that in this case, any previously-parsed JSON texts will be
  lost.
  
  Example: Parse some JSON arrays/objects in a given string and return them.
  
      my @objs = JSON->new->incr_parse ("[5][7][1,2]");
  
  =head2 incr_text
  
      $lvalue_string = $json->incr_text
  
  This method returns the currently stored JSON fragment as an lvalue, that
  is, you can manipulate it. This I<only> works when a preceding call to
  C<incr_parse> in I<scalar context> successfully returned an object. Under
  all other circumstances you must not call this function (I mean it.
  although in simple tests it might actually work, it I<will> fail under
  real world conditions). As a special exception, you can also call this
  method before having parsed anything.
  
  This function is useful in two cases: a) finding the trailing text after a
  JSON object or b) parsing multiple JSON objects separated by non-JSON text
  (such as commas).
  
      $json->incr_text =~ s/\s*,\s*//;
  
  In Perl 5.005, C<lvalue> attribute is not available.
  You must write codes like the below:
  
      $string = $json->incr_text;
      $string =~ s/\s*,\s*//;
      $json->incr_text( $string );
  
  =head2 incr_skip
  
      $json->incr_skip
  
  This will reset the state of the incremental parser and will remove the
  parsed text from the input buffer. This is useful after C<incr_parse>
  died, in which case the input buffer and incremental parser state is left
  unchanged, to skip the text parsed so far and to reset the parse state.
  
  =head2 incr_reset
  
      $json->incr_reset
  
  This completely resets the incremental parser, that is, after this call,
  it will be as if the parser had never parsed anything.
  
  This is useful if you want to repeatedly parse JSON objects and want to
  ignore any trailing data, which means you have to reset the parser after
  each successful decode.
  
  See to L<JSON::XS/INCREMENTAL PARSING> for examples.
  
  
  =head1 JSON::PP OWN METHODS
  
  =head2 allow_singlequote
  
      $json = $json->allow_singlequote([$enable])
  
  If C<$enable> is true (or missing), then C<decode> will accept
  JSON strings quoted by single quotations that are invalid JSON
  format.
  
      $json->allow_singlequote->decode({"foo":'bar'});
      $json->allow_singlequote->decode({'foo':"bar"});
      $json->allow_singlequote->decode({'foo':'bar'});
  
  As same as the C<relaxed> option, this option may be used to parse
  application-specific files written by humans.
  
  
  =head2 allow_barekey
  
      $json = $json->allow_barekey([$enable])
  
  If C<$enable> is true (or missing), then C<decode> will accept
  bare keys of JSON object that are invalid JSON format.
  
  As same as the C<relaxed> option, this option may be used to parse
  application-specific files written by humans.
  
      $json->allow_barekey->decode('{foo:"bar"}');
  
  =head2 allow_bignum
  
      $json = $json->allow_bignum([$enable])
  
  If C<$enable> is true (or missing), then C<decode> will convert
  the big integer Perl cannot handle as integer into a L<Math::BigInt>
  object and convert a floating number (any) into a L<Math::BigFloat>.
  
  On the contrary, C<encode> converts C<Math::BigInt> objects and C<Math::BigFloat>
  objects into JSON numbers with C<allow_blessed> enabled.
  
     $json->allow_nonref->allow_blessed->allow_bignum;
     $bigfloat = $json->decode('2.000000000000000000000000001');
     print $json->encode($bigfloat);
     # => 2.000000000000000000000000001
  
  See to L<JSON::XS/MAPPING> about the normal conversion of JSON number.
  
  =head2 loose
  
      $json = $json->loose([$enable])
  
  The unescaped [\x00-\x1f\x22\x2f\x5c] strings are invalid in JSON strings
  and the module doesn't allow you to C<decode> to these (except for \x2f).
  If C<$enable> is true (or missing), then C<decode>  will accept these
  unescaped strings.
  
      $json->loose->decode(qq|["abc
                                     def"]|);
  
  See L<JSON::XS/SECURITY CONSIDERATIONS>.
  
  =head2 escape_slash
  
      $json = $json->escape_slash([$enable])
  
  According to JSON Grammar, I<slash> (U+002F) is escaped. But default
  JSON::PP (as same as JSON::XS) encodes strings without escaping slash.
  
  If C<$enable> is true (or missing), then C<encode> will escape slashes.
  
  =head2 indent_length
  
      $json = $json->indent_length($length)
  
  JSON::XS indent space length is 3 and cannot be changed.
  JSON::PP set the indent space length with the given $length.
  The default is 3. The acceptable range is 0 to 15.
  
  =head2 sort_by
  
      $json = $json->sort_by($function_name)
      $json = $json->sort_by($subroutine_ref)
  
  If $function_name or $subroutine_ref are set, its sort routine are used
  in encoding JSON objects.
  
     $js = $pc->sort_by(sub { $JSON::PP::a cmp $JSON::PP::b })->encode($obj);
     # is($js, q|{"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8,"i":9}|);
  
     $js = $pc->sort_by('own_sort')->encode($obj);
     # is($js, q|{"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8,"i":9}|);
  
     sub JSON::PP::own_sort { $JSON::PP::a cmp $JSON::PP::b }
  
  As the sorting routine runs in the JSON::PP scope, the given
  subroutine name and the special variables C<$a>, C<$b> will begin
  'JSON::PP::'.
  
  If $integer is set, then the effect is same as C<canonical> on.
  
  =head1 INTERNAL
  
  For developers.
  
  =over
  
  =item PP_encode_box
  
  Returns
  
          {
              depth        => $depth,
              indent_count => $indent_count,
          }
  
  
  =item PP_decode_box
  
  Returns
  
          {
              text    => $text,
              at      => $at,
              ch      => $ch,
              len     => $len,
              depth   => $depth,
              encoding      => $encoding,
              is_valid_utf8 => $is_valid_utf8,
          };
  
  =back
  
  =head1 MAPPING
  
  This section is copied from JSON::XS and modified to C<JSON::PP>.
  JSON::XS and JSON::PP mapping mechanisms are almost equivalent.
  
  See to L<JSON::XS/MAPPING>.
  
  =head2 JSON -> PERL
  
  =over 4
  
  =item object
  
  A JSON object becomes a reference to a hash in Perl. No ordering of object
  keys is preserved (JSON does not preserver object key ordering itself).
  
  =item array
  
  A JSON array becomes a reference to an array in Perl.
  
  =item string
  
  A JSON string becomes a string scalar in Perl - Unicode codepoints in JSON
  are represented by the same codepoints in the Perl string, so no manual
  decoding is necessary.
  
  =item number
  
  A JSON number becomes either an integer, numeric (floating point) or
  string scalar in perl, depending on its range and any fractional parts. On
  the Perl level, there is no difference between those as Perl handles all
  the conversion details, but an integer may take slightly less memory and
  might represent more values exactly than floating point numbers.
  
  If the number consists of digits only, C<JSON> will try to represent
  it as an integer value. If that fails, it will try to represent it as
  a numeric (floating point) value if that is possible without loss of
  precision. Otherwise it will preserve the number as a string value (in
  which case you lose roundtripping ability, as the JSON number will be
  re-encoded to a JSON string).
  
  Numbers containing a fractional or exponential part will always be
  represented as numeric (floating point) values, possibly at a loss of
  precision (in which case you might lose perfect roundtripping ability, but
  the JSON number will still be re-encoded as a JSON number).
  
  Note that precision is not accuracy - binary floating point values cannot
  represent most decimal fractions exactly, and when converting from and to
  floating point, C<JSON> only guarantees precision up to but not including
  the least significant bit.
  
  When C<allow_bignum> is enabled, the big integers 
  and the numeric can be optionally converted into L<Math::BigInt> and
  L<Math::BigFloat> objects.
  
  =item true, false
  
  These JSON atoms become C<JSON::PP::true> and C<JSON::PP::false>,
  respectively. They are overloaded to act almost exactly like the numbers
  C<1> and C<0>. You can check whether a scalar is a JSON boolean by using
  the C<JSON::is_bool> function.
  
     print JSON::PP::true . "\n";
      => true
     print JSON::PP::true + 1;
      => 1
  
     ok(JSON::true eq  '1');
     ok(JSON::true == 1);
  
  C<JSON> will install these missing overloading features to the backend modules.
  
  
  =item null
  
  A JSON null atom becomes C<undef> in Perl.
  
  C<JSON::PP::null> returns C<undef>.
  
  =back
  
  
  =head2 PERL -> JSON
  
  The mapping from Perl to JSON is slightly more difficult, as Perl is a
  truly typeless language, so we can only guess which JSON type is meant by
  a Perl value.
  
  =over 4
  
  =item hash references
  
  Perl hash references become JSON objects. As there is no inherent ordering
  in hash keys (or JSON objects), they will usually be encoded in a
  pseudo-random order that can change between runs of the same program but
  stays generally the same within a single run of a program. C<JSON>
  optionally sort the hash keys (determined by the I<canonical> flag), so
  the same datastructure will serialise to the same JSON text (given same
  settings and version of JSON::XS), but this incurs a runtime overhead
  and is only rarely useful, e.g. when you want to compare some JSON text
  against another for equality.
  
  
  =item array references
  
  Perl array references become JSON arrays.
  
  =item other references
  
  Other unblessed references are generally not allowed and will cause an
  exception to be thrown, except for references to the integers C<0> and
  C<1>, which get turned into C<false> and C<true> atoms in JSON. You can
  also use C<JSON::false> and C<JSON::true> to improve readability.
  
     to_json [\0,JSON::PP::true]      # yields [false,true]
  
  =item JSON::PP::true, JSON::PP::false, JSON::PP::null
  
  These special values become JSON true and JSON false values,
  respectively. You can also use C<\1> and C<\0> directly if you want.
  
  JSON::PP::null returns C<undef>.
  
  =item blessed objects
  
  Blessed objects are not directly representable in JSON. See the
  C<allow_blessed> and C<convert_blessed> methods on various options on
  how to deal with this: basically, you can choose between throwing an
  exception, encoding the reference as if it weren't blessed, or provide
  your own serialiser method.
  
  See to L<convert_blessed>.
  
  =item simple scalars
  
  Simple Perl scalars (any scalar that is not a reference) are the most
  difficult objects to encode: JSON::XS and JSON::PP will encode undefined scalars as
  JSON C<null> values, scalars that have last been used in a string context
  before encoding as JSON strings, and anything else as number value:
  
     # dump as number
     encode_json [2]                      # yields [2]
     encode_json [-3.0e17]                # yields [-3e+17]
     my $value = 5; encode_json [$value]  # yields [5]
  
     # used as string, so dump as string
     print $value;
     encode_json [$value]                 # yields ["5"]
  
     # undef becomes null
     encode_json [undef]                  # yields [null]
  
  You can force the type to be a string by stringifying it:
  
     my $x = 3.1; # some variable containing a number
     "$x";        # stringified
     $x .= "";    # another, more awkward way to stringify
     print $x;    # perl does it for you, too, quite often
  
  You can force the type to be a number by numifying it:
  
     my $x = "3"; # some variable containing a string
     $x += 0;     # numify it, ensuring it will be dumped as a number
     $x *= 1;     # same thing, the choice is yours.
  
  You cannot currently force the type in other, less obscure, ways.
  
  Note that numerical precision has the same meaning as under Perl (so
  binary to decimal conversion follows the same rules as in Perl, which
  can differ to other languages). Also, your perl interpreter might expose
  extensions to the floating point numbers of your platform, such as
  infinities or NaN's - these cannot be represented in JSON, and it is an
  error to pass those in.
  
  =item Big Number
  
  When C<allow_bignum> is enabled, 
  C<encode> converts C<Math::BigInt> objects and C<Math::BigFloat>
  objects into JSON numbers.
  
  
  =back
  
  =head1 UNICODE HANDLING ON PERLS
  
  If you do not know about Unicode on Perl well,
  please check L<JSON::XS/A FEW NOTES ON UNICODE AND PERL>.
  
  =head2 Perl 5.8 and later
  
  Perl can handle Unicode and the JSON::PP de/encode methods also work properly.
  
      $json->allow_nonref->encode(chr hex 3042);
      $json->allow_nonref->encode(chr hex 12345);
  
  Returns C<"\u3042"> and C<"\ud808\udf45"> respectively.
  
      $json->allow_nonref->decode('"\u3042"');
      $json->allow_nonref->decode('"\ud808\udf45"');
  
  Returns UTF-8 encoded strings with UTF8 flag, regarded as C<U+3042> and C<U+12345>.
  
  Note that the versions from Perl 5.8.0 to 5.8.2, Perl built-in C<join> was broken,
  so JSON::PP wraps the C<join> with a subroutine. Thus JSON::PP works slow in the versions.
  
  
  =head2 Perl 5.6
  
  Perl can handle Unicode and the JSON::PP de/encode methods also work.
  
  =head2 Perl 5.005
  
  Perl 5.005 is a byte semantics world -- all strings are sequences of bytes.
  That means the unicode handling is not available.
  
  In encoding,
  
      $json->allow_nonref->encode(chr hex 3042);  # hex 3042 is 12354.
      $json->allow_nonref->encode(chr hex 12345); # hex 12345 is 74565.
  
  Returns C<B> and C<E>, as C<chr> takes a value more than 255, it treats
  as C<$value % 256>, so the above codes are equivalent to :
  
      $json->allow_nonref->encode(chr 66);
      $json->allow_nonref->encode(chr 69);
  
  In decoding,
  
      $json->decode('"\u00e3\u0081\u0082"');
  
  The returned is a byte sequence C<0xE3 0x81 0x82> for UTF-8 encoded
  Japanese character (C<HIRAGANA LETTER A>).
  And if it is represented in Unicode code point, C<U+3042>.
  
  Next, 
  
      $json->decode('"\u3042"');
  
  We ordinary expect the returned value is a Unicode character C<U+3042>.
  But here is 5.005 world. This is C<0xE3 0x81 0x82>.
  
      $json->decode('"\ud808\udf45"');
  
  This is not a character C<U+12345> but bytes - C<0xf0 0x92 0x8d 0x85>.
  
  
  =head1 TODO
  
  =over
  
  =item speed
  
  =item memory saving
  
  =back
  
  
  =head1 SEE ALSO
  
  Most of the document are copied and modified from JSON::XS doc.
  
  L<JSON::XS>
  
  RFC4627 (L<http://www.ietf.org/rfc/rfc4627.txt>)
  
  =head1 AUTHOR
  
  Makamaka Hannyaharamitu, E<lt>makamaka[at]cpan.orgE<gt>
  
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright 2007-2016 by Makamaka Hannyaharamitu
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself. 
  
  =cut
JSON_PP

$fatpacked{"JSON/PP/Boolean.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'JSON_PP_BOOLEAN';
  =head1 NAME
  
  JSON::PP::Boolean - dummy module providing JSON::PP::Boolean
  
  =head1 SYNOPSIS
  
   # do not "use" yourself
  
  =head1 DESCRIPTION
  
  This module exists only to provide overload resolution for Storable and similar modules. See
  L<JSON::PP> for more info about this class.
  
  =cut
  
  use JSON::PP ();
  use strict;
  
  1;
  
  =head1 AUTHOR
  
  This idea is from L<JSON::XS::Boolean> written by Marc Lehmann <schmorp[at]schmorp.de>
  
  =cut
  
JSON_PP_BOOLEAN

$fatpacked{"Memoize.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE';
  # -*- mode: perl; perl-indent-level: 2; -*-
  # Memoize.pm
  #
  # Transparent memoization of idempotent functions
  #
  # Copyright 1998, 1999, 2000, 2001, 2012 M. J. Dominus.
  # You may copy and distribute this program under the
  # same terms as Perl itself.  If in doubt, 
  # write to mjd-perl-memoize+@plover.com for a license.
  
  package Memoize;
  $VERSION = '1.03';
  
  # Compile-time constants
  sub SCALAR () { 0 } 
  sub LIST () { 1 } 
  
  
  #
  # Usage memoize(functionname/ref,
  #               { NORMALIZER => coderef, INSTALL => name,
  #                 LIST_CACHE => descriptor, SCALAR_CACHE => descriptor }
  #
  
  use Carp;
  use Exporter;
  use vars qw($DEBUG);
  use Config;                     # Dammit.
  @ISA = qw(Exporter);
  @EXPORT = qw(memoize);
  @EXPORT_OK = qw(unmemoize flush_cache);
  use strict;
  
  my %memotable;
  my %revmemotable;
  my @CONTEXT_TAGS = qw(MERGE TIE MEMORY FAULT HASH);
  my %IS_CACHE_TAG = map {($_ => 1)} @CONTEXT_TAGS;
  
  # Raise an error if the user tries to specify one of thesepackage as a
  # tie for LIST_CACHE
  
  my %scalar_only = map {($_ => 1)} qw(DB_File GDBM_File SDBM_File ODBM_File NDBM_File);
  
  sub memoize {
    my $fn = shift;
    my %options = @_;
    my $options = \%options;
    
    unless (defined($fn) && 
  	  (ref $fn eq 'CODE' || ref $fn eq '')) {
      croak "Usage: memoize 'functionname'|coderef {OPTIONS}";
    }
  
    my $uppack = caller;		# TCL me Elmo!
    my $cref;			# Code reference to original function
    my $name = (ref $fn ? undef : $fn);
  
    # Convert function names to code references
    $cref = &_make_cref($fn, $uppack);
  
    # Locate function prototype, if any
    my $proto = prototype $cref;
    if (defined $proto) { $proto = "($proto)" }
    else { $proto = "" }
  
    # I would like to get rid of the eval, but there seems not to be any
    # other way to set the prototype properly.  The switch here for
    # 'usethreads' works around a bug in threadperl having to do with
    # magic goto.  It would be better to fix the bug and use the magic
    # goto version everywhere.
    my $wrapper = 
        $Config{usethreads} 
          ? eval "sub $proto { &_memoizer(\$cref, \@_); }" 
          : eval "sub $proto { unshift \@_, \$cref; goto &_memoizer; }";
  
    my $normalizer = $options{NORMALIZER};
    if (defined $normalizer  && ! ref $normalizer) {
      $normalizer = _make_cref($normalizer, $uppack);
    }
    
    my $install_name;
    if (defined $options->{INSTALL}) {
      # INSTALL => name
      $install_name = $options->{INSTALL};
    } elsif (! exists $options->{INSTALL}) {
      # No INSTALL option provided; use original name if possible
      $install_name = $name;
    } else {
      # INSTALL => undef  means don't install
    }
  
    if (defined $install_name) {
      $install_name = $uppack . '::' . $install_name
  	unless $install_name =~ /::/;
      no strict;
      local($^W) = 0;	       # ``Subroutine $install_name redefined at ...''
      *{$install_name} = $wrapper; # Install memoized version
    }
  
    $revmemotable{$wrapper} = "" . $cref; # Turn code ref into hash key
  
    # These will be the caches
    my %caches;
    for my $context (qw(SCALAR LIST)) {
      # suppress subsequent 'uninitialized value' warnings
      $options{"${context}_CACHE"} ||= ''; 
  
      my $cache_opt = $options{"${context}_CACHE"};
      my @cache_opt_args;
      if (ref $cache_opt) {
        @cache_opt_args = @$cache_opt;
        $cache_opt = shift @cache_opt_args;
      }
      if ($cache_opt eq 'FAULT') { # no cache
        $caches{$context} = undef;
      } elsif ($cache_opt eq 'HASH') { # user-supplied hash
        my $cache = $cache_opt_args[0];
        my $package = ref(tied %$cache);
        if ($context eq 'LIST' && $scalar_only{$package}) {
          croak("You can't use $package for LIST_CACHE because it can only store scalars");
        }
        $caches{$context} = $cache;
      } elsif ($cache_opt eq '' ||  $IS_CACHE_TAG{$cache_opt}) {
        # default is that we make up an in-memory hash
        $caches{$context} = {};
        # (this might get tied later, or MERGEd away)
      } else {
        croak "Unrecognized option to `${context}_CACHE': `$cache_opt' should be one of (@CONTEXT_TAGS); aborting";
      }
    }
  
    # Perhaps I should check here that you didn't supply *both* merge
    # options.  But if you did, it does do something reasonable: They
    # both get merged to the same in-memory hash.
    if ($options{SCALAR_CACHE} eq 'MERGE' || $options{LIST_CACHE} eq 'MERGE') {
      $options{MERGED} = 1;
      $caches{SCALAR} = $caches{LIST};
    }
  
    # Now deal with the TIE options
    {
      my $context;
      foreach $context (qw(SCALAR LIST)) {
        # If the relevant option wasn't `TIE', this call does nothing.
        _my_tie($context, $caches{$context}, $options);  # Croaks on failure
      }
    }
    
    # We should put some more stuff in here eventually.
    # We've been saying that for serveral versions now.
    # And you know what?  More stuff keeps going in!
    $memotable{$cref} = 
    {
      O => $options,  # Short keys here for things we need to access frequently
      N => $normalizer,
      U => $cref,
      MEMOIZED => $wrapper,
      PACKAGE => $uppack,
      NAME => $install_name,
      S => $caches{SCALAR},
      L => $caches{LIST},
    };
  
    $wrapper			# Return just memoized version
  }
  
  # This function tries to load a tied hash class and tie the hash to it.
  sub _my_tie {
    my ($context, $hash, $options) = @_;
    my $fullopt = $options->{"${context}_CACHE"};
  
    # We already checked to make sure that this works.
    my $shortopt = (ref $fullopt) ? $fullopt->[0] : $fullopt;
    
    return unless defined $shortopt && $shortopt eq 'TIE';
    carp("TIE option to memoize() is deprecated; use HASH instead")
        if $^W;
  
    my @args = ref $fullopt ? @$fullopt : ();
    shift @args;
    my $module = shift @args;
    if ($context eq 'LIST' && $scalar_only{$module}) {
      croak("You can't use $module for LIST_CACHE because it can only store scalars");
    }
    my $modulefile = $module . '.pm';
    $modulefile =~ s{::}{/}g;
    eval { require $modulefile };
    if ($@) {
      croak "Memoize: Couldn't load hash tie module `$module': $@; aborting";
    }
    my $rc = (tie %$hash => $module, @args);
    unless ($rc) {
      croak "Memoize: Couldn't tie hash to `$module': $!; aborting";
    }
    1;
  }
  
  sub flush_cache {
    my $func = _make_cref($_[0], scalar caller);
    my $info = $memotable{$revmemotable{$func}};
    die "$func not memoized" unless defined $info;
    for my $context (qw(S L)) {
      my $cache = $info->{$context};
      if (tied %$cache && ! (tied %$cache)->can('CLEAR')) {
        my $funcname = defined($info->{NAME}) ? 
            "function $info->{NAME}" : "anonymous function $func";
        my $context = {S => 'scalar', L => 'list'}->{$context};
        croak "Tied cache hash for $context-context $funcname does not support flushing";
      } else {
        %$cache = ();
      }
    }
  }
  
  # This is the function that manages the memo tables.
  sub _memoizer {
    my $orig = shift;		# stringized version of ref to original func.
    my $info = $memotable{$orig};
    my $normalizer = $info->{N};
    
    my $argstr;
    my $context = (wantarray() ? LIST : SCALAR);
  
    if (defined $normalizer) { 
      no strict;
      if ($context == SCALAR) {
        $argstr = &{$normalizer}(@_);
      } elsif ($context == LIST) {
        ($argstr) = &{$normalizer}(@_);
      } else {
        croak "Internal error \#41; context was neither LIST nor SCALAR\n";
      }
    } else {                      # Default normalizer
      local $^W = 0;
      $argstr = join chr(28),@_;  
    }
  
    if ($context == SCALAR) {
      my $cache = $info->{S};
      _crap_out($info->{NAME}, 'scalar') unless $cache;
      if (exists $cache->{$argstr}) { 
        return $info->{O}{MERGED}
          ? $cache->{$argstr}[0] : $cache->{$argstr};
      } else {
        my $val = &{$info->{U}}(@_);
        # Scalars are considered to be lists; store appropriately
        if ($info->{O}{MERGED}) {
  	$cache->{$argstr} = [$val];
        } else {
  	$cache->{$argstr} = $val;
        }
        $val;
      }
    } elsif ($context == LIST) {
      my $cache = $info->{L};
      _crap_out($info->{NAME}, 'list') unless $cache;
      if (exists $cache->{$argstr}) {
        return @{$cache->{$argstr}};
      } else {
        my @q = &{$info->{U}}(@_);
        $cache->{$argstr} = \@q;
        @q;
      }
    } else {
      croak "Internal error \#42; context was neither LIST nor SCALAR\n";
    }
  }
  
  sub unmemoize {
    my $f = shift;
    my $uppack = caller;
    my $cref = _make_cref($f, $uppack);
  
    unless (exists $revmemotable{$cref}) {
      croak "Could not unmemoize function `$f', because it was not memoized to begin with";
    }
    
    my $tabent = $memotable{$revmemotable{$cref}};
    unless (defined $tabent) {
      croak "Could not figure out how to unmemoize function `$f'";
    }
    my $name = $tabent->{NAME};
    if (defined $name) {
      no strict;
      local($^W) = 0;	       # ``Subroutine $install_name redefined at ...''
      *{$name} = $tabent->{U}; # Replace with original function
    }
    undef $memotable{$revmemotable{$cref}};
    undef $revmemotable{$cref};
  
    # This removes the last reference to the (possibly tied) memo tables
    # my ($old_function, $memotabs) = @{$tabent}{'U','S','L'};
    # undef $tabent; 
  
  #  # Untie the memo tables if they were tied.
  #  my $i;
  #  for $i (0,1) {
  #    if (tied %{$memotabs->[$i]}) {
  #      warn "Untying hash #$i\n";
  #      untie %{$memotabs->[$i]};
  #    }
  #  }
  
    $tabent->{U};
  }
  
  sub _make_cref {
    my $fn = shift;
    my $uppack = shift;
    my $cref;
    my $name;
  
    if (ref $fn eq 'CODE') {
      $cref = $fn;
    } elsif (! ref $fn) {
      if ($fn =~ /::/) {
        $name = $fn;
      } else {
        $name = $uppack . '::' . $fn;
      }
      no strict;
      if (defined $name and !defined(&$name)) {
        croak "Cannot operate on nonexistent function `$fn'";
      }
  #    $cref = \&$name;
      $cref = *{$name}{CODE};
    } else {
      my $parent = (caller(1))[3]; # Function that called _make_cref
      croak "Usage: argument 1 to `$parent' must be a function name or reference.\n";
    }
    $DEBUG and warn "${name}($fn) => $cref in _make_cref\n";
    $cref;
  }
  
  sub _crap_out {
    my ($funcname, $context) = @_;
    if (defined $funcname) {
      croak "Function `$funcname' called in forbidden $context context; faulting";
    } else {
      croak "Anonymous function called in forbidden $context context; faulting";
    }
  }
  
  1;
  
  
  
  
  
  =head1 NAME
  
  Memoize - Make functions faster by trading space for time
  
  =head1 SYNOPSIS
  
          # This is the documentation for Memoize 1.03
  	use Memoize;
  	memoize('slow_function');
  	slow_function(arguments);    # Is faster than it was before
  
  
  This is normally all you need to know.  However, many options are available:
  
  	memoize(function, options...);
  
  Options include:
  
  	NORMALIZER => function
  	INSTALL => new_name
  
  	SCALAR_CACHE => 'MEMORY'
          SCALAR_CACHE => ['HASH', \%cache_hash ]
  	SCALAR_CACHE => 'FAULT'
  	SCALAR_CACHE => 'MERGE'
  
  	LIST_CACHE => 'MEMORY'
          LIST_CACHE => ['HASH', \%cache_hash ]
  	LIST_CACHE => 'FAULT'
  	LIST_CACHE => 'MERGE'
  
  =head1 DESCRIPTION
  
  `Memoizing' a function makes it faster by trading space for time.  It
  does this by caching the return values of the function in a table.
  If you call the function again with the same arguments, C<memoize>
  jumps in and gives you the value out of the table, instead of letting
  the function compute the value all over again.
  
  Here is an extreme example.  Consider the Fibonacci sequence, defined
  by the following function:
  
  	# Compute Fibonacci numbers
  	sub fib {
  	  my $n = shift;
  	  return $n if $n < 2;
  	  fib($n-1) + fib($n-2);
  	}
  
  This function is very slow.  Why?  To compute fib(14), it first wants
  to compute fib(13) and fib(12), and add the results.  But to compute
  fib(13), it first has to compute fib(12) and fib(11), and then it
  comes back and computes fib(12) all over again even though the answer
  is the same.  And both of the times that it wants to compute fib(12),
  it has to compute fib(11) from scratch, and then it has to do it
  again each time it wants to compute fib(13).  This function does so
  much recomputing of old results that it takes a really long time to
  run---fib(14) makes 1,200 extra recursive calls to itself, to compute
  and recompute things that it already computed.
  
  This function is a good candidate for memoization.  If you memoize the
  `fib' function above, it will compute fib(14) exactly once, the first
  time it needs to, and then save the result in a table.  Then if you
  ask for fib(14) again, it gives you the result out of the table.
  While computing fib(14), instead of computing fib(12) twice, it does
  it once; the second time it needs the value it gets it from the table.
  It doesn't compute fib(11) four times; it computes it once, getting it
  from the table the next three times.  Instead of making 1,200
  recursive calls to `fib', it makes 15.  This makes the function about
  150 times faster.
  
  You could do the memoization yourself, by rewriting the function, like
  this:
  
  	# Compute Fibonacci numbers, memoized version
  	{ my @fib;
    	  sub fib {
  	    my $n = shift;
  	    return $fib[$n] if defined $fib[$n];
  	    return $fib[$n] = $n if $n < 2;
  	    $fib[$n] = fib($n-1) + fib($n-2);
  	  }
          }
  
  Or you could use this module, like this:
  
  	use Memoize;
  	memoize('fib');
  
  	# Rest of the fib function just like the original version.
  
  This makes it easy to turn memoizing on and off.
  
  Here's an even simpler example: I wrote a simple ray tracer; the
  program would look in a certain direction, figure out what it was
  looking at, and then convert the `color' value (typically a string
  like `red') of that object to a red, green, and blue pixel value, like
  this:
  
      for ($direction = 0; $direction < 300; $direction++) {
        # Figure out which object is in direction $direction
        $color = $object->{color};
        ($r, $g, $b) = @{&ColorToRGB($color)};
        ...
      }
  
  Since there are relatively few objects in a picture, there are only a
  few colors, which get looked up over and over again.  Memoizing
  C<ColorToRGB> sped up the program by several percent.
  
  =head1 DETAILS
  
  This module exports exactly one function, C<memoize>.  The rest of the
  functions in this package are None of Your Business.
  
  You should say
  
  	memoize(function)
  
  where C<function> is the name of the function you want to memoize, or
  a reference to it.  C<memoize> returns a reference to the new,
  memoized version of the function, or C<undef> on a non-fatal error.
  At present, there are no non-fatal errors, but there might be some in
  the future.
  
  If C<function> was the name of a function, then C<memoize> hides the
  old version and installs the new memoized version under the old name,
  so that C<&function(...)> actually invokes the memoized version.
  
  =head1 OPTIONS
  
  There are some optional options you can pass to C<memoize> to change
  the way it behaves a little.  To supply options, invoke C<memoize>
  like this:
  
  	memoize(function, NORMALIZER => function,
  			  INSTALL => newname,
                            SCALAR_CACHE => option,
  	                  LIST_CACHE => option
  			 );
  
  Each of these options is optional; you can include some, all, or none
  of them.
  
  =head2 INSTALL
  
  If you supply a function name with C<INSTALL>, memoize will install
  the new, memoized version of the function under the name you give.
  For example, 
  
  	memoize('fib', INSTALL => 'fastfib')
  
  installs the memoized version of C<fib> as C<fastfib>; without the
  C<INSTALL> option it would have replaced the old C<fib> with the
  memoized version.  
  
  To prevent C<memoize> from installing the memoized version anywhere, use
  C<INSTALL =E<gt> undef>.
  
  =head2 NORMALIZER
  
  Suppose your function looks like this:
  
  	# Typical call: f('aha!', A => 11, B => 12);
  	sub f {
  	  my $a = shift;
  	  my %hash = @_;
  	  $hash{B} ||= 2;  # B defaults to 2
  	  $hash{C} ||= 7;  # C defaults to 7
  
  	  # Do something with $a, %hash
  	}
  
  Now, the following calls to your function are all completely equivalent:
  
  	f(OUCH);
  	f(OUCH, B => 2);
  	f(OUCH, C => 7);
  	f(OUCH, B => 2, C => 7);
  	f(OUCH, C => 7, B => 2);
  	(etc.)
  
  However, unless you tell C<Memoize> that these calls are equivalent,
  it will not know that, and it will compute the values for these
  invocations of your function separately, and store them separately.
  
  To prevent this, supply a C<NORMALIZER> function that turns the
  program arguments into a string in a way that equivalent arguments
  turn into the same string.  A C<NORMALIZER> function for C<f> above
  might look like this:
  
  	sub normalize_f {
  	  my $a = shift;
  	  my %hash = @_;
  	  $hash{B} ||= 2;
  	  $hash{C} ||= 7;
  
  	  join(',', $a, map ($_ => $hash{$_}) sort keys %hash);
  	}
  
  Each of the argument lists above comes out of the C<normalize_f>
  function looking exactly the same, like this:
  
  	OUCH,B,2,C,7
  
  You would tell C<Memoize> to use this normalizer this way:
  
  	memoize('f', NORMALIZER => 'normalize_f');
  
  C<memoize> knows that if the normalized version of the arguments is
  the same for two argument lists, then it can safely look up the value
  that it computed for one argument list and return it as the result of
  calling the function with the other argument list, even if the
  argument lists look different.
  
  The default normalizer just concatenates the arguments with character
  28 in between.  (In ASCII, this is called FS or control-\.)  This
  always works correctly for functions with only one string argument,
  and also when the arguments never contain character 28.  However, it
  can confuse certain argument lists:
  
  	normalizer("a\034", "b")
  	normalizer("a", "\034b")
  	normalizer("a\034\034b")
  
  for example.
  
  Since hash keys are strings, the default normalizer will not
  distinguish between C<undef> and the empty string.  It also won't work
  when the function's arguments are references.  For example, consider a
  function C<g> which gets two arguments: A number, and a reference to
  an array of numbers:
  
  	g(13, [1,2,3,4,5,6,7]);
  
  The default normalizer will turn this into something like
  C<"13\034ARRAY(0x436c1f)">.  That would be all right, except that a
  subsequent array of numbers might be stored at a different location
  even though it contains the same data.  If this happens, C<Memoize>
  will think that the arguments are different, even though they are
  equivalent.  In this case, a normalizer like this is appropriate:
  
  	sub normalize { join ' ', $_[0], @{$_[1]} }
  
  For the example above, this produces the key "13 1 2 3 4 5 6 7".
  
  Another use for normalizers is when the function depends on data other
  than those in its arguments.  Suppose you have a function which
  returns a value which depends on the current hour of the day:
  
  	sub on_duty {
            my ($problem_type) = @_;
  	  my $hour = (localtime)[2];
            open my $fh, "$DIR/$problem_type" or die...;
            my $line;
            while ($hour-- > 0)
              $line = <$fh>;
            } 
  	  return $line;
  	}
  
  At 10:23, this function generates the 10th line of a data file; at
  3:45 PM it generates the 15th line instead.  By default, C<Memoize>
  will only see the $problem_type argument.  To fix this, include the
  current hour in the normalizer:
  
          sub normalize { join ' ', (localtime)[2], @_ }
  
  The calling context of the function (scalar or list context) is
  propagated to the normalizer.  This means that if the memoized
  function will treat its arguments differently in list context than it
  would in scalar context, you can have the normalizer function select
  its behavior based on the results of C<wantarray>.  Even if called in
  a list context, a normalizer should still return a single string.
  
  =head2 C<SCALAR_CACHE>, C<LIST_CACHE>
  
  Normally, C<Memoize> caches your function's return values into an
  ordinary Perl hash variable.  However, you might like to have the
  values cached on the disk, so that they persist from one run of your
  program to the next, or you might like to associate some other
  interesting semantics with the cached values.
  
  There's a slight complication under the hood of C<Memoize>: There are
  actually I<two> caches, one for scalar values and one for list values.
  When your function is called in scalar context, its return value is
  cached in one hash, and when your function is called in list context,
  its value is cached in the other hash.  You can control the caching
  behavior of both contexts independently with these options.
  
  The argument to C<LIST_CACHE> or C<SCALAR_CACHE> must either be one of
  the following four strings:
  
  	MEMORY
  	FAULT
  	MERGE
          HASH
  
  or else it must be a reference to an array whose first element is one of
  these four strings, such as C<[HASH, arguments...]>.
  
  =over 4
  
  =item C<MEMORY>
  
  C<MEMORY> means that return values from the function will be cached in
  an ordinary Perl hash variable.  The hash variable will not persist
  after the program exits.  This is the default.
  
  =item C<HASH>
  
  C<HASH> allows you to specify that a particular hash that you supply
  will be used as the cache.  You can tie this hash beforehand to give
  it any behavior you want.
  
  A tied hash can have any semantics at all.  It is typically tied to an
  on-disk database, so that cached values are stored in the database and
  retrieved from it again when needed, and the disk file typically
  persists after your program has exited.  See C<perltie> for more
  complete details about C<tie>.
  
  A typical example is:
  
          use DB_File;
          tie my %cache => 'DB_File', $filename, O_RDWR|O_CREAT, 0666;
          memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  This has the effect of storing the cache in a C<DB_File> database
  whose name is in C<$filename>.  The cache will persist after the
  program has exited.  Next time the program runs, it will find the
  cache already populated from the previous run of the program.  Or you
  can forcibly populate the cache by constructing a batch program that
  runs in the background and populates the cache file.  Then when you
  come to run your real program the memoized function will be fast
  because all its results have been precomputed.
  
  Another reason to use C<HASH> is to provide your own hash variable.
  You can then inspect or modify the contents of the hash to gain finer
  control over the cache management.
  
  =item C<TIE>
  
  This option is no longer supported.  It is still documented only to
  aid in the debugging of old programs that use it.  Old programs should
  be converted to use the C<HASH> option instead.
  
          memoize ... ['TIE', PACKAGE, ARGS...]
  
  is merely a shortcut for
  
          require PACKAGE;
  	{ tie my %cache, PACKAGE, ARGS...;
            memoize ... [HASH => \%cache];
          }
  
  =item C<FAULT>
  
  C<FAULT> means that you never expect to call the function in scalar
  (or list) context, and that if C<Memoize> detects such a call, it
  should abort the program.  The error message is one of
  
  	`foo' function called in forbidden list context at line ...
  	`foo' function called in forbidden scalar context at line ...
  
  =item C<MERGE>
  
  C<MERGE> normally means that the memoized function does not
  distinguish between list and sclar context, and that return values in
  both contexts should be stored together.  Both C<LIST_CACHE =E<gt>
  MERGE> and C<SCALAR_CACHE =E<gt> MERGE> mean the same thing.
  
  Consider this function:
  
  	sub complicated {
            # ... time-consuming calculation of $result
            return $result;
          }
  
  The C<complicated> function will return the same numeric C<$result>
  regardless of whether it is called in list or in scalar context.
  
  Normally, the following code will result in two calls to C<complicated>, even
  if C<complicated> is memoized:
  
      $x = complicated(142);
      ($y) = complicated(142);
      $z = complicated(142);
  
  The first call will cache the result, say 37, in the scalar cache; the
  second will cach the list C<(37)> in the list cache.  The third call
  doesn't call the real C<complicated> function; it gets the value 37
  from the scalar cache.
  
  Obviously, the second call to C<complicated> is a waste of time, and
  storing its return value is a waste of space.  Specifying C<LIST_CACHE
  =E<gt> MERGE> will make C<memoize> use the same cache for scalar and
  list context return values, so that the second call uses the scalar
  cache that was populated by the first call.  C<complicated> ends up
  being called only once, and both subsequent calls return C<3> from the
  cache, regardless of the calling context.
  
  =head3 List values in scalar context
  
  Consider this function:
  
      sub iota { return reverse (1..$_[0]) }
  
  This function normally returns a list.  Suppose you memoize it and
  merge the caches:
  
      memoize 'iota', SCALAR_CACHE => 'MERGE';
  
      @i7 = iota(7);
      $i7 = iota(7);
  
  Here the first call caches the list (1,2,3,4,5,6,7).  The second call
  does not really make sense. C<Memoize> cannot guess what behavior
  C<iota> should have in scalar context without actually calling it in
  scalar context.  Normally C<Memoize> I<would> call C<iota> in scalar
  context and cache the result, but the C<SCALAR_CACHE =E<gt> 'MERGE'>
  option says not to do that, but to use the cache list-context value
  instead. But it cannot return a list of seven elements in a scalar
  context. In this case C<$i7> will receive the B<first element> of the
  cached list value, namely 7.
  
  =head3 Merged disk caches
  
  Another use for C<MERGE> is when you want both kinds of return values
  stored in the same disk file; this saves you from having to deal with
  two disk files instead of one.  You can use a normalizer function to
  keep the two sets of return values separate.  For example:
  
          tie my %cache => 'MLDBM', 'DB_File', $filename, ...;
  
  	memoize 'myfunc',
  	  NORMALIZER => 'n',
  	  SCALAR_CACHE => [HASH => \%cache],
  	  LIST_CACHE => 'MERGE',
  	;
  
  	sub n {
  	  my $context = wantarray() ? 'L' : 'S';
  	  # ... now compute the hash key from the arguments ...
  	  $hashkey = "$context:$hashkey";
  	}
  
  This normalizer function will store scalar context return values in
  the disk file under keys that begin with C<S:>, and list context
  return values under keys that begin with C<L:>.
  
  =back
  
  =head1 OTHER FACILITIES
  
  =head2 C<unmemoize>
  
  There's an C<unmemoize> function that you can import if you want to.
  Why would you want to?  Here's an example: Suppose you have your cache
  tied to a DBM file, and you want to make sure that the cache is
  written out to disk if someone interrupts the program.  If the program
  exits normally, this will happen anyway, but if someone types
  control-C or something then the program will terminate immediately
  without synchronizing the database.  So what you can do instead is
  
      $SIG{INT} = sub { unmemoize 'function' };
  
  C<unmemoize> accepts a reference to, or the name of a previously
  memoized function, and undoes whatever it did to provide the memoized
  version in the first place, including making the name refer to the
  unmemoized version if appropriate.  It returns a reference to the
  unmemoized version of the function.
  
  If you ask it to unmemoize a function that was never memoized, it
  croaks.
  
  =head2 C<flush_cache>
  
  C<flush_cache(function)> will flush out the caches, discarding I<all>
  the cached data.  The argument may be a function name or a reference
  to a function.  For finer control over when data is discarded or
  expired, see the documentation for C<Memoize::Expire>, included in
  this package.
  
  Note that if the cache is a tied hash, C<flush_cache> will attempt to
  invoke the C<CLEAR> method on the hash.  If there is no C<CLEAR>
  method, this will cause a run-time error.
  
  An alternative approach to cache flushing is to use the C<HASH> option
  (see above) to request that C<Memoize> use a particular hash variable
  as its cache.  Then you can examine or modify the hash at any time in
  any way you desire.  You may flush the cache by using C<%hash = ()>. 
  
  =head1 CAVEATS
  
  Memoization is not a cure-all:
  
  =over 4
  
  =item *
  
  Do not memoize a function whose behavior depends on program
  state other than its own arguments, such as global variables, the time
  of day, or file input.  These functions will not produce correct
  results when memoized.  For a particularly easy example:
  
  	sub f {
  	  time;
  	}
  
  This function takes no arguments, and as far as C<Memoize> is
  concerned, it always returns the same result.  C<Memoize> is wrong, of
  course, and the memoized version of this function will call C<time> once
  to get the current time, and it will return that same time
  every time you call it after that.
  
  =item *
  
  Do not memoize a function with side effects.
  
  	sub f {
  	  my ($a, $b) = @_;
            my $s = $a + $b;
  	  print "$a + $b = $s.\n";
  	}
  
  This function accepts two arguments, adds them, and prints their sum.
  Its return value is the numuber of characters it printed, but you
  probably didn't care about that.  But C<Memoize> doesn't understand
  that.  If you memoize this function, you will get the result you
  expect the first time you ask it to print the sum of 2 and 3, but
  subsequent calls will return 1 (the return value of
  C<print>) without actually printing anything.
  
  =item *
  
  Do not memoize a function that returns a data structure that is
  modified by its caller.
  
  Consider these functions:  C<getusers> returns a list of users somehow,
  and then C<main> throws away the first user on the list and prints the
  rest:
  
  	sub main {
  	  my $userlist = getusers();
  	  shift @$userlist;
  	  foreach $u (@$userlist) {
  	    print "User $u\n";
  	  }
  	}
  
  	sub getusers {
  	  my @users;
  	  # Do something to get a list of users;
  	  \@users;  # Return reference to list.
  	}
  
  If you memoize C<getusers> here, it will work right exactly once.  The
  reference to the users list will be stored in the memo table.  C<main>
  will discard the first element from the referenced list.  The next
  time you invoke C<main>, C<Memoize> will not call C<getusers>; it will
  just return the same reference to the same list it got last time.  But
  this time the list has already had its head removed; C<main> will
  erroneously remove another element from it.  The list will get shorter
  and shorter every time you call C<main>.
  
  Similarly, this:
  
  	$u1 = getusers();    
  	$u2 = getusers();    
  	pop @$u1;
  
  will modify $u2 as well as $u1, because both variables are references
  to the same array.  Had C<getusers> not been memoized, $u1 and $u2
  would have referred to different arrays.
  
  =item * 
  
  Do not memoize a very simple function.
  
  Recently someone mentioned to me that the Memoize module made his
  program run slower instead of faster.  It turned out that he was
  memoizing the following function:
  
      sub square {
        $_[0] * $_[0];
      }
  
  I pointed out that C<Memoize> uses a hash, and that looking up a
  number in the hash is necessarily going to take a lot longer than a
  single multiplication.  There really is no way to speed up the
  C<square> function.
  
  Memoization is not magical.
  
  =back
  
  =head1 PERSISTENT CACHE SUPPORT
  
  You can tie the cache tables to any sort of tied hash that you want
  to, as long as it supports C<TIEHASH>, C<FETCH>, C<STORE>, and
  C<EXISTS>.  For example,
  
          tie my %cache => 'GDBM_File', $filename, O_RDWR|O_CREAT, 0666;
          memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  works just fine.  For some storage methods, you need a little glue.
  
  C<SDBM_File> doesn't supply an C<EXISTS> method, so included in this
  package is a glue module called C<Memoize::SDBM_File> which does
  provide one.  Use this instead of plain C<SDBM_File> to store your
  cache table on disk in an C<SDBM_File> database:
  
          tie my %cache => 'Memoize::SDBM_File', $filename, O_RDWR|O_CREAT, 0666;
          memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  C<NDBM_File> has the same problem and the same solution.  (Use
  C<Memoize::NDBM_File instead of plain NDBM_File.>)
  
  C<Storable> isn't a tied hash class at all.  You can use it to store a
  hash to disk and retrieve it again, but you can't modify the hash while
  it's on the disk.  So if you want to store your cache table in a
  C<Storable> database, use C<Memoize::Storable>, which puts a hashlike
  front-end onto C<Storable>.  The hash table is actually kept in
  memory, and is loaded from your C<Storable> file at the time you
  memoize the function, and stored back at the time you unmemoize the
  function (or when your program exits):
  
          tie my %cache => 'Memoize::Storable', $filename;
  	memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
          tie my %cache => 'Memoize::Storable', $filename, 'nstore';
  	memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  Include the `nstore' option to have the C<Storable> database written
  in `network order'.  (See L<Storable> for more details about this.)
  
  The C<flush_cache()> function will raise a run-time error unless the
  tied package provides a C<CLEAR> method.
  
  =head1 EXPIRATION SUPPORT
  
  See Memoize::Expire, which is a plug-in module that adds expiration
  functionality to Memoize.  If you don't like the kinds of policies
  that Memoize::Expire implements, it is easy to write your own plug-in
  module to implement whatever policy you desire.  Memoize comes with
  several examples.  An expiration manager that implements a LRU policy
  is available on CPAN as Memoize::ExpireLRU.
  
  =head1 BUGS
  
  The test suite is much better, but always needs improvement.
  
  There is some problem with the way C<goto &f> works under threaded
  Perl, perhaps because of the lexical scoping of C<@_>.  This is a bug
  in Perl, and until it is resolved, memoized functions will see a
  slightly different C<caller()> and will perform a little more slowly
  on threaded perls than unthreaded perls.
  
  Some versions of C<DB_File> won't let you store data under a key of
  length 0.  That means that if you have a function C<f> which you
  memoized and the cache is in a C<DB_File> database, then the value of
  C<f()> (C<f> called with no arguments) will not be memoized.  If this
  is a big problem, you can supply a normalizer function that prepends
  C<"x"> to every key.
  
  =head1 MAILING LIST
  
  To join a very low-traffic mailing list for announcements about
  C<Memoize>, send an empty note to C<mjd-perl-memoize-request@plover.com>.
  
  =head1 AUTHOR
  
  Mark-Jason Dominus (C<mjd-perl-memoize+@plover.com>), Plover Systems co.
  
  See the C<Memoize.pm> Page at http://perl.plover.com/Memoize/
  for news and upgrades.  Near this page, at
  http://perl.plover.com/MiniMemoize/ there is an article about
  memoization and about the internals of Memoize that appeared in The
  Perl Journal, issue #13.  (This article is also included in the
  Memoize distribution as `article.html'.)
  
  The author's book I<Higher-Order Perl> (2005, ISBN 1558607013, published
  by Morgan Kaufmann) discusses memoization (and many other 
  topics) in tremendous detail. It is available on-line for free.
  For more information, visit http://hop.perl.plover.com/ .
  
  To join a mailing list for announcements about C<Memoize>, send an
  empty message to C<mjd-perl-memoize-request@plover.com>.  This mailing
  list is for announcements only and has extremely low traffic---fewer than
  two messages per year.
  
  =head1 COPYRIGHT AND LICENSE
  
  Copyright 1998, 1999, 2000, 2001, 2012  by Mark Jason Dominus
  
  This library is free software; you may redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =head1 THANK YOU
  
  Many thanks to Florian Ragwitz for administration and packaging
  assistance, to John Tromp for bug reports, to Jonathan Roy for bug reports
  and suggestions, to Michael Schwern for other bug reports and patches,
  to Mike Cariaso for helping me to figure out the Right Thing to Do
  About Expiration, to Joshua Gerth, Joshua Chamas, Jonathan Roy
  (again), Mark D. Anderson, and Andrew Johnson for more suggestions
  about expiration, to Brent Powers for the Memoize::ExpireLRU module,
  to Ariel Scolnicov for delightful messages about the Fibonacci
  function, to Dion Almaer for thought-provoking suggestions about the
  default normalizer, to Walt Mankowski and Kurt Starsinic for much help
  investigating problems under threaded Perl, to Alex Dudkevich for
  reporting the bug in prototyped functions and for checking my patch,
  to Tony Bass for many helpful suggestions, to Jonathan Roy (again) for
  finding a use for C<unmemoize()>, to Philippe Verdret for enlightening
  discussion of C<Hook::PrePostCall>, to Nat Torkington for advice I
  ignored, to Chris Nandor for portability advice, to Randal Schwartz
  for suggesting the 'C<flush_cache> function, and to Jenda Krynicky for
  being a light in the world.
  
  Special thanks to Jarkko Hietaniemi, the 5.8.0 pumpking, for including
  this module in the core and for his patient and helpful guidance
  during the integration process.
  
  =cut
MEMOIZE

$fatpacked{"Memoize/AnyDBM_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_ANYDBM_FILE';
  package Memoize::AnyDBM_File;
  
  =head1 NAME
  
  Memoize::AnyDBM_File - glue to provide EXISTS for AnyDBM_File for Storable use
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use vars qw(@ISA $VERSION);
  $VERSION = '1.03';
  @ISA = qw(DB_File GDBM_File Memoize::NDBM_File Memoize::SDBM_File ODBM_File) unless @ISA;
  
  my $verbose = 1;
  
  my $mod;
  for $mod (@ISA) {
  #  (my $truemod = $mod) =~ s/^Memoize:://;
  #  my $file = "$mod.pm";
  #  $file =~ s{::}{/}g;
    if (eval "require $mod") {
      print STDERR "AnyDBM_File => Selected $mod.\n" if $Verbose;
      @ISA = ($mod);	# if we leave @ISA alone, warnings abound
      return 1;
    }
  }
  
  die "No DBM package was successfully found or installed";
MEMOIZE_ANYDBM_FILE

$fatpacked{"Memoize/Expire.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_EXPIRE';
  
  package Memoize::Expire;
  # require 5.00556;
  use Carp;
  $DEBUG = 0;
  $VERSION = '1.03';
  
  # This package will implement expiration by prepending a fixed-length header
  # to the font of the cached data.  The format of the header will be:
  # (4-byte number of last-access-time)  (For LRU when I implement it)
  # (4-byte expiration time: unsigned seconds-since-unix-epoch)
  # (2-byte number-of-uses-before-expire)
  
  sub _header_fmt () { "N N n" }
  sub _header_size () { length(_header_fmt) }
  
  # Usage:  memoize func 
  #         TIE => [Memoize::Expire, LIFETIME => sec, NUM_USES => n,
  #                 TIE => [...] ]
  
  BEGIN {
    eval {require Time::HiRes};
    unless ($@) {
      Time::HiRes->import('time');
    }
  }
  
  sub TIEHASH {
    my ($package, %args) = @_;
    my %cache;
    if ($args{TIE}) {
      my ($module, @opts) = @{$args{TIE}};
      my $modulefile = $module . '.pm';
      $modulefile =~ s{::}{/}g;
      eval { require $modulefile };
      if ($@) {
        croak "Memoize::Expire: Couldn't load hash tie module `$module': $@; aborting";
      }
      my $rc = (tie %cache => $module, @opts);
      unless ($rc) {
        croak "Memoize::Expire: Couldn't tie hash to `$module': $@; aborting";
      }
    }
    $args{LIFETIME} ||= 0;
    $args{NUM_USES} ||= 0;
    $args{C} = \%cache;
    bless \%args => $package;
  }
  
  sub STORE {
    $DEBUG and print STDERR " >> Store $_[1] $_[2]\n";
    my ($self, $key, $value) = @_;
    my $expire_time = $self->{LIFETIME} > 0 ? $self->{LIFETIME} + time : 0;
    # The call that results in a value to store into the cache is the
    # first of the NUM_USES allowed calls.
    my $header = _make_header(time, $expire_time, $self->{NUM_USES}-1);
    $self->{C}{$key} = $header . $value;
    $value;
  }
  
  sub FETCH {
    $DEBUG and print STDERR " >> Fetch cached value for $_[1]\n";
    my ($data, $last_access, $expire_time, $num_uses_left) = _get_item($_[0]{C}{$_[1]});
    $DEBUG and print STDERR " >>   (ttl: ", ($expire_time-time()), ", nuses: $num_uses_left)\n";
    $num_uses_left--;
    $last_access = time;
    _set_header(@_, $data, $last_access, $expire_time, $num_uses_left);
    $data;
  }
  
  sub EXISTS {
    $DEBUG and print STDERR " >> Exists $_[1]\n";
    unless (exists $_[0]{C}{$_[1]}) {
      $DEBUG and print STDERR "    Not in underlying hash at all.\n";
      return 0;
    }
    my $item = $_[0]{C}{$_[1]};
    my ($last_access, $expire_time, $num_uses_left) = _get_header($item);
    my $ttl = $expire_time - time;
    if ($DEBUG) {
      $_[0]{LIFETIME} and print STDERR "    Time to live for this item: $ttl\n";
      $_[0]{NUM_USES} and print STDERR "    Uses remaining: $num_uses_left\n";
    }
    if (   (! $_[0]{LIFETIME} || $expire_time > time)
        && (! $_[0]{NUM_USES} || $num_uses_left > 0 )) {
  	    $DEBUG and print STDERR "    (Still good)\n";
      return 1;
    } else {
      $DEBUG and print STDERR "    (Expired)\n";
      return 0;
    }
  }
  
  # Arguments: last access time, expire time, number of uses remaining
  sub _make_header {
    pack "N N n", @_;
  }
  
  sub _strip_header {
    substr($_[0], 10);
  }
  
  # Arguments: last access time, expire time, number of uses remaining
  sub _set_header {
    my ($self, $key, $data, @header) = @_;
    $self->{C}{$key} = _make_header(@header) . $data;
  }
  
  sub _get_item {
    my $data = substr($_[0], 10);
    my @header = unpack "N N n", substr($_[0], 0, 10);
  #  print STDERR " >> _get_item: $data => $data @header\n";
    ($data, @header);
  }
  
  # Return last access time, expire time, number of uses remaining
  sub _get_header  {
    unpack "N N n", substr($_[0], 0, 10);
  }
  
  1;
  
  =head1 NAME 
  
  Memoize::Expire - Plug-in module for automatic expiration of memoized values
  
  =head1 SYNOPSIS
  
    use Memoize;
    use Memoize::Expire;
    tie my %cache => 'Memoize::Expire',
  	  	     LIFETIME => $lifetime,    # In seconds
  		     NUM_USES => $n_uses;
  
    memoize 'function', SCALAR_CACHE => [HASH => \%cache ];
  
  =head1 DESCRIPTION
  
  Memoize::Expire is a plug-in module for Memoize.  It allows the cached
  values for memoized functions to expire automatically.  This manual
  assumes you are already familiar with the Memoize module.  If not, you
  should study that manual carefully first, paying particular attention
  to the HASH feature.
  
  Memoize::Expire is a layer of software that you can insert in between
  Memoize itself and whatever underlying package implements the cache.
  The layer presents a hash variable whose values expire whenever they
  get too old, have been used too often, or both. You tell C<Memoize> to
  use this forgetful hash as its cache instead of the default, which is
  an ordinary hash.
  
  To specify a real-time timeout, supply the C<LIFETIME> option with a
  numeric value.  Cached data will expire after this many seconds, and
  will be looked up afresh when it expires.  When a data item is looked
  up afresh, its lifetime is reset.
  
  If you specify C<NUM_USES> with an argument of I<n>, then each cached
  data item will be discarded and looked up afresh after the I<n>th time
  you access it.  When a data item is looked up afresh, its number of
  uses is reset.
  
  If you specify both arguments, data will be discarded from the cache
  when either expiration condition holds.
  
  Memoize::Expire uses a real hash internally to store the cached data.
  You can use the C<HASH> option to Memoize::Expire to supply a tied
  hash in place of the ordinary hash that Memoize::Expire will normally
  use.  You can use this feature to add Memoize::Expire as a layer in
  between a persistent disk hash and Memoize.  If you do this, you get a
  persistent disk cache whose entries expire automatically.  For
  example:
  
    #   Memoize
    #      |
    #   Memoize::Expire  enforces data expiration policy
    #      |
    #   DB_File  implements persistence of data in a disk file
    #      |
    #   Disk file
  
    use Memoize;
    use Memoize::Expire;
    use DB_File;
  
    # Set up persistence
    tie my %disk_cache => 'DB_File', $filename, O_CREAT|O_RDWR, 0666];
  
    # Set up expiration policy, supplying persistent hash as a target
    tie my %cache => 'Memoize::Expire', 
  	  	     LIFETIME => $lifetime,    # In seconds
  		     NUM_USES => $n_uses,
                       HASH => \%disk_cache; 
  
    # Set up memoization, supplying expiring persistent hash for cache
    memoize 'function', SCALAR_CACHE => [ HASH => \%cache ];
  
  =head1 INTERFACE
  
  There is nothing special about Memoize::Expire.  It is just an
  example.  If you don't like the policy that it implements, you are
  free to write your own expiration policy module that implements
  whatever policy you desire.  Here is how to do that.  Let us suppose
  that your module will be named MyExpirePolicy.
  
  Short summary: You need to create a package that defines four methods:
  
  =over 4
  
  =item 
  TIEHASH
  
  Construct and return cache object.
  
  =item 
  EXISTS
  
  Given a function argument, is the corresponding function value in the
  cache, and if so, is it fresh enough to use?
  
  =item
  FETCH
  
  Given a function argument, look up the corresponding function value in
  the cache and return it.
  
  =item 
  STORE
  
  Given a function argument and the corresponding function value, store
  them into the cache.
  
  =item
  CLEAR
  
  (Optional.)  Flush the cache completely.
  
  =back
  
  The user who wants the memoization cache to be expired according to
  your policy will say so by writing
  
    tie my %cache => 'MyExpirePolicy', args...;
    memoize 'function', SCALAR_CACHE => [HASH => \%cache];
  
  This will invoke C<< MyExpirePolicy->TIEHASH(args) >>.
  MyExpirePolicy::TIEHASH should do whatever is appropriate to set up
  the cache, and it should return the cache object to the caller.
  
  For example, MyExpirePolicy::TIEHASH might create an object that
  contains a regular Perl hash (which it will to store the cached
  values) and some extra information about the arguments and how old the
  data is and things like that.  Let us call this object `C'.
  
  When Memoize needs to check to see if an entry is in the cache
  already, it will invoke C<< C->EXISTS(key) >>.  C<key> is the normalized
  function argument.  MyExpirePolicy::EXISTS should return 0 if the key
  is not in the cache, or if it has expired, and 1 if an unexpired value
  is in the cache.  It should I<not> return C<undef>, because there is a
  bug in some versions of Perl that will cause a spurious FETCH if the
  EXISTS method returns C<undef>.
  
  If your EXISTS function returns true, Memoize will try to fetch the
  cached value by invoking C<< C->FETCH(key) >>.  MyExpirePolicy::FETCH should
  return the cached value.  Otherwise, Memoize will call the memoized
  function to compute the appropriate value, and will store it into the
  cache by calling C<< C->STORE(key, value) >>.
  
  Here is a very brief example of a policy module that expires each
  cache item after ten seconds.
  
  	package Memoize::TenSecondExpire;
  
  	sub TIEHASH {
  	  my ($package, %args) = @_;
            my $cache = $args{HASH} || {};
  	  bless $cache => $package;
  	}
  
  	sub EXISTS {
  	  my ($cache, $key) = @_;
  	  if (exists $cache->{$key} && 
                $cache->{$key}{EXPIRE_TIME} > time) {
  	    return 1
  	  } else {
  	    return 0;  # Do NOT return `undef' here.
  	  }
  	}
  
  	sub FETCH {
  	  my ($cache, $key) = @_;
  	  return $cache->{$key}{VALUE};
  	}
  
  	sub STORE {
  	  my ($cache, $key, $newvalue) = @_;
  	  $cache->{$key}{VALUE} = $newvalue;
  	  $cache->{$key}{EXPIRE_TIME} = time + 10;
  	}
  
  To use this expiration policy, the user would say
  
  	use Memoize;
          tie my %cache10sec => 'Memoize::TenSecondExpire';
  	memoize 'function', SCALAR_CACHE => [HASH => \%cache10sec];
  
  Memoize would then call C<function> whenever a cached value was
  entirely absent or was older than ten seconds.
  
  You should always support a C<HASH> argument to C<TIEHASH> that ties
  the underlying cache so that the user can specify that the cache is
  also persistent or that it has some other interesting semantics.  The
  example above demonstrates how to do this, as does C<Memoize::Expire>.
  
  Another sample module, L<Memoize::Saves>, is available in a separate
  distribution on CPAN.  It implements a policy that allows you to
  specify that certain function values would always be looked up afresh.
  See the documentation for details.
  
  =head1 ALTERNATIVES
  
  Brent Powers has a C<Memoize::ExpireLRU> module that was designed to
  work with Memoize and provides expiration of least-recently-used data.
  The cache is held at a fixed number of entries, and when new data
  comes in, the least-recently used data is expired.  See
  L<http://search.cpan.org/search?mode=module&query=ExpireLRU>.
  
  Joshua Chamas's Tie::Cache module may be useful as an expiration
  manager.  (If you try this, let me know how it works out.)
  
  If you develop any useful expiration managers that you think should be
  distributed with Memoize, please let me know.
  
  =head1 CAVEATS
  
  This module is experimental, and may contain bugs.  Please report bugs
  to the address below.
  
  Number-of-uses is stored as a 16-bit unsigned integer, so can't exceed
  65535.
  
  Because of clock granularity, expiration times may occur up to one
  second sooner than you expect.  For example, suppose you store a value
  with a lifetime of ten seconds, and you store it at 12:00:00.998 on a
  certain day.  Memoize will look at the clock and see 12:00:00.  Then
  9.01 seconds later, at 12:00:10.008 you try to read it back.  Memoize
  will look at the clock and see 12:00:10 and conclude that the value
  has expired.  This will probably not occur if you have
  C<Time::HiRes> installed.
  
  =head1 AUTHOR
  
  Mark-Jason Dominus (mjd-perl-memoize+@plover.com)
  
  Mike Cariaso provided valuable insight into the best way to solve this
  problem.
  
  =head1 SEE ALSO
  
  perl(1)
  
  The Memoize man page.
  
  http://www.plover.com/~mjd/perl/Memoize/  (for news and updates)
  
  I maintain a mailing list on which I occasionally announce new
  versions of Memoize.  The list is for announcements only, not
  discussion.  To join, send an empty message to
  mjd-perl-memoize-request@Plover.com.
  
  =cut
MEMOIZE_EXPIRE

$fatpacked{"Memoize/ExpireFile.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_EXPIREFILE';
  package Memoize::ExpireFile;
  
  =head1 NAME
  
  Memoize::ExpireFile - test for Memoize expiration semantics
  
  =head1 DESCRIPTION
  
  See L<Memoize::Expire>.
  
  =cut
  
  $VERSION = '1.03';
  use Carp;
  
  my $Zero = pack("N", 0);
  
  sub TIEHASH {
    my ($package, %args) = @_;
    my $cache = $args{HASH} || {};
    bless {ARGS => \%args, C => $cache} => $package;
  }
  
  
  sub STORE {
  #  print "Expiry manager STORE handler\n";
    my ($self, $key, $data) = @_;
    my $cache = $self->{C};
    my $cur_date = pack("N", (stat($key))[9]);
    $cache->{"C$key"} = $data;
    $cache->{"T$key"} = $cur_date;
  }
  
  sub FETCH {
    my ($self, $key) = @_;
    $self->{C}{"C$key"};
  }
  
  sub EXISTS {
  #  print "Expiry manager EXISTS handler\n";
    my ($self, $key) = @_;
    my $cache_date = $self->{C}{"T$key"} || $Zero;
    my $file_date = pack("N", (stat($key))[9]);#
  #  if ($self->{ARGS}{CHECK_DATE} && $old_date gt $cur_date) {
  #    return $self->{ARGS}{CHECK_DATE}->($key, $old_date, $cur_date);
  #  } 
    my $res = $cache_date ge $file_date;
  #  print $res ? "... still good\n" : "... expired\n";
    $res;
  }
  
  1;
MEMOIZE_EXPIREFILE

$fatpacked{"Memoize/ExpireTest.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_EXPIRETEST';
  package Memoize::ExpireTest;
  
  =head1 NAME
  
  Memoize::ExpireTest - test for Memoize expiration semantics
  
  =head1 DESCRIPTION
  
  This module is just for testing expiration semantics.  It's not a very
  good example of how to write an expiration module.
  
  If you are looking for an example, I recommend that you look at the
  simple example in the Memoize::Expire documentation, or at the code
  for Memoize::Expire itself.
  
  If you have questions, I will be happy to answer them if you send them
  to mjd-perl-memoize+@plover.com.
  
  =cut
  
  $VERSION = '1.03';
  my %cache;
  
  sub TIEHASH {	
    my ($pack) = @_;
    bless \%cache => $pack;
  }
  
  sub EXISTS {
    my ($cache, $key) = @_;
    exists $cache->{$key} ? 1 : 0;
  }
  
  sub FETCH {
    my ($cache, $key) = @_;
    $cache->{$key};
  }
  
  sub STORE {
    my ($cache, $key, $val) = @_;
    $cache->{$key} = $val;
  }
  
  sub expire {
    my ($key) = @_;
    delete $cache{$key};
  }
  
  1;
MEMOIZE_EXPIRETEST

$fatpacked{"Memoize/NDBM_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_NDBM_FILE';
  package Memoize::NDBM_File;
  
  =head1 NAME
  
  Memoize::NDBM_File - glue to provide EXISTS for NDBM_File for Storable use
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use NDBM_File;
  @ISA = qw(NDBM_File);
  $VERSION = '1.03';
  
  $Verbose = 0;
  
  sub AUTOLOAD {
    warn "Nonexistent function $AUTOLOAD invoked in Memoize::NDBM_File\n";
  }
  
  sub import {
    warn "Importing Memoize::NDBM_File\n" if $Verbose;
  }
  
  
  my %keylist;
  
  # This is so ridiculous...
  sub _backhash {
    my $self = shift;
    my %fakehash;
    my $k; 
    for ($k = $self->FIRSTKEY(); defined $k; $k = $self->NEXTKEY($k)) {
      $fakehash{$k} = undef;
    }
    $keylist{$self} = \%fakehash;
  }
  
  sub EXISTS {
    warn "Memoize::NDBM_File EXISTS (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    my $r = exists $keylist{$self}{$_[0]};
    warn "Memoize::NDBM_File EXISTS (@_) ==> $r\n" if $Verbose;
    $r;
  }
  
  sub DEFINED {
    warn "Memoize::NDBM_File DEFINED (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    defined $keylist{$self}{$_[0]};
  }
  
  sub DESTROY {
    warn "Memoize::NDBM_File DESTROY (@_)\n" if $Verbose;
    my $self = shift;
    delete $keylist{$self};   # So much for reference counting...
    $self->SUPER::DESTROY(@_);
  }
  
  # Maybe establish the keylist at TIEHASH time instead?
  
  sub STORE {
    warn "Memoize::NDBM_File STORE (@_)\n" if $VERBOSE;
    my $self = shift;
    $keylist{$self}{$_[0]} = undef;
    $self->SUPER::STORE(@_);
  }
  
  
  
  # Inherit FETCH and TIEHASH
  
  1;
MEMOIZE_NDBM_FILE

$fatpacked{"Memoize/SDBM_File.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_SDBM_FILE';
  package Memoize::SDBM_File;
  
  =head1 NAME
  
  Memoize::SDBM_File - glue to provide EXISTS for SDBM_File for Storable use
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use SDBM_File;
  @ISA = qw(SDBM_File);
  $VERSION = '1.03';
  
  $Verbose = 0;
  
  sub AUTOLOAD {
    warn "Nonexistent function $AUTOLOAD invoked in Memoize::SDBM_File\n";
  }
  
  sub import {
    warn "Importing Memoize::SDBM_File\n" if $Verbose;
  }
  
  
  my %keylist;
  
  # This is so ridiculous...
  sub _backhash {
    my $self = shift;
    my %fakehash;
    my $k; 
    for ($k = $self->FIRSTKEY(); defined $k; $k = $self->NEXTKEY($k)) {
      $fakehash{$k} = undef;
    }
    $keylist{$self} = \%fakehash;
  }
  
  sub EXISTS {
    warn "Memoize::SDBM_File EXISTS (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    my $r = exists $keylist{$self}{$_[0]};
    warn "Memoize::SDBM_File EXISTS (@_) ==> $r\n" if $Verbose;
    $r;
  }
  
  sub DEFINED {
    warn "Memoize::SDBM_File DEFINED (@_)\n" if $Verbose;
    my $self = shift;
    _backhash($self)  unless exists $keylist{$self};
    defined $keylist{$self}{$_[0]};
  }
  
  sub DESTROY {
    warn "Memoize::SDBM_File DESTROY (@_)\n" if $Verbose;
    my $self = shift;
    delete $keylist{$self};   # So much for reference counting...
    $self->SUPER::DESTROY(@_);
  }
  
  # Maybe establish the keylist at TIEHASH time instead?
  
  sub STORE {
    warn "Memoize::SDBM_File STORE (@_)\n" if $VERBOSE;
    my $self = shift;
    $keylist{$self}{$_[0]} = undef;
    $self->SUPER::STORE(@_);
  }
  
  # Inherit FETCH and TIEHASH
  
  1;
MEMOIZE_SDBM_FILE

$fatpacked{"Memoize/Storable.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MEMOIZE_STORABLE';
  package Memoize::Storable;
  
  =head1 NAME
  
  Memoize::Storable - store Memoized data in Storable database
  
  =head1 DESCRIPTION
  
  See L<Memoize>.
  
  =cut
  
  use Storable ();
  $VERSION = '1.03';
  $Verbose = 0;
  
  sub TIEHASH {
    require Carp if $Verbose;
    my $package = shift;
    my $filename = shift;
    my $truehash = (-e $filename) ? Storable::retrieve($filename) : {};
    my %options;
    print STDERR "Memoize::Storable::TIEHASH($filename, @_)\n" if $Verbose;
    @options{@_} = ();
    my $self = 
      {FILENAME => $filename, 
       H => $truehash, 
       OPTIONS => \%options
      };
    bless $self => $package;
  }
  
  sub STORE {
    require Carp if $Verbose;
    my $self = shift;
    print STDERR "Memoize::Storable::STORE(@_)\n" if $Verbose;
    $self->{H}{$_[0]} = $_[1];
  }
  
  sub FETCH {
    require Carp if $Verbose;
    my $self = shift;
    print STDERR "Memoize::Storable::FETCH(@_)\n" if $Verbose;
    $self->{H}{$_[0]};
  }
  
  sub EXISTS {
    require Carp if $Verbose;
    my $self = shift;
    print STDERR "Memoize::Storable::EXISTS(@_)\n" if $Verbose;
    exists $self->{H}{$_[0]};
  }
  
  sub DESTROY {
    require Carp if $Verbose;
    my $self= shift;
    print STDERR "Memoize::Storable::DESTROY(@_)\n" if $Verbose;
    if ($self->{OPTIONS}{'nstore'}) {
      Storable::nstore($self->{H}, $self->{FILENAME});
    } else {
      Storable::store($self->{H}, $self->{FILENAME});
    }
  }
  
  sub FIRSTKEY {
    'Fake hash from Memoize::Storable';
  }
  
  sub NEXTKEY {
    undef;
  }
  1;
MEMOIZE_STORABLE

$fatpacked{"Module/CoreList.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_CORELIST';
  package Module::CoreList;
  use strict;
  use vars qw/$VERSION %released %version %families %upstream
  	    %bug_tracker %deprecated %delta/;
  use Module::CoreList::TieHashDelta;
  use version;
  $VERSION = '5.20160520';
  
  sub _released_order {   # Sort helper, to make '?' sort after everything else
      (substr($released{$a}, 0, 1) eq "?")
      ? ((substr($released{$b}, 0, 1) eq "?")
          ? 0
          : 1)
      : ((substr($released{$b}, 0, 1) eq "?")
          ? -1
          : $released{$a} cmp $released{$b} )
  }
  
  my $dumpinc = 0;
  sub import {
      my $self = shift;
      my $what = shift || '';
      if ($what eq 'dumpinc') {
          $dumpinc = 1;
      }
  }
  
  END {
      print "---INC---\n", join "\n" => keys %INC
        if $dumpinc;
  }
  
  
  sub first_release_raw {
      my $module = shift;
      $module = shift if eval { $module->isa(__PACKAGE__) }
        and scalar @_ and $_[0] =~ m#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z#;
      my $version = shift;
  
      my @perls = $version
          ? grep { defined $version{$_}{ $module } &&
                          $version{$_}{ $module } ge $version } keys %version
          : grep { exists $version{$_}{ $module }             } keys %version;
  
      return @perls;
  }
  
  sub first_release_by_date {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort _released_order @perls)[0];
  }
  
  sub first_release {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort { $a cmp $b } @perls)[0];
  }
  
  sub find_modules {
      my $regex = shift;
      $regex = shift if eval { $regex->isa(__PACKAGE__) };
      my @perls = @_;
      @perls = keys %version unless @perls;
  
      my %mods;
      foreach (@perls) {
          while (my ($k, $v) = each %{$version{$_}}) {
              $mods{$k}++ if $k =~ $regex;
          }
      }
      return sort keys %mods
  }
  
  sub find_version {
      my $v = shift;
      if ($v->isa(__PACKAGE__)) {
          $v = shift;
          return if not defined $v;
      }
      return $version{$v} if defined $version{$v};
      return;
  }
  
  sub is_deprecated {
      my $module = shift;
      $module = shift if eval { $module->isa(__PACKAGE__) }
        and scalar @_ and $_[0] =~ m#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z#;
      my $perl_version = shift;
      $perl_version ||= $];
      return unless $module && exists $deprecated{$perl_version}{$module};
      return $deprecated{$perl_version}{$module};
  }
  
  sub deprecated_in {
      my $module = shift;
      $module = shift if eval { $module->isa(__PACKAGE__) }
        and scalar @_ and $_[0] =~ m#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z#;
      return unless $module;
      my @perls = grep { exists $deprecated{$_}{$module} } keys %deprecated;
      return unless @perls;
      require List::Util;
      return List::Util::minstr(@perls);
  }
  
  sub removed_from {
    my @perls = &removed_raw;
    return shift @perls;
  }
  
  sub removed_from_by_date {
    my @perls = sort _released_order &removed_raw;
    return shift @perls;
  }
  
  sub removed_raw {
    my $mod = shift;
    $mod = shift if eval { $mod->isa(__PACKAGE__) }
        and scalar @_ and $_[0] =~ m#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z#;
    return unless my @perls = sort { $a cmp $b } first_release_raw($mod);
    my $last = pop @perls;
    my @removed = grep { $_ > $last } sort { $a cmp $b } keys %version;
    return @removed;
  }
  
  sub changes_between {
    my $left_ver = shift;
    $left_ver = shift if eval { $left_ver->isa(__PACKAGE__) };
    my $right_ver = shift;
  
    my $left  = $version{ $left_ver };
    my $right = $version{ $right_ver };
  
    my %uniq = (%$left, %$right);
  
    my %changes;
    for my $lib (keys %uniq) {
        my $lhs = exists $left->{ $lib }
                ? (defined $left->{ $lib } ? $left->{ $lib } : '(undef)')
                : '(absent)';
        my $rhs = exists $right->{ $lib }
                ? (defined $right->{ $lib } ? $right->{ $lib } : '(undef)')
                : '(absent)';
  
        next if $lhs eq $rhs;
  
        my $change = {
          (exists $left->{$lib}  ? (left  => $left->{$lib})  : ()),
          (exists $right->{$lib} ? (right => $right->{$lib}) : ()),
        };
  
        $changes{$lib} = $change;
    }
  
    return %changes;
  }
  
  # When things escaped.
  # NB. If you put version numbers with trailing zeroes here, you
  # should also add an alias for the numerical ($]) version; see
  # just before the __END__ of this module.
  %released = (
      5.000    => '1994-10-17',
      5.001    => '1995-03-14',
      5.002    => '1996-02-29',
      5.00307  => '1996-10-10',
      5.004    => '1997-05-15',
      5.005    => '1998-07-22',
      5.00503  => '1999-03-28',
      5.00405  => '1999-04-29',
      5.006    => '2000-03-22',
      5.006001 => '2001-04-08',
      5.007003 => '2002-03-05',
      5.008    => '2002-07-19',
      5.008001 => '2003-09-25',
      5.009    => '2003-10-27',
      5.008002 => '2003-11-05',
      5.006002 => '2003-11-15',
      5.008003 => '2004-01-14',
      5.00504  => '2004-02-23',
      5.009001 => '2004-03-16',
      5.008004 => '2004-04-21',
      5.008005 => '2004-07-19',
      5.008006 => '2004-11-27',
      5.009002 => '2005-04-01',
      5.008007 => '2005-05-30',
      5.009003 => '2006-01-28',
      5.008008 => '2006-01-31',
      5.009004 => '2006-08-15',
      5.009005 => '2007-07-07',
      5.010000 => '2007-12-18',
      5.008009 => '2008-12-14',
      5.010001 => '2009-08-22',
      5.011000 => '2009-10-02',
      5.011001 => '2009-10-20',
      5.011002 => '2009-11-20',
      5.011003 => '2009-12-20',
      5.011004 => '2010-01-20',
      5.011005 => '2010-02-20',
      5.012000 => '2010-04-12',
      5.013000 => '2010-04-20',
      5.012001 => '2010-05-16',
      5.013001 => '2010-05-20',
      5.013002 => '2010-06-22',
      5.013003 => '2010-07-20',
      5.013004 => '2010-08-20',
      5.012002 => '2010-09-06',
      5.013005 => '2010-09-19',
      5.013006 => '2010-10-20',
      5.013007 => '2010-11-20',
      5.013008 => '2010-12-20',
      5.012003 => '2011-01-21',
      5.013009 => '2011-01-20',
      5.013010 => '2011-02-20',
      5.013011 => '2011-03-20',
      5.014000 => '2011-05-14',
      5.012004 => '2011-06-20',
      5.012005 => '2012-11-10',
      5.014001 => '2011-06-16',
      5.015000 => '2011-06-20',
      5.015001 => '2011-07-20',
      5.015002 => '2011-08-20',
      5.014002 => '2011-09-26',
      5.015003 => '2011-09-20',
      5.015004 => '2011-10-20',
      5.015005 => '2011-11-20',
      5.015006 => '2011-12-20',
      5.015007 => '2012-01-20',
      5.015008 => '2012-02-20',
      5.015009 => '2012-03-20',
      5.016000 => '2012-05-20',
      5.016001 => '2012-08-08',
      5.016002 => '2012-11-01',
      5.017000 => '2012-05-26',
      5.017001 => '2012-06-20',
      5.017002 => '2012-07-20',
      5.017003 => '2012-08-20',
      5.017004 => '2012-09-20',
      5.014003 => '2012-10-12',
      5.017005 => '2012-10-20',
      5.017006 => '2012-11-20',
      5.017007 => '2012-12-18',
      5.017008 => '2013-01-20',
      5.017009 => '2013-02-20',
      5.014004 => '2013-03-10',
      5.016003 => '2013-03-11',
      5.017010 => '2013-03-21',
      5.017011 => '2013-04-20',
      5.018000 => '2013-05-18',
      5.019000 => '2013-05-20',
      5.019001 => '2013-06-21',
      5.019002 => '2013-07-22',
      5.018001 => '2013-08-12',
      5.019003 => '2013-08-20',
      5.019004 => '2013-09-20',
      5.019005 => '2013-10-20',
      5.019006 => '2013-11-20',
      5.019007 => '2013-12-20',
      5.018002 => '2014-01-06',
      5.018003 => '2014-10-01',
      5.018004 => '2014-10-01',
      5.019008 => '2014-01-20',
      5.019009 => '2014-02-20',
      5.01901  => '2014-03-20',
      5.019011 => '2014-04-20',
      5.020000 => '2014-05-27',
      5.021000 => '2014-05-27',
      5.021001 => '2014-06-20',
      5.021002 => '2014-07-20',
      5.021003 => '2014-08-20',
      5.020001 => '2014-09-14',
      5.021004 => '2014-09-20',
      5.021005 => '2014-10-20',
      5.021006 => '2014-11-20',
      5.021007 => '2014-12-20',
      5.021008 => '2015-01-20',
      5.020002 => '2015-02-14',
      5.021009 => '2015-02-21',
      5.021010 => '2015-03-20',
      5.021011 => '2015-04-20',
      5.022000 => '2015-06-01',
      5.023000 => '2015-06-20',
      5.023001 => '2015-07-20',
      5.023002 => '2015-08-20',
      5.020003 => '2015-09-12',
      5.023003 => '2015-09-20',
      5.023004 => '2015-10-20',
      5.023005 => '2015-11-20',
      5.022001 => '2015-12-13',
      5.023006 => '2015-12-21',
      5.023007 => '2016-01-20',
      5.023008 => '2016-02-20',
      5.023009 => '2016-03-20',
      5.022002 => '2016-04-29',
      5.024000 => '2016-05-09',
      5.025000 => '2016-05-09',
      5.025001 => '2016-05-20',
    );
  
  for my $version ( sort { $a <=> $b } keys %released ) {
      my $family = int ($version * 1000) / 1000;
      push @{ $families{ $family }} , $version;
  }
  
  %delta = (
      5 => {
          changed => {
              'AnyDBM_File'           => undef,
              'AutoLoader'            => undef,
              'AutoSplit'             => undef,
              'Benchmark'             => undef,
              'Carp'                  => undef,
              'Cwd'                   => undef,
              'DB_File'               => undef,
              'DynaLoader'            => undef,
              'English'               => undef,
              'Env'                   => undef,
              'Exporter'              => undef,
              'ExtUtils::MakeMaker'   => undef,
              'Fcntl'                 => undef,
              'File::Basename'        => undef,
              'File::CheckTree'       => undef,
              'File::Find'            => undef,
              'FileHandle'            => undef,
              'GDBM_File'             => undef,
              'Getopt::Long'          => undef,
              'Getopt::Std'           => undef,
              'I18N::Collate'         => undef,
              'IPC::Open2'            => undef,
              'IPC::Open3'            => undef,
              'Math::BigFloat'        => undef,
              'Math::BigInt'          => undef,
              'Math::Complex'         => undef,
              'NDBM_File'             => undef,
              'Net::Ping'             => undef,
              'ODBM_File'             => undef,
              'POSIX'                 => undef,
              'SDBM_File'             => undef,
              'Search::Dict'          => undef,
              'Shell'                 => undef,
              'Socket'                => undef,
              'Sys::Hostname'         => undef,
              'Sys::Syslog'           => undef,
              'Term::Cap'             => undef,
              'Term::Complete'        => undef,
              'Test::Harness'         => undef,
              'Text::Abbrev'          => undef,
              'Text::ParseWords'      => undef,
              'Text::Soundex'         => undef,
              'Text::Tabs'            => undef,
              'TieHash'               => undef,
              'Time::Local'           => undef,
              'integer'               => undef,
              'less'                  => undef,
              'sigtrap'               => undef,
              'strict'                => undef,
              'subs'                  => undef,
          },
          removed => {
          }
      },
      5.001 => {
          delta_from => 5,
          changed => {
              'ExtUtils::Liblist'     => undef,
              'ExtUtils::Manifest'    => undef,
              'ExtUtils::Mkbootstrap' => undef,
              'File::Path'            => undef,
              'SubstrHash'            => undef,
              'lib'                   => undef,
          },
          removed => {
          }
      },
      5.002 => {
          delta_from => 5.001,
          changed => {
              'DB_File'               => '1.01',
              'Devel::SelfStubber'    => '1.01',
              'DirHandle'             => undef,
              'DynaLoader'            => '1.00',
              'ExtUtils::Install'     => undef,
              'ExtUtils::MM_OS2'      => undef,
              'ExtUtils::MM_Unix'     => undef,
              'ExtUtils::MM_VMS'      => undef,
              'ExtUtils::MakeMaker'   => '5.21',
              'ExtUtils::Manifest'    => '1.22',
              'ExtUtils::Mksymlists'  => '1.00',
              'Fcntl'                 => '1.00',
              'File::Copy'            => '1.5',
              'File::Path'            => '1.01',
              'FileCache'             => undef,
              'FileHandle'            => '1.00',
              'GDBM_File'             => '1.00',
              'Getopt::Long'          => '2.01',
              'NDBM_File'             => '1.00',
              'Net::Ping'             => '1',
              'ODBM_File'             => '1.00',
              'POSIX'                 => '1.00',
              'Pod::Functions'        => undef,
              'Pod::Text'             => undef,
              'SDBM_File'             => '1.00',
              'Safe'                  => '1.00',
              'SelectSaver'           => undef,
              'SelfLoader'            => '1.06',
              'Socket'                => '1.5',
              'Symbol'                => undef,
              'Term::ReadLine'        => undef,
              'Test::Harness'         => '1.07',
              'Text::Wrap'            => undef,
              'Tie::Hash'             => undef,
              'Tie::Scalar'           => undef,
              'Tie::SubstrHash'       => undef,
              'diagnostics'           => undef,
              'overload'              => undef,
              'vars'                  => undef,
          },
          removed => {
              'SubstrHash'            => 1,
              'TieHash'               => 1,
          }
      },
      5.00307 => {
          delta_from => 5.002,
          changed => {
              'Config'                => undef,
              'DB_File'               => '1.03',
              'ExtUtils::Embed'       => '1.18',
              'ExtUtils::Install'     => '1.15',
              'ExtUtils::Liblist'     => '1.20',
              'ExtUtils::MM_Unix'     => '1.107',
              'ExtUtils::MakeMaker'   => '5.38',
              'ExtUtils::Manifest'    => '1.27',
              'ExtUtils::Mkbootstrap' => '1.13',
              'ExtUtils::Mksymlists'  => '1.12',
              'ExtUtils::testlib'     => '1.11',
              'Fatal'                 => undef,
              'File::Basename'        => '2.4',
              'FindBin'               => '1.04',
              'Getopt::Long'          => '2.04',
              'IO'                    => undef,
              'IO::File'              => '1.05',
              'IO::Handle'            => '1.12',
              'IO::Pipe'              => '1.07',
              'IO::Seekable'          => '1.05',
              'IO::Select'            => '1.09',
              'IO::Socket'            => '1.13',
              'Net::Ping'             => '1.01',
              'OS2::ExtAttr'          => '0.01',
              'OS2::PrfDB'            => '0.02',
              'OS2::Process'          => undef,
              'OS2::REXX'             => undef,
              'Opcode'                => '1.01',
              'Safe'                  => '2.06',
              'Test::Harness'         => '1.13',
              'Text::Tabs'            => '96.051501',
              'Text::Wrap'            => '96.041801',
              'UNIVERSAL'             => undef,
              'VMS::Filespec'         => undef,
              'VMS::Stdio'            => '2.0',
              'ops'                   => undef,
              'sigtrap'               => '1.01',
          },
          removed => {
          }
      },
      5.004 => {
          delta_from => 5.00307,
          changed => {
              'Bundle::CPAN'          => '0.02',
              'CGI'                   => '2.36',
              'CGI::Apache'           => '1.01',
              'CGI::Carp'             => '1.06',
              'CGI::Fast'             => '1.00a',
              'CGI::Push'             => '1.00',
              'CGI::Switch'           => '0.05',
              'CPAN'                  => '1.2401',
              'CPAN::FirstTime'       => '1.18',
              'CPAN::Nox'             => undef,
              'Class::Struct'         => undef,
              'Cwd'                   => '2.00',
              'DB_File'               => '1.14',
              'DynaLoader'            => '1.02',
              'ExtUtils::Command'     => '1.00',
              'ExtUtils::Embed'       => '1.2501',
              'ExtUtils::Install'     => '1.16',
              'ExtUtils::Liblist'     => '1.2201',
              'ExtUtils::MM_Unix'     => '1.114',
              'ExtUtils::MM_Win32'    => undef,
              'ExtUtils::MakeMaker'   => '5.4002',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Mksymlists'  => '1.13',
              'ExtUtils::XSSymSet'    => '1.0',
              'Fcntl'                 => '1.03',
              'File::Basename'        => '2.5',
              'File::Compare'         => '1.1001',
              'File::Copy'            => '2.02',
              'File::Path'            => '1.04',
              'File::stat'            => undef,
              'FileHandle'            => '2.00',
              'Getopt::Long'          => '2.10',
              'IO::File'              => '1.0602',
              'IO::Handle'            => '1.1504',
              'IO::Pipe'              => '1.0901',
              'IO::Seekable'          => '1.06',
              'IO::Select'            => '1.10',
              'IO::Socket'            => '1.1602',
              'IPC::Open2'            => '1.01',
              'IPC::Open3'            => '1.0101',
              'Math::Complex'         => '1.01',
              'Math::Trig'            => '1',
              'Net::Ping'             => '2.02',
              'Net::hostent'          => undef,
              'Net::netent'           => undef,
              'Net::protoent'         => undef,
              'Net::servent'          => undef,
              'Opcode'                => '1.04',
              'POSIX'                 => '1.02',
              'Pod::Html'             => undef,
              'Pod::Text'             => '1.0203',
              'SelfLoader'            => '1.07',
              'Socket'                => '1.6',
              'Symbol'                => '1.02',
              'Test::Harness'         => '1.1502',
              'Text::Tabs'            => '96.121201',
              'Text::Wrap'            => '97.011701',
              'Tie::RefHash'          => undef,
              'Time::gmtime'          => '1.01',
              'Time::localtime'       => '1.01',
              'Time::tm'              => undef,
              'User::grent'           => undef,
              'User::pwent'           => undef,
              'VMS::DCLsym'           => '1.01',
              'VMS::Stdio'            => '2.02',
              'autouse'               => '1.01',
              'blib'                  => undef,
              'constant'              => '1.00',
              'locale'                => undef,
              'sigtrap'               => '1.02',
              'vmsish'                => undef,
          },
          removed => {
              'Fatal'                 => 1,
          }
      },
      5.00405 => {
          delta_from => 5.004,
          changed => {
              'AutoLoader'            => '5.56',
              'AutoSplit'             => '1.0303',
              'Bundle::CPAN'          => '0.03',
              'CGI'                   => '2.42',
              'CGI::Apache'           => '1.1',
              'CGI::Carp'             => '1.10',
              'CGI::Cookie'           => '1.06',
              'CGI::Push'             => '1.01',
              'CGI::Switch'           => '0.06',
              'CPAN'                  => '1.40',
              'CPAN::FirstTime'       => '1.30',
              'Cwd'                   => '2.01',
              'DB_File'               => '1.15',
              'DynaLoader'            => '1.03',
              'ExtUtils::Command'     => '1.01',
              'ExtUtils::Embed'       => '1.2505',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.25',
              'ExtUtils::MM_Unix'     => '1.118',
              'ExtUtils::MakeMaker'   => '5.42',
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.16',
              'File::Basename'        => '2.6',
              'File::DosGlob'         => undef,
              'File::Path'            => '1.0402',
              'File::Spec'            => '0.6',
              'File::Spec::Mac'       => '1.0',
              'File::Spec::OS2'       => undef,
              'File::Spec::Unix'      => undef,
              'File::Spec::VMS'       => undef,
              'File::Spec::Win32'     => undef,
              'FindBin'               => '1.41',
              'Getopt::Long'          => '2.19',
              'IO::File'              => '1.06021',
              'IO::Socket'            => '1.1603',
              'IPC::Open3'            => '1.0103',
              'Math::Complex'         => '1.25',
              'NDBM_File'             => '1.01',
              'Pod::Html'             => '1.0101',
              'Pod::Text'             => '1.0204',
              'SelfLoader'            => '1.08',
              'Socket'                => '1.7',
              'Test'                  => '1.04',
              'Test::Harness'         => '1.1602',
              'Text::ParseWords'      => '3.1001',
              'Text::Wrap'            => '98.112902',
              'Tie::Handle'           => undef,
              'attrs'                 => '0.1',
              'base'                  => undef,
              'blib'                  => '1.00',
              're'                    => undef,
              'strict'                => '1.01',
          },
          removed => {
          }
      },
      5.005 => {
          delta_from => 5.00405,
          changed => {
              'AutoLoader'            => undef,
              'AutoSplit'             => '1.0302',
              'B'                     => undef,
              'B::Asmdata'            => undef,
              'B::Assembler'          => undef,
              'B::Bblock'             => undef,
              'B::Bytecode'           => undef,
              'B::C'                  => undef,
              'B::CC'                 => undef,
              'B::Debug'              => undef,
              'B::Deparse'            => '0.56',
              'B::Disassembler'       => undef,
              'B::Lint'               => undef,
              'B::Showlex'            => undef,
              'B::Stackobj'           => undef,
              'B::Terse'              => undef,
              'B::Xref'               => undef,
              'CGI::Carp'             => '1.101',
              'CPAN'                  => '1.3901',
              'CPAN::FirstTime'       => '1.29',
              'DB_File'               => '1.60',
              'Data::Dumper'          => '2.09',
              'Errno'                 => '1.09',
              'ExtUtils::Installed'   => '0.02',
              'ExtUtils::MM_Unix'     => '1.12601',
              'ExtUtils::MakeMaker'   => '5.4301',
              'ExtUtils::Mkbootstrap' => '1.13',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::Packlist'    => '0.03',
              'Fatal'                 => '1.02',
              'File::Path'            => '1.0401',
              'Getopt::Long'          => '2.17',
              'IO::Handle'            => '1.1505',
              'IPC::Msg'              => '1.00',
              'IPC::Open3'            => '1.0102',
              'IPC::Semaphore'        => '1.00',
              'IPC::SysV'             => '1.03',
              'O'                     => undef,
              'OS2::Process'          => '0.2',
              'Pod::Html'             => '1.01',
              'Pod::Text'             => '1.0203',
              'Text::ParseWords'      => '3.1',
              'Text::Wrap'            => '97.02',
              'Thread'                => '1.0',
              'Thread::Queue'         => undef,
              'Thread::Semaphore'     => undef,
              'Thread::Signal'        => undef,
              'Thread::Specific'      => undef,
              'Tie::Array'            => '1.00',
              'VMS::Stdio'            => '2.1',
              'attrs'                 => '1.0',
              'fields'                => '0.02',
              're'                    => '0.02',
          },
          removed => {
              'Bundle::CPAN'          => 1,
          }
      },
      5.00503 => {
          delta_from => 5.005,
          changed => {
              'AutoSplit'             => '1.0303',
              'CGI'                   => '2.46',
              'CGI::Carp'             => '1.13',
              'CGI::Fast'             => '1.01',
              'CPAN'                  => '1.48',
              'CPAN::FirstTime'       => '1.36',
              'CPAN::Nox'             => '1.00',
              'DB_File'               => '1.65',
              'Data::Dumper'          => '2.101',
              'Dumpvalue'             => undef,
              'Errno'                 => '1.111',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.25',
              'ExtUtils::MM_Unix'     => '1.12602',
              'ExtUtils::MakeMaker'   => '5.4302',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::testlib'     => '1.11',
              'FindBin'               => '1.42',
              'Getopt::Long'          => '2.19',
              'Getopt::Std'           => '1.01',
              'IO::Pipe'              => '1.0902',
              'IPC::Open3'            => '1.0103',
              'Math::Complex'         => '1.26',
              'Test'                  => '1.122',
              'Text::Wrap'            => '98.112902',
          },
          removed => {
          }
      },
      5.00504 => {
          delta_from => 5.00503,
          changed => {
              'CPAN::FirstTime'       => '1.36',
              'DB_File'               => '1.807',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.25',
              'ExtUtils::MM_Unix'     => '1.12602',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Miniperl'    => undef,
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::testlib'     => '1.11',
              'File::Compare'         => '1.1002',
              'File::Spec'            => '0.8',
              'File::Spec::Functions' => undef,
              'File::Spec::Mac'       => undef,
              'Getopt::Long'          => '2.20',
              'Pod::Html'             => '1.02',
          },
          removed => {
          }
      },
      5.006 => {
          delta_from => 5.00504,
          changed => {
              'AutoLoader'            => '5.57',
              'AutoSplit'             => '1.0305',
              'B::Deparse'            => '0.59',
              'B::Stash'              => undef,
              'Benchmark'             => '1',
              'ByteLoader'            => '0.03',
              'CGI'                   => '2.56',
              'CGI::Apache'           => undef,
              'CGI::Carp'             => '1.14',
              'CGI::Cookie'           => '1.12',
              'CGI::Fast'             => '1.02',
              'CGI::Pretty'           => '1.03',
              'CGI::Switch'           => undef,
              'CPAN'                  => '1.52',
              'CPAN::FirstTime'       => '1.38',
              'Carp::Heavy'           => undef,
              'Class::Struct'         => '0.58',
              'Cwd'                   => '2.02',
              'DB'                    => '1.0',
              'DB_File'               => '1.72',
              'Devel::DProf'          => '20000000.00_00',
              'Devel::Peek'           => '1.00_01',
              'DynaLoader'            => '1.04',
              'Exporter'              => '5.562',
              'Exporter::Heavy'       => undef,
              'ExtUtils::MM_Cygwin'   => undef,
              'ExtUtils::MM_Unix'     => '1.12603',
              'ExtUtils::MakeMaker'   => '5.45',
              'File::Copy'            => '2.03',
              'File::Glob'            => '0.991',
              'File::Path'            => '1.0403',
              'GDBM_File'             => '1.03',
              'Getopt::Long'          => '2.23',
              'Getopt::Std'           => '1.02',
              'IO'                    => '1.20',
              'IO::Dir'               => '1.03',
              'IO::File'              => '1.08',
              'IO::Handle'            => '1.21',
              'IO::Pipe'              => '1.121',
              'IO::Poll'              => '0.01',
              'IO::Seekable'          => '1.08',
              'IO::Select'            => '1.14',
              'IO::Socket'            => '1.26',
              'IO::Socket::INET'      => '1.25',
              'IO::Socket::UNIX'      => '1.20',
              'JNI'                   => '0.01',
              'JPL::AutoLoader'       => undef,
              'JPL::Class'            => undef,
              'JPL::Compile'          => undef,
              'NDBM_File'             => '1.03',
              'ODBM_File'             => '1.02',
              'OS2::DLL'              => undef,
              'POSIX'                 => '1.03',
              'Pod::Checker'          => '1.098',
              'Pod::Find'             => '0.12',
              'Pod::Html'             => '1.03',
              'Pod::InputObjects'     => '1.12',
              'Pod::Man'              => '1.02',
              'Pod::ParseUtils'       => '0.2',
              'Pod::Parser'           => '1.12',
              'Pod::Plainer'          => '0.01',
              'Pod::Select'           => '1.12',
              'Pod::Text'             => '2.03',
              'Pod::Text::Color'      => '0.05',
              'Pod::Text::Termcap'    => '0.04',
              'Pod::Usage'            => '1.12',
              'SDBM_File'             => '1.02',
              'SelfLoader'            => '1.0901',
              'Shell'                 => '0.2',
              'Socket'                => '1.72',
              'Sys::Hostname'         => '1.1',
              'Sys::Syslog'           => '0.01',
              'Term::ANSIColor'       => '1.01',
              'Test'                  => '1.13',
              'Test::Harness'         => '1.1604',
              'Text::ParseWords'      => '3.2',
              'Text::Soundex'         => '1.0',
              'Text::Tabs'            => '98.112801',
              'Tie::Array'            => '1.01',
              'Tie::Handle'           => '1.0',
              'VMS::Stdio'            => '2.2',
              'XSLoader'              => '0.01',
              'attributes'            => '0.03',
              'autouse'               => '1.02',
              'base'                  => '1.01',
              'bytes'                 => undef,
              'charnames'             => undef,
              'constant'              => '1.02',
              'diagnostics'           => '1.0',
              'fields'                => '1.01',
              'filetest'              => undef,
              'lib'                   => '0.5564',
              'open'                  => undef,
              'utf8'                  => undef,
              'warnings'              => undef,
              'warnings::register'    => undef,
          },
          removed => {
          }
      },
      5.006001 => {
          delta_from => 5.006,
          changed => {
              'AutoLoader'            => '5.58',
              'B::Assembler'          => '0.02',
              'B::Concise'            => '0.51',
              'B::Deparse'            => '0.6',
              'ByteLoader'            => '0.04',
              'CGI'                   => '2.752',
              'CGI::Carp'             => '1.20',
              'CGI::Cookie'           => '1.18',
              'CGI::Pretty'           => '1.05',
              'CGI::Push'             => '1.04',
              'CGI::Util'             => '1.1',
              'CPAN'                  => '1.59_54',
              'CPAN::FirstTime'       => '1.53',
              'Class::Struct'         => '0.59',
              'Cwd'                   => '2.04',
              'DB_File'               => '1.75',
              'Data::Dumper'          => '2.102',
              'ExtUtils::Install'     => '1.28',
              'ExtUtils::Liblist'     => '1.26',
              'ExtUtils::MM_Unix'     => '1.12603',
              'ExtUtils::Manifest'    => '1.33',
              'ExtUtils::Mkbootstrap' => '1.14',
              'ExtUtils::Mksymlists'  => '1.17',
              'ExtUtils::testlib'     => '1.11',
              'File::Path'            => '1.0404',
              'File::Spec'            => '0.82',
              'File::Spec::Epoc'      => undef,
              'File::Spec::Functions' => '1.1',
              'File::Spec::Mac'       => '1.2',
              'File::Spec::OS2'       => '1.1',
              'File::Spec::Unix'      => '1.2',
              'File::Spec::VMS'       => '1.1',
              'File::Spec::Win32'     => '1.2',
              'File::Temp'            => '0.12',
              'GDBM_File'             => '1.05',
              'Getopt::Long'          => '2.25',
              'IO::Poll'              => '0.05',
              'JNI'                   => '0.1',
              'Math::BigFloat'        => '0.02',
              'Math::BigInt'          => '0.01',
              'Math::Complex'         => '1.31',
              'NDBM_File'             => '1.04',
              'ODBM_File'             => '1.03',
              'OS2::REXX'             => '1.00',
              'Pod::Checker'          => '1.2',
              'Pod::Find'             => '0.21',
              'Pod::InputObjects'     => '1.13',
              'Pod::LaTeX'            => '0.53',
              'Pod::Man'              => '1.15',
              'Pod::ParseUtils'       => '0.22',
              'Pod::Parser'           => '1.13',
              'Pod::Select'           => '1.13',
              'Pod::Text'             => '2.08',
              'Pod::Text::Color'      => '0.06',
              'Pod::Text::Overstrike' => '1.01',
              'Pod::Text::Termcap'    => '1',
              'Pod::Usage'            => '1.14',
              'SDBM_File'             => '1.03',
              'SelfLoader'            => '1.0902',
              'Shell'                 => '0.3',
              'Term::ANSIColor'       => '1.03',
              'Test'                  => '1.15',
              'Text::Wrap'            => '2001.0131',
              'Tie::Handle'           => '4.0',
              'Tie::RefHash'          => '1.3',
          },
          removed => {
          }
      },
      5.006002 => {
          delta_from => 5.006001,
          changed => {
              'CPAN::FirstTime'       => '1.53',
              'DB_File'               => '1.806',
              'Data::Dumper'          => '2.121',
              'ExtUtils::Command'     => '1.05',
              'ExtUtils::Command::MM' => '0.03',
              'ExtUtils::Install'     => '1.32',
              'ExtUtils::Installed'   => '0.08',
              'ExtUtils::Liblist'     => '1.01',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM'          => '0.04',
              'ExtUtils::MM_Any'      => '0.07',
              'ExtUtils::MM_BeOS'     => '1.04',
              'ExtUtils::MM_Cygwin'   => '1.06',
              'ExtUtils::MM_DOS'      => '0.02',
              'ExtUtils::MM_MacOS'    => '1.07',
              'ExtUtils::MM_NW5'      => '2.06',
              'ExtUtils::MM_OS2'      => '1.04',
              'ExtUtils::MM_UWIN'     => '0.02',
              'ExtUtils::MM_Unix'     => '1.42',
              'ExtUtils::MM_VMS'      => '5.70',
              'ExtUtils::MM_Win32'    => '1.09',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MY'          => '0.01',
              'ExtUtils::MakeMaker'   => '6.17',
              'ExtUtils::MakeMaker::bytes'=> '0.01',
              'ExtUtils::MakeMaker::vmsish'=> '0.01',
              'ExtUtils::Manifest'    => '1.42',
              'ExtUtils::Mkbootstrap' => '1.15',
              'ExtUtils::Mksymlists'  => '1.19',
              'ExtUtils::Packlist'    => '0.04',
              'ExtUtils::testlib'     => '1.15',
              'File::Spec'            => '0.86',
              'File::Spec::Cygwin'    => '1.1',
              'File::Spec::Epoc'      => '1.1',
              'File::Spec::Functions' => '1.3',
              'File::Spec::Mac'       => '1.4',
              'File::Spec::OS2'       => '1.2',
              'File::Spec::Unix'      => '1.5',
              'File::Spec::VMS'       => '1.4',
              'File::Spec::Win32'     => '1.4',
              'File::Temp'            => '0.14',
              'Safe'                  => '2.10',
              'Test'                  => '1.24',
              'Test::Builder'         => '0.17',
              'Test::Harness'         => '2.30',
              'Test::Harness::Assert' => '0.01',
              'Test::Harness::Iterator'=> '0.01',
              'Test::Harness::Straps' => '0.15',
              'Test::More'            => '0.47',
              'Test::Simple'          => '0.47',
              'Unicode'               => '3.0.1',
              'if'                    => '0.03',
              'ops'                   => '1.00',
          },
          removed => {
          }
      },
      5.007003 => {
          delta_from => 5.006001,
          changed => {
              'AnyDBM_File'           => '1.00',
              'Attribute::Handlers'   => '0.76',
              'AutoLoader'            => '5.59',
              'AutoSplit'             => '1.0307',
              'B'                     => '1.00',
              'B::Asmdata'            => '1.00',
              'B::Assembler'          => '0.04',
              'B::Bblock'             => '1.00',
              'B::Bytecode'           => '1.00',
              'B::C'                  => '1.01',
              'B::CC'                 => '1.00',
              'B::Concise'            => '0.52',
              'B::Debug'              => '1.00',
              'B::Deparse'            => '0.63',
              'B::Disassembler'       => '1.01',
              'B::Lint'               => '1.00',
              'B::Showlex'            => '1.00',
              'B::Stackobj'           => '1.00',
              'B::Stash'              => '1.00',
              'B::Terse'              => '1.00',
              'B::Xref'               => '1.00',
              'Benchmark'             => '1.04',
              'CGI'                   => '2.80',
              'CGI::Apache'           => '1.00',
              'CGI::Carp'             => '1.22',
              'CGI::Cookie'           => '1.20',
              'CGI::Fast'             => '1.04',
              'CGI::Pretty'           => '1.05_00',
              'CGI::Switch'           => '1.00',
              'CGI::Util'             => '1.3',
              'CPAN'                  => '1.59_56',
              'CPAN::FirstTime'       => '1.54',
              'CPAN::Nox'             => '1.00_01',
              'Carp'                  => '1.01',
              'Carp::Heavy'           => '1.01',
              'Class::ISA'            => '0.32',
              'Class::Struct'         => '0.61',
              'Cwd'                   => '2.06',
              'DB_File'               => '1.804',
              'Data::Dumper'          => '2.12',
              'Devel::DProf'          => '20000000.00_01',
              'Devel::PPPort'         => '2.0002',
              'Devel::Peek'           => '1.00_03',
              'Devel::SelfStubber'    => '1.03',
              'Digest'                => '1.00',
              'Digest::MD5'           => '2.16',
              'DirHandle'             => '1.00',
              'Dumpvalue'             => '1.10',
              'Encode'                => '0.40',
              'Encode::CN'            => '0.02',
              'Encode::CN::HZ'        => undef,
              'Encode::Encoding'      => '0.02',
              'Encode::Internal'      => '0.30',
              'Encode::JP'            => '0.02',
              'Encode::JP::Constants' => '1.02',
              'Encode::JP::H2Z'       => '0.77',
              'Encode::JP::ISO_2022_JP'=> undef,
              'Encode::JP::JIS'       => undef,
              'Encode::JP::Tr'        => '0.77',
              'Encode::KR'            => '0.02',
              'Encode::TW'            => '0.02',
              'Encode::Tcl'           => '1.01',
              'Encode::Tcl::Escape'   => '1.01',
              'Encode::Tcl::Extended' => '1.01',
              'Encode::Tcl::HanZi'    => '1.01',
              'Encode::Tcl::Table'    => '1.01',
              'Encode::Unicode'       => '0.30',
              'Encode::XS'            => '0.40',
              'Encode::iso10646_1'    => '0.30',
              'Encode::usc2_le'       => '0.30',
              'Encode::utf8'          => '0.30',
              'English'               => '1.00',
              'Env'                   => '1.00',
              'Exporter'              => '5.566',
              'Exporter::Heavy'       => '5.562',
              'ExtUtils::Command'     => '1.02',
              'ExtUtils::Constant'    => '0.11',
              'ExtUtils::Embed'       => '1.250601',
              'ExtUtils::Install'     => '1.29',
              'ExtUtils::Installed'   => '0.04',
              'ExtUtils::Liblist'     => '1.2701',
              'ExtUtils::MM_BeOS'     => '1.00',
              'ExtUtils::MM_Cygwin'   => '1.00',
              'ExtUtils::MM_OS2'      => '1.00',
              'ExtUtils::MM_Unix'     => '1.12607',
              'ExtUtils::MM_VMS'      => '5.56',
              'ExtUtils::MM_Win32'    => '1.00_02',
              'ExtUtils::MakeMaker'   => '5.48_03',
              'ExtUtils::Manifest'    => '1.35',
              'ExtUtils::Mkbootstrap' => '1.1401',
              'ExtUtils::Mksymlists'  => '1.18',
              'ExtUtils::Packlist'    => '0.04',
              'ExtUtils::testlib'     => '1.1201',
              'Fatal'                 => '1.03',
              'Fcntl'                 => '1.04',
              'File::Basename'        => '2.71',
              'File::CheckTree'       => '4.1',
              'File::Compare'         => '1.1003',
              'File::Copy'            => '2.05',
              'File::DosGlob'         => '1.00',
              'File::Find'            => '1.04',
              'File::Glob'            => '1.01',
              'File::Path'            => '1.05',
              'File::Spec'            => '0.83',
              'File::Spec::Cygwin'    => '1.0',
              'File::Spec::Epoc'      => '1.00',
              'File::Spec::Functions' => '1.2',
              'File::Spec::Mac'       => '1.3',
              'File::Spec::Unix'      => '1.4',
              'File::Spec::VMS'       => '1.2',
              'File::Spec::Win32'     => '1.3',
              'File::Temp'            => '0.13',
              'File::stat'            => '1.00',
              'FileCache'             => '1.00',
              'FileHandle'            => '2.01',
              'Filter::Simple'        => '0.77',
              'Filter::Util::Call'    => '1.06',
              'FindBin'               => '1.43',
              'GDBM_File'             => '1.06',
              'Getopt::Long'          => '2.28',
              'Getopt::Std'           => '1.03',
              'I18N::Collate'         => '1.00',
              'I18N::LangTags'        => '0.27',
              'I18N::LangTags::List'  => '0.25',
              'I18N::Langinfo'        => '0.01',
              'IO::Dir'               => '1.03_00',
              'IO::File'              => '1.09',
              'IO::Handle'            => '1.21_00',
              'IO::Pipe'              => '1.122',
              'IO::Poll'              => '0.06',
              'IO::Seekable'          => '1.08_00',
              'IO::Select'            => '1.15',
              'IO::Socket'            => '1.27',
              'IO::Socket::INET'      => '1.26',
              'IO::Socket::UNIX'      => '1.20_00',
              'IPC::Msg'              => '1.00_00',
              'IPC::Open3'            => '1.0104',
              'IPC::Semaphore'        => '1.00_00',
              'IPC::SysV'             => '1.03_00',
              'List::Util'            => '1.06_00',
              'Locale::Constants'     => '2.01',
              'Locale::Country'       => '2.01',
              'Locale::Currency'      => '2.01',
              'Locale::Language'      => '2.01',
              'Locale::Maketext'      => '1.03',
              'Locale::Script'        => '2.01',
              'MIME::Base64'          => '2.12',
              'MIME::QuotedPrint'     => '2.03',
              'Math::BigFloat'        => '1.30',
              'Math::BigInt'          => '1.54',
              'Math::BigInt::Calc'    => '0.25',
              'Math::Complex'         => '1.34',
              'Math::Trig'            => '1.01',
              'Memoize'               => '0.66',
              'Memoize::AnyDBM_File'  => '0.65',
              'Memoize::Expire'       => '0.66',
              'Memoize::ExpireFile'   => '0.65',
              'Memoize::ExpireTest'   => '0.65',
              'Memoize::NDBM_File'    => '0.65',
              'Memoize::SDBM_File'    => '0.65',
              'Memoize::Storable'     => '0.65',
              'NEXT'                  => '0.50',
              'Net::Cmd'              => '2.21',
              'Net::Config'           => '1.10',
              'Net::Domain'           => '2.17',
              'Net::FTP'              => '2.64',
              'Net::FTP::A'           => '1.15',
              'Net::FTP::E'           => '0.01',
              'Net::FTP::I'           => '1.12',
              'Net::FTP::L'           => '0.01',
              'Net::FTP::dataconn'    => '0.10',
              'Net::NNTP'             => '2.21',
              'Net::Netrc'            => '2.12',
              'Net::POP3'             => '2.23',
              'Net::Ping'             => '2.12',
              'Net::SMTP'             => '2.21',
              'Net::Time'             => '2.09',
              'Net::hostent'          => '1.00',
              'Net::netent'           => '1.00',
              'Net::protoent'         => '1.00',
              'Net::servent'          => '1.00',
              'O'                     => '1.00',
              'OS2::DLL'              => '1.00',
              'OS2::Process'          => '1.0',
              'OS2::REXX'             => '1.01',
              'Opcode'                => '1.05',
              'POSIX'                 => '1.05',
              'PerlIO'                => '1.00',
              'PerlIO::Scalar'        => '0.01',
              'PerlIO::Via'           => '0.01',
              'Pod::Checker'          => '1.3',
              'Pod::Find'             => '0.22',
              'Pod::Functions'        => '1.01',
              'Pod::Html'             => '1.04',
              'Pod::LaTeX'            => '0.54',
              'Pod::Man'              => '1.32',
              'Pod::ParseLink'        => '1.05',
              'Pod::Text'             => '2.18',
              'Pod::Text::Color'      => '1.03',
              'Pod::Text::Overstrike' => '1.08',
              'Pod::Text::Termcap'    => '1.09',
              'Safe'                  => '2.07',
              'Scalar::Util'          => '1.06_00',
              'Search::Dict'          => '1.02',
              'SelectSaver'           => '1.00',
              'SelfLoader'            => '1.0903',
              'Shell'                 => '0.4',
              'Socket'                => '1.75',
              'Storable'              => '1.015',
              'Switch'                => '2.06',
              'Symbol'                => '1.04',
              'Sys::Syslog'           => '0.02',
              'Term::ANSIColor'       => '1.04',
              'Term::Cap'             => '1.07',
              'Term::Complete'        => '1.4',
              'Term::ReadLine'        => '1.00',
              'Test'                  => '1.18',
              'Test::Builder'         => '0.11',
              'Test::Harness'         => '2.01',
              'Test::Harness::Assert' => '0.01',
              'Test::Harness::Iterator'=> '0.01',
              'Test::Harness::Straps' => '0.08',
              'Test::More'            => '0.41',
              'Test::Simple'          => '0.41',
              'Text::Abbrev'          => '1.00',
              'Text::Balanced'        => '1.89',
              'Text::ParseWords'      => '3.21',
              'Text::Soundex'         => '1.01',
              'Text::Wrap'            => '2001.0929',
              'Thread'                => '2.00',
              'Thread::Queue'         => '1.00',
              'Thread::Semaphore'     => '1.00',
              'Thread::Signal'        => '1.00',
              'Thread::Specific'      => '1.00',
              'Tie::Array'            => '1.02',
              'Tie::File'             => '0.17',
              'Tie::Handle'           => '4.1',
              'Tie::Hash'             => '1.00',
              'Tie::Memoize'          => '1.0',
              'Tie::RefHash'          => '1.3_00',
              'Tie::Scalar'           => '1.00',
              'Tie::SubstrHash'       => '1.00',
              'Time::HiRes'           => '1.20_00',
              'Time::Local'           => '1.04',
              'Time::gmtime'          => '1.02',
              'Time::localtime'       => '1.02',
              'Time::tm'              => '1.00',
              'UNIVERSAL'             => '1.00',
              'Unicode::Collate'      => '0.10',
              'Unicode::Normalize'    => '0.14',
              'Unicode::UCD'          => '0.2',
              'User::grent'           => '1.00',
              'User::pwent'           => '1.00',
              'VMS::DCLsym'           => '1.02',
              'VMS::Filespec'         => '1.1',
              'VMS::Stdio'            => '2.3',
              'XS::Typemap'           => '0.01',
              'attributes'            => '0.04_01',
              'attrs'                 => '1.01',
              'autouse'               => '1.03',
              'base'                  => '1.02',
              'blib'                  => '1.01',
              'bytes'                 => '1.00',
              'charnames'             => '1.01',
              'constant'              => '1.04',
              'diagnostics'           => '1.1',
              'encoding'              => '1.00',
              'fields'                => '1.02',
              'filetest'              => '1.00',
              'if'                    => '0.01',
              'integer'               => '1.00',
              'less'                  => '0.01',
              'locale'                => '1.00',
              'open'                  => '1.01',
              'ops'                   => '1.00',
              'overload'              => '1.00',
              're'                    => '0.03',
              'sort'                  => '1.00',
              'strict'                => '1.02',
              'subs'                  => '1.00',
              'threads'               => '0.05',
              'threads::shared'       => '0.90',
              'utf8'                  => '1.00',
              'vars'                  => '1.01',
              'vmsish'                => '1.00',
              'warnings'              => '1.00',
              'warnings::register'    => '1.00',
          },
          removed => {
          }
      },
      5.008 => {
          delta_from => 5.007003,
          changed => {
              'Attribute::Handlers'   => '0.77',
              'B'                     => '1.01',
              'B::Lint'               => '1.01',
              'B::Xref'               => '1.01',
              'CGI'                   => '2.81',
              'CGI::Carp'             => '1.23',
              'CPAN'                  => '1.61',
              'CPAN::FirstTime'       => '1.56',
              'CPAN::Nox'             => '1.02',
              'Digest::MD5'           => '2.20',
              'Dumpvalue'             => '1.11',
              'Encode'                => '1.75',
              'Encode::Alias'         => '1.32',
              'Encode::Byte'          => '1.22',
              'Encode::CJKConstants'  => '1.00',
              'Encode::CN'            => '1.24',
              'Encode::CN::HZ'        => '1.04',
              'Encode::Config'        => '1.06',
              'Encode::EBCDIC'        => '1.21',
              'Encode::Encoder'       => '0.05',
              'Encode::Encoding'      => '1.30',
              'Encode::Guess'         => '1.06',
              'Encode::JP'            => '1.25',
              'Encode::JP::H2Z'       => '1.02',
              'Encode::JP::JIS7'      => '1.08',
              'Encode::KR'            => '1.22',
              'Encode::KR::2022_KR'   => '1.05',
              'Encode::MIME::Header'  => '1.05',
              'Encode::Symbol'        => '1.22',
              'Encode::TW'            => '1.26',
              'Encode::Unicode'       => '1.37',
              'Exporter::Heavy'       => '5.566',
              'ExtUtils::Command'     => '1.04',
              'ExtUtils::Command::MM' => '0.01',
              'ExtUtils::Constant'    => '0.12',
              'ExtUtils::Installed'   => '0.06',
              'ExtUtils::Liblist'     => '1.00',
              'ExtUtils::Liblist::Kid'=> '1.29',
              'ExtUtils::MM'          => '0.04',
              'ExtUtils::MM_Any'      => '0.04',
              'ExtUtils::MM_BeOS'     => '1.03',
              'ExtUtils::MM_Cygwin'   => '1.04',
              'ExtUtils::MM_DOS'      => '0.01',
              'ExtUtils::MM_MacOS'    => '1.03',
              'ExtUtils::MM_NW5'      => '2.05',
              'ExtUtils::MM_OS2'      => '1.03',
              'ExtUtils::MM_UWIN'     => '0.01',
              'ExtUtils::MM_Unix'     => '1.33',
              'ExtUtils::MM_VMS'      => '5.65',
              'ExtUtils::MM_Win32'    => '1.05',
              'ExtUtils::MM_Win95'    => '0.02',
              'ExtUtils::MY'          => '0.01',
              'ExtUtils::MakeMaker'   => '6.03',
              'ExtUtils::Manifest'    => '1.38',
              'ExtUtils::Mkbootstrap' => '1.15',
              'ExtUtils::Mksymlists'  => '1.19',
              'ExtUtils::testlib'     => '1.15',
              'File::CheckTree'       => '4.2',
              'FileCache'             => '1.021',
              'Filter::Simple'        => '0.78',
              'Getopt::Long'          => '2.32',
              'Hash::Util'            => '0.04',
              'List::Util'            => '1.07_00',
              'Locale::Country'       => '2.04',
              'Math::BigFloat'        => '1.35',
              'Math::BigFloat::Trace' => '0.01',
              'Math::BigInt'          => '1.60',
              'Math::BigInt::Calc'    => '0.30',
              'Math::BigInt::Trace'   => '0.01',
              'Math::BigRat'          => '0.07',
              'Memoize'               => '1.01',
              'Memoize::Expire'       => '1.00',
              'Memoize::ExpireFile'   => '1.01',
              'Net::FTP'              => '2.65',
              'Net::FTP::dataconn'    => '0.11',
              'Net::Ping'             => '2.19',
              'Net::SMTP'             => '2.24',
              'PerlIO'                => '1.01',
              'PerlIO::encoding'      => '0.06',
              'PerlIO::scalar'        => '0.01',
              'PerlIO::via'           => '0.01',
              'PerlIO::via::QuotedPrint'=> '0.04',
              'Pod::Man'              => '1.33',
              'Pod::Text'             => '2.19',
              'Scalar::Util'          => '1.07_00',
              'Storable'              => '2.04',
              'Switch'                => '2.09',
              'Sys::Syslog'           => '0.03',
              'Test'                  => '1.20',
              'Test::Builder'         => '0.15',
              'Test::Harness'         => '2.26',
              'Test::Harness::Straps' => '0.14',
              'Test::More'            => '0.45',
              'Test::Simple'          => '0.45',
              'Thread::Queue'         => '2.00',
              'Thread::Semaphore'     => '2.00',
              'Tie::File'             => '0.93',
              'Tie::RefHash'          => '1.30',
              'Unicode'               => '3.2.0',
              'Unicode::Collate'      => '0.12',
              'Unicode::Normalize'    => '0.17',
              'XS::APItest'           => '0.01',
              'attributes'            => '0.05',
              'base'                  => '1.03',
              'bigint'                => '0.02',
              'bignum'                => '0.11',
              'bigrat'                => '0.04',
              'blib'                  => '1.02',
              'encoding'              => '1.35',
              'sort'                  => '1.01',
              'threads'               => '0.99',
          },
          removed => {
              'Encode::Internal'      => 1,
              'Encode::JP::Constants' => 1,
              'Encode::JP::ISO_2022_JP'=> 1,
              'Encode::JP::JIS'       => 1,
              'Encode::JP::Tr'        => 1,
              'Encode::Tcl'           => 1,
              'Encode::Tcl::Escape'   => 1,
              'Encode::Tcl::Extended' => 1,
              'Encode::Tcl::HanZi'    => 1,
              'Encode::Tcl::Table'    => 1,
              'Encode::XS'            => 1,
              'Encode::iso10646_1'    => 1,
              'Encode::usc2_le'       => 1,
              'Encode::utf8'          => 1,
              'PerlIO::Scalar'        => 1,
              'PerlIO::Via'           => 1,
          }
      },
      5.008001 => {
          delta_from => 5.008,
          changed => {
              'Attribute::Handlers'   => '0.78',
              'AutoLoader'            => '5.60',
              'AutoSplit'             => '1.04',
              'B'                     => '1.02',
              'B::Asmdata'            => '1.01',
              'B::Assembler'          => '0.06',
              'B::Bblock'             => '1.02',
              'B::Bytecode'           => '1.01',
              'B::C'                  => '1.02',
              'B::Concise'            => '0.56',
              'B::Debug'              => '1.01',
              'B::Deparse'            => '0.64',
              'B::Disassembler'       => '1.03',
              'B::Lint'               => '1.02',
              'B::Terse'              => '1.02',
              'Benchmark'             => '1.051',
              'ByteLoader'            => '0.05',
              'CGI'                   => '3.00',
              'CGI::Carp'             => '1.26',
              'CGI::Cookie'           => '1.24',
              'CGI::Fast'             => '1.041',
              'CGI::Pretty'           => '1.07_00',
              'CGI::Util'             => '1.31',
              'CPAN'                  => '1.76_01',
              'CPAN::FirstTime'       => '1.60',
              'CPAN::Nox'             => '1.03',
              'Class::Struct'         => '0.63',
              'Cwd'                   => '2.08',
              'DB_File'               => '1.806',
              'Data::Dumper'          => '2.121',
              'Devel::DProf'          => '20030813.00',
              'Devel::PPPort'         => '2.007',
              'Devel::Peek'           => '1.01',
              'Digest'                => '1.02',
              'Digest::MD5'           => '2.27',
              'Encode'                => '1.9801',
              'Encode::Alias'         => '1.38',
              'Encode::Byte'          => '1.23',
              'Encode::CJKConstants'  => '1.02',
              'Encode::CN::HZ'        => '1.05',
              'Encode::Config'        => '1.07',
              'Encode::Encoder'       => '0.07',
              'Encode::Encoding'      => '1.33',
              'Encode::Guess'         => '1.09',
              'Encode::JP::JIS7'      => '1.12',
              'Encode::KR'            => '1.23',
              'Encode::KR::2022_KR'   => '1.06',
              'Encode::MIME::Header'  => '1.09',
              'Encode::Unicode'       => '1.40',
              'Encode::Unicode::UTF7' => '0.02',
              'English'               => '1.01',
              'Errno'                 => '1.09_00',
              'Exporter'              => '5.567',
              'Exporter::Heavy'       => '5.567',
              'ExtUtils::Command'     => '1.05',
              'ExtUtils::Command::MM' => '0.03',
              'ExtUtils::Constant'    => '0.14',
              'ExtUtils::Install'     => '1.32',
              'ExtUtils::Installed'   => '0.08',
              'ExtUtils::Liblist'     => '1.01',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM_Any'      => '0.07',
              'ExtUtils::MM_BeOS'     => '1.04',
              'ExtUtils::MM_Cygwin'   => '1.06',
              'ExtUtils::MM_DOS'      => '0.02',
              'ExtUtils::MM_MacOS'    => '1.07',
              'ExtUtils::MM_NW5'      => '2.06',
              'ExtUtils::MM_OS2'      => '1.04',
              'ExtUtils::MM_UWIN'     => '0.02',
              'ExtUtils::MM_Unix'     => '1.42',
              'ExtUtils::MM_VMS'      => '5.70',
              'ExtUtils::MM_Win32'    => '1.09',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MakeMaker'   => '6.17',
              'ExtUtils::MakeMaker::bytes'=> '0.01',
              'ExtUtils::MakeMaker::vmsish'=> '0.01',
              'ExtUtils::Manifest'    => '1.42',
              'Fcntl'                 => '1.05',
              'File::Basename'        => '2.72',
              'File::Copy'            => '2.06',
              'File::Find'            => '1.05',
              'File::Glob'            => '1.02',
              'File::Path'            => '1.06',
              'File::Spec'            => '0.86',
              'File::Spec::Cygwin'    => '1.1',
              'File::Spec::Epoc'      => '1.1',
              'File::Spec::Functions' => '1.3',
              'File::Spec::Mac'       => '1.4',
              'File::Spec::OS2'       => '1.2',
              'File::Spec::Unix'      => '1.5',
              'File::Spec::VMS'       => '1.4',
              'File::Spec::Win32'     => '1.4',
              'File::Temp'            => '0.14',
              'FileCache'             => '1.03',
              'Filter::Util::Call'    => '1.0601',
              'GDBM_File'             => '1.07',
              'Getopt::Long'          => '2.34',
              'Getopt::Std'           => '1.04',
              'Hash::Util'            => '0.05',
              'I18N::LangTags'        => '0.28',
              'I18N::LangTags::List'  => '0.26',
              'I18N::Langinfo'        => '0.02',
              'IO'                    => '1.21',
              'IO::Dir'               => '1.04',
              'IO::File'              => '1.10',
              'IO::Handle'            => '1.23',
              'IO::Seekable'          => '1.09',
              'IO::Select'            => '1.16',
              'IO::Socket'            => '1.28',
              'IO::Socket::INET'      => '1.27',
              'IO::Socket::UNIX'      => '1.21',
              'IPC::Msg'              => '1.02',
              'IPC::Open3'            => '1.0105',
              'IPC::Semaphore'        => '1.02',
              'IPC::SysV'             => '1.04',
              'JNI'                   => '0.2',
              'List::Util'            => '1.13',
              'Locale::Country'       => '2.61',
              'Locale::Currency'      => '2.21',
              'Locale::Language'      => '2.21',
              'Locale::Maketext'      => '1.06',
              'Locale::Maketext::Guts'=> undef,
              'Locale::Maketext::GutsLoader'=> undef,
              'Locale::Script'        => '2.21',
              'MIME::Base64'          => '2.20',
              'MIME::QuotedPrint'     => '2.20',
              'Math::BigFloat'        => '1.40',
              'Math::BigInt'          => '1.66',
              'Math::BigInt::Calc'    => '0.36',
              'Math::BigInt::Scalar'  => '0.11',
              'Math::BigRat'          => '0.10',
              'Math::Trig'            => '1.02',
              'NDBM_File'             => '1.05',
              'NEXT'                  => '0.60',
              'Net::Cmd'              => '2.24',
              'Net::Domain'           => '2.18',
              'Net::FTP'              => '2.71',
              'Net::FTP::A'           => '1.16',
              'Net::NNTP'             => '2.22',
              'Net::POP3'             => '2.24',
              'Net::Ping'             => '2.31',
              'Net::SMTP'             => '2.26',
              'Net::hostent'          => '1.01',
              'Net::servent'          => '1.01',
              'ODBM_File'             => '1.04',
              'OS2::DLL'              => '1.01',
              'OS2::ExtAttr'          => '0.02',
              'OS2::PrfDB'            => '0.03',
              'OS2::Process'          => '1.01',
              'OS2::REXX'             => '1.02',
              'POSIX'                 => '1.06',
              'PerlIO'                => '1.02',
              'PerlIO::encoding'      => '0.07',
              'PerlIO::scalar'        => '0.02',
              'PerlIO::via'           => '0.02',
              'PerlIO::via::QuotedPrint'=> '0.05',
              'Pod::Checker'          => '1.41',
              'Pod::Find'             => '0.24',
              'Pod::Functions'        => '1.02',
              'Pod::Html'             => '1.0501',
              'Pod::InputObjects'     => '1.14',
              'Pod::LaTeX'            => '0.55',
              'Pod::Man'              => '1.37',
              'Pod::ParseLink'        => '1.06',
              'Pod::ParseUtils'       => '0.3',
              'Pod::Perldoc'          => '3.10',
              'Pod::Perldoc::BaseTo'  => undef,
              'Pod::Perldoc::GetOptsOO'=> undef,
              'Pod::Perldoc::ToChecker'=> undef,
              'Pod::Perldoc::ToMan'   => undef,
              'Pod::Perldoc::ToNroff' => undef,
              'Pod::Perldoc::ToPod'   => undef,
              'Pod::Perldoc::ToRtf'   => undef,
              'Pod::Perldoc::ToText'  => undef,
              'Pod::Perldoc::ToTk'    => undef,
              'Pod::Perldoc::ToXml'   => undef,
              'Pod::PlainText'        => '2.01',
              'Pod::Text'             => '2.21',
              'Pod::Text::Color'      => '1.04',
              'Pod::Text::Overstrike' => '1.1',
              'Pod::Text::Termcap'    => '1.11',
              'Pod::Usage'            => '1.16',
              'SDBM_File'             => '1.04',
              'Safe'                  => '2.10',
              'Scalar::Util'          => '1.13',
              'SelfLoader'            => '1.0904',
              'Shell'                 => '0.5',
              'Socket'                => '1.76',
              'Storable'              => '2.08',
              'Switch'                => '2.10',
              'Symbol'                => '1.05',
              'Sys::Hostname'         => '1.11',
              'Sys::Syslog'           => '0.04',
              'Term::ANSIColor'       => '1.07',
              'Term::Cap'             => '1.08',
              'Term::Complete'        => '1.401',
              'Term::ReadLine'        => '1.01',
              'Test'                  => '1.24',
              'Test::Builder'         => '0.17',
              'Test::Harness'         => '2.30',
              'Test::Harness::Straps' => '0.15',
              'Test::More'            => '0.47',
              'Test::Simple'          => '0.47',
              'Text::Abbrev'          => '1.01',
              'Text::Balanced'        => '1.95',
              'Text::Wrap'            => '2001.09291',
              'Thread::Semaphore'     => '2.01',
              'Tie::Array'            => '1.03',
              'Tie::File'             => '0.97',
              'Tie::RefHash'          => '1.31',
              'Time::HiRes'           => '1.51',
              'Time::Local'           => '1.07',
              'UNIVERSAL'             => '1.01',
              'Unicode'               => '4.0.0',
              'Unicode::Collate'      => '0.28',
              'Unicode::Normalize'    => '0.23',
              'Unicode::UCD'          => '0.21',
              'VMS::Filespec'         => '1.11',
              'XS::APItest'           => '0.02',
              'XSLoader'              => '0.02',
              'attributes'            => '0.06',
              'base'                  => '2.03',
              'bigint'                => '0.04',
              'bignum'                => '0.14',
              'bigrat'                => '0.06',
              'bytes'                 => '1.01',
              'charnames'             => '1.02',
              'diagnostics'           => '1.11',
              'encoding'              => '1.47',
              'fields'                => '2.03',
              'filetest'              => '1.01',
              'if'                    => '0.03',
              'lib'                   => '0.5565',
              'open'                  => '1.02',
              'overload'              => '1.01',
              're'                    => '0.04',
              'sort'                  => '1.02',
              'strict'                => '1.03',
              'threads'               => '1.00',
              'threads::shared'       => '0.91',
              'utf8'                  => '1.02',
              'vmsish'                => '1.01',
              'warnings'              => '1.03',
          },
          removed => {
          }
      },
      5.008002 => {
          delta_from => 5.008001,
          changed => {
              'DB_File'               => '1.807',
              'Devel::PPPort'         => '2.009',
              'Digest::MD5'           => '2.30',
              'I18N::LangTags'        => '0.29',
              'I18N::LangTags::List'  => '0.29',
              'MIME::Base64'          => '2.21',
              'MIME::QuotedPrint'     => '2.21',
              'Net::Domain'           => '2.19',
              'Net::FTP'              => '2.72',
              'Pod::Perldoc'          => '3.11',
              'Time::HiRes'           => '1.52',
              'Unicode::Collate'      => '0.30',
              'Unicode::Normalize'    => '0.25',
          },
          removed => {
          }
      },
      5.008003 => {
          delta_from => 5.008002,
          changed => {
              'Benchmark'             => '1.052',
              'CGI'                   => '3.01',
              'CGI::Carp'             => '1.27',
              'CGI::Fast'             => '1.05',
              'CGI::Pretty'           => '1.08',
              'CGI::Util'             => '1.4',
              'Cwd'                   => '2.12',
              'DB_File'               => '1.808',
              'Devel::PPPort'         => '2.011',
              'Digest'                => '1.05',
              'Digest::MD5'           => '2.33',
              'Digest::base'          => '1.00',
              'Encode'                => '1.99',
              'Exporter'              => '5.57',
              'File::CheckTree'       => '4.3',
              'File::Copy'            => '2.07',
              'File::Find'            => '1.06',
              'File::Spec'            => '0.87',
              'FindBin'               => '1.44',
              'Getopt::Std'           => '1.05',
              'Math::BigFloat'        => '1.42',
              'Math::BigInt'          => '1.68',
              'Math::BigInt::Calc'    => '0.38',
              'Math::BigInt::CalcEmu' => '0.02',
              'OS2::DLL'              => '1.02',
              'POSIX'                 => '1.07',
              'PerlIO'                => '1.03',
              'PerlIO::via::QuotedPrint'=> '0.06',
              'Pod::Html'             => '1.0502',
              'Pod::Parser'           => '1.14',
              'Pod::Perldoc'          => '3.12',
              'Pod::PlainText'        => '2.02',
              'Storable'              => '2.09',
              'Test::Harness'         => '2.40',
              'Test::Harness::Assert' => '0.02',
              'Test::Harness::Iterator'=> '0.02',
              'Test::Harness::Straps' => '0.19',
              'Tie::Hash'             => '1.01',
              'Unicode::Collate'      => '0.33',
              'Unicode::Normalize'    => '0.28',
              'XS::APItest'           => '0.03',
              'base'                  => '2.04',
              'diagnostics'           => '1.12',
              'encoding'              => '1.48',
              'threads'               => '1.01',
              'threads::shared'       => '0.92',
          },
          removed => {
              'Math::BigInt::Scalar'  => 1,
          }
      },
      5.008004 => {
          delta_from => 5.008003,
          changed => {
              'Attribute::Handlers'   => '0.78_01',
              'B::Assembler'          => '0.07',
              'B::Concise'            => '0.60',
              'B::Deparse'            => '0.66',
              'Benchmark'             => '1.06',
              'CGI'                   => '3.04',
              'Carp'                  => '1.02',
              'Cwd'                   => '2.17',
              'DBM_Filter'            => '0.01',
              'DBM_Filter::compress'  => '0.01',
              'DBM_Filter::encode'    => '0.01',
              'DBM_Filter::int32'     => '0.01',
              'DBM_Filter::null'      => '0.01',
              'DBM_Filter::utf8'      => '0.01',
              'Digest'                => '1.06',
              'DynaLoader'            => '1.05',
              'Encode'                => '1.99_01',
              'Encode::CN::HZ'        => '1.0501',
              'Exporter'              => '5.58',
              'Exporter::Heavy'       => '5.57',
              'ExtUtils::Liblist::Kid'=> '1.3001',
              'ExtUtils::MM_NW5'      => '2.07_02',
              'ExtUtils::MM_Win95'    => '0.0301',
              'File::Find'            => '1.07',
              'IO::Handle'            => '1.24',
              'IO::Pipe'              => '1.123',
              'IPC::Open3'            => '1.0106',
              'Locale::Maketext'      => '1.08',
              'MIME::Base64'          => '3.01',
              'MIME::QuotedPrint'     => '3.01',
              'Math::BigFloat'        => '1.44',
              'Math::BigInt'          => '1.70',
              'Math::BigInt::Calc'    => '0.40',
              'Math::BigInt::CalcEmu' => '0.04',
              'Math::BigRat'          => '0.12',
              'ODBM_File'             => '1.05',
              'POSIX'                 => '1.08',
              'Shell'                 => '0.5.2',
              'Socket'                => '1.77',
              'Storable'              => '2.12',
              'Sys::Syslog'           => '0.05',
              'Term::ANSIColor'       => '1.08',
              'Time::HiRes'           => '1.59',
              'Unicode'               => '4.0.1',
              'Unicode::UCD'          => '0.22',
              'Win32'                 => '0.23',
              'base'                  => '2.05',
              'bigint'                => '0.05',
              'bignum'                => '0.15',
              'charnames'             => '1.03',
              'open'                  => '1.03',
              'threads'               => '1.03',
              'utf8'                  => '1.03',
          },
          removed => {
          }
      },
      5.008005 => {
          delta_from => 5.008004,
          changed => {
              'B::Concise'            => '0.61',
              'B::Deparse'            => '0.67',
              'CGI'                   => '3.05',
              'CGI::Carp'             => '1.28',
              'CGI::Util'             => '1.5',
              'Carp'                  => '1.03',
              'Carp::Heavy'           => '1.03',
              'Cwd'                   => '2.19',
              'DB_File'               => '1.809',
              'Digest'                => '1.08',
              'Encode'                => '2.01',
              'Encode::Alias'         => '2.00',
              'Encode::Byte'          => '2.00',
              'Encode::CJKConstants'  => '2.00',
              'Encode::CN'            => '2.00',
              'Encode::CN::HZ'        => '2.01',
              'Encode::Config'        => '2.00',
              'Encode::EBCDIC'        => '2.00',
              'Encode::Encoder'       => '2.00',
              'Encode::Encoding'      => '2.00',
              'Encode::Guess'         => '2.00',
              'Encode::JP'            => '2.00',
              'Encode::JP::H2Z'       => '2.00',
              'Encode::JP::JIS7'      => '2.00',
              'Encode::KR'            => '2.00',
              'Encode::KR::2022_KR'   => '2.00',
              'Encode::MIME::Header'  => '2.00',
              'Encode::Symbol'        => '2.00',
              'Encode::TW'            => '2.00',
              'Encode::Unicode'       => '2.00',
              'Encode::Unicode::UTF7' => '2.01',
              'File::Basename'        => '2.73',
              'File::Copy'            => '2.08',
              'File::Glob'            => '1.03',
              'FileCache'             => '1.04_01',
              'I18N::LangTags'        => '0.33',
              'I18N::LangTags::Detect'=> '1.03',
              'List::Util'            => '1.14',
              'Locale::Constants'     => '2.07',
              'Locale::Country'       => '2.07',
              'Locale::Currency'      => '2.07',
              'Locale::Language'      => '2.07',
              'Locale::Maketext'      => '1.09',
              'Locale::Script'        => '2.07',
              'Net::Cmd'              => '2.26',
              'Net::FTP'              => '2.75',
              'Net::NNTP'             => '2.23',
              'Net::POP3'             => '2.28',
              'Net::SMTP'             => '2.29',
              'Net::Time'             => '2.10',
              'Pod::Checker'          => '1.42',
              'Pod::Find'             => '0.2401',
              'Pod::LaTeX'            => '0.56',
              'Pod::ParseUtils'       => '1.2',
              'Pod::Perldoc'          => '3.13',
              'Safe'                  => '2.11',
              'Scalar::Util'          => '1.14',
              'Shell'                 => '0.6',
              'Storable'              => '2.13',
              'Term::Cap'             => '1.09',
              'Test'                  => '1.25',
              'Test::Harness'         => '2.42',
              'Text::ParseWords'      => '3.22',
              'Text::Wrap'            => '2001.09292',
              'Time::Local'           => '1.10',
              'Unicode::Collate'      => '0.40',
              'Unicode::Normalize'    => '0.30',
              'XS::APItest'           => '0.04',
              'autouse'               => '1.04',
              'base'                  => '2.06',
              'charnames'             => '1.04',
              'diagnostics'           => '1.13',
              'encoding'              => '2.00',
              'threads'               => '1.05',
              'utf8'                  => '1.04',
          },
          removed => {
          }
      },
      5.008006 => {
          delta_from => 5.008005,
          changed => {
              'B'                     => '1.07',
              'B::C'                  => '1.04',
              'B::Concise'            => '0.64',
              'B::Debug'              => '1.02',
              'B::Deparse'            => '0.69',
              'B::Lint'               => '1.03',
              'B::Showlex'            => '1.02',
              'Cwd'                   => '3.01',
              'DB_File'               => '1.810',
              'Data::Dumper'          => '2.121_02',
              'Devel::PPPort'         => '3.03',
              'Devel::Peek'           => '1.02',
              'Encode'                => '2.08',
              'Encode::Alias'         => '2.02',
              'Encode::Encoding'      => '2.02',
              'Encode::JP'            => '2.01',
              'Encode::Unicode'       => '2.02',
              'Exporter::Heavy'       => '5.58',
              'ExtUtils::Constant'    => '0.1401',
              'File::Spec'            => '3.01',
              'File::Spec::Win32'     => '1.5',
              'I18N::LangTags'        => '0.35',
              'I18N::LangTags::List'  => '0.35',
              'MIME::Base64'          => '3.05',
              'MIME::QuotedPrint'     => '3.03',
              'Math::BigFloat'        => '1.47',
              'Math::BigInt'          => '1.73',
              'Math::BigInt::Calc'    => '0.43',
              'Math::BigRat'          => '0.13',
              'Text::ParseWords'      => '3.23',
              'Time::HiRes'           => '1.65',
              'XS::APItest'           => '0.05',
              'diagnostics'           => '1.14',
              'encoding'              => '2.01',
              'open'                  => '1.04',
              'overload'              => '1.02',
          },
          removed => {
          }
      },
      5.008007 => {
          delta_from => 5.008006,
          changed => {
              'B'                     => '1.09',
              'B::Concise'            => '0.65',
              'B::Deparse'            => '0.7',
              'B::Disassembler'       => '1.04',
              'B::Terse'              => '1.03',
              'Benchmark'             => '1.07',
              'CGI'                   => '3.10',
              'CGI::Carp'             => '1.29',
              'CGI::Cookie'           => '1.25',
              'Carp'                  => '1.04',
              'Carp::Heavy'           => '1.04',
              'Class::ISA'            => '0.33',
              'Cwd'                   => '3.05',
              'DB_File'               => '1.811',
              'Data::Dumper'          => '2.121_04',
              'Devel::DProf'          => '20050310.00',
              'Devel::PPPort'         => '3.06',
              'Digest'                => '1.10',
              'Digest::file'          => '0.01',
              'Encode'                => '2.10',
              'Encode::Alias'         => '2.03',
              'Errno'                 => '1.09_01',
              'ExtUtils::Constant'    => '0.16',
              'ExtUtils::Constant::Base'=> '0.01',
              'ExtUtils::Constant::Utils'=> '0.01',
              'ExtUtils::Constant::XS'=> '0.01',
              'File::Find'            => '1.09',
              'File::Glob'            => '1.04',
              'File::Path'            => '1.07',
              'File::Spec'            => '3.05',
              'File::Temp'            => '0.16',
              'FileCache'             => '1.05',
              'IO::File'              => '1.11',
              'IO::Socket::INET'      => '1.28',
              'Math::BigFloat'        => '1.51',
              'Math::BigInt'          => '1.77',
              'Math::BigInt::Calc'    => '0.47',
              'Math::BigInt::CalcEmu' => '0.05',
              'Math::BigRat'          => '0.15',
              'Pod::Find'             => '1.3',
              'Pod::Html'             => '1.0503',
              'Pod::InputObjects'     => '1.3',
              'Pod::LaTeX'            => '0.58',
              'Pod::ParseUtils'       => '1.3',
              'Pod::Parser'           => '1.3',
              'Pod::Perldoc'          => '3.14',
              'Pod::Select'           => '1.3',
              'Pod::Usage'            => '1.3',
              'SelectSaver'           => '1.01',
              'Symbol'                => '1.06',
              'Sys::Syslog'           => '0.06',
              'Term::ANSIColor'       => '1.09',
              'Term::Complete'        => '1.402',
              'Test::Builder'         => '0.22',
              'Test::Harness'         => '2.48',
              'Test::Harness::Point'  => '0.01',
              'Test::Harness::Straps' => '0.23',
              'Test::More'            => '0.54',
              'Test::Simple'          => '0.54',
              'Text::ParseWords'      => '3.24',
              'Text::Wrap'            => '2001.09293',
              'Tie::RefHash'          => '1.32',
              'Time::HiRes'           => '1.66',
              'Time::Local'           => '1.11',
              'Unicode'               => '4.1.0',
              'Unicode::Normalize'    => '0.32',
              'Unicode::UCD'          => '0.23',
              'Win32'                 => '0.24',
              'XS::APItest'           => '0.06',
              'base'                  => '2.07',
              'bigint'                => '0.07',
              'bignum'                => '0.17',
              'bigrat'                => '0.08',
              'bytes'                 => '1.02',
              'constant'              => '1.05',
              'overload'              => '1.03',
              'threads::shared'       => '0.93',
              'utf8'                  => '1.05',
          },
          removed => {
              'JNI'                   => 1,
              'JPL::AutoLoader'       => 1,
              'JPL::Class'            => 1,
              'JPL::Compile'          => 1,
          }
      },
      5.008008 => {
          delta_from => 5.008007,
          changed => {
              'Attribute::Handlers'   => '0.78_02',
              'B'                     => '1.09_01',
              'B::Bblock'             => '1.02_01',
              'B::Bytecode'           => '1.01_01',
              'B::C'                  => '1.04_01',
              'B::CC'                 => '1.00_01',
              'B::Concise'            => '0.66',
              'B::Debug'              => '1.02_01',
              'B::Deparse'            => '0.71',
              'B::Disassembler'       => '1.05',
              'B::Terse'              => '1.03_01',
              'ByteLoader'            => '0.06',
              'CGI'                   => '3.15',
              'CGI::Cookie'           => '1.26',
              'CPAN'                  => '1.76_02',
              'Cwd'                   => '3.12',
              'DB'                    => '1.01',
              'DB_File'               => '1.814',
              'Data::Dumper'          => '2.121_08',
              'Devel::DProf'          => '20050603.00',
              'Devel::PPPort'         => '3.06_01',
              'Devel::Peek'           => '1.03',
              'Digest'                => '1.14',
              'Digest::MD5'           => '2.36',
              'Digest::file'          => '1.00',
              'Dumpvalue'             => '1.12',
              'Encode'                => '2.12',
              'Encode::Alias'         => '2.04',
              'Encode::Config'        => '2.01',
              'Encode::MIME::Header'  => '2.01',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.01',
              'English'               => '1.02',
              'ExtUtils::Command'     => '1.09',
              'ExtUtils::Command::MM' => '0.05',
              'ExtUtils::Constant'    => '0.17',
              'ExtUtils::Embed'       => '1.26',
              'ExtUtils::Install'     => '1.33',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM'          => '0.05',
              'ExtUtils::MM_AIX'      => '0.03',
              'ExtUtils::MM_Any'      => '0.13',
              'ExtUtils::MM_BeOS'     => '1.05',
              'ExtUtils::MM_Cygwin'   => '1.08',
              'ExtUtils::MM_MacOS'    => '1.08',
              'ExtUtils::MM_NW5'      => '2.08',
              'ExtUtils::MM_OS2'      => '1.05',
              'ExtUtils::MM_QNX'      => '0.02',
              'ExtUtils::MM_Unix'     => '1.50',
              'ExtUtils::MM_VMS'      => '5.73',
              'ExtUtils::MM_VOS'      => '0.02',
              'ExtUtils::MM_Win32'    => '1.12',
              'ExtUtils::MM_Win95'    => '0.04',
              'ExtUtils::MakeMaker'   => '6.30',
              'ExtUtils::MakeMaker::Config'=> '0.02',
              'ExtUtils::Manifest'    => '1.46',
              'File::Basename'        => '2.74',
              'File::Copy'            => '2.09',
              'File::Find'            => '1.10',
              'File::Glob'            => '1.05',
              'File::Path'            => '1.08',
              'File::Spec'            => '3.12',
              'File::Spec::Win32'     => '1.6',
              'FileCache'             => '1.06',
              'Filter::Simple'        => '0.82',
              'FindBin'               => '1.47',
              'GDBM_File'             => '1.08',
              'Getopt::Long'          => '2.35',
              'IO'                    => '1.22',
              'IO::Dir'               => '1.05',
              'IO::File'              => '1.13',
              'IO::Handle'            => '1.25',
              'IO::Pipe'              => '1.13',
              'IO::Poll'              => '0.07',
              'IO::Seekable'          => '1.10',
              'IO::Select'            => '1.17',
              'IO::Socket'            => '1.29',
              'IO::Socket::INET'      => '1.29',
              'IO::Socket::UNIX'      => '1.22',
              'IPC::Open2'            => '1.02',
              'IPC::Open3'            => '1.02',
              'List::Util'            => '1.18',
              'MIME::Base64'          => '3.07',
              'MIME::QuotedPrint'     => '3.07',
              'Math::Complex'         => '1.35',
              'Math::Trig'            => '1.03',
              'NDBM_File'             => '1.06',
              'ODBM_File'             => '1.06',
              'OS2::PrfDB'            => '0.04',
              'OS2::Process'          => '1.02',
              'OS2::REXX'             => '1.03',
              'Opcode'                => '1.06',
              'POSIX'                 => '1.09',
              'PerlIO'                => '1.04',
              'PerlIO::encoding'      => '0.09',
              'PerlIO::scalar'        => '0.04',
              'PerlIO::via'           => '0.03',
              'Pod::Checker'          => '1.43',
              'Pod::Find'             => '1.34',
              'Pod::Functions'        => '1.03',
              'Pod::Html'             => '1.0504',
              'Pod::ParseUtils'       => '1.33',
              'Pod::Parser'           => '1.32',
              'Pod::Usage'            => '1.33',
              'SDBM_File'             => '1.05',
              'Safe'                  => '2.12',
              'Scalar::Util'          => '1.18',
              'Socket'                => '1.78',
              'Storable'              => '2.15',
              'Switch'                => '2.10_01',
              'Sys::Syslog'           => '0.13',
              'Term::ANSIColor'       => '1.10',
              'Term::ReadLine'        => '1.02',
              'Test::Builder'         => '0.32',
              'Test::Builder::Module' => '0.02',
              'Test::Builder::Tester' => '1.02',
              'Test::Builder::Tester::Color'=> undef,
              'Test::Harness'         => '2.56',
              'Test::Harness::Straps' => '0.26',
              'Test::More'            => '0.62',
              'Test::Simple'          => '0.62',
              'Text::Tabs'            => '2005.0824',
              'Text::Wrap'            => '2005.082401',
              'Tie::Hash'             => '1.02',
              'Time::HiRes'           => '1.86',
              'Unicode::Collate'      => '0.52',
              'Unicode::UCD'          => '0.24',
              'User::grent'           => '1.01',
              'Win32'                 => '0.2601',
              'XS::APItest'           => '0.08',
              'XS::Typemap'           => '0.02',
              'XSLoader'              => '0.06',
              'attrs'                 => '1.02',
              'autouse'               => '1.05',
              'blib'                  => '1.03',
              'charnames'             => '1.05',
              'diagnostics'           => '1.15',
              'encoding'              => '2.02',
              'if'                    => '0.05',
              'open'                  => '1.05',
              'ops'                   => '1.01',
              'overload'              => '1.04',
              're'                    => '0.05',
              'threads'               => '1.07',
              'threads::shared'       => '0.94',
              'utf8'                  => '1.06',
              'vmsish'                => '1.02',
              'warnings'              => '1.05',
              'warnings::register'    => '1.01',
          },
          removed => {
          }
      },
      5.008009 => {
          delta_from => 5.008008,
          changed => {
              'Attribute::Handlers'   => '0.78_03',
              'AutoLoader'            => '5.67',
              'AutoSplit'             => '1.06',
              'B'                     => '1.19',
              'B::Asmdata'            => '1.02',
              'B::Assembler'          => '0.08',
              'B::C'                  => '1.05',
              'B::Concise'            => '0.76',
              'B::Debug'              => '1.05',
              'B::Deparse'            => '0.87',
              'B::Lint'               => '1.11',
              'B::Lint::Debug'        => undef,
              'B::Terse'              => '1.05',
              'Benchmark'             => '1.1',
              'CGI'                   => '3.42',
              'CGI::Carp'             => '1.30_01',
              'CGI::Cookie'           => '1.29',
              'CGI::Fast'             => '1.07',
              'CGI::Util'             => '1.5_01',
              'CPAN'                  => '1.9301',
              'CPAN::Debug'           => '5.5',
              'CPAN::DeferedCode'     => '5.50',
              'CPAN::Distroprefs'     => '6',
              'CPAN::FirstTime'       => '5.5_01',
              'CPAN::HandleConfig'    => '5.5',
              'CPAN::Kwalify'         => '5.50',
              'CPAN::Nox'             => '5.50',
              'CPAN::Queue'           => '5.5',
              'CPAN::Tarzip'          => '5.5',
              'CPAN::Version'         => '5.5',
              'Carp'                  => '1.10',
              'Carp::Heavy'           => '1.10',
              'Cwd'                   => '3.29',
              'DBM_Filter'            => '0.02',
              'DBM_Filter::compress'  => '0.02',
              'DBM_Filter::encode'    => '0.02',
              'DBM_Filter::int32'     => '0.02',
              'DBM_Filter::null'      => '0.02',
              'DBM_Filter::utf8'      => '0.02',
              'DB_File'               => '1.817',
              'Data::Dumper'          => '2.121_17',
              'Devel::DProf'          => '20080331.00',
              'Devel::InnerPackage'   => '0.3',
              'Devel::PPPort'         => '3.14',
              'Devel::Peek'           => '1.04',
              'Digest'                => '1.15',
              'Digest::MD5'           => '2.37',
              'DirHandle'             => '1.02',
              'DynaLoader'            => '1.09',
              'Encode'                => '2.26',
              'Encode::Alias'         => '2.10',
              'Encode::Byte'          => '2.03',
              'Encode::CJKConstants'  => '2.02',
              'Encode::CN'            => '2.02',
              'Encode::CN::HZ'        => '2.05',
              'Encode::Config'        => '2.05',
              'Encode::EBCDIC'        => '2.02',
              'Encode::Encoder'       => '2.01',
              'Encode::Encoding'      => '2.05',
              'Encode::GSM0338'       => '2.01',
              'Encode::Guess'         => '2.02',
              'Encode::JP'            => '2.03',
              'Encode::JP::H2Z'       => '2.02',
              'Encode::JP::JIS7'      => '2.04',
              'Encode::KR'            => '2.02',
              'Encode::KR::2022_KR'   => '2.02',
              'Encode::MIME::Header'  => '2.05',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.03',
              'Encode::MIME::Name'    => '1.01',
              'Encode::Symbol'        => '2.02',
              'Encode::TW'            => '2.02',
              'Encode::Unicode'       => '2.05',
              'Encode::Unicode::UTF7' => '2.04',
              'English'               => '1.03',
              'Errno'                 => '1.10',
              'Exporter'              => '5.63',
              'Exporter::Heavy'       => '5.63',
              'ExtUtils::Command'     => '1.15',
              'ExtUtils::Command::MM' => '6.48',
              'ExtUtils::Constant'    => '0.21',
              'ExtUtils::Constant::Base'=> '0.04',
              'ExtUtils::Constant::ProxySubs'=> '0.06',
              'ExtUtils::Constant::Utils'=> '0.02',
              'ExtUtils::Constant::XS'=> '0.02',
              'ExtUtils::Embed'       => '1.28',
              'ExtUtils::Install'     => '1.50_01',
              'ExtUtils::Installed'   => '1.43',
              'ExtUtils::Liblist'     => '6.48',
              'ExtUtils::Liblist::Kid'=> '6.48',
              'ExtUtils::MM'          => '6.48',
              'ExtUtils::MM_AIX'      => '6.48',
              'ExtUtils::MM_Any'      => '6.48',
              'ExtUtils::MM_BeOS'     => '6.48',
              'ExtUtils::MM_Cygwin'   => '6.48',
              'ExtUtils::MM_DOS'      => '6.48',
              'ExtUtils::MM_Darwin'   => '6.48',
              'ExtUtils::MM_MacOS'    => '6.48',
              'ExtUtils::MM_NW5'      => '6.48',
              'ExtUtils::MM_OS2'      => '6.48',
              'ExtUtils::MM_QNX'      => '6.48',
              'ExtUtils::MM_UWIN'     => '6.48',
              'ExtUtils::MM_Unix'     => '6.48',
              'ExtUtils::MM_VMS'      => '6.48',
              'ExtUtils::MM_VOS'      => '6.48',
              'ExtUtils::MM_Win32'    => '6.48',
              'ExtUtils::MM_Win95'    => '6.48',
              'ExtUtils::MY'          => '6.48',
              'ExtUtils::MakeMaker'   => '6.48',
              'ExtUtils::MakeMaker::Config'=> '6.48',
              'ExtUtils::MakeMaker::bytes'=> '6.48',
              'ExtUtils::MakeMaker::vmsish'=> '6.48',
              'ExtUtils::Manifest'    => '1.55',
              'ExtUtils::Mkbootstrap' => '6.48',
              'ExtUtils::Mksymlists'  => '6.48',
              'ExtUtils::Packlist'    => '1.43',
              'ExtUtils::ParseXS'     => '2.19',
              'ExtUtils::XSSymSet'    => '1.1',
              'ExtUtils::testlib'     => '6.48',
              'Fatal'                 => '1.06',
              'Fcntl'                 => '1.06',
              'File::Basename'        => '2.77',
              'File::CheckTree'       => '4.4',
              'File::Compare'         => '1.1005',
              'File::Copy'            => '2.13',
              'File::DosGlob'         => '1.01',
              'File::Find'            => '1.13',
              'File::Glob'            => '1.06',
              'File::Path'            => '2.07_02',
              'File::Spec'            => '3.29',
              'File::Spec::Cygwin'    => '3.29',
              'File::Spec::Epoc'      => '3.29',
              'File::Spec::Functions' => '3.29',
              'File::Spec::Mac'       => '3.29',
              'File::Spec::OS2'       => '3.29',
              'File::Spec::Unix'      => '3.29',
              'File::Spec::VMS'       => '3.29',
              'File::Spec::Win32'     => '3.29',
              'File::Temp'            => '0.20',
              'File::stat'            => '1.01',
              'FileCache'             => '1.07',
              'Filter::Simple'        => '0.83',
              'Filter::Util::Call'    => '1.07',
              'FindBin'               => '1.49',
              'GDBM_File'             => '1.09',
              'Getopt::Long'          => '2.37',
              'Getopt::Std'           => '1.06',
              'Hash::Util'            => '0.06',
              'IO'                    => '1.23',
              'IO::Dir'               => '1.06',
              'IO::File'              => '1.14',
              'IO::Handle'            => '1.27',
              'IO::Socket'            => '1.30',
              'IO::Socket::INET'      => '1.31',
              'IO::Socket::UNIX'      => '1.23',
              'IPC::Msg'              => '2.00',
              'IPC::Open2'            => '1.03',
              'IPC::Open3'            => '1.03',
              'IPC::Semaphore'        => '2.00',
              'IPC::SharedMem'        => '2.00',
              'IPC::SysV'             => '2.00',
              'List::Util'            => '1.19',
              'Locale::Maketext'      => '1.13',
              'Locale::Maketext::Guts'=> '1.13',
              'Locale::Maketext::GutsLoader'=> '1.13',
              'Math::BigFloat'        => '1.60',
              'Math::BigInt'          => '1.89',
              'Math::BigInt::Calc'    => '0.52',
              'Math::BigRat'          => '0.22',
              'Math::Complex'         => '1.54',
              'Math::Trig'            => '1.18',
              'Module::CoreList'      => '2.17',
              'Module::Pluggable'     => '3.8',
              'Module::Pluggable::Object'=> '3.6',
              'NDBM_File'             => '1.07',
              'NEXT'                  => '0.61',
              'Net::Cmd'              => '2.29',
              'Net::Config'           => '1.11',
              'Net::Domain'           => '2.20',
              'Net::FTP'              => '2.77',
              'Net::FTP::A'           => '1.18',
              'Net::NNTP'             => '2.24',
              'Net::POP3'             => '2.29',
              'Net::Ping'             => '2.35',
              'Net::SMTP'             => '2.31',
              'O'                     => '1.01',
              'ODBM_File'             => '1.07',
              'OS2::DLL'              => '1.03',
              'OS2::Process'          => '1.03',
              'Opcode'                => '1.0601',
              'POSIX'                 => '1.15',
              'PerlIO'                => '1.05',
              'PerlIO::encoding'      => '0.11',
              'PerlIO::scalar'        => '0.06',
              'PerlIO::via'           => '0.05',
              'Pod::Html'             => '1.09',
              'Pod::ParseUtils'       => '1.35',
              'Pod::Parser'           => '1.35',
              'Pod::Select'           => '1.35',
              'Pod::Usage'            => '1.35',
              'SDBM_File'             => '1.06',
              'Safe'                  => '2.16',
              'Scalar::Util'          => '1.19',
              'SelfLoader'            => '1.17',
              'Shell'                 => '0.72',
              'Socket'                => '1.81',
              'Storable'              => '2.19',
              'Switch'                => '2.13',
              'Sys::Syslog'           => '0.27',
              'Sys::Syslog::win32::Win32'=> undef,
              'Term::ANSIColor'       => '1.12',
              'Term::Cap'             => '1.12',
              'Term::ReadLine'        => '1.03',
              'Test::Builder'         => '0.80',
              'Test::Builder::Module' => '0.80',
              'Test::Builder::Tester' => '1.13',
              'Test::Harness'         => '2.64',
              'Test::Harness::Results'=> '0.01_01',
              'Test::Harness::Straps' => '0.26_01',
              'Test::Harness::Util'   => '0.01',
              'Test::More'            => '0.80',
              'Test::Simple'          => '0.80',
              'Text::Balanced'        => '1.98',
              'Text::ParseWords'      => '3.27',
              'Text::Soundex'         => '3.03',
              'Text::Tabs'            => '2007.1117',
              'Text::Wrap'            => '2006.1117',
              'Thread'                => '2.01',
              'Thread::Queue'         => '2.11',
              'Thread::Semaphore'     => '2.09',
              'Tie::Handle'           => '4.2',
              'Tie::Hash'             => '1.03',
              'Tie::Memoize'          => '1.1',
              'Tie::RefHash'          => '1.38',
              'Tie::Scalar'           => '1.01',
              'Tie::StdHandle'        => '4.2',
              'Time::HiRes'           => '1.9715',
              'Time::Local'           => '1.1901',
              'Time::gmtime'          => '1.03',
              'Unicode'               => '5.1.0',
              'Unicode::Normalize'    => '1.02',
              'Unicode::UCD'          => '0.25',
              'VMS::DCLsym'           => '1.03',
              'VMS::Stdio'            => '2.4',
              'Win32'                 => '0.38',
              'Win32API::File'        => '0.1001_01',
              'Win32API::File::ExtUtils::Myconst2perl'=> '1',
              'Win32CORE'             => '0.02',
              'XS::APItest'           => '0.15',
              'XS::Typemap'           => '0.03',
              'XSLoader'              => '0.10',
              'attributes'            => '0.09',
              'autouse'               => '1.06',
              'base'                  => '2.13',
              'bigint'                => '0.23',
              'bignum'                => '0.23',
              'bigrat'                => '0.23',
              'blib'                  => '1.04',
              'charnames'             => '1.06',
              'constant'              => '1.17',
              'diagnostics'           => '1.16',
              'encoding'              => '2.6_01',
              'fields'                => '2.12',
              'filetest'              => '1.02',
              'lib'                   => '0.61',
              'open'                  => '1.06',
              'ops'                   => '1.02',
              'overload'              => '1.06',
              're'                    => '0.0601',
              'sigtrap'               => '1.04',
              'threads'               => '1.71',
              'threads::shared'       => '1.27',
              'utf8'                  => '1.07',
              'warnings'              => '1.05_01',
          },
          removed => {
          }
      },
      5.009 => {
          delta_from => 5.008002,
          changed => {
              'B'                     => '1.03',
              'B::C'                  => '1.03',
              'B::Concise'            => '0.57',
              'B::Deparse'            => '0.65',
              'DB_File'               => '1.806',
              'Devel::PPPort'         => '2.008',
              'English'               => '1.02',
              'Fatal'                 => '1.04',
              'OS2::DLL'              => '1.02',
              'Opcode'                => '1.06',
              'Time::HiRes'           => '1.51',
              'Unicode::Collate'      => '0.28',
              'Unicode::Normalize'    => '0.23',
              'XSLoader'              => '0.03',
              'assertions'            => '0.01',
              'assertions::activate'  => '0.01',
              'overload'              => '1.02',
              'version'               => '0.29',
          },
          removed => {
          }
      },
      5.009001 => {
          delta_from => 5.008004,
          changed => {
              'B'                     => '1.05',
              'B::Assembler'          => '0.06',
              'B::C'                  => '1.04',
              'B::Concise'            => '0.59',
              'B::Debug'              => '1.02',
              'B::Deparse'            => '0.65',
              'DB_File'               => '1.808_01',
              'Devel::PPPort'         => '2.011_01',
              'Digest'                => '1.05',
              'DynaLoader'            => '1.04',
              'English'               => '1.02',
              'Exporter::Heavy'       => '5.567',
              'ExtUtils::Command'     => '1.07',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM_Any'      => '0.0901',
              'ExtUtils::MM_Cygwin'   => '1.07',
              'ExtUtils::MM_NW5'      => '2.07_01',
              'ExtUtils::MM_Unix'     => '1.45_01',
              'ExtUtils::MM_VMS'      => '5.71_01',
              'ExtUtils::MM_Win32'    => '1.10_01',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MakeMaker'   => '6.21_02',
              'ExtUtils::Manifest'    => '1.43',
              'Fatal'                 => '1.04',
              'Getopt::Long'          => '2.3401',
              'IO::Handle'            => '1.23',
              'IO::Pipe'              => '1.122',
              'IPC::Open3'            => '1.0105',
              'MIME::Base64'          => '3.00_01',
              'MIME::QuotedPrint'     => '3.00',
              'Memoize'               => '1.01_01',
              'ODBM_File'             => '1.04',
              'Opcode'                => '1.06',
              'POSIX'                 => '1.07',
              'Storable'              => '2.11',
              'Time::HiRes'           => '1.56',
              'Time::Local'           => '1.07_94',
              'UNIVERSAL'             => '1.02',
              'Unicode'               => '4.0.0',
              'Unicode::UCD'          => '0.21',
              'XSLoader'              => '0.03',
              'assertions'            => '0.01',
              'assertions::activate'  => '0.01',
              'base'                  => '2.04',
              'if'                    => '0.0401',
              'open'                  => '1.02',
              'overload'              => '1.02',
              'threads'               => '1.02',
              'utf8'                  => '1.02',
              'version'               => '0.36',
          },
          removed => {
          }
      },
      5.009002 => {
          delta_from => 5.008007,
          changed => {
              'B'                     => '1.07',
              'B::Concise'            => '0.64',
              'B::Deparse'            => '0.69',
              'B::Disassembler'       => '1.03',
              'B::Terse'              => '1.02',
              'CGI'                   => '3.07',
              'Config::Extensions'    => '0.01',
              'Devel::DProf'          => '20030813.00',
              'DynaLoader'            => '1.07',
              'Encode'                => '2.09',
              'Encode::Alias'         => '2.02',
              'English'               => '1.03',
              'Exporter'              => '5.59',
              'Exporter::Heavy'       => '5.59',
              'ExtUtils::Command'     => '1.07',
              'ExtUtils::Command::MM' => '0.03_01',
              'ExtUtils::Embed'       => '1.26',
              'ExtUtils::Liblist::Kid'=> '1.3',
              'ExtUtils::MM_Any'      => '0.10',
              'ExtUtils::MM_Cygwin'   => '1.07',
              'ExtUtils::MM_MacOS'    => '1.08',
              'ExtUtils::MM_NW5'      => '2.07',
              'ExtUtils::MM_Unix'     => '1.46_01',
              'ExtUtils::MM_VMS'      => '5.71',
              'ExtUtils::MM_Win32'    => '1.10',
              'ExtUtils::MM_Win95'    => '0.03',
              'ExtUtils::MakeMaker'   => '6.25',
              'ExtUtils::Manifest'    => '1.44',
              'Fatal'                 => '1.04',
              'File::Path'            => '1.06',
              'FileCache'             => '1.04_01',
              'Getopt::Long'          => '2.3401',
              'IO::File'              => '1.10',
              'IO::Socket::INET'      => '1.27',
              'Math::BigFloat'        => '1.49',
              'Math::BigInt'          => '1.75',
              'Math::BigInt::Calc'    => '0.45',
              'Math::BigRat'          => '0.14',
              'Memoize'               => '1.01_01',
              'Module::CoreList'      => '1.99',
              'NEXT'                  => '0.60_01',
              'Opcode'                => '1.06',
              'Pod::Html'             => '1.0502',
              'Scalar::Util'          => '1.14_1',
              'Storable'              => '2.14',
              'Symbol'                => '1.05',
              'Test::Harness'         => '2.46',
              'Test::Harness::Straps' => '0.20_01',
              'Text::Balanced'        => '1.95_01',
              'Text::Wrap'            => '2001.09292',
              'UNIVERSAL'             => '1.02',
              'Unicode'               => '4.0.1',
              'Unicode::Normalize'    => '0.30',
              'Unicode::UCD'          => '0.22',
              'Win32'                 => '0.23',
              'XS::APItest'           => '0.05',
              'XSLoader'              => '0.03',
              'assertions'            => '0.01',
              'assertions::activate'  => '0.01',
              'base'                  => '2.06',
              'bigint'                => '0.06',
              'bignum'                => '0.16',
              'bigrat'                => '0.07',
              'bytes'                 => '1.01',
              'encoding::warnings'    => '0.05',
              'if'                    => '0.0401',
              're'                    => '0.05',
              'threads::shared'       => '0.92',
              'utf8'                  => '1.04',
              'version'               => '0.42',
              'warnings'              => '1.04',
          },
          removed => {
              'Test::Harness::Point'  => 1,
          }
      },
      5.009003 => {
          delta_from => 5.008008,
          changed => {
              'Archive::Tar'          => '1.26_01',
              'Archive::Tar::Constant'=> '0.02',
              'Archive::Tar::File'    => '0.02',
              'AutoSplit'             => '1.04_01',
              'B'                     => '1.10',
              'B::Bblock'             => '1.02',
              'B::Bytecode'           => '1.01',
              'B::C'                  => '1.04',
              'B::CC'                 => '1.00',
              'B::Concise'            => '0.67',
              'B::Debug'              => '1.02',
              'B::Deparse'            => '0.73',
              'B::Lint'               => '1.04',
              'B::Terse'              => '1.03',
              'CGI'                   => '3.15_01',
              'CPAN'                  => '1.83_58',
              'CPAN::Debug'           => '4.44',
              'CPAN::FirstTime'       => '4.50',
              'CPAN::HandleConfig'    => '4.31',
              'CPAN::Nox'             => '2.31',
              'CPAN::Tarzip'          => '3.36',
              'CPAN::Version'         => '2.55',
              'Carp'                  => '1.05',
              'Carp::Heavy'           => '1.05',
              'Compress::Zlib'        => '2.000_07',
              'Compress::Zlib::Common'=> '2.000_07',
              'Compress::Zlib::Compress::Gzip::Constants'=> '2.000_07',
              'Compress::Zlib::Compress::Zip::Constants'=> '1.00',
              'Compress::Zlib::CompressPlugin::Deflate'=> '2.000_05',
              'Compress::Zlib::CompressPlugin::Identity'=> '2.000_05',
              'Compress::Zlib::File::GlobMapper'=> '0.000_02',
              'Compress::Zlib::FileConstants'=> '2.000_07',
              'Compress::Zlib::IO::Compress::Base'=> '2.000_05',
              'Compress::Zlib::IO::Compress::Deflate'=> '2.000_07',
              'Compress::Zlib::IO::Compress::Gzip'=> '2.000_07',
              'Compress::Zlib::IO::Compress::RawDeflate'=> '2.000_07',
              'Compress::Zlib::IO::Compress::Zip'=> '2.000_04',
              'Compress::Zlib::IO::Uncompress::AnyInflate'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::AnyUncompress'=> '2.000_05',
              'Compress::Zlib::IO::Uncompress::Base'=> '2.000_05',
              'Compress::Zlib::IO::Uncompress::Gunzip'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::Inflate'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::RawInflate'=> '2.000_07',
              'Compress::Zlib::IO::Uncompress::Unzip'=> '2.000_05',
              'Compress::Zlib::ParseParameters'=> '2.000_07',
              'Compress::Zlib::UncompressPlugin::Identity'=> '2.000_05',
              'Compress::Zlib::UncompressPlugin::Inflate'=> '2.000_05',
              'Config::Extensions'    => '0.01',
              'Cwd'                   => '3.15',
              'Devel::PPPort'         => '3.08',
              'Digest::SHA'           => '5.32',
              'DirHandle'             => '1.01',
              'DynaLoader'            => '1.07',
              'Encode'                => '2.14',
              'Encode::CN::HZ'        => '2.02',
              'Encode::MIME::Header'  => '2.02',
              'English'               => '1.04',
              'Exporter'              => '5.59',
              'Exporter::Heavy'       => '5.59',
              'ExtUtils::CBuilder'    => '0.15',
              'ExtUtils::CBuilder::Base'=> '0.12',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.12',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.12',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.12',
              'ExtUtils::CBuilder::Platform::aix'=> '0.12',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.12',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.12',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.01',
              'ExtUtils::CBuilder::Platform::os2'=> '0.13',
              'ExtUtils::Command::MM' => '0.05_01',
              'ExtUtils::Constant'    => '0.2',
              'ExtUtils::Constant::Base'=> '0.02',
              'ExtUtils::Constant::ProxySubs'=> '0.01',
              'ExtUtils::Constant::XS'=> '0.02',
              'ExtUtils::MM_Any'      => '0.13_01',
              'ExtUtils::MM_Unix'     => '1.50_01',
              'ExtUtils::MakeMaker'   => '6.30_01',
              'ExtUtils::ParseXS'     => '2.15_02',
              'Fatal'                 => '1.04',
              'File::Compare'         => '1.1005',
              'File::Spec'            => '3.15',
              'File::Temp'            => '0.16_01',
              'IO::File'              => '1.13_01',
              'IO::Handle'            => '1.26',
              'IO::Socket'            => '1.29_01',
              'IO::Socket::INET'      => '1.29_02',
              'IO::Socket::UNIX'      => '1.22_01',
              'IO::Zlib'              => '1.04_02',
              'Locale::Maketext'      => '1.10_01',
              'Math::BigInt::FastCalc'=> '0.10',
              'Memoize'               => '1.01_01',
              'Module::CoreList'      => '2.02',
              'Moped::Msg'            => '0.01',
              'NEXT'                  => '0.60_01',
              'Net::Cmd'              => '2.26_01',
              'Net::Domain'           => '2.19_01',
              'Net::Ping'             => '2.31_04',
              'Opcode'                => '1.08',
              'POSIX'                 => '1.10',
              'Pod::Escapes'          => '1.04',
              'Pod::Man'              => '2.04',
              'Pod::Perldoc'          => '3.14_01',
              'Pod::Simple'           => '3.04',
              'Pod::Simple::BlackBox' => undef,
              'Pod::Simple::Checker'  => '2.02',
              'Pod::Simple::Debug'    => undef,
              'Pod::Simple::DumpAsText'=> '2.02',
              'Pod::Simple::DumpAsXML'=> '2.02',
              'Pod::Simple::HTML'     => '3.03',
              'Pod::Simple::HTMLBatch'=> '3.02',
              'Pod::Simple::HTMLLegacy'=> '5.01',
              'Pod::Simple::LinkSection'=> undef,
              'Pod::Simple::Methody'  => '2.02',
              'Pod::Simple::Progress' => '1.01',
              'Pod::Simple::PullParser'=> '2.02',
              'Pod::Simple::PullParserEndToken'=> undef,
              'Pod::Simple::PullParserStartToken'=> undef,
              'Pod::Simple::PullParserTextToken'=> undef,
              'Pod::Simple::PullParserToken'=> '2.02',
              'Pod::Simple::RTF'      => '2.02',
              'Pod::Simple::Search'   => '3.04',
              'Pod::Simple::SimpleTree'=> '2.02',
              'Pod::Simple::Text'     => '2.02',
              'Pod::Simple::TextContent'=> '2.02',
              'Pod::Simple::TiedOutFH'=> undef,
              'Pod::Simple::Transcode'=> undef,
              'Pod::Simple::TranscodeDumb'=> '2.02',
              'Pod::Simple::TranscodeSmart'=> undef,
              'Pod::Simple::XMLOutStream'=> '2.02',
              'Pod::Text'             => '3.01',
              'Pod::Text::Color'      => '2.01',
              'Pod::Text::Overstrike' => '2',
              'Pod::Text::Termcap'    => '2.01',
              'Pod::Usage'            => '1.33_01',
              'SelfLoader'            => '1.0905',
              'Storable'              => '2.15_02',
              'Test::Builder::Module' => '0.03',
              'Text::Balanced'        => '1.95_01',
              'Tie::File'             => '0.97_01',
              'UNIVERSAL'             => '1.03',
              'XS::APItest'           => '0.09',
              'assertions'            => '0.02',
              'assertions::activate'  => '0.02',
              'assertions::compat'    => undef,
              'constant'              => '1.07',
              'encoding::warnings'    => '0.05',
              'feature'               => '1.00',
              're'                    => '0.06',
              'sort'                  => '2.00',
              'version'               => '0.53',
          },
          removed => {
          }
      },
      5.009004 => {
          delta_from => 5.009003,
          changed => {
              'Archive::Tar'          => '1.30_01',
              'AutoLoader'            => '5.61',
              'B'                     => '1.11',
              'B::Bytecode'           => '1.02',
              'B::C'                  => '1.05',
              'B::Concise'            => '0.69',
              'B::Deparse'            => '0.76',
              'B::Lint'               => '1.08',
              'Benchmark'             => '1.08',
              'CGI'                   => '3.20',
              'CGI::Cookie'           => '1.27',
              'CGI::Fast'             => '1.07',
              'CPAN'                  => '1.87_55',
              'CPAN::Debug'           => '5.400561',
              'CPAN::FirstTime'       => '5.400742',
              'CPAN::HandleConfig'    => '5.400740',
              'CPAN::Nox'             => '5.400561',
              'CPAN::Tarzip'          => '5.400714',
              'CPAN::Version'         => '5.400561',
              'Compress::Raw::Zlib'   => '2.000_13',
              'Compress::Zlib'        => '2.000_13',
              'Cwd'                   => '3.19',
              'Devel::PPPort'         => '3.10',
              'Digest'                => '1.15',
              'Digest::SHA'           => '5.43',
              'Encode'                => '2.18_01',
              'Encode::Alias'         => '2.06',
              'Encode::Byte'          => '2.02',
              'Encode::CJKConstants'  => '2.02',
              'Encode::CN'            => '2.02',
              'Encode::CN::HZ'        => '2.04',
              'Encode::Config'        => '2.03',
              'Encode::EBCDIC'        => '2.02',
              'Encode::Encoder'       => '2.01',
              'Encode::Encoding'      => '2.04',
              'Encode::Guess'         => '2.02',
              'Encode::JP'            => '2.03',
              'Encode::JP::H2Z'       => '2.02',
              'Encode::JP::JIS7'      => '2.02',
              'Encode::KR'            => '2.02',
              'Encode::KR::2022_KR'   => '2.02',
              'Encode::MIME::Header'  => '2.04',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.03',
              'Encode::Symbol'        => '2.02',
              'Encode::TW'            => '2.02',
              'Encode::Unicode'       => '2.03',
              'Encode::Unicode::UTF7' => '2.04',
              'ExtUtils::CBuilder'    => '0.18',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.12_01',
              'ExtUtils::Constant::Base'=> '0.03',
              'ExtUtils::Constant::ProxySubs'=> '0.03',
              'ExtUtils::Install'     => '1.41',
              'ExtUtils::Installed'   => '1.41',
              'ExtUtils::MM_Any'      => '0.13_02',
              'ExtUtils::MM_NW5'      => '2.08_01',
              'ExtUtils::MM_Unix'     => '1.5003',
              'ExtUtils::MM_VMS'      => '5.73_03',
              'ExtUtils::MM_Win32'    => '1.12_02',
              'ExtUtils::MM_Win95'    => '0.04_01',
              'ExtUtils::MakeMaker'   => '6.30_02',
              'ExtUtils::Manifest'    => '1.46_01',
              'ExtUtils::Mkbootstrap' => '1.15_01',
              'ExtUtils::Mksymlists'  => '1.19_01',
              'ExtUtils::Packlist'    => '1.41',
              'File::Basename'        => '2.75',
              'File::Find'            => '1.11',
              'File::GlobMapper'      => '0.000_02',
              'File::Spec'            => '3.19',
              'FileCache'             => '1.07',
              'Getopt::Long'          => '2.3501',
              'Hash::Util'            => '0.07',
              'Hash::Util::FieldHash' => '0.01',
              'IO'                    => '1.23_01',
              'IO::Compress::Adapter::Deflate'=> '2.000_13',
              'IO::Compress::Adapter::Identity'=> '2.000_13',
              'IO::Compress::Base'    => '2.000_13',
              'IO::Compress::Base::Common'=> '2.000_13',
              'IO::Compress::Deflate' => '2.000_13',
              'IO::Compress::Gzip'    => '2.000_13',
              'IO::Compress::Gzip::Constants'=> '2.000_13',
              'IO::Compress::RawDeflate'=> '2.000_13',
              'IO::Compress::Zip'     => '2.000_13',
              'IO::Compress::Zip::Constants'=> '2.000_13',
              'IO::Compress::Zlib::Constants'=> '2.000_13',
              'IO::Compress::Zlib::Extra'=> '2.000_13',
              'IO::Dir'               => '1.06',
              'IO::File'              => '1.14',
              'IO::Handle'            => '1.27',
              'IO::Socket'            => '1.30_01',
              'IO::Socket::INET'      => '1.31',
              'IO::Socket::UNIX'      => '1.23',
              'IO::Uncompress::Adapter::Identity'=> '2.000_13',
              'IO::Uncompress::Adapter::Inflate'=> '2.000_13',
              'IO::Uncompress::AnyInflate'=> '2.000_13',
              'IO::Uncompress::AnyUncompress'=> '2.000_13',
              'IO::Uncompress::Base'  => '2.000_13',
              'IO::Uncompress::Gunzip'=> '2.000_13',
              'IO::Uncompress::Inflate'=> '2.000_13',
              'IO::Uncompress::RawInflate'=> '2.000_13',
              'IO::Uncompress::Unzip' => '2.000_13',
              'MIME::Base64'          => '3.07_01',
              'Math::Complex'         => '1.36',
              'Math::Trig'            => '1.04',
              'Module::Build'         => '0.2805',
              'Module::Build::Base'   => undef,
              'Module::Build::Compat' => '0.03',
              'Module::Build::ConfigData'=> undef,
              'Module::Build::Cookbook'=> undef,
              'Module::Build::ModuleInfo'=> undef,
              'Module::Build::Notes'  => undef,
              'Module::Build::PPMMaker'=> undef,
              'Module::Build::Platform::Amiga'=> undef,
              'Module::Build::Platform::Default'=> undef,
              'Module::Build::Platform::EBCDIC'=> undef,
              'Module::Build::Platform::MPEiX'=> undef,
              'Module::Build::Platform::MacOS'=> undef,
              'Module::Build::Platform::RiscOS'=> undef,
              'Module::Build::Platform::Unix'=> undef,
              'Module::Build::Platform::VMS'=> undef,
              'Module::Build::Platform::VOS'=> undef,
              'Module::Build::Platform::Windows'=> undef,
              'Module::Build::Platform::aix'=> undef,
              'Module::Build::Platform::cygwin'=> undef,
              'Module::Build::Platform::darwin'=> undef,
              'Module::Build::Platform::os2'=> undef,
              'Module::Build::PodParser'=> undef,
              'Module::Build::Version'=> '0',
              'Module::Build::YAML'   => '0.50',
              'Module::CoreList'      => '2.08',
              'Module::Load'          => '0.10',
              'Module::Loaded'        => '0.01',
              'Package::Constants'    => '0.01',
              'Pod::Html'             => '1.07',
              'Pod::Man'              => '2.09',
              'Pod::Text'             => '3.07',
              'Pod::Text::Color'      => '2.03',
              'Pod::Text::Termcap'    => '2.03',
              'SDBM_File'             => '1.06',
              'Shell'                 => '0.7',
              'Sys::Syslog'           => '0.17',
              'Term::ANSIColor'       => '1.11',
              'Test::Builder'         => '0.33',
              'Test::Builder::Tester' => '1.04',
              'Test::Harness'         => '2.62',
              'Test::Harness::Util'   => '0.01',
              'Test::More'            => '0.64',
              'Test::Simple'          => '0.64',
              'Text::Balanced'        => '1.98_01',
              'Text::ParseWords'      => '3.25',
              'Text::Tabs'            => '2007.071101',
              'Text::Wrap'            => '2006.0711',
              'Tie::RefHash'          => '1.34_01',
              'Time::HiRes'           => '1.87',
              'Time::Local'           => '1.13',
              'Time::gmtime'          => '1.03',
              'UNIVERSAL'             => '1.04',
              'Unicode::Normalize'    => '1.01',
              'Win32API::File'        => '0.1001',
              'Win32API::File::ExtUtils::Myconst2perl'=> '1',
              'assertions'            => '0.03',
              'assertions::compat'    => '0.02',
              'autouse'               => '1.06',
              'diagnostics'           => '1.16',
              'encoding'              => '2.04',
              'encoding::warnings'    => '0.10',
              'feature'               => '1.01',
              're'                    => '0.0601',
              'threads'               => '1.38',
              'threads::shared'       => '0.94_01',
              'version'               => '0.67',
          },
          removed => {
              'Compress::Zlib::Common'=> 1,
              'Compress::Zlib::Compress::Gzip::Constants'=> 1,
              'Compress::Zlib::Compress::Zip::Constants'=> 1,
              'Compress::Zlib::CompressPlugin::Deflate'=> 1,
              'Compress::Zlib::CompressPlugin::Identity'=> 1,
              'Compress::Zlib::File::GlobMapper'=> 1,
              'Compress::Zlib::FileConstants'=> 1,
              'Compress::Zlib::IO::Compress::Base'=> 1,
              'Compress::Zlib::IO::Compress::Deflate'=> 1,
              'Compress::Zlib::IO::Compress::Gzip'=> 1,
              'Compress::Zlib::IO::Compress::RawDeflate'=> 1,
              'Compress::Zlib::IO::Compress::Zip'=> 1,
              'Compress::Zlib::IO::Uncompress::AnyInflate'=> 1,
              'Compress::Zlib::IO::Uncompress::AnyUncompress'=> 1,
              'Compress::Zlib::IO::Uncompress::Base'=> 1,
              'Compress::Zlib::IO::Uncompress::Gunzip'=> 1,
              'Compress::Zlib::IO::Uncompress::Inflate'=> 1,
              'Compress::Zlib::IO::Uncompress::RawInflate'=> 1,
              'Compress::Zlib::IO::Uncompress::Unzip'=> 1,
              'Compress::Zlib::ParseParameters'=> 1,
              'Compress::Zlib::UncompressPlugin::Identity'=> 1,
              'Compress::Zlib::UncompressPlugin::Inflate'=> 1,
          }
      },
      5.009005 => {
          delta_from => 5.009004,
          changed => {
              'Archive::Extract'      => '0.22_01',
              'Archive::Tar'          => '1.32',
              'Attribute::Handlers'   => '0.78_06',
              'AutoLoader'            => '5.63',
              'AutoSplit'             => '1.05',
              'B'                     => '1.16',
              'B::Concise'            => '0.72',
              'B::Debug'              => '1.05',
              'B::Deparse'            => '0.82',
              'B::Lint'               => '1.09',
              'B::Terse'              => '1.05',
              'Benchmark'             => '1.1',
              'CGI'                   => '3.29',
              'CGI::Cookie'           => '1.28',
              'CGI::Util'             => '1.5_01',
              'CPAN'                  => '1.9102',
              'CPAN::Debug'           => '5.400955',
              'CPAN::FirstTime'       => '5.401669',
              'CPAN::HandleConfig'    => '5.401744',
              'CPAN::Kwalify'         => '5.401418',
              'CPAN::Nox'             => '5.400844',
              'CPAN::Queue'           => '5.401704',
              'CPAN::Tarzip'          => '5.401717',
              'CPAN::Version'         => '5.401387',
              'CPANPLUS'              => '0.81_01',
              'CPANPLUS::Backend'     => undef,
              'CPANPLUS::Backend::RV' => undef,
              'CPANPLUS::Config'      => undef,
              'CPANPLUS::Configure'   => undef,
              'CPANPLUS::Configure::Setup'=> undef,
              'CPANPLUS::Dist'        => undef,
              'CPANPLUS::Dist::Base'  => '0.01',
              'CPANPLUS::Dist::Build' => '0.06_01',
              'CPANPLUS::Dist::Build::Constants'=> '0.01',
              'CPANPLUS::Dist::MM'    => undef,
              'CPANPLUS::Dist::Sample'=> undef,
              'CPANPLUS::Error'       => undef,
              'CPANPLUS::Internals'   => '0.81_01',
              'CPANPLUS::Internals::Constants'=> '0.01',
              'CPANPLUS::Internals::Constants::Report'=> '0.01',
              'CPANPLUS::Internals::Extract'=> undef,
              'CPANPLUS::Internals::Fetch'=> undef,
              'CPANPLUS::Internals::Report'=> undef,
              'CPANPLUS::Internals::Search'=> undef,
              'CPANPLUS::Internals::Source'=> undef,
              'CPANPLUS::Internals::Utils'=> undef,
              'CPANPLUS::Internals::Utils::Autoflush'=> undef,
              'CPANPLUS::Module'      => undef,
              'CPANPLUS::Module::Author'=> undef,
              'CPANPLUS::Module::Author::Fake'=> undef,
              'CPANPLUS::Module::Checksums'=> undef,
              'CPANPLUS::Module::Fake'=> undef,
              'CPANPLUS::Module::Signature'=> undef,
              'CPANPLUS::Selfupdate'  => undef,
              'CPANPLUS::Shell'       => undef,
              'CPANPLUS::Shell::Classic'=> '0.0562',
              'CPANPLUS::Shell::Default'=> '0.81_01',
              'CPANPLUS::Shell::Default::Plugins::Remote'=> undef,
              'CPANPLUS::Shell::Default::Plugins::Source'=> undef,
              'CPANPLUS::inc'         => undef,
              'Carp'                  => '1.07',
              'Carp::Heavy'           => '1.07',
              'Compress::Raw::Zlib'   => '2.005',
              'Compress::Zlib'        => '2.005',
              'Cwd'                   => '3.25',
              'DBM_Filter'            => '0.02',
              'DB_File'               => '1.815',
              'Data::Dumper'          => '2.121_13',
              'Devel::InnerPackage'   => '0.3',
              'Devel::PPPort'         => '3.11_01',
              'Digest::MD5'           => '2.36_01',
              'Digest::SHA'           => '5.44',
              'DynaLoader'            => '1.08',
              'Encode'                => '2.23',
              'Encode::Alias'         => '2.07',
              'Encode::Byte'          => '2.03',
              'Encode::Config'        => '2.04',
              'Encode::Encoding'      => '2.05',
              'Encode::GSM0338'       => '2.00',
              'Encode::JP::JIS7'      => '2.03',
              'Encode::MIME::Header'  => '2.05',
              'Encode::MIME::Name'    => '1.01',
              'Encode::Unicode'       => '2.05',
              'Errno'                 => '1.10',
              'Exporter'              => '5.60',
              'Exporter::Heavy'       => '5.60',
              'ExtUtils::CBuilder'    => '0.19',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.13',
              'ExtUtils::Command'     => '1.13',
              'ExtUtils::Command::MM' => '0.07',
              'ExtUtils::Constant::Base'=> '0.04',
              'ExtUtils::Install'     => '1.41_01',
              'ExtUtils::Liblist'     => '1.03',
              'ExtUtils::Liblist::Kid'=> '1.33',
              'ExtUtils::MM'          => '0.07',
              'ExtUtils::MM_AIX'      => '0.05',
              'ExtUtils::MM_Any'      => '0.15',
              'ExtUtils::MM_BeOS'     => '1.07',
              'ExtUtils::MM_Cygwin'   => '1.1',
              'ExtUtils::MM_DOS'      => '0.04',
              'ExtUtils::MM_MacOS'    => '1.1',
              'ExtUtils::MM_NW5'      => '2.1',
              'ExtUtils::MM_OS2'      => '1.07',
              'ExtUtils::MM_QNX'      => '0.04',
              'ExtUtils::MM_UWIN'     => '0.04',
              'ExtUtils::MM_Unix'     => '1.54_01',
              'ExtUtils::MM_VMS'      => '5.76',
              'ExtUtils::MM_VOS'      => '0.04',
              'ExtUtils::MM_Win32'    => '1.15',
              'ExtUtils::MM_Win95'    => '0.06',
              'ExtUtils::MY'          => '0.03',
              'ExtUtils::MakeMaker'   => '6.36',
              'ExtUtils::MakeMaker::Config'=> '0.04',
              'ExtUtils::MakeMaker::bytes'=> '0.03',
              'ExtUtils::MakeMaker::vmsish'=> '0.03',
              'ExtUtils::Manifest'    => '1.51_01',
              'ExtUtils::Mkbootstrap' => '1.17',
              'ExtUtils::Mksymlists'  => '1.21',
              'ExtUtils::ParseXS'     => '2.18',
              'ExtUtils::XSSymSet'    => '1.1',
              'ExtUtils::testlib'     => '1.17',
              'Fatal'                 => '1.05',
              'Fcntl'                 => '1.06',
              'File::Basename'        => '2.76',
              'File::Copy'            => '2.10',
              'File::Fetch'           => '0.10',
              'File::Glob'            => '1.06',
              'File::Path'            => '2.01',
              'File::Spec'            => '3.25',
              'File::Spec::Cygwin'    => '1.1_01',
              'File::Spec::VMS'       => '1.4_01',
              'File::Temp'            => '0.18',
              'Filter::Util::Call'    => '1.0602',
              'FindBin'               => '1.49',
              'Getopt::Long'          => '2.36',
              'Hash::Util::FieldHash' => '1.01',
              'IO::Compress::Adapter::Deflate'=> '2.005',
              'IO::Compress::Adapter::Identity'=> '2.005',
              'IO::Compress::Base'    => '2.005',
              'IO::Compress::Base::Common'=> '2.005',
              'IO::Compress::Deflate' => '2.005',
              'IO::Compress::Gzip'    => '2.005',
              'IO::Compress::Gzip::Constants'=> '2.005',
              'IO::Compress::RawDeflate'=> '2.005',
              'IO::Compress::Zip'     => '2.005',
              'IO::Compress::Zip::Constants'=> '2.005',
              'IO::Compress::Zlib::Constants'=> '2.005',
              'IO::Compress::Zlib::Extra'=> '2.005',
              'IO::Uncompress::Adapter::Identity'=> '2.005',
              'IO::Uncompress::Adapter::Inflate'=> '2.005',
              'IO::Uncompress::AnyInflate'=> '2.005',
              'IO::Uncompress::AnyUncompress'=> '2.005',
              'IO::Uncompress::Base'  => '2.005',
              'IO::Uncompress::Gunzip'=> '2.005',
              'IO::Uncompress::Inflate'=> '2.005',
              'IO::Uncompress::RawInflate'=> '2.005',
              'IO::Uncompress::Unzip' => '2.005',
              'IO::Zlib'              => '1.05_01',
              'IPC::Cmd'              => '0.36_01',
              'List::Util'            => '1.19',
              'Locale::Maketext::Simple'=> '0.18',
              'Log::Message'          => '0.01',
              'Log::Message::Config'  => '0.01',
              'Log::Message::Handlers'=> undef,
              'Log::Message::Item'    => undef,
              'Log::Message::Simple'  => '0.0201',
              'Math::BigFloat'        => '1.58',
              'Math::BigInt'          => '1.87',
              'Math::BigInt::Calc'    => '0.51',
              'Math::BigInt::FastCalc'=> '0.15_01',
              'Math::BigRat'          => '0.19',
              'Math::Complex'         => '1.37',
              'Memoize'               => '1.01_02',
              'Module::Build'         => '0.2808',
              'Module::Build::Config' => undef,
              'Module::Build::Version'=> '0.7203',
              'Module::CoreList'      => '2.12',
              'Module::Load::Conditional'=> '0.16',
              'Module::Pluggable'     => '3.6',
              'Module::Pluggable::Object'=> '3.6',
              'NDBM_File'             => '1.07',
              'Net::Cmd'              => '2.28',
              'Net::Config'           => '1.11',
              'Net::Domain'           => '2.20',
              'Net::FTP'              => '2.77',
              'Net::FTP::A'           => '1.18',
              'Net::NNTP'             => '2.24',
              'Net::POP3'             => '2.29',
              'Net::SMTP'             => '2.31',
              'ODBM_File'             => '1.07',
              'OS2::DLL'              => '1.03',
              'Object::Accessor'      => '0.32',
              'Opcode'                => '1.09',
              'POSIX'                 => '1.13',
              'Params::Check'         => '0.26',
              'PerlIO::encoding'      => '0.10',
              'PerlIO::scalar'        => '0.05',
              'PerlIO::via'           => '0.04',
              'Pod::Html'             => '1.08',
              'Pod::Man'              => '2.12',
              'Pod::ParseUtils'       => '1.35',
              'Pod::Parser'           => '1.35',
              'Pod::Select'           => '1.35',
              'Pod::Simple'           => '3.05',
              'Pod::Text'             => '3.08',
              'Pod::Usage'            => '1.35',
              'Scalar::Util'          => '1.19',
              'SelfLoader'            => '1.11',
              'Shell'                 => '0.72_01',
              'Socket'                => '1.79',
              'Storable'              => '2.16',
              'Switch'                => '2.13',
              'Sys::Syslog'           => '0.18_01',
              'Term::ANSIColor'       => '1.12',
              'Term::UI'              => '0.14_01',
              'Term::UI::History'     => undef,
              'Test::Builder'         => '0.70',
              'Test::Builder::Module' => '0.68',
              'Test::Builder::Tester' => '1.07',
              'Test::Harness'         => '2.64',
              'Test::Harness::Results'=> '0.01',
              'Test::More'            => '0.70',
              'Test::Simple'          => '0.70',
              'Text::Balanced'        => '2.0.0',
              'Text::Soundex'         => '3.02',
              'Text::Tabs'            => '2007.1117',
              'Text::Wrap'            => '2006.1117',
              'Thread'                => '3.02',
              'Tie::File'             => '0.97_02',
              'Tie::Hash::NamedCapture'=> '0.06',
              'Tie::Memoize'          => '1.1',
              'Tie::RefHash'          => '1.37',
              'Time::HiRes'           => '1.9707',
              'Time::Local'           => '1.17',
              'Time::Piece'           => '1.11_02',
              'Time::Seconds'         => undef,
              'Unicode'               => '5.0.0',
              'Unicode::Normalize'    => '1.02',
              'Unicode::UCD'          => '0.25',
              'VMS::DCLsym'           => '1.03',
              'Win32'                 => '0.30',
              'Win32API::File'        => '0.1001_01',
              'Win32CORE'             => '0.02',
              'XS::APItest'           => '0.12',
              'XSLoader'              => '0.08',
              'attributes'            => '0.08',
              'base'                  => '2.12',
              'bigint'                => '0.22',
              'bignum'                => '0.22',
              'bigrat'                => '0.22',
              'bytes'                 => '1.03',
              'charnames'             => '1.06',
              'constant'              => '1.10',
              'diagnostics'           => '1.17',
              'encoding'              => '2.06',
              'encoding::warnings'    => '0.11',
              'feature'               => '1.10',
              'fields'                => '2.12',
              'less'                  => '0.02',
              'mro'                   => '1.00',
              'overload'              => '1.06',
              're'                    => '0.08',
              'sigtrap'               => '1.04',
              'sort'                  => '2.01',
              'strict'                => '1.04',
              'threads'               => '1.63',
              'threads::shared'       => '1.12',
              'utf8'                  => '1.07',
              'version'               => '0.7203',
              'warnings'              => '1.06',
          },
          removed => {
              'B::Asmdata'            => 1,
              'B::Assembler'          => 1,
              'B::Bblock'             => 1,
              'B::Bytecode'           => 1,
              'B::C'                  => 1,
              'B::CC'                 => 1,
              'B::Disassembler'       => 1,
              'B::Stackobj'           => 1,
              'B::Stash'              => 1,
              'ByteLoader'            => 1,
              'Thread::Signal'        => 1,
              'Thread::Specific'      => 1,
              'assertions'            => 1,
              'assertions::activate'  => 1,
              'assertions::compat'    => 1,
          }
      },
      5.01 => {
          delta_from => 5.009005,
          changed => {
              'Archive::Extract'      => '0.24',
              'Archive::Tar'          => '1.38',
              'Attribute::Handlers'   => '0.79',
              'B'                     => '1.17',
              'B::Concise'            => '0.74',
              'B::Deparse'            => '0.83',
              'CPAN'                  => '1.9205',
              'CPAN::API::HOWTO'      => undef,
              'CPAN::Debug'           => '5.402212',
              'CPAN::DeferedCode'     => '5.50',
              'CPAN::FirstTime'       => '5.402229',
              'CPAN::HandleConfig'    => '5.402212',
              'CPAN::Nox'             => '5.402411',
              'CPAN::Queue'           => '5.402212',
              'CPAN::Tarzip'          => '5.402213',
              'CPAN::Version'         => '5.5',
              'CPANPLUS'              => '0.84',
              'CPANPLUS::Dist::Build' => '0.06_02',
              'CPANPLUS::Internals'   => '0.84',
              'CPANPLUS::Shell::Default'=> '0.84',
              'CPANPLUS::Shell::Default::Plugins::CustomSource'=> undef,
              'Carp'                  => '1.08',
              'Carp::Heavy'           => '1.08',
              'Compress::Raw::Zlib'   => '2.008',
              'Compress::Zlib'        => '2.008',
              'Cwd'                   => '3.2501',
              'DB_File'               => '1.816_1',
              'Data::Dumper'          => '2.121_14',
              'Devel::PPPort'         => '3.13',
              'Digest::SHA'           => '5.45',
              'Exporter'              => '5.62',
              'Exporter::Heavy'       => '5.62',
              'ExtUtils::CBuilder'    => '0.21',
              'ExtUtils::CBuilder::Base'=> '0.21',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.21',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.22',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.21',
              'ExtUtils::CBuilder::Platform::aix'=> '0.21',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.21',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.21',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.21',
              'ExtUtils::CBuilder::Platform::os2'=> '0.21',
              'ExtUtils::Command::MM' => '6.42',
              'ExtUtils::Constant::ProxySubs'=> '0.05',
              'ExtUtils::Embed'       => '1.27',
              'ExtUtils::Install'     => '1.44',
              'ExtUtils::Installed'   => '1.43',
              'ExtUtils::Liblist'     => '6.42',
              'ExtUtils::Liblist::Kid'=> '6.42',
              'ExtUtils::MM'          => '6.42',
              'ExtUtils::MM_AIX'      => '6.42',
              'ExtUtils::MM_Any'      => '6.42',
              'ExtUtils::MM_BeOS'     => '6.42',
              'ExtUtils::MM_Cygwin'   => '6.42',
              'ExtUtils::MM_DOS'      => '6.42',
              'ExtUtils::MM_MacOS'    => '6.42',
              'ExtUtils::MM_NW5'      => '6.42',
              'ExtUtils::MM_OS2'      => '6.42',
              'ExtUtils::MM_QNX'      => '6.42',
              'ExtUtils::MM_UWIN'     => '6.42',
              'ExtUtils::MM_Unix'     => '6.42',
              'ExtUtils::MM_VMS'      => '6.42',
              'ExtUtils::MM_VOS'      => '6.42',
              'ExtUtils::MM_Win32'    => '6.42',
              'ExtUtils::MM_Win95'    => '6.42',
              'ExtUtils::MY'          => '6.42',
              'ExtUtils::MakeMaker'   => '6.42',
              'ExtUtils::MakeMaker::Config'=> '6.42',
              'ExtUtils::MakeMaker::bytes'=> '6.42',
              'ExtUtils::MakeMaker::vmsish'=> '6.42',
              'ExtUtils::Mkbootstrap' => '6.42',
              'ExtUtils::Mksymlists'  => '6.42',
              'ExtUtils::Packlist'    => '1.43',
              'ExtUtils::ParseXS'     => '2.18_02',
              'ExtUtils::testlib'     => '6.42',
              'File::Copy'            => '2.11',
              'File::Fetch'           => '0.14',
              'File::Find'            => '1.12',
              'File::Path'            => '2.04',
              'File::Spec'            => '3.2501',
              'File::Spec::Cygwin'    => '3.2501',
              'File::Spec::Epoc'      => '3.2501',
              'File::Spec::Functions' => '3.2501',
              'File::Spec::Mac'       => '3.2501',
              'File::Spec::OS2'       => '3.2501',
              'File::Spec::Unix'      => '3.2501',
              'File::Spec::VMS'       => '3.2501',
              'File::Spec::Win32'     => '3.2501',
              'Filter::Util::Call'    => '1.07',
              'Getopt::Long'          => '2.37',
              'Hash::Util::FieldHash' => '1.03',
              'IO::Compress::Adapter::Deflate'=> '2.008',
              'IO::Compress::Adapter::Identity'=> '2.008',
              'IO::Compress::Base'    => '2.008',
              'IO::Compress::Base::Common'=> '2.008',
              'IO::Compress::Deflate' => '2.008',
              'IO::Compress::Gzip'    => '2.008',
              'IO::Compress::Gzip::Constants'=> '2.008',
              'IO::Compress::RawDeflate'=> '2.008',
              'IO::Compress::Zip'     => '2.008',
              'IO::Compress::Zip::Constants'=> '2.008',
              'IO::Compress::Zlib::Constants'=> '2.008',
              'IO::Compress::Zlib::Extra'=> '2.008',
              'IO::Uncompress::Adapter::Identity'=> '2.008',
              'IO::Uncompress::Adapter::Inflate'=> '2.008',
              'IO::Uncompress::AnyInflate'=> '2.008',
              'IO::Uncompress::AnyUncompress'=> '2.008',
              'IO::Uncompress::Base'  => '2.008',
              'IO::Uncompress::Gunzip'=> '2.008',
              'IO::Uncompress::Inflate'=> '2.008',
              'IO::Uncompress::RawInflate'=> '2.008',
              'IO::Uncompress::Unzip' => '2.008',
              'IO::Zlib'              => '1.07',
              'IPC::Cmd'              => '0.40_1',
              'IPC::SysV'             => '1.05',
              'Locale::Maketext'      => '1.12',
              'Log::Message::Simple'  => '0.04',
              'Math::BigFloat'        => '1.59',
              'Math::BigInt'          => '1.88',
              'Math::BigInt::Calc'    => '0.52',
              'Math::BigInt::FastCalc'=> '0.16',
              'Math::BigRat'          => '0.21',
              'Module::Build'         => '0.2808_01',
              'Module::Build::Base'   => '0.2808_01',
              'Module::Build::Compat' => '0.2808_01',
              'Module::Build::Config' => '0.2808_01',
              'Module::Build::Dumper' => undef,
              'Module::Build::ModuleInfo'=> '0.2808_01',
              'Module::Build::Notes'  => '0.2808_01',
              'Module::Build::PPMMaker'=> '0.2808_01',
              'Module::Build::Platform::Amiga'=> '0.2808_01',
              'Module::Build::Platform::Default'=> '0.2808_01',
              'Module::Build::Platform::EBCDIC'=> '0.2808_01',
              'Module::Build::Platform::MPEiX'=> '0.2808_01',
              'Module::Build::Platform::MacOS'=> '0.2808_01',
              'Module::Build::Platform::RiscOS'=> '0.2808_01',
              'Module::Build::Platform::Unix'=> '0.2808_01',
              'Module::Build::Platform::VMS'=> '0.2808_01',
              'Module::Build::Platform::VOS'=> '0.2808_01',
              'Module::Build::Platform::Windows'=> '0.2808_01',
              'Module::Build::Platform::aix'=> '0.2808_01',
              'Module::Build::Platform::cygwin'=> '0.2808_01',
              'Module::Build::Platform::darwin'=> '0.2808_01',
              'Module::Build::Platform::os2'=> '0.2808_01',
              'Module::Build::PodParser'=> '0.2808_01',
              'Module::CoreList'      => '2.13',
              'Module::Load'          => '0.12',
              'Module::Load::Conditional'=> '0.22',
              'Net::Cmd'              => '2.29',
              'Net::Ping'             => '2.33',
              'Opcode'                => '1.11',
              'Pod::Checker'          => '1.43_01',
              'Pod::Man'              => '2.16',
              'Pod::Perldoc'          => '3.14_02',
              'Socket'                => '1.80',
              'Storable'              => '2.18',
              'Sys::Syslog'           => '0.22',
              'Sys::Syslog::win32::Win32'=> undef,
              'Term::Cap'             => '1.12',
              'Term::ReadLine'        => '1.03',
              'Term::UI'              => '0.18',
              'Test::Builder'         => '0.72',
              'Test::Builder::Module' => '0.72',
              'Test::Builder::Tester' => '1.09',
              'Test::Harness::Straps' => '0.26_01',
              'Test::More'            => '0.72',
              'Test::Simple'          => '0.72',
              'Text::ParseWords'      => '3.26',
              'Text::Soundex'         => '3.03',
              'Tie::StdHandle'        => undef,
              'Time::HiRes'           => '1.9711',
              'Time::Local'           => '1.18',
              'Time::Piece'           => '1.12',
              'VMS::Filespec'         => '1.12',
              'Win32'                 => '0.34',
              'base'                  => '2.13',
              'constant'              => '1.13',
              'feature'               => '1.11',
              'fields'                => '2.13',
              'filetest'              => '1.02',
              'open'                  => '1.06',
              'threads'               => '1.67',
              'threads::shared'       => '1.14',
              'version'               => '0.74',
          },
          removed => {
          }
      },
      5.010001 => {
          delta_from => 5.01,
          changed => {
              'App::Prove'            => '3.17',
              'App::Prove::State'     => '3.17',
              'App::Prove::State::Result'=> '3.17',
              'App::Prove::State::Result::Test'=> '3.17',
              'Archive::Extract'      => '0.34',
              'Archive::Tar'          => '1.52',
              'Attribute::Handlers'   => '0.85',
              'AutoLoader'            => '5.68',
              'AutoSplit'             => '1.06',
              'B'                     => '1.22',
              'B::Concise'            => '0.76',
              'B::Debug'              => '1.11',
              'B::Deparse'            => '0.89',
              'B::Lint'               => '1.11',
              'B::Lint::Debug'        => undef,
              'B::Xref'               => '1.02',
              'Benchmark'             => '1.11',
              'CGI'                   => '3.43',
              'CGI::Carp'             => '1.30_01',
              'CGI::Cookie'           => '1.29',
              'CPAN'                  => '1.9402',
              'CPAN::Author'          => '5.5',
              'CPAN::Bundle'          => '5.5',
              'CPAN::CacheMgr'        => '5.5',
              'CPAN::Complete'        => '5.5',
              'CPAN::Debug'           => '5.5',
              'CPAN::DeferredCode'    => '5.50',
              'CPAN::Distribution'    => '1.93',
              'CPAN::Distroprefs'     => '6',
              'CPAN::Distrostatus'    => '5.5',
              'CPAN::Exception::RecursiveDependency'=> '5.5',
              'CPAN::Exception::blocked_urllist'=> '1.0',
              'CPAN::Exception::yaml_not_installed'=> '5.5',
              'CPAN::FTP'             => '5.5001',
              'CPAN::FTP::netrc'      => '1.00',
              'CPAN::FirstTime'       => '5.53',
              'CPAN::HandleConfig'    => '5.5',
              'CPAN::Index'           => '1.93',
              'CPAN::InfoObj'         => '5.5',
              'CPAN::Kwalify'         => '5.50',
              'CPAN::LWP::UserAgent'  => '1.00',
              'CPAN::Module'          => '5.5',
              'CPAN::Nox'             => '5.50',
              'CPAN::Prompt'          => '5.5',
              'CPAN::Queue'           => '5.5',
              'CPAN::Shell'           => '5.5',
              'CPAN::Tarzip'          => '5.501',
              'CPAN::URL'             => '5.5',
              'CPANPLUS'              => '0.88',
              'CPANPLUS::Dist::Autobundle'=> undef,
              'CPANPLUS::Dist::Base'  => undef,
              'CPANPLUS::Dist::Build' => '0.36',
              'CPANPLUS::Dist::Build::Constants'=> '0.36',
              'CPANPLUS::Internals'   => '0.88',
              'CPANPLUS::Internals::Constants'=> undef,
              'CPANPLUS::Internals::Constants::Report'=> undef,
              'CPANPLUS::Internals::Source::Memory'=> undef,
              'CPANPLUS::Internals::Source::SQLite'=> undef,
              'CPANPLUS::Internals::Source::SQLite::Tie'=> undef,
              'CPANPLUS::Shell::Default'=> '0.88',
              'Carp'                  => '1.11',
              'Carp::Heavy'           => '1.11',
              'Compress::Raw::Bzip2'  => '2.020',
              'Compress::Raw::Zlib'   => '2.020',
              'Compress::Zlib'        => '2.020',
              'Cwd'                   => '3.30',
              'DB'                    => '1.02',
              'DBM_Filter::compress'  => '0.02',
              'DBM_Filter::encode'    => '0.02',
              'DBM_Filter::int32'     => '0.02',
              'DBM_Filter::null'      => '0.02',
              'DBM_Filter::utf8'      => '0.02',
              'DB_File'               => '1.820',
              'Data::Dumper'          => '2.124',
              'Devel::DProf'          => '20080331.00',
              'Devel::PPPort'         => '3.19',
              'Devel::Peek'           => '1.04',
              'Digest'                => '1.16',
              'Digest::MD5'           => '2.39',
              'Digest::SHA'           => '5.47',
              'Digest::base'          => '1.16',
              'Digest::file'          => '1.16',
              'DirHandle'             => '1.03',
              'Dumpvalue'             => '1.13',
              'DynaLoader'            => '1.10',
              'Encode'                => '2.35',
              'Encode::Alias'         => '2.12',
              'Encode::CN::HZ'        => '2.05',
              'Encode::Config'        => '2.05',
              'Encode::GSM0338'       => '2.01',
              'Encode::Guess'         => '2.03',
              'Encode::JP::JIS7'      => '2.04',
              'Encode::MIME::Header'  => '2.11',
              'Encode::Unicode'       => '2.06',
              'Errno'                 => '1.11',
              'Exporter'              => '5.63',
              'Exporter::Heavy'       => '5.63',
              'ExtUtils::CBuilder'    => '0.2602',
              'ExtUtils::CBuilder::Base'=> '0.2602',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.2602',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.2602',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.2602',
              'ExtUtils::CBuilder::Platform::aix'=> '0.2602',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.2602',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.2602',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.2602',
              'ExtUtils::CBuilder::Platform::os2'=> '0.2602',
              'ExtUtils::Command'     => '1.16',
              'ExtUtils::Command::MM' => '6.55_02',
              'ExtUtils::Constant'    => '0.22',
              'ExtUtils::Constant::ProxySubs'=> '0.06',
              'ExtUtils::Constant::Utils'=> '0.02',
              'ExtUtils::Constant::XS'=> '0.03',
              'ExtUtils::Embed'       => '1.28',
              'ExtUtils::Install'     => '1.54',
              'ExtUtils::Installed'   => '1.999_001',
              'ExtUtils::Liblist'     => '6.55_02',
              'ExtUtils::Liblist::Kid'=> '6.5502',
              'ExtUtils::MM'          => '6.55_02',
              'ExtUtils::MM_AIX'      => '6.55_02',
              'ExtUtils::MM_Any'      => '6.55_02',
              'ExtUtils::MM_BeOS'     => '6.55_02',
              'ExtUtils::MM_Cygwin'   => '6.55_02',
              'ExtUtils::MM_DOS'      => '6.5502',
              'ExtUtils::MM_Darwin'   => '6.55_02',
              'ExtUtils::MM_MacOS'    => '6.5502',
              'ExtUtils::MM_NW5'      => '6.55_02',
              'ExtUtils::MM_OS2'      => '6.55_02',
              'ExtUtils::MM_QNX'      => '6.55_02',
              'ExtUtils::MM_UWIN'     => '6.5502',
              'ExtUtils::MM_Unix'     => '6.55_02',
              'ExtUtils::MM_VMS'      => '6.55_02',
              'ExtUtils::MM_VOS'      => '6.55_02',
              'ExtUtils::MM_Win32'    => '6.55_02',
              'ExtUtils::MM_Win95'    => '6.55_02',
              'ExtUtils::MY'          => '6.5502',
              'ExtUtils::MakeMaker'   => '6.55_02',
              'ExtUtils::MakeMaker::Config'=> '6.55_02',
              'ExtUtils::Manifest'    => '1.56',
              'ExtUtils::Mkbootstrap' => '6.55_02',
              'ExtUtils::Mksymlists'  => '6.55_02',
              'ExtUtils::ParseXS'     => '2.2002',
              'ExtUtils::testlib'     => '6.5502',
              'Fatal'                 => '2.06_01',
              'File::Basename'        => '2.77',
              'File::CheckTree'       => '4.4',
              'File::Compare'         => '1.1006',
              'File::Copy'            => '2.14',
              'File::DosGlob'         => '1.01',
              'File::Fetch'           => '0.20',
              'File::Find'            => '1.14',
              'File::GlobMapper'      => '1.000',
              'File::Path'            => '2.07_03',
              'File::Spec'            => '3.30',
              'File::Spec::Cygwin'    => '3.30',
              'File::Spec::Epoc'      => '3.30',
              'File::Spec::Functions' => '3.30',
              'File::Spec::Mac'       => '3.30',
              'File::Spec::OS2'       => '3.30',
              'File::Spec::Unix'      => '3.30',
              'File::Spec::VMS'       => '3.30',
              'File::Spec::Win32'     => '3.30',
              'File::Temp'            => '0.22',
              'File::stat'            => '1.01',
              'FileCache'             => '1.08',
              'FileHandle'            => '2.02',
              'Filter::Simple'        => '0.84',
              'Filter::Util::Call'    => '1.08',
              'FindBin'               => '1.50',
              'GDBM_File'             => '1.09',
              'Getopt::Long'          => '2.38',
              'Getopt::Std'           => '1.06',
              'Hash::Util::FieldHash' => '1.04',
              'I18N::Collate'         => '1.01',
              'IO'                    => '1.25',
              'IO::Compress::Adapter::Bzip2'=> '2.020',
              'IO::Compress::Adapter::Deflate'=> '2.020',
              'IO::Compress::Adapter::Identity'=> '2.020',
              'IO::Compress::Base'    => '2.020',
              'IO::Compress::Base::Common'=> '2.020',
              'IO::Compress::Bzip2'   => '2.020',
              'IO::Compress::Deflate' => '2.020',
              'IO::Compress::Gzip'    => '2.020',
              'IO::Compress::Gzip::Constants'=> '2.020',
              'IO::Compress::RawDeflate'=> '2.020',
              'IO::Compress::Zip'     => '2.020',
              'IO::Compress::Zip::Constants'=> '2.020',
              'IO::Compress::Zlib::Constants'=> '2.020',
              'IO::Compress::Zlib::Extra'=> '2.020',
              'IO::Dir'               => '1.07',
              'IO::Handle'            => '1.28',
              'IO::Socket'            => '1.31',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.020',
              'IO::Uncompress::Adapter::Identity'=> '2.020',
              'IO::Uncompress::Adapter::Inflate'=> '2.020',
              'IO::Uncompress::AnyInflate'=> '2.020',
              'IO::Uncompress::AnyUncompress'=> '2.020',
              'IO::Uncompress::Base'  => '2.020',
              'IO::Uncompress::Bunzip2'=> '2.020',
              'IO::Uncompress::Gunzip'=> '2.020',
              'IO::Uncompress::Inflate'=> '2.020',
              'IO::Uncompress::RawInflate'=> '2.020',
              'IO::Uncompress::Unzip' => '2.020',
              'IO::Zlib'              => '1.09',
              'IPC::Cmd'              => '0.46',
              'IPC::Msg'              => '2.01',
              'IPC::Open2'            => '1.03',
              'IPC::Open3'            => '1.04',
              'IPC::Semaphore'        => '2.01',
              'IPC::SharedMem'        => '2.01',
              'IPC::SysV'             => '2.01',
              'List::Util'            => '1.21',
              'List::Util::PP'        => '1.21',
              'List::Util::XS'        => '1.21',
              'Locale::Maketext'      => '1.13',
              'Locale::Maketext::Guts'=> '1.13',
              'Locale::Maketext::GutsLoader'=> '1.13',
              'Log::Message'          => '0.02',
              'MIME::Base64'          => '3.08',
              'MIME::QuotedPrint'     => '3.08',
              'Math::BigFloat'        => '1.60',
              'Math::BigInt'          => '1.89',
              'Math::BigInt::FastCalc'=> '0.19',
              'Math::BigRat'          => '0.22',
              'Math::Complex'         => '1.56',
              'Math::Trig'            => '1.2',
              'Memoize'               => '1.01_03',
              'Module::Build'         => '0.340201',
              'Module::Build::Base'   => '0.340201',
              'Module::Build::Compat' => '0.340201',
              'Module::Build::Config' => '0.340201',
              'Module::Build::Cookbook'=> '0.340201',
              'Module::Build::Dumper' => '0.340201',
              'Module::Build::ModuleInfo'=> '0.340201',
              'Module::Build::Notes'  => '0.340201',
              'Module::Build::PPMMaker'=> '0.340201',
              'Module::Build::Platform::Amiga'=> '0.340201',
              'Module::Build::Platform::Default'=> '0.340201',
              'Module::Build::Platform::EBCDIC'=> '0.340201',
              'Module::Build::Platform::MPEiX'=> '0.340201',
              'Module::Build::Platform::MacOS'=> '0.340201',
              'Module::Build::Platform::RiscOS'=> '0.340201',
              'Module::Build::Platform::Unix'=> '0.340201',
              'Module::Build::Platform::VMS'=> '0.340201',
              'Module::Build::Platform::VOS'=> '0.340201',
              'Module::Build::Platform::Windows'=> '0.340201',
              'Module::Build::Platform::aix'=> '0.340201',
              'Module::Build::Platform::cygwin'=> '0.340201',
              'Module::Build::Platform::darwin'=> '0.340201',
              'Module::Build::Platform::os2'=> '0.340201',
              'Module::Build::PodParser'=> '0.340201',
              'Module::Build::Version'=> '0.77',
              'Module::CoreList'      => '2.18',
              'Module::Load'          => '0.16',
              'Module::Load::Conditional'=> '0.30',
              'Module::Loaded'        => '0.02',
              'Module::Pluggable'     => '3.9',
              'Module::Pluggable::Object'=> '3.9',
              'NDBM_File'             => '1.08',
              'NEXT'                  => '0.64',
              'Net::Ping'             => '2.36',
              'O'                     => '1.01',
              'OS2::Process'          => '1.03',
              'OS2::REXX'             => '1.04',
              'Object::Accessor'      => '0.34',
              'POSIX'                 => '1.17',
              'Package::Constants'    => '0.02',
              'Parse::CPAN::Meta'     => '1.39',
              'PerlIO'                => '1.06',
              'PerlIO::encoding'      => '0.11',
              'PerlIO::scalar'        => '0.07',
              'PerlIO::via'           => '0.07',
              'Pod::Checker'          => '1.45',
              'Pod::Find'             => '1.35',
              'Pod::Html'             => '1.09',
              'Pod::InputObjects'     => '1.31',
              'Pod::Man'              => '2.22',
              'Pod::ParseLink'        => '1.09',
              'Pod::ParseUtils'       => '1.36',
              'Pod::Parser'           => '1.37',
              'Pod::Perldoc'          => '3.14_04',
              'Pod::PlainText'        => '2.04',
              'Pod::Select'           => '1.36',
              'Pod::Simple'           => '3.07',
              'Pod::Simple::XHTML'    => '3.04',
              'Pod::Text'             => '3.13',
              'Pod::Text::Color'      => '2.05',
              'Pod::Text::Overstrike' => '2.03',
              'Pod::Text::Termcap'    => '2.05',
              'Pod::Usage'            => '1.36',
              'Safe'                  => '2.18',
              'Scalar::Util'          => '1.21',
              'Scalar::Util::PP'      => '1.21',
              'SelectSaver'           => '1.02',
              'SelfLoader'            => '1.17',
              'Socket'                => '1.82',
              'Storable'              => '2.20',
              'Switch'                => '2.14',
              'Symbol'                => '1.07',
              'Sys::Syslog'           => '0.27',
              'TAP::Base'             => '3.17',
              'TAP::Formatter::Base'  => '3.17',
              'TAP::Formatter::Color' => '3.17',
              'TAP::Formatter::Console'=> '3.17',
              'TAP::Formatter::Console::ParallelSession'=> '3.17',
              'TAP::Formatter::Console::Session'=> '3.17',
              'TAP::Formatter::File'  => '3.17',
              'TAP::Formatter::File::Session'=> '3.17',
              'TAP::Formatter::Session'=> '3.17',
              'TAP::Harness'          => '3.17',
              'TAP::Object'           => '3.17',
              'TAP::Parser'           => '3.17',
              'TAP::Parser::Aggregator'=> '3.17',
              'TAP::Parser::Grammar'  => '3.17',
              'TAP::Parser::Iterator' => '3.17',
              'TAP::Parser::Iterator::Array'=> '3.17',
              'TAP::Parser::Iterator::Process'=> '3.17',
              'TAP::Parser::Iterator::Stream'=> '3.17',
              'TAP::Parser::IteratorFactory'=> '3.17',
              'TAP::Parser::Multiplexer'=> '3.17',
              'TAP::Parser::Result'   => '3.17',
              'TAP::Parser::Result::Bailout'=> '3.17',
              'TAP::Parser::Result::Comment'=> '3.17',
              'TAP::Parser::Result::Plan'=> '3.17',
              'TAP::Parser::Result::Pragma'=> '3.17',
              'TAP::Parser::Result::Test'=> '3.17',
              'TAP::Parser::Result::Unknown'=> '3.17',
              'TAP::Parser::Result::Version'=> '3.17',
              'TAP::Parser::Result::YAML'=> '3.17',
              'TAP::Parser::ResultFactory'=> '3.17',
              'TAP::Parser::Scheduler'=> '3.17',
              'TAP::Parser::Scheduler::Job'=> '3.17',
              'TAP::Parser::Scheduler::Spinner'=> '3.17',
              'TAP::Parser::Source'   => '3.17',
              'TAP::Parser::Source::Perl'=> '3.17',
              'TAP::Parser::Utils'    => '3.17',
              'TAP::Parser::YAMLish::Reader'=> '3.17',
              'TAP::Parser::YAMLish::Writer'=> '3.17',
              'Term::ANSIColor'       => '2.00',
              'Term::ReadLine'        => '1.04',
              'Term::UI'              => '0.20',
              'Test'                  => '1.25_02',
              'Test::Builder'         => '0.92',
              'Test::Builder::Module' => '0.92',
              'Test::Builder::Tester' => '1.18',
              'Test::Builder::Tester::Color'=> '1.18',
              'Test::Harness'         => '3.17',
              'Test::More'            => '0.92',
              'Test::Simple'          => '0.92',
              'Text::ParseWords'      => '3.27',
              'Text::Tabs'            => '2009.0305',
              'Text::Wrap'            => '2009.0305',
              'Thread::Queue'         => '2.11',
              'Thread::Semaphore'     => '2.09',
              'Tie::Handle'           => '4.2',
              'Tie::Hash'             => '1.03',
              'Tie::RefHash'          => '1.38',
              'Tie::Scalar'           => '1.01',
              'Tie::StdHandle'        => '4.2',
              'Time::HiRes'           => '1.9719',
              'Time::Local'           => '1.1901',
              'Time::Piece'           => '1.15',
              'UNIVERSAL'             => '1.05',
              'Unicode'               => '5.1.0',
              'Unicode::Normalize'    => '1.03',
              'Unicode::UCD'          => '0.27',
              'VMS::Stdio'            => '2.4',
              'Win32'                 => '0.39',
              'Win32API::File'        => '0.1101',
              'XS::APItest'           => '0.15',
              'XS::Typemap'           => '0.03',
              'XSLoader'              => '0.10',
              'attributes'            => '0.09',
              'attrs'                 => '1.03',
              'autodie'               => '2.06_01',
              'autodie::exception'    => '2.06_01',
              'autodie::exception::system'=> '2.06_01',
              'autodie::hints'        => '2.06_01',
              'base'                  => '2.14',
              'bigint'                => '0.23',
              'bignum'                => '0.23',
              'bigrat'                => '0.23',
              'blib'                  => '1.04',
              'charnames'             => '1.07',
              'constant'              => '1.17',
              'encoding'              => '2.6_01',
              'feature'               => '1.13',
              'fields'                => '2.14',
              'lib'                   => '0.62',
              'mro'                   => '1.01',
              'open'                  => '1.07',
              'ops'                   => '1.02',
              'overload'              => '1.07',
              'overload::numbers'     => undef,
              'overloading'           => '0.01',
              'parent'                => '0.221',
              're'                    => '0.09',
              'threads'               => '1.72',
              'threads::shared'       => '1.29',
              'version'               => '0.77',
          },
          removed => {
              'CPAN::API::HOWTO'      => 1,
              'CPAN::DeferedCode'     => 1,
              'CPANPLUS::inc'         => 1,
              'ExtUtils::MakeMaker::bytes'=> 1,
              'ExtUtils::MakeMaker::vmsish'=> 1,
              'Test::Harness::Assert' => 1,
              'Test::Harness::Iterator'=> 1,
              'Test::Harness::Point'  => 1,
              'Test::Harness::Results'=> 1,
              'Test::Harness::Straps' => 1,
              'Test::Harness::Util'   => 1,
          }
      },
      5.011 => {
          delta_from => 5.010001,
          changed => {
              'Archive::Tar'          => '1.54',
              'Attribute::Handlers'   => '0.87',
              'AutoLoader'            => '5.70',
              'B::Deparse'            => '0.91',
              'B::Lint'               => '1.11_01',
              'B::Lint::Debug'        => '0.01',
              'CGI'                   => '3.45',
              'CGI::Apache'           => '1.01',
              'CGI::Carp'             => '3.45',
              'CGI::Pretty'           => '3.44',
              'CGI::Switch'           => '1.01',
              'CGI::Util'             => '3.45',
              'CPAN'                  => '1.94_51',
              'CPAN::Distribution'    => '1.94',
              'CPAN::FTP'             => '5.5002',
              'CPAN::Index'           => '1.94',
              'CPAN::LWP::UserAgent'  => '1.94',
              'CPANPLUS::Dist::Build' => '0.40',
              'CPANPLUS::Dist::Build::Constants'=> '0.40',
              'Carp'                  => '1.12',
              'Carp::Heavy'           => '1.12',
              'Class::ISA'            => '0.36',
              'Compress::Raw::Bzip2'  => '2.021',
              'Compress::Raw::Zlib'   => '2.021',
              'Compress::Zlib'        => '2.021',
              'Cwd'                   => '3.3002',
              'Data::Dumper'          => '2.125',
              'Encode'                => '2.37',
              'Exporter'              => '5.64',
              'Exporter::Heavy'       => '5.64',
              'ExtUtils::ParseXS'     => '2.200403',
              'File::Basename'        => '2.78',
              'File::Copy'            => '2.16',
              'File::stat'            => '1.02',
              'IO'                    => '1.25_01',
              'IO::Compress::Adapter::Bzip2'=> '2.021',
              'IO::Compress::Adapter::Deflate'=> '2.021',
              'IO::Compress::Adapter::Identity'=> '2.021',
              'IO::Compress::Base'    => '2.021',
              'IO::Compress::Base::Common'=> '2.021',
              'IO::Compress::Bzip2'   => '2.021',
              'IO::Compress::Deflate' => '2.021',
              'IO::Compress::Gzip'    => '2.021',
              'IO::Compress::Gzip::Constants'=> '2.021',
              'IO::Compress::RawDeflate'=> '2.021',
              'IO::Compress::Zip'     => '2.021',
              'IO::Compress::Zip::Constants'=> '2.021',
              'IO::Compress::Zlib::Constants'=> '2.021',
              'IO::Compress::Zlib::Extra'=> '2.021',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.021',
              'IO::Uncompress::Adapter::Identity'=> '2.021',
              'IO::Uncompress::Adapter::Inflate'=> '2.021',
              'IO::Uncompress::AnyInflate'=> '2.021',
              'IO::Uncompress::AnyUncompress'=> '2.021',
              'IO::Uncompress::Base'  => '2.021',
              'IO::Uncompress::Bunzip2'=> '2.021',
              'IO::Uncompress::Gunzip'=> '2.021',
              'IO::Uncompress::Inflate'=> '2.021',
              'IO::Uncompress::RawInflate'=> '2.021',
              'IO::Uncompress::Unzip' => '2.021',
              'IO::Zlib'              => '1.10',
              'IPC::Cmd'              => '0.50',
              'IPC::Open3'            => '1.05',
              'Locale::Maketext::Simple'=> '0.21',
              'Log::Message::Simple'  => '0.06',
              'Math::BigInt'          => '1.89_01',
              'Math::BigRat'          => '0.24',
              'Module::Build'         => '0.35',
              'Module::Build::Base'   => '0.35',
              'Module::Build::Compat' => '0.35',
              'Module::Build::Config' => '0.35',
              'Module::Build::Cookbook'=> '0.35',
              'Module::Build::Dumper' => '0.35',
              'Module::Build::ModuleInfo'=> '0.35',
              'Module::Build::Notes'  => '0.35',
              'Module::Build::PPMMaker'=> '0.35',
              'Module::Build::Platform::Amiga'=> '0.35',
              'Module::Build::Platform::Default'=> '0.35',
              'Module::Build::Platform::EBCDIC'=> '0.35',
              'Module::Build::Platform::MPEiX'=> '0.35',
              'Module::Build::Platform::MacOS'=> '0.35',
              'Module::Build::Platform::RiscOS'=> '0.35',
              'Module::Build::Platform::Unix'=> '0.35',
              'Module::Build::Platform::VMS'=> '0.35',
              'Module::Build::Platform::VOS'=> '0.35',
              'Module::Build::Platform::Windows'=> '0.35',
              'Module::Build::Platform::aix'=> '0.35',
              'Module::Build::Platform::cygwin'=> '0.35',
              'Module::Build::Platform::darwin'=> '0.35',
              'Module::Build::Platform::os2'=> '0.35',
              'Module::Build::PodParser'=> '0.35',
              'Module::CoreList'      => '2.19',
              'Module::Loaded'        => '0.06',
              'Opcode'                => '1.13',
              'PerlIO::via'           => '0.08',
              'Pod::Perldoc'          => '3.15_01',
              'Pod::Plainer'          => '1.01',
              'Safe'                  => '2.19',
              'Socket'                => '1.84',
              'Switch'                => '2.14_01',
              'Term::ANSIColor'       => '2.02',
              'Term::ReadLine'        => '1.05',
              'Text::Balanced'        => '2.02',
              'Text::Soundex'         => '3.03_01',
              'Time::Local'           => '1.1901_01',
              'Unicode::Collate'      => '0.52_01',
              'attributes'            => '0.12',
              'constant'              => '1.19',
              'deprecate'             => '0.01',
              'overload'              => '1.08',
              'parent'                => '0.223',
              're'                    => '0.10',
              'threads'               => '1.74',
              'threads::shared'       => '1.31',
              'warnings'              => '1.07',
          },
          removed => {
              'attrs'                 => 1,
          }
      },
      5.011001 => {
          delta_from => 5.011,
          changed => {
              'B'                     => '1.23',
              'B::Concise'            => '0.77',
              'B::Deparse'            => '0.92',
              'CGI'                   => '3.48',
              'CGI::Pretty'           => '3.46',
              'CGI::Util'             => '3.48',
              'CPANPLUS'              => '0.89_03',
              'CPANPLUS::Internals'   => '0.89_03',
              'CPANPLUS::Shell::Default'=> '0.89_03',
              'Carp'                  => '1.13',
              'Carp::Heavy'           => '1.13',
              'ExtUtils::CBuilder'    => '0.260301',
              'ExtUtils::CBuilder::Base'=> '0.260301',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.260301',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.260301',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.260301',
              'ExtUtils::CBuilder::Platform::aix'=> '0.260301',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.260301',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.260301',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.260301',
              'ExtUtils::CBuilder::Platform::os2'=> '0.260301',
              'ExtUtils::Install'     => '1.55',
              'ExtUtils::Manifest'    => '1.57',
              'ExtUtils::Packlist'    => '1.44',
              'ExtUtils::ParseXS'     => '2.21',
              'File::Glob'            => '1.07',
              'File::Path'            => '2.08',
              'IO'                    => '1.25_02',
              'Module::CoreList'      => '2.21',
              'OS2::DLL'              => '1.04',
              'OS2::Process'          => '1.04',
              'Object::Accessor'      => '0.36',
              'Opcode'                => '1.15',
              'POSIX'                 => '1.18',
              'Parse::CPAN::Meta'     => '1.40',
              'PerlIO::via'           => '0.09',
              'Pod::Simple'           => '3.08',
              'Socket'                => '1.85',
              'Storable'              => '2.22',
              'Switch'                => '2.15',
              'Test::Builder'         => '0.94',
              'Test::Builder::Module' => '0.94',
              'Test::More'            => '0.94',
              'Test::Simple'          => '0.94',
              'XS::APItest'           => '0.16',
              'mro'                   => '1.02',
              'overload'              => '1.09',
              'threads::shared'       => '1.32',
          },
          removed => {
          }
      },
      5.011002 => {
          delta_from => 5.011001,
          changed => {
              'B::Concise'            => '0.78',
              'B::Deparse'            => '0.93',
              'CPANPLUS'              => '0.89_09',
              'CPANPLUS::Dist::Build' => '0.44',
              'CPANPLUS::Dist::Build::Constants'=> '0.44',
              'CPANPLUS::Internals'   => '0.89_09',
              'CPANPLUS::Shell::Default'=> '0.89_09',
              'Carp'                  => '1.14',
              'Carp::Heavy'           => '1.14',
              'Compress::Zlib'        => '2.022',
              'DBM_Filter'            => '0.03',
              'Encode'                => '2.38',
              'Encode::Byte'          => '2.04',
              'Encode::CN'            => '2.03',
              'Encode::JP'            => '2.04',
              'Encode::KR'            => '2.03',
              'Encode::TW'            => '2.03',
              'Encode::Unicode'       => '2.07',
              'Env'                   => '1.01',
              'Exporter'              => '5.64_01',
              'Exporter::Heavy'       => '5.64_01',
              'ExtUtils::CBuilder'    => '0.27',
              'ExtUtils::CBuilder::Base'=> '0.27',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.27',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.27',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.27',
              'ExtUtils::CBuilder::Platform::aix'=> '0.27',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.27',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.27',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.27',
              'ExtUtils::CBuilder::Platform::os2'=> '0.27',
              'File::Fetch'           => '0.22',
              'I18N::LangTags::Detect'=> '1.04',
              'I18N::Langinfo'        => '0.03',
              'IO::Compress::Adapter::Bzip2'=> '2.022',
              'IO::Compress::Adapter::Deflate'=> '2.022',
              'IO::Compress::Adapter::Identity'=> '2.022',
              'IO::Compress::Base'    => '2.022',
              'IO::Compress::Base::Common'=> '2.022',
              'IO::Compress::Bzip2'   => '2.022',
              'IO::Compress::Deflate' => '2.022',
              'IO::Compress::Gzip'    => '2.022',
              'IO::Compress::Gzip::Constants'=> '2.022',
              'IO::Compress::RawDeflate'=> '2.022',
              'IO::Compress::Zip'     => '2.022',
              'IO::Compress::Zip::Constants'=> '2.022',
              'IO::Compress::Zlib::Constants'=> '2.022',
              'IO::Compress::Zlib::Extra'=> '2.022',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.022',
              'IO::Uncompress::Adapter::Identity'=> '2.022',
              'IO::Uncompress::Adapter::Inflate'=> '2.022',
              'IO::Uncompress::AnyInflate'=> '2.022',
              'IO::Uncompress::AnyUncompress'=> '2.022',
              'IO::Uncompress::Base'  => '2.022',
              'IO::Uncompress::Bunzip2'=> '2.022',
              'IO::Uncompress::Gunzip'=> '2.022',
              'IO::Uncompress::Inflate'=> '2.022',
              'IO::Uncompress::RawInflate'=> '2.022',
              'IO::Uncompress::Unzip' => '2.022',
              'IPC::Cmd'              => '0.54',
              'List::Util'            => '1.22',
              'List::Util::PP'        => '1.22',
              'List::Util::XS'        => '1.22',
              'Locale::Maketext'      => '1.14',
              'Module::Build'         => '0.35_09',
              'Module::Build::Base'   => '0.35_09',
              'Module::Build::Compat' => '0.35_09',
              'Module::Build::Config' => '0.35_09',
              'Module::Build::Cookbook'=> '0.35_09',
              'Module::Build::Dumper' => '0.35_09',
              'Module::Build::ModuleInfo'=> '0.35_09',
              'Module::Build::Notes'  => '0.35_09',
              'Module::Build::PPMMaker'=> '0.35_09',
              'Module::Build::Platform::Amiga'=> '0.35_09',
              'Module::Build::Platform::Default'=> '0.35_09',
              'Module::Build::Platform::EBCDIC'=> '0.35_09',
              'Module::Build::Platform::MPEiX'=> '0.35_09',
              'Module::Build::Platform::MacOS'=> '0.35_09',
              'Module::Build::Platform::RiscOS'=> '0.35_09',
              'Module::Build::Platform::Unix'=> '0.35_09',
              'Module::Build::Platform::VMS'=> '0.35_09',
              'Module::Build::Platform::VOS'=> '0.35_09',
              'Module::Build::Platform::Windows'=> '0.35_09',
              'Module::Build::Platform::aix'=> '0.35_09',
              'Module::Build::Platform::cygwin'=> '0.35_09',
              'Module::Build::Platform::darwin'=> '0.35_09',
              'Module::Build::Platform::os2'=> '0.35_09',
              'Module::Build::PodParser'=> '0.35_09',
              'Module::Build::YAML'   => '1.40',
              'Module::CoreList'      => '2.23',
              'Module::Load::Conditional'=> '0.34',
              'Pod::Simple'           => '3.10',
              'Pod::Simple::XHTML'    => '3.10',
              'Scalar::Util'          => '1.22',
              'Scalar::Util::PP'      => '1.22',
              'Switch'                => '2.16',
              'XS::APItest'           => '0.17',
              'XS::APItest::KeywordRPN'=> '0.003',
              'base'                  => '2.15',
              'diagnostics'           => '1.18',
              'fields'                => '2.15',
              'inc::latest'           => '0.35_09',
              'legacy'                => '1.00',
              'overload'              => '1.10',
          },
          removed => {
          }
      },
      5.011003 => {
          delta_from => 5.011002,
          changed => {
              'App::Cpan'             => '1.570001',
              'Archive::Extract'      => '0.36',
              'CPAN'                  => '1.94_5301',
              'CPAN::FTP'             => '5.5004',
              'CPAN::FirstTime'       => '5.530001',
              'CPAN::Mirrors'         => '1.770001',
              'CPANPLUS'              => '0.90',
              'CPANPLUS::Internals'   => '0.90',
              'CPANPLUS::Shell::Default'=> '0.90',
              'Cwd'                   => '3.31',
              'Encode'                => '2.39',
              'ExtUtils::Command::MM' => '6.56',
              'ExtUtils::Liblist'     => '6.56',
              'ExtUtils::Liblist::Kid'=> '6.56',
              'ExtUtils::MM'          => '6.56',
              'ExtUtils::MM_AIX'      => '6.56',
              'ExtUtils::MM_Any'      => '6.56',
              'ExtUtils::MM_BeOS'     => '6.56',
              'ExtUtils::MM_Cygwin'   => '6.56',
              'ExtUtils::MM_DOS'      => '6.56',
              'ExtUtils::MM_Darwin'   => '6.56',
              'ExtUtils::MM_MacOS'    => '6.56',
              'ExtUtils::MM_NW5'      => '6.56',
              'ExtUtils::MM_OS2'      => '6.56',
              'ExtUtils::MM_QNX'      => '6.56',
              'ExtUtils::MM_UWIN'     => '6.56',
              'ExtUtils::MM_Unix'     => '6.56',
              'ExtUtils::MM_VMS'      => '6.56',
              'ExtUtils::MM_VOS'      => '6.56',
              'ExtUtils::MM_Win32'    => '6.56',
              'ExtUtils::MM_Win95'    => '6.56',
              'ExtUtils::MY'          => '6.56',
              'ExtUtils::MakeMaker'   => '6.56',
              'ExtUtils::MakeMaker::Config'=> '6.56',
              'ExtUtils::Mkbootstrap' => '6.56',
              'ExtUtils::Mksymlists'  => '6.56',
              'ExtUtils::testlib'     => '6.56',
              'File::Find'            => '1.15',
              'File::Path'            => '2.08_01',
              'File::Spec'            => '3.31',
              'Module::Build'         => '0.36',
              'Module::Build::Base'   => '0.36',
              'Module::Build::Compat' => '0.36',
              'Module::Build::Config' => '0.36',
              'Module::Build::Cookbook'=> '0.36',
              'Module::Build::Dumper' => '0.36',
              'Module::Build::ModuleInfo'=> '0.36',
              'Module::Build::Notes'  => '0.36',
              'Module::Build::PPMMaker'=> '0.36',
              'Module::Build::Platform::Amiga'=> '0.36',
              'Module::Build::Platform::Default'=> '0.36',
              'Module::Build::Platform::EBCDIC'=> '0.36',
              'Module::Build::Platform::MPEiX'=> '0.36',
              'Module::Build::Platform::MacOS'=> '0.36',
              'Module::Build::Platform::RiscOS'=> '0.36',
              'Module::Build::Platform::Unix'=> '0.36',
              'Module::Build::Platform::VMS'=> '0.36',
              'Module::Build::Platform::VOS'=> '0.36',
              'Module::Build::Platform::Windows'=> '0.36',
              'Module::Build::Platform::aix'=> '0.36',
              'Module::Build::Platform::cygwin'=> '0.36',
              'Module::Build::Platform::darwin'=> '0.36',
              'Module::Build::Platform::os2'=> '0.36',
              'Module::Build::PodParser'=> '0.36',
              'Module::CoreList'      => '2.24',
              'POSIX'                 => '1.19',
              'Pod::Simple'           => '3.13',
              'Pod::Simple::BlackBox' => '3.13',
              'Pod::Simple::Checker'  => '3.13',
              'Pod::Simple::Debug'    => '3.13',
              'Pod::Simple::DumpAsText'=> '3.13',
              'Pod::Simple::DumpAsXML'=> '3.13',
              'Pod::Simple::HTML'     => '3.13',
              'Pod::Simple::HTMLBatch'=> '3.13',
              'Pod::Simple::LinkSection'=> '3.13',
              'Pod::Simple::Methody'  => '3.13',
              'Pod::Simple::Progress' => '3.13',
              'Pod::Simple::PullParser'=> '3.13',
              'Pod::Simple::PullParserEndToken'=> '3.13',
              'Pod::Simple::PullParserStartToken'=> '3.13',
              'Pod::Simple::PullParserTextToken'=> '3.13',
              'Pod::Simple::PullParserToken'=> '3.13',
              'Pod::Simple::RTF'      => '3.13',
              'Pod::Simple::Search'   => '3.13',
              'Pod::Simple::SimpleTree'=> '3.13',
              'Pod::Simple::Text'     => '3.13',
              'Pod::Simple::TextContent'=> '3.13',
              'Pod::Simple::TiedOutFH'=> '3.13',
              'Pod::Simple::Transcode'=> '3.13',
              'Pod::Simple::TranscodeDumb'=> '3.13',
              'Pod::Simple::TranscodeSmart'=> '3.13',
              'Pod::Simple::XHTML'    => '3.13',
              'Pod::Simple::XMLOutStream'=> '3.13',
              'Safe'                  => '2.20',
              'Unicode'               => '5.2.0',
              'constant'              => '1.20',
              'diagnostics'           => '1.19',
              'feature'               => '1.14',
              'inc::latest'           => '0.36',
              'threads'               => '1.75',
              'warnings'              => '1.08',
          },
          removed => {
              'legacy'                => 1,
          }
      },
      5.011004 => {
          delta_from => 5.011003,
          changed => {
              'App::Cpan'             => '1.5701',
              'Archive::Extract'      => '0.38',
              'B::Deparse'            => '0.94',
              'CPAN'                  => '1.94_54',
              'CPAN::FirstTime'       => '5.53',
              'CPAN::Mirrors'         => '1.77',
              'Carp'                  => '1.15',
              'Carp::Heavy'           => '1.15',
              'Compress::Raw::Bzip2'  => '2.024',
              'Compress::Raw::Zlib'   => '2.024',
              'Compress::Zlib'        => '2.024',
              'File::Copy'            => '2.17',
              'File::Fetch'           => '0.24',
              'GDBM_File'             => '1.10',
              'IO::Compress::Adapter::Bzip2'=> '2.024',
              'IO::Compress::Adapter::Deflate'=> '2.024',
              'IO::Compress::Adapter::Identity'=> '2.024',
              'IO::Compress::Base'    => '2.024',
              'IO::Compress::Base::Common'=> '2.024',
              'IO::Compress::Bzip2'   => '2.024',
              'IO::Compress::Deflate' => '2.024',
              'IO::Compress::Gzip'    => '2.024',
              'IO::Compress::Gzip::Constants'=> '2.024',
              'IO::Compress::RawDeflate'=> '2.024',
              'IO::Compress::Zip'     => '2.024',
              'IO::Compress::Zip::Constants'=> '2.024',
              'IO::Compress::Zlib::Constants'=> '2.024',
              'IO::Compress::Zlib::Extra'=> '2.024',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.024',
              'IO::Uncompress::Adapter::Identity'=> '2.024',
              'IO::Uncompress::Adapter::Inflate'=> '2.024',
              'IO::Uncompress::AnyInflate'=> '2.024',
              'IO::Uncompress::AnyUncompress'=> '2.024',
              'IO::Uncompress::Base'  => '2.024',
              'IO::Uncompress::Bunzip2'=> '2.024',
              'IO::Uncompress::Gunzip'=> '2.024',
              'IO::Uncompress::Inflate'=> '2.024',
              'IO::Uncompress::RawInflate'=> '2.024',
              'IO::Uncompress::Unzip' => '2.024',
              'Module::Build'         => '0.3603',
              'Module::Build::Base'   => '0.3603',
              'Module::Build::Compat' => '0.3603',
              'Module::Build::Config' => '0.3603',
              'Module::Build::Cookbook'=> '0.3603',
              'Module::Build::Dumper' => '0.3603',
              'Module::Build::ModuleInfo'=> '0.3603',
              'Module::Build::Notes'  => '0.3603',
              'Module::Build::PPMMaker'=> '0.3603',
              'Module::Build::Platform::Amiga'=> '0.3603',
              'Module::Build::Platform::Default'=> '0.3603',
              'Module::Build::Platform::EBCDIC'=> '0.3603',
              'Module::Build::Platform::MPEiX'=> '0.3603',
              'Module::Build::Platform::MacOS'=> '0.3603',
              'Module::Build::Platform::RiscOS'=> '0.3603',
              'Module::Build::Platform::Unix'=> '0.3603',
              'Module::Build::Platform::VMS'=> '0.3603',
              'Module::Build::Platform::VOS'=> '0.3603',
              'Module::Build::Platform::Windows'=> '0.3603',
              'Module::Build::Platform::aix'=> '0.3603',
              'Module::Build::Platform::cygwin'=> '0.3603',
              'Module::Build::Platform::darwin'=> '0.3603',
              'Module::Build::Platform::os2'=> '0.3603',
              'Module::Build::PodParser'=> '0.3603',
              'Module::CoreList'      => '2.25',
              'PerlIO::encoding'      => '0.12',
              'Safe'                  => '2.21',
              'UNIVERSAL'             => '1.06',
              'feature'               => '1.15',
              'inc::latest'           => '0.3603',
              'less'                  => '0.03',
              're'                    => '0.11',
              'version'               => '0.81',
              'warnings'              => '1.09',
          },
          removed => {
          }
      },
      5.011005 => {
          delta_from => 5.011004,
          changed => {
              'B::Debug'              => '1.12',
              'CPAN'                  => '1.94_56',
              'CPAN::Debug'           => '5.5001',
              'CPAN::Distribution'    => '1.9456',
              'CPAN::FirstTime'       => '5.5301',
              'CPAN::HandleConfig'    => '5.5001',
              'CPAN::Shell'           => '5.5001',
              'CPAN::Tarzip'          => '5.5011',
              'CPANPLUS::Dist::Build' => '0.46',
              'CPANPLUS::Dist::Build::Constants'=> '0.46',
              'Module::CoreList'      => '2.26',
              'Pod::Man'              => '2.23',
              'Pod::ParseLink'        => '1.10',
              'Pod::Perldoc'          => '3.15_02',
              'Pod::Plainer'          => '1.02',
              'Pod::Text'             => '3.14',
              'Pod::Text::Color'      => '2.06',
              'Pod::Text::Overstrike' => '2.04',
              'Pod::Text::Termcap'    => '2.06',
              'Safe'                  => '2.22',
              'Socket'                => '1.86',
              'version'               => '0.82',
          },
          removed => {
          }
      },
      5.012 => {
          delta_from => 5.011005,
          changed => {
              'B::Deparse'            => '0.96',
              'CPAN::Distribution'    => '1.9456_01',
              'Module::CoreList'      => '2.29',
              'Safe'                  => '2.25',
              'Socket'                => '1.87',
              'Tie::Scalar'           => '1.02',
              'Time::Piece'           => '1.15_01',
              'bytes'                 => '1.04',
              'feature'               => '1.16',
              'utf8'                  => '1.08',
          },
          removed => {
          }
      },
      5.012001 => {
          delta_from => 5.012,
          changed => {
              'B::Deparse'            => '0.97',
              'CGI'                   => '3.49',
              'CGI::Fast'             => '1.08',
              'Carp'                  => '1.16',
              'Carp::Heavy'           => '1.16',
              'File::Copy'            => '2.18',
              'Module::CoreList'      => '2.32',
              'Pod::Functions'        => '1.04',
              'Pod::Simple'           => '3.14',
              'Pod::Simple::BlackBox' => '3.14',
              'Pod::Simple::Checker'  => '3.14',
              'Pod::Simple::Debug'    => '3.14',
              'Pod::Simple::DumpAsText'=> '3.14',
              'Pod::Simple::DumpAsXML'=> '3.14',
              'Pod::Simple::HTML'     => '3.14',
              'Pod::Simple::HTMLBatch'=> '3.14',
              'Pod::Simple::LinkSection'=> '3.14',
              'Pod::Simple::Methody'  => '3.14',
              'Pod::Simple::Progress' => '3.14',
              'Pod::Simple::PullParser'=> '3.14',
              'Pod::Simple::PullParserEndToken'=> '3.14',
              'Pod::Simple::PullParserStartToken'=> '3.14',
              'Pod::Simple::PullParserTextToken'=> '3.14',
              'Pod::Simple::PullParserToken'=> '3.14',
              'Pod::Simple::RTF'      => '3.14',
              'Pod::Simple::Search'   => '3.14',
              'Pod::Simple::SimpleTree'=> '3.14',
              'Pod::Simple::Text'     => '3.14',
              'Pod::Simple::TextContent'=> '3.14',
              'Pod::Simple::TiedOutFH'=> '3.14',
              'Pod::Simple::Transcode'=> '3.14',
              'Pod::Simple::TranscodeDumb'=> '3.14',
              'Pod::Simple::TranscodeSmart'=> '3.14',
              'Pod::Simple::XHTML'    => '3.14',
              'Pod::Simple::XMLOutStream'=> '3.14',
              'Safe'                  => '2.27',
          },
          removed => {
          }
      },
      5.012002 => {
          delta_from => 5.012001,
          changed => {
              'Carp'                  => '1.17',
              'Carp::Heavy'           => '1.17',
              'File::Spec'            => '3.31_01',
              'Module::CoreList'      => '2.38',
              'Module::Load::Conditional'=> '0.38',
              'PerlIO::scalar'        => '0.08',
          },
          removed => {
          }
      },
      5.012003 => {
          delta_from => 5.012002,
          changed => {
              'B::Deparse'            => '0.9701',
              'Module::Build::Platform::cygwin'=> '0.360301',
              'Module::CoreList'      => '2.43',
              'Socket'                => '1.87_01',
          },
          removed => {
          }
      },
      5.012004 => {
          delta_from => 5.012003,
          changed => {
              'Module::CoreList'      => '2.50',
          },
          removed => {
          }
      },
      5.012005 => {
          delta_from => 5.012004,
          changed => {
              'B::Concise'            => '0.78_01',
              'Encode'                => '2.39_01',
              'File::Glob'            => '1.07_01',
              'Module::CoreList'      => '2.50_02',
              'Unicode::UCD'          => '0.29',
              'charnames'             => '1.07_01',
          },
          removed => {
          }
      },
      5.013 => {
          delta_from => 5.012,
          changed => {
              'CGI'                   => '3.49',
              'CGI::Fast'             => '1.08',
              'Data::Dumper'          => '2.126',
              'ExtUtils::MM_Unix'     => '6.5601',
              'ExtUtils::MakeMaker'   => '6.5601',
              'File::Copy'            => '2.18',
              'IPC::Open3'            => '1.06',
              'MIME::Base64'          => '3.09',
              'MIME::QuotedPrint'     => '3.09',
              'Module::CoreList'      => '2.31',
              'Pod::Functions'        => '1.04',
              'XS::APItest'           => '0.18',
              'XS::APItest::KeywordRPN'=> '0.004',
              'feature'               => '1.17',
              'threads'               => '1.77_01',
              'threads::shared'       => '1.33',
          },
          removed => {
          }
      },
      5.013001 => {
          delta_from => 5.012001,
          changed => {
              'Data::Dumper'          => '2.126',
              'Dumpvalue'             => '1.14',
              'Errno'                 => '1.12',
              'ExtUtils::MM_Unix'     => '6.5601',
              'ExtUtils::MakeMaker'   => '6.5601',
              'ExtUtils::ParseXS'     => '2.2205',
              'File::Find'            => '1.16',
              'IPC::Cmd'              => '0.58',
              'IPC::Open3'            => '1.06',
              'List::Util'            => '1.23',
              'List::Util::PP'        => '1.23',
              'List::Util::XS'        => '1.23',
              'Locale::Codes'         => '3.12',
              'Locale::Codes::Country'=> '3.12',
              'Locale::Codes::Currency'=> '3.12',
              'Locale::Codes::Language'=> '3.12',
              'Locale::Codes::Script' => '3.12',
              'Locale::Constants'     => '3.12',
              'Locale::Country'       => '3.12',
              'Locale::Currency'      => '3.12',
              'Locale::Language'      => '3.12',
              'Locale::Script'        => '3.12',
              'MIME::Base64'          => '3.09',
              'MIME::QuotedPrint'     => '3.09',
              'Module::Build::Platform::cygwin'=> '0.360301',
              'Module::CoreList'      => '2.34',
              'Module::Load::Conditional'=> '0.38',
              'PerlIO::scalar'        => '0.08',
              'Scalar::Util'          => '1.23',
              'Scalar::Util::PP'      => '1.23',
              'Socket'                => '1.88',
              'Term::ReadLine'        => '1.06',
              'Unicode::UCD'          => '0.28',
              'XS::APItest'           => '0.19',
              'XS::APItest::KeywordRPN'=> '0.004',
              'charnames'             => '1.08',
              'feature'               => '1.17',
              'threads'               => '1.77_01',
              'threads::shared'       => '1.33',
          },
          removed => {
              'Class::ISA'            => 1,
              'Pod::Plainer'          => 1,
              'Switch'                => 1,
          }
      },
      5.013002 => {
          delta_from => 5.013001,
          changed => {
              'B::Concise'            => '0.79',
              'B::Deparse'            => '0.98',
              'CPAN'                  => '1.94_57',
              'CPAN::Distribution'    => '1.9600',
              'Exporter'              => '5.64_02',
              'Exporter::Heavy'       => '5.64_02',
              'File::Copy'            => '2.19',
              'Hash::Util'            => '0.08',
              'IO::Socket'            => '1.32',
              'Locale::Codes'         => '3.13',
              'Locale::Codes::Country'=> '3.13',
              'Locale::Codes::Currency'=> '3.13',
              'Locale::Codes::Language'=> '3.13',
              'Locale::Codes::Script' => '3.13',
              'Locale::Constants'     => '3.13',
              'Locale::Country'       => '3.13',
              'Locale::Currency'      => '3.13',
              'Locale::Language'      => '3.13',
              'Locale::Script'        => '3.13',
              'Search::Dict'          => '1.03',
              'Socket'                => '1.89',
              'Thread::Semaphore'     => '2.11',
              'UNIVERSAL'             => '1.07',
              'VMS::DCLsym'           => '1.04',
              'mro'                   => '1.03',
              'threads'               => '1.77_02',
              'threads::shared'       => '1.33_01',
          },
          removed => {
          }
      },
      5.013003 => {
          delta_from => 5.013002,
          changed => {
              'App::Prove'            => '3.21',
              'App::Prove::State'     => '3.21',
              'App::Prove::State::Result'=> '3.21',
              'App::Prove::State::Result::Test'=> '3.21',
              'Archive::Extract'      => '0.42',
              'Archive::Tar'          => '1.64',
              'Archive::Tar::Constant'=> '1.64',
              'Archive::Tar::File'    => '1.64',
              'Attribute::Handlers'   => '0.88',
              'CPANPLUS'              => '0.9007',
              'CPANPLUS::Internals'   => '0.9007',
              'CPANPLUS::Shell::Default'=> '0.9007',
              'Compress::Raw::Bzip2'  => '2.027',
              'Compress::Raw::Zlib'   => '2.027_01',
              'Compress::Zlib'        => '2.027',
              'DB'                    => '1.03',
              'Digest::MD5'           => '2.40',
              'Digest::SHA'           => '5.48',
              'Exporter'              => '5.64_03',
              'Exporter::Heavy'       => '5.64_03',
              'ExtUtils::CBuilder'    => '0.2703',
              'ExtUtils::CBuilder::Base'=> '0.2703_01',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.2703',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.2703',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.2703',
              'ExtUtils::CBuilder::Platform::aix'=> '0.2703',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.2703',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.2703',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.2703',
              'ExtUtils::CBuilder::Platform::os2'=> '0.2703',
              'ExtUtils::Manifest'    => '1.58',
              'ExtUtils::ParseXS'     => '2.2206',
              'Fatal'                 => '2.10',
              'File::Basename'        => '2.79',
              'File::Copy'            => '2.20',
              'File::DosGlob'         => '1.02',
              'File::Find'            => '1.17',
              'File::Glob'            => '1.08',
              'File::stat'            => '1.03',
              'I18N::LangTags'        => '0.35_01',
              'I18N::LangTags::List'  => '0.35_01',
              'IO::Compress::Adapter::Bzip2'=> '2.027',
              'IO::Compress::Adapter::Deflate'=> '2.027',
              'IO::Compress::Adapter::Identity'=> '2.027',
              'IO::Compress::Base'    => '2.027',
              'IO::Compress::Base::Common'=> '2.027',
              'IO::Compress::Bzip2'   => '2.027',
              'IO::Compress::Deflate' => '2.027',
              'IO::Compress::Gzip'    => '2.027',
              'IO::Compress::Gzip::Constants'=> '2.027',
              'IO::Compress::RawDeflate'=> '2.027',
              'IO::Compress::Zip'     => '2.027',
              'IO::Compress::Zip::Constants'=> '2.027',
              'IO::Compress::Zlib::Constants'=> '2.027',
              'IO::Compress::Zlib::Extra'=> '2.027',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.027',
              'IO::Uncompress::Adapter::Identity'=> '2.027',
              'IO::Uncompress::Adapter::Inflate'=> '2.027',
              'IO::Uncompress::AnyInflate'=> '2.027',
              'IO::Uncompress::AnyUncompress'=> '2.027',
              'IO::Uncompress::Base'  => '2.027',
              'IO::Uncompress::Bunzip2'=> '2.027',
              'IO::Uncompress::Gunzip'=> '2.027',
              'IO::Uncompress::Inflate'=> '2.027',
              'IO::Uncompress::RawInflate'=> '2.027',
              'IO::Uncompress::Unzip' => '2.027',
              'IPC::Cmd'              => '0.60',
              'IPC::Msg'              => '2.03',
              'IPC::Semaphore'        => '2.03',
              'IPC::SharedMem'        => '2.03',
              'IPC::SysV'             => '2.03',
              'Locale::Maketext'      => '1.15',
              'Locale::Maketext::Guts'=> undef,
              'Locale::Maketext::GutsLoader'=> undef,
              'Module::Build'         => '0.3607',
              'Module::Build::Base'   => '0.3607',
              'Module::Build::Compat' => '0.3607',
              'Module::Build::Config' => '0.3607',
              'Module::Build::Cookbook'=> '0.3607',
              'Module::Build::Dumper' => '0.3607',
              'Module::Build::ModuleInfo'=> '0.3607',
              'Module::Build::Notes'  => '0.3607',
              'Module::Build::PPMMaker'=> '0.3607',
              'Module::Build::Platform::Amiga'=> '0.3607',
              'Module::Build::Platform::Default'=> '0.3607',
              'Module::Build::Platform::EBCDIC'=> '0.3607',
              'Module::Build::Platform::MPEiX'=> '0.3607',
              'Module::Build::Platform::MacOS'=> '0.3607',
              'Module::Build::Platform::RiscOS'=> '0.3607',
              'Module::Build::Platform::Unix'=> '0.3607',
              'Module::Build::Platform::VMS'=> '0.3607',
              'Module::Build::Platform::VOS'=> '0.3607',
              'Module::Build::Platform::Windows'=> '0.3607',
              'Module::Build::Platform::aix'=> '0.3607',
              'Module::Build::Platform::cygwin'=> '0.3607',
              'Module::Build::Platform::darwin'=> '0.3607',
              'Module::Build::Platform::os2'=> '0.3607',
              'Module::Build::PodParser'=> '0.3607',
              'Module::CoreList'      => '2.36',
              'Module::Load'          => '0.18',
              'TAP::Base'             => '3.21',
              'TAP::Formatter::Base'  => '3.21',
              'TAP::Formatter::Color' => '3.21',
              'TAP::Formatter::Console'=> '3.21',
              'TAP::Formatter::Console::ParallelSession'=> '3.21',
              'TAP::Formatter::Console::Session'=> '3.21',
              'TAP::Formatter::File'  => '3.21',
              'TAP::Formatter::File::Session'=> '3.21',
              'TAP::Formatter::Session'=> '3.21',
              'TAP::Harness'          => '3.21',
              'TAP::Object'           => '3.21',
              'TAP::Parser'           => '3.21',
              'TAP::Parser::Aggregator'=> '3.21',
              'TAP::Parser::Grammar'  => '3.21',
              'TAP::Parser::Iterator' => '3.21',
              'TAP::Parser::Iterator::Array'=> '3.21',
              'TAP::Parser::Iterator::Process'=> '3.21',
              'TAP::Parser::Iterator::Stream'=> '3.21',
              'TAP::Parser::IteratorFactory'=> '3.21',
              'TAP::Parser::Multiplexer'=> '3.21',
              'TAP::Parser::Result'   => '3.21',
              'TAP::Parser::Result::Bailout'=> '3.21',
              'TAP::Parser::Result::Comment'=> '3.21',
              'TAP::Parser::Result::Plan'=> '3.21',
              'TAP::Parser::Result::Pragma'=> '3.21',
              'TAP::Parser::Result::Test'=> '3.21',
              'TAP::Parser::Result::Unknown'=> '3.21',
              'TAP::Parser::Result::Version'=> '3.21',
              'TAP::Parser::Result::YAML'=> '3.21',
              'TAP::Parser::ResultFactory'=> '3.21',
              'TAP::Parser::Scheduler'=> '3.21',
              'TAP::Parser::Scheduler::Job'=> '3.21',
              'TAP::Parser::Scheduler::Spinner'=> '3.21',
              'TAP::Parser::Source'   => '3.21',
              'TAP::Parser::SourceHandler'=> '3.21',
              'TAP::Parser::SourceHandler::Executable'=> '3.21',
              'TAP::Parser::SourceHandler::File'=> '3.21',
              'TAP::Parser::SourceHandler::Handle'=> '3.21',
              'TAP::Parser::SourceHandler::Perl'=> '3.21',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.21',
              'TAP::Parser::SourceHandler::pgTAP'=> '3.21',
              'TAP::Parser::Utils'    => '3.21',
              'TAP::Parser::YAMLish::Reader'=> '3.21',
              'TAP::Parser::YAMLish::Writer'=> '3.21',
              'Term::ANSIColor'       => '3.00',
              'Term::ReadLine'        => '1.07',
              'Test::Harness'         => '3.21',
              'Tie::Array'            => '1.04',
              'Time::HiRes'           => '1.9721',
              'Time::Piece'           => '1.20_01',
              'Unicode::Collate'      => '0.53',
              'Unicode::Normalize'    => '1.06',
              'Unicode::UCD'          => '0.29',
              'autodie'               => '2.10',
              'autodie::exception'    => '2.10',
              'autodie::exception::system'=> '2.10',
              'autodie::hints'        => '2.10',
              'blib'                  => '1.05',
              'charnames'             => '1.11',
              'diagnostics'           => '1.20',
              'inc::latest'           => '0.3607',
              'lib'                   => '0.63',
              're'                    => '0.12',
              'threads'               => '1.77_03',
              'threads::shared'       => '1.33_02',
              'vars'                  => '1.02',
              'warnings'              => '1.10',
          },
          removed => {
              'TAP::Parser::Source::Perl'=> 1,
          }
      },
      5.013004 => {
          delta_from => 5.013003,
          changed => {
              'App::Prove'            => '3.22',
              'App::Prove::State'     => '3.22',
              'App::Prove::State::Result'=> '3.22',
              'App::Prove::State::Result::Test'=> '3.22',
              'Archive::Tar'          => '1.68',
              'Archive::Tar::Constant'=> '1.68',
              'Archive::Tar::File'    => '1.68',
              'B::Lint'               => '1.12',
              'B::Lint::Debug'        => '1.12',
              'Carp'                  => '1.18',
              'Carp::Heavy'           => '1.18',
              'Compress::Raw::Bzip2'  => '2.030',
              'Compress::Raw::Zlib'   => '2.030',
              'Compress::Zlib'        => '2.030',
              'ExtUtils::ParseXS'     => '2.2207',
              'File::Spec'            => '3.31_01',
              'I18N::Langinfo'        => '0.04',
              'IO::Compress::Adapter::Bzip2'=> '2.030',
              'IO::Compress::Adapter::Deflate'=> '2.030',
              'IO::Compress::Adapter::Identity'=> '2.030',
              'IO::Compress::Base'    => '2.030',
              'IO::Compress::Base::Common'=> '2.030',
              'IO::Compress::Bzip2'   => '2.030',
              'IO::Compress::Deflate' => '2.030',
              'IO::Compress::Gzip'    => '2.030',
              'IO::Compress::Gzip::Constants'=> '2.030',
              'IO::Compress::RawDeflate'=> '2.030',
              'IO::Compress::Zip'     => '2.030',
              'IO::Compress::Zip::Constants'=> '2.030',
              'IO::Compress::Zlib::Constants'=> '2.030',
              'IO::Compress::Zlib::Extra'=> '2.030',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.030',
              'IO::Uncompress::Adapter::Identity'=> '2.030',
              'IO::Uncompress::Adapter::Inflate'=> '2.030',
              'IO::Uncompress::AnyInflate'=> '2.030',
              'IO::Uncompress::AnyUncompress'=> '2.030',
              'IO::Uncompress::Base'  => '2.030',
              'IO::Uncompress::Bunzip2'=> '2.030',
              'IO::Uncompress::Gunzip'=> '2.030',
              'IO::Uncompress::Inflate'=> '2.030',
              'IO::Uncompress::RawInflate'=> '2.030',
              'IO::Uncompress::Unzip' => '2.030',
              'Module::CoreList'      => '2.37',
              'TAP::Base'             => '3.22',
              'TAP::Formatter::Base'  => '3.22',
              'TAP::Formatter::Color' => '3.22',
              'TAP::Formatter::Console'=> '3.22',
              'TAP::Formatter::Console::ParallelSession'=> '3.22',
              'TAP::Formatter::Console::Session'=> '3.22',
              'TAP::Formatter::File'  => '3.22',
              'TAP::Formatter::File::Session'=> '3.22',
              'TAP::Formatter::Session'=> '3.22',
              'TAP::Harness'          => '3.22',
              'TAP::Object'           => '3.22',
              'TAP::Parser'           => '3.22',
              'TAP::Parser::Aggregator'=> '3.22',
              'TAP::Parser::Grammar'  => '3.22',
              'TAP::Parser::Iterator' => '3.22',
              'TAP::Parser::Iterator::Array'=> '3.22',
              'TAP::Parser::Iterator::Process'=> '3.22',
              'TAP::Parser::Iterator::Stream'=> '3.22',
              'TAP::Parser::IteratorFactory'=> '3.22',
              'TAP::Parser::Multiplexer'=> '3.22',
              'TAP::Parser::Result'   => '3.22',
              'TAP::Parser::Result::Bailout'=> '3.22',
              'TAP::Parser::Result::Comment'=> '3.22',
              'TAP::Parser::Result::Plan'=> '3.22',
              'TAP::Parser::Result::Pragma'=> '3.22',
              'TAP::Parser::Result::Test'=> '3.22',
              'TAP::Parser::Result::Unknown'=> '3.22',
              'TAP::Parser::Result::Version'=> '3.22',
              'TAP::Parser::Result::YAML'=> '3.22',
              'TAP::Parser::ResultFactory'=> '3.22',
              'TAP::Parser::Scheduler'=> '3.22',
              'TAP::Parser::Scheduler::Job'=> '3.22',
              'TAP::Parser::Scheduler::Spinner'=> '3.22',
              'TAP::Parser::Source'   => '3.22',
              'TAP::Parser::SourceHandler'=> '3.22',
              'TAP::Parser::SourceHandler::Executable'=> '3.22',
              'TAP::Parser::SourceHandler::File'=> '3.22',
              'TAP::Parser::SourceHandler::Handle'=> '3.22',
              'TAP::Parser::SourceHandler::Perl'=> '3.22',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.22',
              'TAP::Parser::Utils'    => '3.22',
              'TAP::Parser::YAMLish::Reader'=> '3.22',
              'TAP::Parser::YAMLish::Writer'=> '3.22',
              'Test::Builder'         => '0.96',
              'Test::Builder::Module' => '0.96',
              'Test::Builder::Tester' => '1.20',
              'Test::Builder::Tester::Color'=> '1.20',
              'Test::Harness'         => '3.22',
              'Test::More'            => '0.96',
              'Test::Simple'          => '0.96',
              'Unicode::Collate'      => '0.56',
              'Unicode::Collate::Locale'=> '0.56',
              'XS::APItest'           => '0.20',
              'charnames'             => '1.15',
              'feature'               => '1.18',
          },
          removed => {
              'TAP::Parser::SourceHandler::pgTAP'=> 1,
          }
      },
      5.013005 => {
          delta_from => 5.013004,
          changed => {
              'B::Debug'              => '1.16',
              'CPANPLUS::Dist::Build' => '0.48',
              'CPANPLUS::Dist::Build::Constants'=> '0.48',
              'Data::Dumper'          => '2.128',
              'Encode'                => '2.40',
              'Encode::Guess'         => '2.04',
              'Encode::MIME::Header'  => '2.12',
              'Encode::Unicode::UTF7' => '2.05',
              'Errno'                 => '1.13',
              'ExtUtils::Command::MM' => '6.57_05',
              'ExtUtils::Liblist'     => '6.57_05',
              'ExtUtils::Liblist::Kid'=> '6.5705',
              'ExtUtils::MM'          => '6.57_05',
              'ExtUtils::MM_AIX'      => '6.57_05',
              'ExtUtils::MM_Any'      => '6.57_05',
              'ExtUtils::MM_BeOS'     => '6.57_05',
              'ExtUtils::MM_Cygwin'   => '6.57_05',
              'ExtUtils::MM_DOS'      => '6.5705',
              'ExtUtils::MM_Darwin'   => '6.57_05',
              'ExtUtils::MM_MacOS'    => '6.5705',
              'ExtUtils::MM_NW5'      => '6.57_05',
              'ExtUtils::MM_OS2'      => '6.57_05',
              'ExtUtils::MM_QNX'      => '6.57_05',
              'ExtUtils::MM_UWIN'     => '6.5705',
              'ExtUtils::MM_Unix'     => '6.57_05',
              'ExtUtils::MM_VMS'      => '6.57_05',
              'ExtUtils::MM_VOS'      => '6.57_05',
              'ExtUtils::MM_Win32'    => '6.57_05',
              'ExtUtils::MM_Win95'    => '6.57_05',
              'ExtUtils::MY'          => '6.5705',
              'ExtUtils::MakeMaker'   => '6.57_05',
              'ExtUtils::MakeMaker::Config'=> '6.57_05',
              'ExtUtils::MakeMaker::YAML'=> '1.44',
              'ExtUtils::Mkbootstrap' => '6.57_05',
              'ExtUtils::Mksymlists'  => '6.57_05',
              'ExtUtils::testlib'     => '6.5705',
              'Filter::Simple'        => '0.85',
              'Hash::Util'            => '0.09',
              'Math::BigFloat'        => '1.62',
              'Math::BigInt'          => '1.95',
              'Math::BigInt::Calc'    => '0.54',
              'Math::BigInt::CalcEmu' => '0.06',
              'Math::BigInt::FastCalc'=> '0.22',
              'Math::BigRat'          => '0.26',
              'Module::CoreList'      => '2.39',
              'POSIX'                 => '1.20',
              'PerlIO::scalar'        => '0.09',
              'Safe'                  => '2.28',
              'Test::Builder'         => '0.97_01',
              'Test::Builder::Module' => '0.97_01',
              'Test::Builder::Tester' => '1.21_01',
              'Test::Builder::Tester::Color'=> '1.21_01',
              'Test::More'            => '0.97_01',
              'Test::Simple'          => '0.97_01',
              'Tie::Hash'             => '1.04',
              'Unicode::Collate'      => '0.59',
              'Unicode::Collate::Locale'=> '0.59',
              'XS::APItest'           => '0.21',
              'XS::APItest::KeywordRPN'=> '0.005',
              'XSLoader'              => '0.11',
              'bigint'                => '0.25',
              'bignum'                => '0.25',
              'bigrat'                => '0.25',
              'blib'                  => '1.06',
              'open'                  => '1.08',
              'threads::shared'       => '1.33_03',
              'warnings'              => '1.11',
              'warnings::register'    => '1.02',
          },
          removed => {
          }
      },
      5.013006 => {
          delta_from => 5.013005,
          changed => {
              'Archive::Extract'      => '0.44',
              'B'                     => '1.24',
              'B::Deparse'            => '0.99',
              'CPAN'                  => '1.94_61',
              'CPAN::FTP'             => '5.5005',
              'CPAN::Queue'           => '5.5001',
              'CPAN::Version'         => '5.5001',
              'Carp'                  => '1.19',
              'Carp::Heavy'           => '1.19',
              'Compress::Raw::Bzip2'  => '2.031',
              'Cwd'                   => '3.34',
              'Data::Dumper'          => '2.129',
              'Devel::Peek'           => '1.05',
              'Digest::MD5'           => '2.51',
              'ExtUtils::Constant::Base'=> '0.05',
              'ExtUtils::Constant::ProxySubs'=> '0.07',
              'ExtUtils::Embed'       => '1.29',
              'ExtUtils::XSSymSet'    => '1.2',
              'Fcntl'                 => '1.09',
              'File::DosGlob'         => '1.03',
              'File::Find'            => '1.18',
              'File::Glob'            => '1.09',
              'File::Spec'            => '3.33',
              'File::Spec::Cygwin'    => '3.33',
              'File::Spec::Epoc'      => '3.33',
              'File::Spec::Functions' => '3.33',
              'File::Spec::Mac'       => '3.33',
              'File::Spec::OS2'       => '3.33',
              'File::Spec::Unix'      => '3.33',
              'File::Spec::VMS'       => '3.33',
              'File::Spec::Win32'     => '3.33',
              'GDBM_File'             => '1.11',
              'Hash::Util::FieldHash' => '1.05',
              'I18N::Langinfo'        => '0.06',
              'IPC::Cmd'              => '0.64',
              'IPC::Open3'            => '1.07',
              'Locale::Codes'         => '3.14',
              'Locale::Codes::Country'=> '3.14',
              'Locale::Codes::Currency'=> '3.14',
              'Locale::Codes::Language'=> '3.14',
              'Locale::Codes::Script' => '3.14',
              'Locale::Constants'     => '3.14',
              'Locale::Country'       => '3.14',
              'Locale::Currency'      => '3.14',
              'Locale::Language'      => '3.14',
              'Locale::Maketext'      => '1.16',
              'Locale::Script'        => '3.14',
              'Math::BigFloat'        => '1.63',
              'Math::BigInt'          => '1.97',
              'Math::BigInt::Calc'    => '0.55',
              'Math::BigInt::CalcEmu' => '0.07',
              'Module::CoreList'      => '2.40',
              'NDBM_File'             => '1.09',
              'NEXT'                  => '0.65',
              'ODBM_File'             => '1.08',
              'Opcode'                => '1.16',
              'POSIX'                 => '1.21',
              'PerlIO::encoding'      => '0.13',
              'PerlIO::scalar'        => '0.10',
              'PerlIO::via'           => '0.10',
              'Pod::Man'              => '2.25',
              'Pod::Text'             => '3.15',
              'SDBM_File'             => '1.07',
              'Socket'                => '1.90',
              'Sys::Hostname'         => '1.13',
              'Tie::Hash::NamedCapture'=> '0.07',
              'Unicode::Collate'      => '0.63',
              'Unicode::Collate::Locale'=> '0.63',
              'Unicode::Normalize'    => '1.07',
              'XS::APItest'           => '0.23',
              'XSLoader'              => '0.13',
              'attributes'            => '0.13',
              'charnames'             => '1.16',
              'if'                    => '0.06',
              'mro'                   => '1.04',
              'overload'              => '1.11',
              're'                    => '0.13',
              'sigtrap'               => '1.05',
              'threads'               => '1.81_01',
              'threads::shared'       => '1.34',
          },
          removed => {
              'XS::APItest::KeywordRPN'=> 1,
          }
      },
      5.013007 => {
          delta_from => 5.013006,
          changed => {
              'Archive::Extract'      => '0.46',
              'Archive::Tar'          => '1.72',
              'Archive::Tar::Constant'=> '1.72',
              'Archive::Tar::File'    => '1.72',
              'AutoLoader'            => '5.71',
              'B'                     => '1.26',
              'B::Concise'            => '0.81',
              'B::Deparse'            => '1.01',
              'CGI'                   => '3.50',
              'CPAN'                  => '1.94_62',
              'CPANPLUS'              => '0.9010',
              'CPANPLUS::Dist::Build' => '0.50',
              'CPANPLUS::Dist::Build::Constants'=> '0.50',
              'CPANPLUS::Internals'   => '0.9010',
              'CPANPLUS::Shell::Default'=> '0.9010',
              'Data::Dumper'          => '2.130_01',
              'DynaLoader'            => '1.11',
              'ExtUtils::Constant'    => '0.23',
              'ExtUtils::Constant::ProxySubs'=> '0.08',
              'Fcntl'                 => '1.10',
              'File::Fetch'           => '0.28',
              'File::Glob'            => '1.10',
              'File::stat'            => '1.04',
              'GDBM_File'             => '1.12',
              'Hash::Util'            => '0.10',
              'Hash::Util::FieldHash' => '1.06',
              'I18N::Langinfo'        => '0.07',
              'Locale::Maketext'      => '1.17',
              'Locale::Maketext::Guts'=> '1.17',
              'Locale::Maketext::GutsLoader'=> '1.17',
              'MIME::Base64'          => '3.10',
              'MIME::QuotedPrint'     => '3.10',
              'Math::BigFloat'        => '1.99_01',
              'Math::BigInt'          => '1.99_01',
              'Math::BigInt::Calc'    => '1.99_01',
              'Math::BigInt::CalcEmu' => '1.99_01',
              'Math::BigInt::FastCalc'=> '0.24_01',
              'Math::BigRat'          => '0.26_01',
              'Module::CoreList'      => '2.41',
              'NDBM_File'             => '1.10',
              'ODBM_File'             => '1.09',
              'Opcode'                => '1.17',
              'POSIX'                 => '1.22',
              'Pod::Simple'           => '3.15',
              'Pod::Simple::BlackBox' => '3.15',
              'Pod::Simple::Checker'  => '3.15',
              'Pod::Simple::Debug'    => '3.15',
              'Pod::Simple::DumpAsText'=> '3.15',
              'Pod::Simple::DumpAsXML'=> '3.15',
              'Pod::Simple::HTML'     => '3.15',
              'Pod::Simple::HTMLBatch'=> '3.15',
              'Pod::Simple::LinkSection'=> '3.15',
              'Pod::Simple::Methody'  => '3.15',
              'Pod::Simple::Progress' => '3.15',
              'Pod::Simple::PullParser'=> '3.15',
              'Pod::Simple::PullParserEndToken'=> '3.15',
              'Pod::Simple::PullParserStartToken'=> '3.15',
              'Pod::Simple::PullParserTextToken'=> '3.15',
              'Pod::Simple::PullParserToken'=> '3.15',
              'Pod::Simple::RTF'      => '3.15',
              'Pod::Simple::Search'   => '3.15',
              'Pod::Simple::SimpleTree'=> '3.15',
              'Pod::Simple::Text'     => '3.15',
              'Pod::Simple::TextContent'=> '3.15',
              'Pod::Simple::TiedOutFH'=> '3.15',
              'Pod::Simple::Transcode'=> '3.15',
              'Pod::Simple::TranscodeDumb'=> '3.15',
              'Pod::Simple::TranscodeSmart'=> '3.15',
              'Pod::Simple::XHTML'    => '3.15',
              'Pod::Simple::XMLOutStream'=> '3.15',
              'SDBM_File'             => '1.08',
              'Safe'                  => '2.29',
              'SelfLoader'            => '1.18',
              'Socket'                => '1.91',
              'Storable'              => '2.24',
              'Sys::Hostname'         => '1.14',
              'Unicode'               => '6.0.0',
              'Unicode::Collate'      => '0.67',
              'Unicode::Collate::CJK::Big5'=> '0.65',
              'Unicode::Collate::CJK::GB2312'=> '0.65',
              'Unicode::Collate::CJK::JISX0208'=> '0.64',
              'Unicode::Collate::CJK::Korean'=> '0.66',
              'Unicode::Collate::CJK::Pinyin'=> '0.65',
              'Unicode::Collate::CJK::Stroke'=> '0.65',
              'Unicode::Collate::Locale'=> '0.67',
              'XS::APItest'           => '0.26',
              'XS::Typemap'           => '0.04',
              'charnames'             => '1.17',
              'mro'                   => '1.05',
              'parent'                => '0.224',
              're'                    => '0.14',
              'threads'               => '1.81_02',
          },
          removed => {
          }
      },
      5.013008 => {
          delta_from => 5.013007,
          changed => {
              'Archive::Tar'          => '1.74',
              'Archive::Tar::Constant'=> '1.74',
              'Archive::Tar::File'    => '1.74',
              'B'                     => '1.27',
              'B::Concise'            => '0.82',
              'B::Deparse'            => '1.02',
              'Carp::Heavy'           => '1.17',
              'Cwd'                   => '3.35',
              'Data::Dumper'          => '2.130_02',
              'Devel::Peek'           => '1.06',
              'Devel::SelfStubber'    => '1.05',
              'Digest::SHA'           => '5.50',
              'Dumpvalue'             => '1.15',
              'DynaLoader'            => '1.12',
              'Env'                   => '1.02',
              'Exporter::Heavy'       => '5.64_01',
              'ExtUtils::CBuilder'    => '0.280201',
              'ExtUtils::CBuilder::Base'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280201',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280201',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280201',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280201',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280201',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280201',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280201',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280201',
              'ExtUtils::Constant::Utils'=> '0.03',
              'ExtUtils::Embed'       => '1.30',
              'ExtUtils::ParseXS'     => '2.2208',
              'Fatal'                 => '2.1001',
              'Fcntl'                 => '1.11',
              'File::CheckTree'       => '4.41',
              'File::Glob'            => '1.11',
              'GDBM_File'             => '1.13',
              'Hash::Util::FieldHash' => '1.07',
              'I18N::Collate'         => '1.02',
              'IO'                    => '1.25_03',
              'IPC::Cmd'              => '0.66',
              'IPC::Open3'            => '1.08',
              'Locale::Codes'         => '3.15',
              'Locale::Codes::Country'=> '3.15',
              'Locale::Codes::Currency'=> '3.15',
              'Locale::Codes::Language'=> '3.15',
              'Locale::Codes::Script' => '3.15',
              'Locale::Constants'     => '3.15',
              'Locale::Country'       => '3.15',
              'Locale::Currency'      => '3.15',
              'Locale::Language'      => '3.15',
              'Locale::Script'        => '3.15',
              'MIME::Base64'          => '3.13',
              'MIME::QuotedPrint'     => '3.13',
              'Math::BigFloat'        => '1.99_02',
              'Math::BigInt'          => '1.99_02',
              'Math::BigInt::Calc'    => '1.99_02',
              'Math::BigInt::CalcEmu' => '1.99_02',
              'Memoize'               => '1.02',
              'Memoize::AnyDBM_File'  => '1.02',
              'Memoize::Expire'       => '1.02',
              'Memoize::ExpireFile'   => '1.02',
              'Memoize::ExpireTest'   => '1.02',
              'Memoize::NDBM_File'    => '1.02',
              'Memoize::SDBM_File'    => '1.02',
              'Memoize::Storable'     => '1.02',
              'Module::CoreList'      => '2.43',
              'NDBM_File'             => '1.11',
              'Net::Ping'             => '2.37',
              'ODBM_File'             => '1.10',
              'Opcode'                => '1.18',
              'POSIX'                 => '1.23',
              'PerlIO::encoding'      => '0.14',
              'PerlIO::scalar'        => '0.11',
              'PerlIO::via'           => '0.11',
              'SDBM_File'             => '1.09',
              'Socket'                => '1.92',
              'Storable'              => '2.25',
              'Time::HiRes'           => '1.9721_01',
              'Unicode::Collate'      => '0.6801',
              'Unicode::Collate::Locale'=> '0.68',
              'Unicode::Normalize'    => '1.08',
              'Unicode::UCD'          => '0.30',
              'Win32'                 => '0.41',
              'XS::APItest'           => '0.27',
              'autodie'               => '2.1001',
              'autodie::exception'    => '2.1001',
              'autodie::exception::system'=> '2.1001',
              'autodie::hints'        => '2.1001',
              'feature'               => '1.19',
              'if'                    => '0.0601',
              'mro'                   => '1.06',
              'overload'              => '1.12',
              're'                    => '0.15',
              'threads'               => '1.81_03',
              'threads::shared'       => '1.35',
              'version'               => '0.86',
          },
          removed => {
          }
      },
      5.013009 => {
          delta_from => 5.013008,
          changed => {
              'Archive::Extract'      => '0.48',
              'Archive::Tar'          => '1.76',
              'Archive::Tar::Constant'=> '1.76',
              'Archive::Tar::File'    => '1.76',
              'B::Concise'            => '0.83',
              'B::Deparse'            => '1.03',
              'B::Lint'               => '1.13',
              'Benchmark'             => '1.12',
              'CGI'                   => '3.51',
              'CGI::Carp'             => '3.51',
              'CGI::Cookie'           => '1.30',
              'CGI::Push'             => '1.05',
              'CGI::Util'             => '3.51',
              'CPAN'                  => '1.94_63',
              'CPAN::HTTP::Client'    => '1.94',
              'CPAN::HTTP::Credentials'=> '1.94',
              'CPAN::Meta::YAML'      => '0.003',
              'CPANPLUS'              => '0.9011',
              'CPANPLUS::Dist::Build' => '0.52',
              'CPANPLUS::Dist::Build::Constants'=> '0.52',
              'CPANPLUS::Internals'   => '0.9011',
              'CPANPLUS::Shell::Default'=> '0.9011',
              'Carp::Heavy'           => '1.19',
              'Compress::Raw::Bzip2'  => '2.033',
              'Compress::Raw::Zlib'   => '2.033',
              'Compress::Zlib'        => '2.033',
              'Cwd'                   => '3.36',
              'DBM_Filter'            => '0.04',
              'DB_File'               => '1.821',
              'Devel::Peek'           => '1.07',
              'DirHandle'             => '1.04',
              'Dumpvalue'             => '1.16',
              'Encode'                => '2.42',
              'Encode::Alias'         => '2.13',
              'Encode::MIME::Header'  => '2.13',
              'Exporter::Heavy'       => '5.64_03',
              'ExtUtils::Install'     => '1.56',
              'ExtUtils::ParseXS'     => '2.2209',
              'File::Basename'        => '2.80',
              'File::Copy'            => '2.21',
              'File::DosGlob'         => '1.04',
              'File::Fetch'           => '0.32',
              'File::Find'            => '1.19',
              'File::Spec::Mac'       => '3.34',
              'File::Spec::VMS'       => '3.34',
              'File::stat'            => '1.05',
              'HTTP::Tiny'            => '0.009',
              'Hash::Util::FieldHash' => '1.08',
              'IO::Compress::Adapter::Bzip2'=> '2.033',
              'IO::Compress::Adapter::Deflate'=> '2.033',
              'IO::Compress::Adapter::Identity'=> '2.033',
              'IO::Compress::Base'    => '2.033',
              'IO::Compress::Base::Common'=> '2.033',
              'IO::Compress::Bzip2'   => '2.033',
              'IO::Compress::Deflate' => '2.033',
              'IO::Compress::Gzip'    => '2.033',
              'IO::Compress::Gzip::Constants'=> '2.033',
              'IO::Compress::RawDeflate'=> '2.033',
              'IO::Compress::Zip'     => '2.033',
              'IO::Compress::Zip::Constants'=> '2.033',
              'IO::Compress::Zlib::Constants'=> '2.033',
              'IO::Compress::Zlib::Extra'=> '2.033',
              'IO::Handle'            => '1.29',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.033',
              'IO::Uncompress::Adapter::Identity'=> '2.033',
              'IO::Uncompress::Adapter::Inflate'=> '2.033',
              'IO::Uncompress::AnyInflate'=> '2.033',
              'IO::Uncompress::AnyUncompress'=> '2.033',
              'IO::Uncompress::Base'  => '2.033',
              'IO::Uncompress::Bunzip2'=> '2.033',
              'IO::Uncompress::Gunzip'=> '2.033',
              'IO::Uncompress::Inflate'=> '2.033',
              'IO::Uncompress::RawInflate'=> '2.033',
              'IO::Uncompress::Unzip' => '2.033',
              'IPC::Cmd'              => '0.68',
              'IPC::Open3'            => '1.09',
              'JSON::PP'              => '2.27103',
              'JSON::PP::Boolean'     => undef,
              'Locale::Maketext'      => '1.18',
              'Log::Message'          => '0.04',
              'Log::Message::Config'  => '0.04',
              'Log::Message::Handlers'=> '0.04',
              'Log::Message::Item'    => '0.04',
              'Log::Message::Simple'  => '0.08',
              'Math::BigFloat'        => '1.99_03',
              'Math::BigInt'          => '1.99_03',
              'Math::BigInt::Calc'    => '1.99_03',
              'Math::BigInt::FastCalc'=> '0.24_02',
              'Math::BigRat'          => '0.26_02',
              'Module::CoreList'      => '2.42_01',
              'Module::Load::Conditional'=> '0.40',
              'Module::Metadata'      => '1.000003',
              'Net::Ping'             => '2.38',
              'OS2::Process'          => '1.05',
              'Object::Accessor'      => '0.38',
              'POSIX'                 => '1.24',
              'Params::Check'         => '0.28',
              'Perl::OSType'          => '1.002',
              'Pod::LaTeX'            => '0.59',
              'Pod::Perldoc'          => '3.15_03',
              'Socket'                => '1.93',
              'Storable'              => '2.26',
              'Sys::Hostname'         => '1.15',
              'Term::UI'              => '0.24',
              'Thread::Queue'         => '2.12',
              'Thread::Semaphore'     => '2.12',
              'Time::Local'           => '1.2000',
              'UNIVERSAL'             => '1.08',
              'Unicode::Normalize'    => '1.10',
              'Win32'                 => '0.44',
              'bigint'                => '0.26',
              'bignum'                => '0.26',
              'bigrat'                => '0.26',
              'charnames'             => '1.18',
              'diagnostics'           => '1.21',
              're'                    => '0.16',
              'threads'               => '1.83',
              'threads::shared'       => '1.36',
              'version'               => '0.88',
          },
          removed => {
          }
      },
      5.01301 => {
          delta_from => 5.013009,
          changed => {
              'Attribute::Handlers'   => '0.89',
              'B'                     => '1.28',
              'B::Showlex'            => '1.03',
              'CGI'                   => '3.52',
              'CPAN'                  => '1.94_65',
              'CPAN::Distribution'    => '1.9601',
              'CPAN::FTP::netrc'      => '1.01',
              'CPAN::FirstTime'       => '5.5303',
              'CPAN::HandleConfig'    => '5.5003',
              'CPAN::Meta'            => '2.110440',
              'CPAN::Meta::Converter' => '2.110440',
              'CPAN::Meta::Feature'   => '2.110440',
              'CPAN::Meta::History'   => '2.110440',
              'CPAN::Meta::Prereqs'   => '2.110440',
              'CPAN::Meta::Spec'      => '2.110440',
              'CPAN::Meta::Validator' => '2.110440',
              'CPAN::Shell'           => '5.5002',
              'CPANPLUS'              => '0.9101',
              'CPANPLUS::Internals'   => '0.9101',
              'CPANPLUS::Shell::Default'=> '0.9101',
              'Carp'                  => '1.20',
              'Carp::Heavy'           => '1.20',
              'Cwd'                   => '3.37',
              'Devel::DProf'          => '20110217.00',
              'DynaLoader'            => '1.13',
              'ExtUtils::CBuilder'    => '0.280202',
              'ExtUtils::CBuilder::Base'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280202',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280202',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280202',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280202',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280202',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280202',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280202',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280202',
              'File::Copy'            => '2.22',
              'Filter::Simple'        => '0.86',
              'HTTP::Tiny'            => '0.010',
              'I18N::LangTags::Detect'=> '1.05',
              'IO::Select'            => '1.18',
              'IPC::Cmd'              => '0.70',
              'Locale::Maketext'      => '1.19',
              'Math::BigFloat'        => '1.992',
              'Math::BigInt'          => '1.992',
              'Math::BigInt::Calc'    => '1.992',
              'Math::BigInt::CalcEmu' => '1.992',
              'Module::Build'         => '0.37_05',
              'Module::Build::Base'   => '0.37_05',
              'Module::Build::Compat' => '0.37_05',
              'Module::Build::Config' => '0.37_05',
              'Module::Build::Cookbook'=> '0.37_05',
              'Module::Build::Dumper' => '0.37_05',
              'Module::Build::ModuleInfo'=> '0.37_05',
              'Module::Build::Notes'  => '0.37_05',
              'Module::Build::PPMMaker'=> '0.37_05',
              'Module::Build::Platform::Amiga'=> '0.37_05',
              'Module::Build::Platform::Default'=> '0.37_05',
              'Module::Build::Platform::EBCDIC'=> '0.37_05',
              'Module::Build::Platform::MPEiX'=> '0.37_05',
              'Module::Build::Platform::MacOS'=> '0.37_05',
              'Module::Build::Platform::RiscOS'=> '0.37_05',
              'Module::Build::Platform::Unix'=> '0.37_05',
              'Module::Build::Platform::VMS'=> '0.37_05',
              'Module::Build::Platform::VOS'=> '0.37_05',
              'Module::Build::Platform::Windows'=> '0.37_05',
              'Module::Build::Platform::aix'=> '0.37_05',
              'Module::Build::Platform::cygwin'=> '0.37_05',
              'Module::Build::Platform::darwin'=> '0.37_05',
              'Module::Build::Platform::os2'=> '0.37_05',
              'Module::Build::PodParser'=> '0.37_05',
              'Module::Build::Version'=> '0.87',
              'Module::Build::YAML'   => '1.41',
              'Module::CoreList'      => '2.45',
              'Module::Load::Conditional'=> '0.44',
              'Module::Metadata'      => '1.000004',
              'OS2::Process'          => '1.06',
              'Parse::CPAN::Meta'     => '1.4401',
              'Pod::Html'             => '1.1',
              'Socket'                => '1.94',
              'Term::UI'              => '0.26',
              'Unicode::Collate'      => '0.72',
              'Unicode::Collate::Locale'=> '0.71',
              'Unicode::UCD'          => '0.31',
              'VMS::DCLsym'           => '1.05',
              'Version::Requirements' => '0.101020',
              'bigrat'                => '0.27',
              'deprecate'             => '0.02',
              'diagnostics'           => '1.22',
              'inc::latest'           => '0.37_05',
              'overload'              => '1.13',
              're'                    => '0.17',
              'utf8'                  => '1.09',
              'warnings'              => '1.12',
          },
          removed => {
          }
      },
      5.013011 => {
          delta_from => 5.01301,
          changed => {
              'App::Prove'            => '3.23',
              'App::Prove::State'     => '3.23',
              'App::Prove::State::Result'=> '3.23',
              'App::Prove::State::Result::Test'=> '3.23',
              'B'                     => '1.29',
              'CPAN'                  => '1.9600',
              'CPAN::Author'          => '5.5001',
              'CPAN::CacheMgr'        => '5.5001',
              'CPAN::Distribution'    => '1.9602',
              'CPAN::Exception::blocked_urllist'=> '1.001',
              'CPAN::HTTP::Client'    => '1.9600',
              'CPAN::HTTP::Credentials'=> '1.9600',
              'CPAN::Index'           => '1.9600',
              'CPAN::LWP::UserAgent'  => '1.9600',
              'CPAN::Mirrors'         => '1.9600',
              'CPAN::Module'          => '5.5001',
              'CPANPLUS'              => '0.9103',
              'CPANPLUS::Dist::Build' => '0.54',
              'CPANPLUS::Dist::Build::Constants'=> '0.54',
              'CPANPLUS::Internals'   => '0.9103',
              'CPANPLUS::Shell::Default'=> '0.9103',
              'Cwd'                   => '3.36',
              'Devel::DProf'          => '20110228.00',
              'Digest::SHA'           => '5.61',
              'ExtUtils::Command'     => '1.17',
              'File::Basename'        => '2.81',
              'File::Copy'            => '2.21',
              'File::Glob'            => '1.12',
              'GDBM_File'             => '1.14',
              'HTTP::Tiny'            => '0.011',
              'Hash::Util'            => '0.11',
              'Hash::Util::FieldHash' => '1.09',
              'I18N::Langinfo'        => '0.08',
              'IO'                    => '1.25_04',
              'IO::Dir'               => '1.08',
              'IO::File'              => '1.15',
              'IO::Handle'            => '1.30',
              'IO::Pipe'              => '1.14',
              'IO::Poll'              => '0.08',
              'IO::Select'            => '1.20',
              'JSON::PP'              => '2.27105',
              'Locale::Codes'         => '3.16',
              'Locale::Codes::Country'=> '3.16',
              'Locale::Codes::Currency'=> '3.16',
              'Locale::Codes::Language'=> '3.16',
              'Locale::Codes::Script' => '3.16',
              'Locale::Constants'     => '3.16',
              'Locale::Country'       => '3.16',
              'Locale::Currency'      => '3.16',
              'Locale::Language'      => '3.16',
              'Locale::Script'        => '3.16',
              'Math::BigFloat'        => '1.993',
              'Math::BigInt'          => '1.994',
              'Math::BigInt::Calc'    => '1.993',
              'Math::BigInt::CalcEmu' => '1.993',
              'Math::BigInt::FastCalc'=> '0.28',
              'Module::Build'         => '0.3800',
              'Module::Build::Base'   => '0.3800',
              'Module::Build::Compat' => '0.3800',
              'Module::Build::Config' => '0.3800',
              'Module::Build::Cookbook'=> '0.3800',
              'Module::Build::Dumper' => '0.3800',
              'Module::Build::ModuleInfo'=> '0.3800',
              'Module::Build::Notes'  => '0.3800',
              'Module::Build::PPMMaker'=> '0.3800',
              'Module::Build::Platform::Amiga'=> '0.3800',
              'Module::Build::Platform::Default'=> '0.3800',
              'Module::Build::Platform::EBCDIC'=> '0.3800',
              'Module::Build::Platform::MPEiX'=> '0.3800',
              'Module::Build::Platform::MacOS'=> '0.3800',
              'Module::Build::Platform::RiscOS'=> '0.3800',
              'Module::Build::Platform::Unix'=> '0.3800',
              'Module::Build::Platform::VMS'=> '0.3800',
              'Module::Build::Platform::VOS'=> '0.3800',
              'Module::Build::Platform::Windows'=> '0.3800',
              'Module::Build::Platform::aix'=> '0.3800',
              'Module::Build::Platform::cygwin'=> '0.3800',
              'Module::Build::Platform::darwin'=> '0.3800',
              'Module::Build::Platform::os2'=> '0.3800',
              'Module::Build::PodParser'=> '0.3800',
              'Module::CoreList'      => '2.46',
              'NDBM_File'             => '1.12',
              'Pod::Simple'           => '3.16',
              'Pod::Simple::BlackBox' => '3.16',
              'Pod::Simple::Checker'  => '3.16',
              'Pod::Simple::Debug'    => '3.16',
              'Pod::Simple::DumpAsText'=> '3.16',
              'Pod::Simple::DumpAsXML'=> '3.16',
              'Pod::Simple::HTML'     => '3.16',
              'Pod::Simple::HTMLBatch'=> '3.16',
              'Pod::Simple::LinkSection'=> '3.16',
              'Pod::Simple::Methody'  => '3.16',
              'Pod::Simple::Progress' => '3.16',
              'Pod::Simple::PullParser'=> '3.16',
              'Pod::Simple::PullParserEndToken'=> '3.16',
              'Pod::Simple::PullParserStartToken'=> '3.16',
              'Pod::Simple::PullParserTextToken'=> '3.16',
              'Pod::Simple::PullParserToken'=> '3.16',
              'Pod::Simple::RTF'      => '3.16',
              'Pod::Simple::Search'   => '3.16',
              'Pod::Simple::SimpleTree'=> '3.16',
              'Pod::Simple::Text'     => '3.16',
              'Pod::Simple::TextContent'=> '3.16',
              'Pod::Simple::TiedOutFH'=> '3.16',
              'Pod::Simple::Transcode'=> '3.16',
              'Pod::Simple::TranscodeDumb'=> '3.16',
              'Pod::Simple::TranscodeSmart'=> '3.16',
              'Pod::Simple::XHTML'    => '3.16',
              'Pod::Simple::XMLOutStream'=> '3.16',
              'Storable'              => '2.27',
              'Sys::Hostname'         => '1.16',
              'TAP::Base'             => '3.23',
              'TAP::Formatter::Base'  => '3.23',
              'TAP::Formatter::Color' => '3.23',
              'TAP::Formatter::Console'=> '3.23',
              'TAP::Formatter::Console::ParallelSession'=> '3.23',
              'TAP::Formatter::Console::Session'=> '3.23',
              'TAP::Formatter::File'  => '3.23',
              'TAP::Formatter::File::Session'=> '3.23',
              'TAP::Formatter::Session'=> '3.23',
              'TAP::Harness'          => '3.23',
              'TAP::Object'           => '3.23',
              'TAP::Parser'           => '3.23',
              'TAP::Parser::Aggregator'=> '3.23',
              'TAP::Parser::Grammar'  => '3.23',
              'TAP::Parser::Iterator' => '3.23',
              'TAP::Parser::Iterator::Array'=> '3.23',
              'TAP::Parser::Iterator::Process'=> '3.23',
              'TAP::Parser::Iterator::Stream'=> '3.23',
              'TAP::Parser::IteratorFactory'=> '3.23',
              'TAP::Parser::Multiplexer'=> '3.23',
              'TAP::Parser::Result'   => '3.23',
              'TAP::Parser::Result::Bailout'=> '3.23',
              'TAP::Parser::Result::Comment'=> '3.23',
              'TAP::Parser::Result::Plan'=> '3.23',
              'TAP::Parser::Result::Pragma'=> '3.23',
              'TAP::Parser::Result::Test'=> '3.23',
              'TAP::Parser::Result::Unknown'=> '3.23',
              'TAP::Parser::Result::Version'=> '3.23',
              'TAP::Parser::Result::YAML'=> '3.23',
              'TAP::Parser::ResultFactory'=> '3.23',
              'TAP::Parser::Scheduler'=> '3.23',
              'TAP::Parser::Scheduler::Job'=> '3.23',
              'TAP::Parser::Scheduler::Spinner'=> '3.23',
              'TAP::Parser::Source'   => '3.23',
              'TAP::Parser::SourceHandler'=> '3.23',
              'TAP::Parser::SourceHandler::Executable'=> '3.23',
              'TAP::Parser::SourceHandler::File'=> '3.23',
              'TAP::Parser::SourceHandler::Handle'=> '3.23',
              'TAP::Parser::SourceHandler::Perl'=> '3.23',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.23',
              'TAP::Parser::Utils'    => '3.23',
              'TAP::Parser::YAMLish::Reader'=> '3.23',
              'TAP::Parser::YAMLish::Writer'=> '3.23',
              'Test::Builder'         => '0.98',
              'Test::Builder::Module' => '0.98',
              'Test::Builder::Tester' => '1.22',
              'Test::Builder::Tester::Color'=> '1.22',
              'Test::Harness'         => '3.23',
              'Test::More'            => '0.98',
              'Test::Simple'          => '0.98',
              'Tie::Hash::NamedCapture'=> '0.08',
              'Tie::RefHash'          => '1.39',
              'Unicode::Collate'      => '0.73',
              'Unicode::Collate::Locale'=> '0.73',
              'Unicode::UCD'          => '0.32',
              'XS::Typemap'           => '0.05',
              'attributes'            => '0.14',
              'base'                  => '2.16',
              'inc::latest'           => '0.3800',
              'mro'                   => '1.07',
              'parent'                => '0.225',
          },
          removed => {
          }
      },
      5.014 => {
          delta_from => 5.013011,
          changed => {
              'ExtUtils::CBuilder'    => '0.280203',
              'ExtUtils::CBuilder::Base'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280203',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280203',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280203',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280203',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280203',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280203',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280203',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280203',
              'ExtUtils::ParseXS'     => '2.2210',
              'File::Basename'        => '2.82',
              'HTTP::Tiny'            => '0.012',
              'IO::Handle'            => '1.31',
              'Module::CoreList'      => '2.49',
              'PerlIO'                => '1.07',
              'Pod::Html'             => '1.11',
              'XS::APItest'           => '0.28',
              'bigint'                => '0.27',
              'bignum'                => '0.27',
              'bigrat'                => '0.28',
              'constant'              => '1.21',
              'feature'               => '1.20',
              're'                    => '0.18',
              'threads::shared'       => '1.37',
          },
          removed => {
          }
      },
      5.014001 => {
          delta_from => 5.014,
          changed => {
              'B::Deparse'            => '1.04',
              'Module::CoreList'      => '2.49_01',
              'Pod::Perldoc'          => '3.15_04',
          },
          removed => {
          }
      },
      5.014002 => {
          delta_from => 5.014001,
          changed => {
              'CPAN'                  => '1.9600_01',
              'CPAN::Distribution'    => '1.9602_01',
              'Devel::DProf::dprof::V'=> undef,
              'Encode'                => '2.42_01',
              'File::Glob'            => '1.13',
              'Module::CoreList'      => '2.49_02',
              'PerlIO::scalar'        => '0.11_01',
              'Time::Piece::Seconds'  => undef,
          },
          removed => {
          }
      },
      5.014003 => {
          delta_from => 5.014002,
          changed => {
              'Digest'                => '1.16_01',
              'IPC::Open3'            => '1.09_01',
              'Module::CoreList'      => '2.49_04',
          },
          removed => {
          }
      },
      5.014004 => {
          delta_from => 5.014003,
          changed => {
              'Encode'                => '2.42_02',
              'IPC::Open3'            => '1.0901',
              'Module::CoreList'      => '2.49_06',
          },
          removed => {
          }
      },
      5.015 => {
          delta_from => 5.014001,
          changed => {
              'Archive::Extract'      => '0.52',
              'Attribute::Handlers'   => '0.91',
              'B'                     => '1.30',
              'B::Concise'            => '0.84',
              'B::Deparse'            => '1.05',
              'Benchmark'             => '1.13',
              'CGI'                   => '3.54',
              'CGI::Util'             => '3.53',
              'CPAN::Meta'            => '2.110930',
              'CPAN::Meta::Converter' => '2.110930',
              'CPAN::Meta::Feature'   => '2.110930',
              'CPAN::Meta::History'   => '2.110930',
              'CPAN::Meta::Prereqs'   => '2.110930',
              'CPAN::Meta::Spec'      => '2.110930',
              'CPAN::Meta::Validator' => '2.110930',
              'CPANPLUS'              => '0.9105',
              'CPANPLUS::Dist::Build' => '0.56',
              'CPANPLUS::Dist::Build::Constants'=> '0.56',
              'CPANPLUS::Internals'   => '0.9105',
              'CPANPLUS::Shell::Default'=> '0.9105',
              'Compress::Raw::Bzip2'  => '2.035',
              'Compress::Raw::Zlib'   => '2.035',
              'Compress::Zlib'        => '2.035',
              'DB_File'               => '1.822',
              'Data::Dumper'          => '2.131',
              'Devel::Peek'           => '1.08',
              'Digest::SHA'           => '5.62',
              'Encode'                => '2.43',
              'Encode::Alias'         => '2.14',
              'ExtUtils::CBuilder'    => '0.280204',
              'ExtUtils::CBuilder::Base'=> '0.280204',
              'Fatal'                 => '2.10',
              'File::Spec::Win32'     => '3.34',
              'Filter::Simple'        => '0.87',
              'Filter::Util::Call'    => '1.39',
              'FindBin'               => '1.51',
              'Hash::Util::FieldHash' => '1.10',
              'I18N::LangTags'        => '0.36',
              'IO::Compress::Adapter::Bzip2'=> '2.035',
              'IO::Compress::Adapter::Deflate'=> '2.035',
              'IO::Compress::Adapter::Identity'=> '2.035',
              'IO::Compress::Base'    => '2.035',
              'IO::Compress::Base::Common'=> '2.035',
              'IO::Compress::Bzip2'   => '2.035',
              'IO::Compress::Deflate' => '2.035',
              'IO::Compress::Gzip'    => '2.035',
              'IO::Compress::Gzip::Constants'=> '2.035',
              'IO::Compress::RawDeflate'=> '2.035',
              'IO::Compress::Zip'     => '2.035',
              'IO::Compress::Zip::Constants'=> '2.035',
              'IO::Compress::Zlib::Constants'=> '2.035',
              'IO::Compress::Zlib::Extra'=> '2.035',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.035',
              'IO::Uncompress::Adapter::Identity'=> '2.035',
              'IO::Uncompress::Adapter::Inflate'=> '2.035',
              'IO::Uncompress::AnyInflate'=> '2.035',
              'IO::Uncompress::AnyUncompress'=> '2.035',
              'IO::Uncompress::Base'  => '2.035',
              'IO::Uncompress::Bunzip2'=> '2.035',
              'IO::Uncompress::Gunzip'=> '2.035',
              'IO::Uncompress::Inflate'=> '2.035',
              'IO::Uncompress::RawInflate'=> '2.035',
              'IO::Uncompress::Unzip' => '2.035',
              'IPC::Open2'            => '1.04',
              'IPC::Open3'            => '1.11',
              'JSON::PP'              => '2.27200',
              'Math::BigFloat'        => '1.994',
              'Math::BigInt'          => '1.995',
              'Math::Complex'         => '1.57',
              'Math::Trig'            => '1.21',
              'Module::CoreList'      => '2.51',
              'ODBM_File'             => '1.11',
              'Object::Accessor'      => '0.42',
              'Opcode'                => '1.19',
              'PerlIO::encoding'      => '0.15',
              'PerlIO::scalar'        => '0.12',
              'Pod::Perldoc'          => '3.15_05',
              'Storable'              => '2.28',
              'Sys::Syslog'           => '0.29',
              'Time::HiRes'           => '1.9722',
              'Unicode::Collate'      => '0.76',
              'Unicode::Collate::CJK::Pinyin'=> '0.76',
              'Unicode::Collate::CJK::Stroke'=> '0.76',
              'Unicode::Collate::Locale'=> '0.76',
              'Unicode::Normalize'    => '1.12',
              'XS::APItest'           => '0.29',
              'XSLoader'              => '0.15',
              'autodie'               => '2.10',
              'autodie::exception'    => '2.10',
              'autodie::exception::system'=> '2.10',
              'autodie::hints'        => '2.10',
              'base'                  => '2.17',
              'charnames'             => '1.22',
              'constant'              => '1.22',
              'feature'               => '1.21',
              'mro'                   => '1.08',
              'overload'              => '1.14',
              'threads::shared'       => '1.38',
              'vmsish'                => '1.03',
          },
          removed => {
              'Devel::DProf'          => 1,
              'Shell'                 => 1,
          }
      },
      5.015001 => {
          delta_from => 5.015,
          changed => {
              'B::Deparse'            => '1.06',
              'CGI'                   => '3.55',
              'CPAN::Meta'            => '2.110930001',
              'CPAN::Meta::Converter' => '2.110930001',
              'CPANPLUS'              => '0.9108',
              'CPANPLUS::Internals'   => '0.9108',
              'CPANPLUS::Shell::Default'=> '0.9108',
              'Carp'                  => '1.21',
              'Carp::Heavy'           => '1.21',
              'Compress::Raw::Bzip2'  => '2.037',
              'Compress::Raw::Zlib'   => '2.037',
              'Compress::Zlib'        => '2.037',
              'Cwd'                   => '3.37',
              'Env'                   => '1.03',
              'ExtUtils::Command::MM' => '6.58',
              'ExtUtils::Liblist'     => '6.58',
              'ExtUtils::Liblist::Kid'=> '6.58',
              'ExtUtils::MM'          => '6.58',
              'ExtUtils::MM_AIX'      => '6.58',
              'ExtUtils::MM_Any'      => '6.58',
              'ExtUtils::MM_BeOS'     => '6.58',
              'ExtUtils::MM_Cygwin'   => '6.58',
              'ExtUtils::MM_DOS'      => '6.58',
              'ExtUtils::MM_Darwin'   => '6.58',
              'ExtUtils::MM_MacOS'    => '6.58',
              'ExtUtils::MM_NW5'      => '6.58',
              'ExtUtils::MM_OS2'      => '6.58',
              'ExtUtils::MM_QNX'      => '6.58',
              'ExtUtils::MM_UWIN'     => '6.58',
              'ExtUtils::MM_Unix'     => '6.58',
              'ExtUtils::MM_VMS'      => '6.58',
              'ExtUtils::MM_VOS'      => '6.58',
              'ExtUtils::MM_Win32'    => '6.58',
              'ExtUtils::MM_Win95'    => '6.58',
              'ExtUtils::MY'          => '6.58',
              'ExtUtils::MakeMaker'   => '6.58',
              'ExtUtils::MakeMaker::Config'=> '6.58',
              'ExtUtils::Mkbootstrap' => '6.58',
              'ExtUtils::Mksymlists'  => '6.58',
              'ExtUtils::ParseXS'     => '3.00_01',
              'ExtUtils::ParseXS::Constants'=> undef,
              'ExtUtils::ParseXS::CountLines'=> undef,
              'ExtUtils::ParseXS::Utilities'=> undef,
              'ExtUtils::Typemaps'    => '1.00',
              'ExtUtils::Typemaps::InputMap'=> undef,
              'ExtUtils::Typemaps::OutputMap'=> undef,
              'ExtUtils::Typemaps::Type'=> '0.05',
              'ExtUtils::testlib'     => '6.58',
              'File::Basename'        => '2.83',
              'File::Find'            => '1.20',
              'HTTP::Tiny'            => '0.013',
              'I18N::Langinfo'        => '0.08_02',
              'IO::Compress::Adapter::Bzip2'=> '2.037',
              'IO::Compress::Adapter::Deflate'=> '2.037',
              'IO::Compress::Adapter::Identity'=> '2.037',
              'IO::Compress::Base'    => '2.037',
              'IO::Compress::Base::Common'=> '2.037',
              'IO::Compress::Bzip2'   => '2.037',
              'IO::Compress::Deflate' => '2.037',
              'IO::Compress::Gzip'    => '2.037',
              'IO::Compress::Gzip::Constants'=> '2.037',
              'IO::Compress::RawDeflate'=> '2.037',
              'IO::Compress::Zip'     => '2.037',
              'IO::Compress::Zip::Constants'=> '2.037',
              'IO::Compress::Zlib::Constants'=> '2.037',
              'IO::Compress::Zlib::Extra'=> '2.037',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.037',
              'IO::Uncompress::Adapter::Identity'=> '2.037',
              'IO::Uncompress::Adapter::Inflate'=> '2.037',
              'IO::Uncompress::AnyInflate'=> '2.037',
              'IO::Uncompress::AnyUncompress'=> '2.037',
              'IO::Uncompress::Base'  => '2.037',
              'IO::Uncompress::Bunzip2'=> '2.037',
              'IO::Uncompress::Gunzip'=> '2.037',
              'IO::Uncompress::Inflate'=> '2.037',
              'IO::Uncompress::RawInflate'=> '2.037',
              'IO::Uncompress::Unzip' => '2.037',
              'IPC::Cmd'              => '0.72',
              'Locale::Codes'         => '3.17',
              'Locale::Codes::Constants'=> '3.17',
              'Locale::Codes::Country'=> '3.17',
              'Locale::Codes::Country_Codes'=> '3.17',
              'Locale::Codes::Currency'=> '3.17',
              'Locale::Codes::Currency_Codes'=> '3.17',
              'Locale::Codes::LangExt'=> '3.17',
              'Locale::Codes::LangExt_Codes'=> '3.17',
              'Locale::Codes::LangVar'=> '3.17',
              'Locale::Codes::LangVar_Codes'=> '3.17',
              'Locale::Codes::Language'=> '3.17',
              'Locale::Codes::Language_Codes'=> '3.17',
              'Locale::Codes::Script' => '3.17',
              'Locale::Codes::Script_Codes'=> '3.17',
              'Locale::Country'       => '3.17',
              'Locale::Currency'      => '3.17',
              'Locale::Language'      => '3.17',
              'Locale::Script'        => '3.17',
              'Math::BigFloat::Trace' => '0.28',
              'Math::BigInt::FastCalc'=> '0.29',
              'Math::BigInt::Trace'   => '0.28',
              'Math::BigRat'          => '0.2602',
              'Math::Complex'         => '1.58',
              'Math::Trig'            => '1.22',
              'Module::CoreList'      => '2.54',
              'OS2::Process'          => '1.07',
              'Pod::Perldoc'          => '3.15_06',
              'Pod::Simple'           => '3.18',
              'Pod::Simple::BlackBox' => '3.18',
              'Pod::Simple::Checker'  => '3.18',
              'Pod::Simple::Debug'    => '3.18',
              'Pod::Simple::DumpAsText'=> '3.18',
              'Pod::Simple::DumpAsXML'=> '3.18',
              'Pod::Simple::HTML'     => '3.18',
              'Pod::Simple::HTMLBatch'=> '3.18',
              'Pod::Simple::LinkSection'=> '3.18',
              'Pod::Simple::Methody'  => '3.18',
              'Pod::Simple::Progress' => '3.18',
              'Pod::Simple::PullParser'=> '3.18',
              'Pod::Simple::PullParserEndToken'=> '3.18',
              'Pod::Simple::PullParserStartToken'=> '3.18',
              'Pod::Simple::PullParserTextToken'=> '3.18',
              'Pod::Simple::PullParserToken'=> '3.18',
              'Pod::Simple::RTF'      => '3.18',
              'Pod::Simple::Search'   => '3.18',
              'Pod::Simple::SimpleTree'=> '3.18',
              'Pod::Simple::Text'     => '3.18',
              'Pod::Simple::TextContent'=> '3.18',
              'Pod::Simple::TiedOutFH'=> '3.18',
              'Pod::Simple::Transcode'=> '3.18',
              'Pod::Simple::TranscodeDumb'=> '3.18',
              'Pod::Simple::TranscodeSmart'=> '3.18',
              'Pod::Simple::XHTML'    => '3.18',
              'Pod::Simple::XMLOutStream'=> '3.18',
              'Storable'              => '2.31',
              'Sys::Syslog::Win32'    => undef,
              'Time::HiRes'           => '1.9724',
              'Unicode::Collate'      => '0.77',
              'Unicode::UCD'          => '0.33',
              'Win32API::File'        => '0.1200',
              'XS::APItest'           => '0.30',
              'attributes'            => '0.15',
              'bigint'                => '0.28',
              'bignum'                => '0.28',
              'charnames'             => '1.23',
              'diagnostics'           => '1.23',
              'feature'               => '1.22',
              'overload'              => '1.15',
              'perlfaq'               => '5.015000',
              'threads'               => '1.84',
              'version'               => '0.93',
          },
          removed => {
              'ExtUtils::MakeMaker::YAML'=> 1,
              'Locale::Constants'     => 1,
              'Sys::Syslog::win32::Win32'=> 1,
          }
      },
      5.015002 => {
          delta_from => 5.015001,
          changed => {
              'Attribute::Handlers'   => '0.92',
              'B'                     => '1.31',
              'B::Concise'            => '0.85',
              'B::Deparse'            => '1.07',
              'B::Terse'              => '1.06',
              'B::Xref'               => '1.03',
              'CPAN'                  => '1.9800',
              'CPAN::Exception::yaml_process_error'=> '5.5',
              'CPAN::Meta'            => '2.112150',
              'CPAN::Meta::Converter' => '2.112150',
              'CPAN::Meta::Feature'   => '2.112150',
              'CPAN::Meta::History'   => '2.112150',
              'CPAN::Meta::Prereqs'   => '2.112150',
              'CPAN::Meta::Spec'      => '2.112150',
              'CPAN::Meta::Validator' => '2.112150',
              'CPANPLUS'              => '0.9109',
              'CPANPLUS::Internals'   => '0.9109',
              'CPANPLUS::Shell::Default'=> '0.9109',
              'DB_File'               => '1.824',
              'Data::Dumper'          => '2.132',
              'Encode'                => '2.44',
              'Encode::Alias'         => '2.15',
              'Encode::Encoder'       => '2.02',
              'Encode::Guess'         => '2.05',
              'ExtUtils::Command::MM' => '6.59',
              'ExtUtils::Install'     => '1.57',
              'ExtUtils::Installed'   => '1.999002',
              'ExtUtils::Liblist'     => '6.59',
              'ExtUtils::Liblist::Kid'=> '6.59',
              'ExtUtils::MM'          => '6.59',
              'ExtUtils::MM_AIX'      => '6.59',
              'ExtUtils::MM_Any'      => '6.59',
              'ExtUtils::MM_BeOS'     => '6.59',
              'ExtUtils::MM_Cygwin'   => '6.59',
              'ExtUtils::MM_DOS'      => '6.59',
              'ExtUtils::MM_Darwin'   => '6.59',
              'ExtUtils::MM_MacOS'    => '6.59',
              'ExtUtils::MM_NW5'      => '6.59',
              'ExtUtils::MM_OS2'      => '6.59',
              'ExtUtils::MM_QNX'      => '6.59',
              'ExtUtils::MM_UWIN'     => '6.59',
              'ExtUtils::MM_Unix'     => '6.59',
              'ExtUtils::MM_VMS'      => '6.59',
              'ExtUtils::MM_VOS'      => '6.59',
              'ExtUtils::MM_Win32'    => '6.59',
              'ExtUtils::MM_Win95'    => '6.59',
              'ExtUtils::MY'          => '6.59',
              'ExtUtils::MakeMaker'   => '6.59',
              'ExtUtils::MakeMaker::Config'=> '6.59',
              'ExtUtils::Manifest'    => '1.60',
              'ExtUtils::Mkbootstrap' => '6.59',
              'ExtUtils::Mksymlists'  => '6.59',
              'ExtUtils::ParseXS'     => '3.03_01',
              'ExtUtils::Typemaps'    => '1.01',
              'ExtUtils::testlib'     => '6.59',
              'File::Spec'            => '3.34',
              'File::Spec::Mac'       => '3.35',
              'File::Spec::Unix'      => '3.34',
              'File::Spec::VMS'       => '3.35',
              'File::Spec::Win32'     => '3.35',
              'I18N::LangTags'        => '0.37',
              'IO'                    => '1.25_05',
              'IO::Handle'            => '1.32',
              'IO::Socket'            => '1.33',
              'IO::Socket::INET'      => '1.32',
              'IPC::Open3'            => '1.12',
              'Math::BigFloat'        => '1.995',
              'Math::BigFloat::Trace' => '0.29',
              'Math::BigInt'          => '1.996',
              'Math::BigInt::Trace'   => '0.29',
              'Module::Build'         => '0.39_01',
              'Module::Build::Base'   => '0.39_01',
              'Module::Build::Compat' => '0.39_01',
              'Module::Build::Config' => '0.39_01',
              'Module::Build::Cookbook'=> '0.39_01',
              'Module::Build::Dumper' => '0.39_01',
              'Module::Build::ModuleInfo'=> '0.39_01',
              'Module::Build::Notes'  => '0.39_01',
              'Module::Build::PPMMaker'=> '0.39_01',
              'Module::Build::Platform::Amiga'=> '0.39_01',
              'Module::Build::Platform::Default'=> '0.39_01',
              'Module::Build::Platform::EBCDIC'=> '0.39_01',
              'Module::Build::Platform::MPEiX'=> '0.39_01',
              'Module::Build::Platform::MacOS'=> '0.39_01',
              'Module::Build::Platform::RiscOS'=> '0.39_01',
              'Module::Build::Platform::Unix'=> '0.39_01',
              'Module::Build::Platform::VMS'=> '0.39_01',
              'Module::Build::Platform::VOS'=> '0.39_01',
              'Module::Build::Platform::Windows'=> '0.39_01',
              'Module::Build::Platform::aix'=> '0.39_01',
              'Module::Build::Platform::cygwin'=> '0.39_01',
              'Module::Build::Platform::darwin'=> '0.39_01',
              'Module::Build::Platform::os2'=> '0.39_01',
              'Module::Build::PodParser'=> '0.39_01',
              'Module::CoreList'      => '2.55',
              'Module::Load'          => '0.20',
              'Module::Metadata'      => '1.000005_01',
              'Opcode'                => '1.20',
              'Params::Check'         => '0.32',
              'PerlIO::via'           => '0.12',
              'Term::ANSIColor'       => '3.01',
              'Unicode::Collate'      => '0.78',
              'Unicode::Normalize'    => '1.13',
              'Unicode::UCD'          => '0.34',
              'bigint'                => '0.29',
              'bignum'                => '0.29',
              'bigrat'                => '0.29',
              'diagnostics'           => '1.24',
              'fields'                => '2.16',
              'inc::latest'           => '0.39_01',
          },
          removed => {
          }
      },
      5.015003 => {
          delta_from => 5.015002,
          changed => {
              'AnyDBM_File'           => '1.01',
              'Archive::Extract'      => '0.56',
              'Archive::Tar'          => '1.78',
              'Archive::Tar::Constant'=> '1.78',
              'Archive::Tar::File'    => '1.78',
              'Attribute::Handlers'   => '0.93',
              'B'                     => '1.32',
              'B::Concise'            => '0.86',
              'B::Deparse'            => '1.08',
              'CPAN::Meta'            => '2.112621',
              'CPAN::Meta::Converter' => '2.112621',
              'CPAN::Meta::Feature'   => '2.112621',
              'CPAN::Meta::History'   => '2.112621',
              'CPAN::Meta::Prereqs'   => '2.112621',
              'CPAN::Meta::Spec'      => '2.112621',
              'CPAN::Meta::Validator' => '2.112621',
              'CPAN::Meta::YAML'      => '0.004',
              'CPANPLUS'              => '0.9111',
              'CPANPLUS::Dist::Build' => '0.58',
              'CPANPLUS::Dist::Build::Constants'=> '0.58',
              'CPANPLUS::Internals'   => '0.9111',
              'CPANPLUS::Shell::Default'=> '0.9111',
              'Carp'                  => '1.23',
              'Carp::Heavy'           => '1.23',
              'Data::Dumper'          => '2.134',
              'Devel::PPPort'         => '3.20',
              'Errno'                 => '1.14',
              'Exporter'              => '5.65',
              'Exporter::Heavy'       => '5.65',
              'ExtUtils::ParseXS'     => '3.04_04',
              'ExtUtils::ParseXS::Constants'=> '3.04_04',
              'ExtUtils::ParseXS::CountLines'=> '3.04_04',
              'ExtUtils::ParseXS::Utilities'=> '3.04_04',
              'ExtUtils::Typemaps'    => '1.02',
              'File::Glob'            => '1.13',
              'Filter::Simple'        => '0.88',
              'IO'                    => '1.25_06',
              'IO::Handle'            => '1.33',
              'Locale::Codes'         => '3.18',
              'Locale::Codes::Constants'=> '3.18',
              'Locale::Codes::Country'=> '3.18',
              'Locale::Codes::Country_Codes'=> '3.18',
              'Locale::Codes::Currency'=> '3.18',
              'Locale::Codes::Currency_Codes'=> '3.18',
              'Locale::Codes::LangExt'=> '3.18',
              'Locale::Codes::LangExt_Codes'=> '3.18',
              'Locale::Codes::LangVar'=> '3.18',
              'Locale::Codes::LangVar_Codes'=> '3.18',
              'Locale::Codes::Language'=> '3.18',
              'Locale::Codes::Language_Codes'=> '3.18',
              'Locale::Codes::Script' => '3.18',
              'Locale::Codes::Script_Codes'=> '3.18',
              'Locale::Country'       => '3.18',
              'Locale::Currency'      => '3.18',
              'Locale::Language'      => '3.18',
              'Locale::Script'        => '3.18',
              'Math::BigFloat'        => '1.997',
              'Math::BigInt'          => '1.997',
              'Math::BigInt::Calc'    => '1.997',
              'Math::BigInt::CalcEmu' => '1.997',
              'Math::BigInt::FastCalc'=> '0.30',
              'Math::BigRat'          => '0.2603',
              'Module::CoreList'      => '2.56',
              'Module::Load::Conditional'=> '0.46',
              'Module::Metadata'      => '1.000007',
              'ODBM_File'             => '1.12',
              'POSIX'                 => '1.26',
              'Pod::Perldoc'          => '3.15_07',
              'Pod::Simple'           => '3.19',
              'Pod::Simple::BlackBox' => '3.19',
              'Pod::Simple::Checker'  => '3.19',
              'Pod::Simple::Debug'    => '3.19',
              'Pod::Simple::DumpAsText'=> '3.19',
              'Pod::Simple::DumpAsXML'=> '3.19',
              'Pod::Simple::HTML'     => '3.19',
              'Pod::Simple::HTMLBatch'=> '3.19',
              'Pod::Simple::LinkSection'=> '3.19',
              'Pod::Simple::Methody'  => '3.19',
              'Pod::Simple::Progress' => '3.19',
              'Pod::Simple::PullParser'=> '3.19',
              'Pod::Simple::PullParserEndToken'=> '3.19',
              'Pod::Simple::PullParserStartToken'=> '3.19',
              'Pod::Simple::PullParserTextToken'=> '3.19',
              'Pod::Simple::PullParserToken'=> '3.19',
              'Pod::Simple::RTF'      => '3.19',
              'Pod::Simple::Search'   => '3.19',
              'Pod::Simple::SimpleTree'=> '3.19',
              'Pod::Simple::Text'     => '3.19',
              'Pod::Simple::TextContent'=> '3.19',
              'Pod::Simple::TiedOutFH'=> '3.19',
              'Pod::Simple::Transcode'=> '3.19',
              'Pod::Simple::TranscodeDumb'=> '3.19',
              'Pod::Simple::TranscodeSmart'=> '3.19',
              'Pod::Simple::XHTML'    => '3.19',
              'Pod::Simple::XMLOutStream'=> '3.19',
              'Search::Dict'          => '1.04',
              'Socket'                => '1.94_01',
              'Storable'              => '2.32',
              'Text::Abbrev'          => '1.02',
              'Tie::Array'            => '1.05',
              'UNIVERSAL'             => '1.09',
              'Unicode::UCD'          => '0.35',
              'XS::APItest'           => '0.31',
              'XSLoader'              => '0.16',
              'attributes'            => '0.16',
              'diagnostics'           => '1.25',
              'open'                  => '1.09',
              'perlfaq'               => '5.0150034',
              'threads'               => '1.85',
              'threads::shared'       => '1.40',
          },
          removed => {
          }
      },
      5.015004 => {
          delta_from => 5.015003,
          changed => {
              'Archive::Tar'          => '1.80',
              'Archive::Tar::Constant'=> '1.80',
              'Archive::Tar::File'    => '1.80',
              'Digest'                => '1.17',
              'DynaLoader'            => '1.14',
              'ExtUtils::Command::MM' => '6.61_01',
              'ExtUtils::Liblist'     => '6.61_01',
              'ExtUtils::Liblist::Kid'=> '6.61_01',
              'ExtUtils::MM'          => '6.61_01',
              'ExtUtils::MM_AIX'      => '6.61_01',
              'ExtUtils::MM_Any'      => '6.61_01',
              'ExtUtils::MM_BeOS'     => '6.61_01',
              'ExtUtils::MM_Cygwin'   => '6.61_01',
              'ExtUtils::MM_DOS'      => '6.61_01',
              'ExtUtils::MM_Darwin'   => '6.61_01',
              'ExtUtils::MM_MacOS'    => '6.61_01',
              'ExtUtils::MM_NW5'      => '6.61_01',
              'ExtUtils::MM_OS2'      => '6.61_01',
              'ExtUtils::MM_QNX'      => '6.61_01',
              'ExtUtils::MM_UWIN'     => '6.61_01',
              'ExtUtils::MM_Unix'     => '6.61_01',
              'ExtUtils::MM_VMS'      => '6.61_01',
              'ExtUtils::MM_VOS'      => '6.61_01',
              'ExtUtils::MM_Win32'    => '6.61_01',
              'ExtUtils::MM_Win95'    => '6.61_01',
              'ExtUtils::MY'          => '6.61_01',
              'ExtUtils::MakeMaker'   => '6.61_01',
              'ExtUtils::MakeMaker::Config'=> '6.61_01',
              'ExtUtils::Mkbootstrap' => '6.61_01',
              'ExtUtils::Mksymlists'  => '6.61_01',
              'ExtUtils::ParseXS'     => '3.05',
              'ExtUtils::ParseXS::Constants'=> '3.05',
              'ExtUtils::ParseXS::CountLines'=> '3.05',
              'ExtUtils::ParseXS::Utilities'=> '3.05',
              'ExtUtils::testlib'     => '6.61_01',
              'File::DosGlob'         => '1.05',
              'Module::CoreList'      => '2.57',
              'Module::Load'          => '0.22',
              'Unicode::Collate'      => '0.80',
              'Unicode::Collate::Locale'=> '0.80',
              'Unicode::UCD'          => '0.36',
              'XS::APItest'           => '0.32',
              'XS::Typemap'           => '0.07',
              'attributes'            => '0.17',
              'base'                  => '2.18',
              'constant'              => '1.23',
              'mro'                   => '1.09',
              'open'                  => '1.10',
              'perlfaq'               => '5.0150035',
          },
          removed => {
          }
      },
      5.015005 => {
          delta_from => 5.015004,
          changed => {
              'Archive::Extract'      => '0.58',
              'B::Concise'            => '0.87',
              'B::Deparse'            => '1.09',
              'CGI'                   => '3.58',
              'CGI::Fast'             => '1.09',
              'CPANPLUS'              => '0.9112',
              'CPANPLUS::Dist::Build' => '0.60',
              'CPANPLUS::Dist::Build::Constants'=> '0.60',
              'CPANPLUS::Internals'   => '0.9112',
              'CPANPLUS::Shell::Default'=> '0.9112',
              'Compress::Raw::Bzip2'  => '2.042',
              'Compress::Raw::Zlib'   => '2.042',
              'Compress::Zlib'        => '2.042',
              'Digest::SHA'           => '5.63',
              'Errno'                 => '1.15',
              'ExtUtils::Command::MM' => '6.63_02',
              'ExtUtils::Liblist'     => '6.63_02',
              'ExtUtils::Liblist::Kid'=> '6.63_02',
              'ExtUtils::MM'          => '6.63_02',
              'ExtUtils::MM_AIX'      => '6.63_02',
              'ExtUtils::MM_Any'      => '6.63_02',
              'ExtUtils::MM_BeOS'     => '6.63_02',
              'ExtUtils::MM_Cygwin'   => '6.63_02',
              'ExtUtils::MM_DOS'      => '6.63_02',
              'ExtUtils::MM_Darwin'   => '6.63_02',
              'ExtUtils::MM_MacOS'    => '6.63_02',
              'ExtUtils::MM_NW5'      => '6.63_02',
              'ExtUtils::MM_OS2'      => '6.63_02',
              'ExtUtils::MM_QNX'      => '6.63_02',
              'ExtUtils::MM_UWIN'     => '6.63_02',
              'ExtUtils::MM_Unix'     => '6.63_02',
              'ExtUtils::MM_VMS'      => '6.63_02',
              'ExtUtils::MM_VOS'      => '6.63_02',
              'ExtUtils::MM_Win32'    => '6.63_02',
              'ExtUtils::MM_Win95'    => '6.63_02',
              'ExtUtils::MY'          => '6.63_02',
              'ExtUtils::MakeMaker'   => '6.63_02',
              'ExtUtils::MakeMaker::Config'=> '6.63_02',
              'ExtUtils::Mkbootstrap' => '6.63_02',
              'ExtUtils::Mksymlists'  => '6.63_02',
              'ExtUtils::testlib'     => '6.63_02',
              'File::DosGlob'         => '1.06',
              'File::Glob'            => '1.14',
              'HTTP::Tiny'            => '0.016',
              'IO::Compress::Adapter::Bzip2'=> '2.042',
              'IO::Compress::Adapter::Deflate'=> '2.042',
              'IO::Compress::Adapter::Identity'=> '2.042',
              'IO::Compress::Base'    => '2.042',
              'IO::Compress::Base::Common'=> '2.042',
              'IO::Compress::Bzip2'   => '2.042',
              'IO::Compress::Deflate' => '2.042',
              'IO::Compress::Gzip'    => '2.042',
              'IO::Compress::Gzip::Constants'=> '2.042',
              'IO::Compress::RawDeflate'=> '2.042',
              'IO::Compress::Zip'     => '2.042',
              'IO::Compress::Zip::Constants'=> '2.042',
              'IO::Compress::Zlib::Constants'=> '2.042',
              'IO::Compress::Zlib::Extra'=> '2.042',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.042',
              'IO::Uncompress::Adapter::Identity'=> '2.042',
              'IO::Uncompress::Adapter::Inflate'=> '2.042',
              'IO::Uncompress::AnyInflate'=> '2.042',
              'IO::Uncompress::AnyUncompress'=> '2.042',
              'IO::Uncompress::Base'  => '2.042',
              'IO::Uncompress::Bunzip2'=> '2.042',
              'IO::Uncompress::Gunzip'=> '2.042',
              'IO::Uncompress::Inflate'=> '2.042',
              'IO::Uncompress::RawInflate'=> '2.042',
              'IO::Uncompress::Unzip' => '2.042',
              'Locale::Maketext'      => '1.20',
              'Locale::Maketext::Guts'=> '1.20',
              'Locale::Maketext::GutsLoader'=> '1.20',
              'Module::CoreList'      => '2.58',
              'Opcode'                => '1.21',
              'Socket'                => '1.94_02',
              'Storable'              => '2.33',
              'UNIVERSAL'             => '1.10',
              'Unicode::Collate'      => '0.85',
              'Unicode::Collate::CJK::Pinyin'=> '0.85',
              'Unicode::Collate::CJK::Stroke'=> '0.85',
              'Unicode::Collate::Locale'=> '0.85',
              'Unicode::UCD'          => '0.37',
              'XS::APItest'           => '0.33',
              'arybase'               => '0.01',
              'charnames'             => '1.24',
              'feature'               => '1.23',
              'perlfaq'               => '5.0150036',
              'strict'                => '1.05',
              'unicore::Name'         => undef,
          },
          removed => {
          }
      },
      5.015006 => {
          delta_from => 5.015005,
          changed => {
              'Archive::Tar'          => '1.82',
              'Archive::Tar::Constant'=> '1.82',
              'Archive::Tar::File'    => '1.82',
              'AutoLoader'            => '5.72',
              'B::Concise'            => '0.88',
              'B::Debug'              => '1.17',
              'B::Deparse'            => '1.10',
              'CPAN::Meta::YAML'      => '0.005',
              'CPANPLUS'              => '0.9113',
              'CPANPLUS::Internals'   => '0.9113',
              'CPANPLUS::Shell::Default'=> '0.9113',
              'Carp'                  => '1.24',
              'Compress::Raw::Bzip2'  => '2.045',
              'Compress::Raw::Zlib'   => '2.045',
              'Compress::Zlib'        => '2.045',
              'Cwd'                   => '3.38',
              'DB'                    => '1.04',
              'Data::Dumper'          => '2.135_01',
              'Digest::SHA'           => '5.70',
              'Dumpvalue'             => '1.17',
              'Exporter'              => '5.66',
              'Exporter::Heavy'       => '5.66',
              'ExtUtils::CBuilder'    => '0.280205',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280204',
              'ExtUtils::Packlist'    => '1.45',
              'ExtUtils::ParseXS'     => '3.08',
              'ExtUtils::ParseXS::Constants'=> '3.08',
              'ExtUtils::ParseXS::CountLines'=> '3.08',
              'ExtUtils::ParseXS::Utilities'=> '3.08',
              'File::Basename'        => '2.84',
              'File::Glob'            => '1.15',
              'File::Spec::Unix'      => '3.35',
              'Getopt::Std'           => '1.07',
              'I18N::LangTags'        => '0.38',
              'IO::Compress::Adapter::Bzip2'=> '2.045',
              'IO::Compress::Adapter::Deflate'=> '2.045',
              'IO::Compress::Adapter::Identity'=> '2.045',
              'IO::Compress::Base'    => '2.046',
              'IO::Compress::Base::Common'=> '2.045',
              'IO::Compress::Bzip2'   => '2.045',
              'IO::Compress::Deflate' => '2.045',
              'IO::Compress::Gzip'    => '2.045',
              'IO::Compress::Gzip::Constants'=> '2.045',
              'IO::Compress::RawDeflate'=> '2.045',
              'IO::Compress::Zip'     => '2.046',
              'IO::Compress::Zip::Constants'=> '2.045',
              'IO::Compress::Zlib::Constants'=> '2.045',
              'IO::Compress::Zlib::Extra'=> '2.045',
              'IO::Dir'               => '1.09',
              'IO::File'              => '1.16',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.045',
              'IO::Uncompress::Adapter::Identity'=> '2.045',
              'IO::Uncompress::Adapter::Inflate'=> '2.045',
              'IO::Uncompress::AnyInflate'=> '2.045',
              'IO::Uncompress::AnyUncompress'=> '2.045',
              'IO::Uncompress::Base'  => '2.046',
              'IO::Uncompress::Bunzip2'=> '2.045',
              'IO::Uncompress::Gunzip'=> '2.045',
              'IO::Uncompress::Inflate'=> '2.045',
              'IO::Uncompress::RawInflate'=> '2.045',
              'IO::Uncompress::Unzip' => '2.046',
              'Locale::Codes'         => '3.20',
              'Locale::Codes::Constants'=> '3.20',
              'Locale::Codes::Country'=> '3.20',
              'Locale::Codes::Country_Codes'=> '3.20',
              'Locale::Codes::Country_Retired'=> '3.20',
              'Locale::Codes::Currency'=> '3.20',
              'Locale::Codes::Currency_Codes'=> '3.20',
              'Locale::Codes::Currency_Retired'=> '3.20',
              'Locale::Codes::LangExt'=> '3.20',
              'Locale::Codes::LangExt_Codes'=> '3.20',
              'Locale::Codes::LangExt_Retired'=> '3.20',
              'Locale::Codes::LangFam'=> '3.20',
              'Locale::Codes::LangFam_Codes'=> '3.20',
              'Locale::Codes::LangFam_Retired'=> '3.20',
              'Locale::Codes::LangVar'=> '3.20',
              'Locale::Codes::LangVar_Codes'=> '3.20',
              'Locale::Codes::LangVar_Retired'=> '3.20',
              'Locale::Codes::Language'=> '3.20',
              'Locale::Codes::Language_Codes'=> '3.20',
              'Locale::Codes::Language_Retired'=> '3.20',
              'Locale::Codes::Script' => '3.20',
              'Locale::Codes::Script_Codes'=> '3.20',
              'Locale::Codes::Script_Retired'=> '3.20',
              'Locale::Country'       => '3.20',
              'Locale::Currency'      => '3.20',
              'Locale::Language'      => '3.20',
              'Locale::Maketext'      => '1.21',
              'Locale::Script'        => '3.20',
              'Module::CoreList'      => '2.59',
              'Module::Loaded'        => '0.08',
              'Opcode'                => '1.22',
              'POSIX'                 => '1.27',
              'Pod::Html'             => '1.12',
              'Pod::LaTeX'            => '0.60',
              'Pod::Perldoc'          => '3.15_08',
              'Safe'                  => '2.30',
              'SelfLoader'            => '1.20',
              'Socket'                => '1.97',
              'Storable'              => '2.34',
              'UNIVERSAL'             => '1.11',
              'Unicode::Collate'      => '0.87',
              'Unicode::Collate::Locale'=> '0.87',
              'XS::APItest'           => '0.34',
              'arybase'               => '0.02',
              'charnames'             => '1.27',
              'diagnostics'           => '1.26',
              'feature'               => '1.24',
              'if'                    => '0.0602',
              'overload'              => '1.16',
              'sigtrap'               => '1.06',
              'strict'                => '1.06',
              'threads'               => '1.86',
              'version'               => '0.96',
          },
          removed => {
          }
      },
      5.015007 => {
          delta_from => 5.015006,
          changed => {
              'B'                     => '1.33',
              'B::Deparse'            => '1.11',
              'CGI'                   => '3.59',
              'CPAN::Meta'            => '2.113640',
              'CPAN::Meta::Converter' => '2.113640',
              'CPAN::Meta::Feature'   => '2.113640',
              'CPAN::Meta::History'   => '2.113640',
              'CPAN::Meta::Prereqs'   => '2.113640',
              'CPAN::Meta::Requirements'=> '2.113640',
              'CPAN::Meta::Spec'      => '2.113640',
              'CPAN::Meta::Validator' => '2.113640',
              'CPANPLUS'              => '0.9116',
              'CPANPLUS::Internals'   => '0.9116',
              'CPANPLUS::Shell::Default'=> '0.9116',
              'Cwd'                   => '3.39_01',
              'Data::Dumper'          => '2.135_03',
              'Devel::InnerPackage'   => '0.4',
              'ExtUtils::CBuilder::Base'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280205',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280205',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280205',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280205',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280205',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280205',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280205',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280205',
              'ExtUtils::Manifest'    => '1.61',
              'ExtUtils::Packlist'    => '1.46',
              'ExtUtils::ParseXS'     => '3.12',
              'ExtUtils::ParseXS::Constants'=> '3.12',
              'ExtUtils::ParseXS::CountLines'=> '3.12',
              'ExtUtils::ParseXS::Utilities'=> '3.12',
              'ExtUtils::Typemaps'    => '1.03',
              'ExtUtils::Typemaps::Cmd'=> undef,
              'ExtUtils::Typemaps::Type'=> '0.06',
              'File::Glob'            => '1.16',
              'File::Spec'            => '3.39_01',
              'File::Spec::Cygwin'    => '3.39_01',
              'File::Spec::Epoc'      => '3.39_01',
              'File::Spec::Functions' => '3.39_01',
              'File::Spec::Mac'       => '3.39_01',
              'File::Spec::OS2'       => '3.39_01',
              'File::Spec::Unix'      => '3.39_01',
              'File::Spec::VMS'       => '3.39_01',
              'File::Spec::Win32'     => '3.39_01',
              'IO::Dir'               => '1.10',
              'IO::Pipe'              => '1.15',
              'IO::Poll'              => '0.09',
              'IO::Select'            => '1.21',
              'IO::Socket'            => '1.34',
              'IO::Socket::INET'      => '1.33',
              'IO::Socket::UNIX'      => '1.24',
              'Locale::Maketext'      => '1.22',
              'Math::BigInt'          => '1.998',
              'Module::CoreList'      => '2.60',
              'Module::Pluggable'     => '4.0',
              'POSIX'                 => '1.28',
              'PerlIO::scalar'        => '0.13',
              'Pod::Html'             => '1.13',
              'Pod::Perldoc'          => '3.15_15',
              'Pod::Perldoc::BaseTo'  => '3.15_15',
              'Pod::Perldoc::GetOptsOO'=> '3.15_15',
              'Pod::Perldoc::ToANSI'  => '3.15_15',
              'Pod::Perldoc::ToChecker'=> '3.15_15',
              'Pod::Perldoc::ToMan'   => '3.15_15',
              'Pod::Perldoc::ToNroff' => '3.15_15',
              'Pod::Perldoc::ToPod'   => '3.15_15',
              'Pod::Perldoc::ToRtf'   => '3.15_15',
              'Pod::Perldoc::ToTerm'  => '3.15_15',
              'Pod::Perldoc::ToText'  => '3.15_15',
              'Pod::Perldoc::ToTk'    => '3.15_15',
              'Pod::Perldoc::ToXml'   => '3.15_15',
              'Term::UI'              => '0.30',
              'Tie::File'             => '0.98',
              'Unicode::UCD'          => '0.39',
              'Version::Requirements' => '0.101021',
              'XS::APItest'           => '0.35',
              '_charnames'            => '1.28',
              'arybase'               => '0.03',
              'autouse'               => '1.07',
              'charnames'             => '1.28',
              'diagnostics'           => '1.27',
              'feature'               => '1.25',
              'overload'              => '1.17',
              'overloading'           => '0.02',
              'perlfaq'               => '5.0150038',
          },
          removed => {
          }
      },
      5.015008 => {
          delta_from => 5.015007,
          changed => {
              'B'                     => '1.34',
              'B::Deparse'            => '1.12',
              'CPAN::Meta'            => '2.120351',
              'CPAN::Meta::Converter' => '2.120351',
              'CPAN::Meta::Feature'   => '2.120351',
              'CPAN::Meta::History'   => '2.120351',
              'CPAN::Meta::Prereqs'   => '2.120351',
              'CPAN::Meta::Requirements'=> '2.120351',
              'CPAN::Meta::Spec'      => '2.120351',
              'CPAN::Meta::Validator' => '2.120351',
              'CPAN::Meta::YAML'      => '0.007',
              'CPANPLUS'              => '0.9118',
              'CPANPLUS::Dist::Build' => '0.62',
              'CPANPLUS::Dist::Build::Constants'=> '0.62',
              'CPANPLUS::Internals'   => '0.9118',
              'CPANPLUS::Shell::Default'=> '0.9118',
              'Carp'                  => '1.25',
              'Carp::Heavy'           => '1.25',
              'Compress::Raw::Bzip2'  => '2.048',
              'Compress::Raw::Zlib'   => '2.048',
              'Compress::Zlib'        => '2.048',
              'Cwd'                   => '3.39_02',
              'DB_File'               => '1.826',
              'Data::Dumper'          => '2.135_05',
              'English'               => '1.05',
              'ExtUtils::Install'     => '1.58',
              'ExtUtils::ParseXS'     => '3.16',
              'ExtUtils::ParseXS::Constants'=> '3.16',
              'ExtUtils::ParseXS::CountLines'=> '3.16',
              'ExtUtils::ParseXS::Utilities'=> '3.16',
              'ExtUtils::Typemaps'    => '3.16',
              'ExtUtils::Typemaps::Cmd'=> '3.16',
              'ExtUtils::Typemaps::InputMap'=> '3.16',
              'ExtUtils::Typemaps::OutputMap'=> '3.16',
              'ExtUtils::Typemaps::Type'=> '3.16',
              'File::Copy'            => '2.23',
              'File::Glob'            => '1.17',
              'File::Spec'            => '3.39_02',
              'File::Spec::Cygwin'    => '3.39_02',
              'File::Spec::Epoc'      => '3.39_02',
              'File::Spec::Functions' => '3.39_02',
              'File::Spec::Mac'       => '3.39_02',
              'File::Spec::OS2'       => '3.39_02',
              'File::Spec::Unix'      => '3.39_02',
              'File::Spec::VMS'       => '3.39_02',
              'File::Spec::Win32'     => '3.39_02',
              'Filter::Util::Call'    => '1.40',
              'IO::Compress::Adapter::Bzip2'=> '2.048',
              'IO::Compress::Adapter::Deflate'=> '2.048',
              'IO::Compress::Adapter::Identity'=> '2.048',
              'IO::Compress::Base'    => '2.048',
              'IO::Compress::Base::Common'=> '2.048',
              'IO::Compress::Bzip2'   => '2.048',
              'IO::Compress::Deflate' => '2.048',
              'IO::Compress::Gzip'    => '2.048',
              'IO::Compress::Gzip::Constants'=> '2.048',
              'IO::Compress::RawDeflate'=> '2.048',
              'IO::Compress::Zip'     => '2.048',
              'IO::Compress::Zip::Constants'=> '2.048',
              'IO::Compress::Zlib::Constants'=> '2.048',
              'IO::Compress::Zlib::Extra'=> '2.048',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.048',
              'IO::Uncompress::Adapter::Identity'=> '2.048',
              'IO::Uncompress::Adapter::Inflate'=> '2.048',
              'IO::Uncompress::AnyInflate'=> '2.048',
              'IO::Uncompress::AnyUncompress'=> '2.048',
              'IO::Uncompress::Base'  => '2.048',
              'IO::Uncompress::Bunzip2'=> '2.048',
              'IO::Uncompress::Gunzip'=> '2.048',
              'IO::Uncompress::Inflate'=> '2.048',
              'IO::Uncompress::RawInflate'=> '2.048',
              'IO::Uncompress::Unzip' => '2.048',
              'IPC::Cmd'              => '0.76',
              'Math::Complex'         => '1.59',
              'Math::Trig'            => '1.23',
              'Module::Metadata'      => '1.000009',
              'Opcode'                => '1.23',
              'POSIX'                 => '1.30',
              'Parse::CPAN::Meta'     => '1.4402',
              'PerlIO::mmap'          => '0.010',
              'Pod::Checker'          => '1.51',
              'Pod::Find'             => '1.51',
              'Pod::Functions'        => '1.05',
              'Pod::Html'             => '1.14',
              'Pod::InputObjects'     => '1.51',
              'Pod::ParseUtils'       => '1.51',
              'Pod::Parser'           => '1.51',
              'Pod::PlainText'        => '2.05',
              'Pod::Select'           => '1.51',
              'Pod::Usage'            => '1.51',
              'Safe'                  => '2.31',
              'Socket'                => '1.98',
              'Term::Cap'             => '1.13',
              'Term::ReadLine'        => '1.08',
              'Time::HiRes'           => '1.9725',
              'Unicode'               => '6.1.0',
              'Unicode::UCD'          => '0.41',
              'Version::Requirements' => '0.101022',
              'XS::APItest'           => '0.36',
              'XS::Typemap'           => '0.08',
              '_charnames'            => '1.29',
              'arybase'               => '0.04',
              'charnames'             => '1.29',
              'diagnostics'           => '1.28',
              'feature'               => '1.26',
              'locale'                => '1.01',
              'overload'              => '1.18',
              'perlfaq'               => '5.0150039',
              're'                    => '0.19',
              'subs'                  => '1.01',
              'warnings'              => '1.13',
          },
          removed => {
          }
      },
      5.015009 => {
          delta_from => 5.015008,
          changed => {
              'B::Deparse'            => '1.13',
              'B::Lint'               => '1.14',
              'B::Lint::Debug'        => '1.14',
              'CPAN::Meta'            => '2.120630',
              'CPAN::Meta::Converter' => '2.120630',
              'CPAN::Meta::Feature'   => '2.120630',
              'CPAN::Meta::History'   => '2.120630',
              'CPAN::Meta::Prereqs'   => '2.120630',
              'CPAN::Meta::Requirements'=> '2.120630',
              'CPAN::Meta::Spec'      => '2.120630',
              'CPAN::Meta::Validator' => '2.120630',
              'CPANPLUS'              => '0.9121',
              'CPANPLUS::Internals'   => '0.9121',
              'CPANPLUS::Shell::Default'=> '0.9121',
              'Data::Dumper'          => '2.135_06',
              'Digest::SHA'           => '5.71',
              'ExtUtils::CBuilder'    => '0.280206',
              'ExtUtils::CBuilder::Base'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280206',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280206',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280206',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280206',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280206',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280206',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280206',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280206',
              'HTTP::Tiny'            => '0.017',
              'Locale::Codes'         => '3.21',
              'Locale::Codes::Constants'=> '3.21',
              'Locale::Codes::Country'=> '3.21',
              'Locale::Codes::Country_Codes'=> '3.21',
              'Locale::Codes::Country_Retired'=> '3.21',
              'Locale::Codes::Currency'=> '3.21',
              'Locale::Codes::Currency_Codes'=> '3.21',
              'Locale::Codes::Currency_Retired'=> '3.21',
              'Locale::Codes::LangExt'=> '3.21',
              'Locale::Codes::LangExt_Codes'=> '3.21',
              'Locale::Codes::LangExt_Retired'=> '3.21',
              'Locale::Codes::LangFam'=> '3.21',
              'Locale::Codes::LangFam_Codes'=> '3.21',
              'Locale::Codes::LangFam_Retired'=> '3.21',
              'Locale::Codes::LangVar'=> '3.21',
              'Locale::Codes::LangVar_Codes'=> '3.21',
              'Locale::Codes::LangVar_Retired'=> '3.21',
              'Locale::Codes::Language'=> '3.21',
              'Locale::Codes::Language_Codes'=> '3.21',
              'Locale::Codes::Language_Retired'=> '3.21',
              'Locale::Codes::Script' => '3.21',
              'Locale::Codes::Script_Codes'=> '3.21',
              'Locale::Codes::Script_Retired'=> '3.21',
              'Locale::Country'       => '3.21',
              'Locale::Currency'      => '3.21',
              'Locale::Language'      => '3.21',
              'Locale::Script'        => '3.21',
              'Module::CoreList'      => '2.65',
              'Pod::Html'             => '1.1501',
              'Pod::Perldoc'          => '3.17',
              'Pod::Perldoc::BaseTo'  => '3.17',
              'Pod::Perldoc::GetOptsOO'=> '3.17',
              'Pod::Perldoc::ToANSI'  => '3.17',
              'Pod::Perldoc::ToChecker'=> '3.17',
              'Pod::Perldoc::ToMan'   => '3.17',
              'Pod::Perldoc::ToNroff' => '3.17',
              'Pod::Perldoc::ToPod'   => '3.17',
              'Pod::Perldoc::ToRtf'   => '3.17',
              'Pod::Perldoc::ToTerm'  => '3.17',
              'Pod::Perldoc::ToText'  => '3.17',
              'Pod::Perldoc::ToTk'    => '3.17',
              'Pod::Perldoc::ToXml'   => '3.17',
              'Pod::Simple'           => '3.20',
              'Pod::Simple::BlackBox' => '3.20',
              'Pod::Simple::Checker'  => '3.20',
              'Pod::Simple::Debug'    => '3.20',
              'Pod::Simple::DumpAsText'=> '3.20',
              'Pod::Simple::DumpAsXML'=> '3.20',
              'Pod::Simple::HTML'     => '3.20',
              'Pod::Simple::HTMLBatch'=> '3.20',
              'Pod::Simple::LinkSection'=> '3.20',
              'Pod::Simple::Methody'  => '3.20',
              'Pod::Simple::Progress' => '3.20',
              'Pod::Simple::PullParser'=> '3.20',
              'Pod::Simple::PullParserEndToken'=> '3.20',
              'Pod::Simple::PullParserStartToken'=> '3.20',
              'Pod::Simple::PullParserTextToken'=> '3.20',
              'Pod::Simple::PullParserToken'=> '3.20',
              'Pod::Simple::RTF'      => '3.20',
              'Pod::Simple::Search'   => '3.20',
              'Pod::Simple::SimpleTree'=> '3.20',
              'Pod::Simple::Text'     => '3.20',
              'Pod::Simple::TextContent'=> '3.20',
              'Pod::Simple::TiedOutFH'=> '3.20',
              'Pod::Simple::Transcode'=> '3.20',
              'Pod::Simple::TranscodeDumb'=> '3.20',
              'Pod::Simple::TranscodeSmart'=> '3.20',
              'Pod::Simple::XHTML'    => '3.20',
              'Pod::Simple::XMLOutStream'=> '3.20',
              'Socket'                => '2.000',
              'Term::ReadLine'        => '1.09',
              'Unicode::Collate'      => '0.89',
              'Unicode::Collate::CJK::Korean'=> '0.88',
              'Unicode::Collate::Locale'=> '0.89',
              'Unicode::Normalize'    => '1.14',
              'Unicode::UCD'          => '0.42',
              'XS::APItest'           => '0.37',
              'arybase'               => '0.05',
              'attributes'            => '0.18',
              'charnames'             => '1.30',
              'feature'               => '1.27',
          },
          removed => {
          }
      },
      5.016 => {
          delta_from => 5.015009,
          changed => {
              'B::Concise'            => '0.89',
              'B::Deparse'            => '1.14',
              'Carp'                  => '1.26',
              'Carp::Heavy'           => '1.26',
              'IO::Socket'            => '1.35',
              'Module::CoreList'      => '2.66',
              'PerlIO::scalar'        => '0.14',
              'Pod::Html'             => '1.1502',
              'Safe'                  => '2.31_01',
              'Socket'                => '2.001',
              'Unicode::UCD'          => '0.43',
              'XS::APItest'           => '0.38',
              '_charnames'            => '1.31',
              'attributes'            => '0.19',
              'strict'                => '1.07',
              'version'               => '0.99',
          },
          removed => {
          }
      },
      5.016001 => {
          delta_from => 5.016,
          changed => {
              'B'                     => '1.35',
              'B::Deparse'            => '1.14_01',
              'List::Util'            => '1.25',
              'List::Util::PP'        => '1.25',
              'List::Util::XS'        => '1.25',
              'Module::CoreList'      => '2.70',
              'PerlIO::scalar'        => '0.14_01',
              'Scalar::Util'          => '1.25',
              'Scalar::Util::PP'      => '1.25',
              're'                    => '0.19_01',
          },
          removed => {
          }
      },
      5.016002 => {
          delta_from => 5.016001,
          changed => {
              'Module::CoreList'      => '2.76',
          },
          removed => {
          }
      },
      5.016003 => {
          delta_from => 5.016002,
          changed => {
              'Encode'                => '2.44_01',
              'Module::CoreList'      => '2.76_02',
              'XS::APItest'           => '0.39',
          },
          removed => {
          }
      },
      5.017 => {
          delta_from => 5.016,
          changed => {
              'B'                     => '1.35',
              'B::Concise'            => '0.90',
              'ExtUtils::ParseXS'     => '3.17',
              'ExtUtils::ParseXS::Utilities'=> '3.17',
              'File::DosGlob'         => '1.07',
              'File::Find'            => '1.21',
              'File::stat'            => '1.06',
              'Hash::Util'            => '0.12',
              'IO::Socket'            => '1.34',
              'Module::CoreList'      => '2.67',
              'Pod::Functions'        => '1.06',
              'Storable'              => '2.35',
              'XS::APItest'           => '0.39',
              'diagnostics'           => '1.29',
              'feature'               => '1.28',
              'overload'              => '1.19',
              'utf8'                  => '1.10',
          },
          removed => {
              'Version::Requirements' => 1,
          }
      },
      5.017001 => {
          delta_from => 5.017,
          changed => {
              'App::Prove'            => '3.25',
              'App::Prove::State'     => '3.25',
              'App::Prove::State::Result'=> '3.25',
              'App::Prove::State::Result::Test'=> '3.25',
              'Archive::Extract'      => '0.60',
              'Archive::Tar'          => '1.88',
              'Archive::Tar::Constant'=> '1.88',
              'Archive::Tar::File'    => '1.88',
              'B'                     => '1.36',
              'B::Deparse'            => '1.15',
              'CPAN::Meta'            => '2.120921',
              'CPAN::Meta::Converter' => '2.120921',
              'CPAN::Meta::Feature'   => '2.120921',
              'CPAN::Meta::History'   => '2.120921',
              'CPAN::Meta::Prereqs'   => '2.120921',
              'CPAN::Meta::Requirements'=> '2.122',
              'CPAN::Meta::Spec'      => '2.120921',
              'CPAN::Meta::Validator' => '2.120921',
              'CPAN::Meta::YAML'      => '0.008',
              'CPANPLUS'              => '0.9130',
              'CPANPLUS::Config::HomeEnv'=> '0.04',
              'CPANPLUS::Internals'   => '0.9130',
              'CPANPLUS::Shell::Default'=> '0.9130',
              'Class::Struct'         => '0.64',
              'Compress::Raw::Bzip2'  => '2.052',
              'Compress::Raw::Zlib'   => '2.054',
              'Compress::Zlib'        => '2.052',
              'Digest::MD5'           => '2.52',
              'DynaLoader'            => '1.15',
              'ExtUtils::CBuilder'    => '0.280208',
              'ExtUtils::CBuilder::Base'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280208',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280208',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280208',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280208',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280208',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280208',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280208',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280208',
              'Fatal'                 => '2.11',
              'File::DosGlob'         => '1.08',
              'File::Fetch'           => '0.34',
              'File::Spec::Unix'      => '3.39_03',
              'Filter::Util::Call'    => '1.45',
              'HTTP::Tiny'            => '0.022',
              'IO'                    => '1.25_07',
              'IO::Compress::Adapter::Bzip2'=> '2.052',
              'IO::Compress::Adapter::Deflate'=> '2.052',
              'IO::Compress::Adapter::Identity'=> '2.052',
              'IO::Compress::Base'    => '2.052',
              'IO::Compress::Base::Common'=> '2.052',
              'IO::Compress::Bzip2'   => '2.052',
              'IO::Compress::Deflate' => '2.052',
              'IO::Compress::Gzip'    => '2.052',
              'IO::Compress::Gzip::Constants'=> '2.052',
              'IO::Compress::RawDeflate'=> '2.052',
              'IO::Compress::Zip'     => '2.052',
              'IO::Compress::Zip::Constants'=> '2.052',
              'IO::Compress::Zlib::Constants'=> '2.052',
              'IO::Compress::Zlib::Extra'=> '2.052',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.052',
              'IO::Uncompress::Adapter::Identity'=> '2.052',
              'IO::Uncompress::Adapter::Inflate'=> '2.052',
              'IO::Uncompress::AnyInflate'=> '2.052',
              'IO::Uncompress::AnyUncompress'=> '2.052',
              'IO::Uncompress::Base'  => '2.052',
              'IO::Uncompress::Bunzip2'=> '2.052',
              'IO::Uncompress::Gunzip'=> '2.052',
              'IO::Uncompress::Inflate'=> '2.052',
              'IO::Uncompress::RawInflate'=> '2.052',
              'IO::Uncompress::Unzip' => '2.052',
              'IPC::Cmd'              => '0.78',
              'List::Util'            => '1.25',
              'List::Util::XS'        => '1.25',
              'Locale::Codes'         => '3.22',
              'Locale::Codes::Constants'=> '3.22',
              'Locale::Codes::Country'=> '3.22',
              'Locale::Codes::Country_Codes'=> '3.22',
              'Locale::Codes::Country_Retired'=> '3.22',
              'Locale::Codes::Currency'=> '3.22',
              'Locale::Codes::Currency_Codes'=> '3.22',
              'Locale::Codes::Currency_Retired'=> '3.22',
              'Locale::Codes::LangExt'=> '3.22',
              'Locale::Codes::LangExt_Codes'=> '3.22',
              'Locale::Codes::LangExt_Retired'=> '3.22',
              'Locale::Codes::LangFam'=> '3.22',
              'Locale::Codes::LangFam_Codes'=> '3.22',
              'Locale::Codes::LangFam_Retired'=> '3.22',
              'Locale::Codes::LangVar'=> '3.22',
              'Locale::Codes::LangVar_Codes'=> '3.22',
              'Locale::Codes::LangVar_Retired'=> '3.22',
              'Locale::Codes::Language'=> '3.22',
              'Locale::Codes::Language_Codes'=> '3.22',
              'Locale::Codes::Language_Retired'=> '3.22',
              'Locale::Codes::Script' => '3.22',
              'Locale::Codes::Script_Codes'=> '3.22',
              'Locale::Codes::Script_Retired'=> '3.22',
              'Locale::Country'       => '3.22',
              'Locale::Currency'      => '3.22',
              'Locale::Language'      => '3.22',
              'Locale::Script'        => '3.22',
              'Memoize'               => '1.03',
              'Memoize::AnyDBM_File'  => '1.03',
              'Memoize::Expire'       => '1.03',
              'Memoize::ExpireFile'   => '1.03',
              'Memoize::ExpireTest'   => '1.03',
              'Memoize::NDBM_File'    => '1.03',
              'Memoize::SDBM_File'    => '1.03',
              'Memoize::Storable'     => '1.03',
              'Module::Build'         => '0.40',
              'Module::Build::Base'   => '0.40',
              'Module::Build::Compat' => '0.40',
              'Module::Build::Config' => '0.40',
              'Module::Build::Cookbook'=> '0.40',
              'Module::Build::Dumper' => '0.40',
              'Module::Build::ModuleInfo'=> '0.40',
              'Module::Build::Notes'  => '0.40',
              'Module::Build::PPMMaker'=> '0.40',
              'Module::Build::Platform::Amiga'=> '0.40',
              'Module::Build::Platform::Default'=> '0.40',
              'Module::Build::Platform::EBCDIC'=> '0.40',
              'Module::Build::Platform::MPEiX'=> '0.40',
              'Module::Build::Platform::MacOS'=> '0.40',
              'Module::Build::Platform::RiscOS'=> '0.40',
              'Module::Build::Platform::Unix'=> '0.40',
              'Module::Build::Platform::VMS'=> '0.40',
              'Module::Build::Platform::VOS'=> '0.40',
              'Module::Build::Platform::Windows'=> '0.40',
              'Module::Build::Platform::aix'=> '0.40',
              'Module::Build::Platform::cygwin'=> '0.40',
              'Module::Build::Platform::darwin'=> '0.40',
              'Module::Build::Platform::os2'=> '0.40',
              'Module::Build::PodParser'=> '0.40',
              'Module::CoreList'      => '2.68',
              'Module::Load::Conditional'=> '0.50',
              'Object::Accessor'      => '0.44',
              'POSIX'                 => '1.31',
              'Params::Check'         => '0.36',
              'Parse::CPAN::Meta'     => '1.4404',
              'PerlIO::mmap'          => '0.011',
              'PerlIO::via::QuotedPrint'=> '0.07',
              'Pod::Html'             => '1.16',
              'Pod::Man'              => '2.26',
              'Pod::Text'             => '3.16',
              'Safe'                  => '2.33_01',
              'Scalar::Util'          => '1.25',
              'Search::Dict'          => '1.07',
              'Storable'              => '2.36',
              'TAP::Base'             => '3.25',
              'TAP::Formatter::Base'  => '3.25',
              'TAP::Formatter::Color' => '3.25',
              'TAP::Formatter::Console'=> '3.25',
              'TAP::Formatter::Console::ParallelSession'=> '3.25',
              'TAP::Formatter::Console::Session'=> '3.25',
              'TAP::Formatter::File'  => '3.25',
              'TAP::Formatter::File::Session'=> '3.25',
              'TAP::Formatter::Session'=> '3.25',
              'TAP::Harness'          => '3.25',
              'TAP::Object'           => '3.25',
              'TAP::Parser'           => '3.25',
              'TAP::Parser::Aggregator'=> '3.25',
              'TAP::Parser::Grammar'  => '3.25',
              'TAP::Parser::Iterator' => '3.25',
              'TAP::Parser::Iterator::Array'=> '3.25',
              'TAP::Parser::Iterator::Process'=> '3.25',
              'TAP::Parser::Iterator::Stream'=> '3.25',
              'TAP::Parser::IteratorFactory'=> '3.25',
              'TAP::Parser::Multiplexer'=> '3.25',
              'TAP::Parser::Result'   => '3.25',
              'TAP::Parser::Result::Bailout'=> '3.25',
              'TAP::Parser::Result::Comment'=> '3.25',
              'TAP::Parser::Result::Plan'=> '3.25',
              'TAP::Parser::Result::Pragma'=> '3.25',
              'TAP::Parser::Result::Test'=> '3.25',
              'TAP::Parser::Result::Unknown'=> '3.25',
              'TAP::Parser::Result::Version'=> '3.25',
              'TAP::Parser::Result::YAML'=> '3.25',
              'TAP::Parser::ResultFactory'=> '3.25',
              'TAP::Parser::Scheduler'=> '3.25',
              'TAP::Parser::Scheduler::Job'=> '3.25',
              'TAP::Parser::Scheduler::Spinner'=> '3.25',
              'TAP::Parser::Source'   => '3.25',
              'TAP::Parser::SourceHandler'=> '3.25',
              'TAP::Parser::SourceHandler::Executable'=> '3.25',
              'TAP::Parser::SourceHandler::File'=> '3.25',
              'TAP::Parser::SourceHandler::Handle'=> '3.25',
              'TAP::Parser::SourceHandler::Perl'=> '3.25',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.25',
              'TAP::Parser::Utils'    => '3.25',
              'TAP::Parser::YAMLish::Reader'=> '3.25',
              'TAP::Parser::YAMLish::Writer'=> '3.25',
              'Term::ANSIColor'       => '3.02',
              'Test::Harness'         => '3.25',
              'Unicode'               => '6.2.0',
              'Unicode::UCD'          => '0.44',
              'XS::APItest'           => '0.40',
              '_charnames'            => '1.32',
              'attributes'            => '0.2',
              'autodie'               => '2.11',
              'autodie::exception'    => '2.11',
              'autodie::exception::system'=> '2.11',
              'autodie::hints'        => '2.11',
              'bigint'                => '0.30',
              'charnames'             => '1.32',
              'feature'               => '1.29',
              'inc::latest'           => '0.40',
              'perlfaq'               => '5.0150040',
              're'                    => '0.20',
          },
          removed => {
              'List::Util::PP'        => 1,
              'Scalar::Util::PP'      => 1,
          }
      },
      5.017002 => {
          delta_from => 5.017001,
          changed => {
              'App::Prove'            => '3.25_01',
              'App::Prove::State'     => '3.25_01',
              'App::Prove::State::Result'=> '3.25_01',
              'App::Prove::State::Result::Test'=> '3.25_01',
              'B::Concise'            => '0.91',
              'Compress::Raw::Bzip2'  => '2.05201',
              'Compress::Raw::Zlib'   => '2.05401',
              'Exporter'              => '5.67',
              'Exporter::Heavy'       => '5.67',
              'Fatal'                 => '2.12',
              'File::Fetch'           => '0.36',
              'File::stat'            => '1.07',
              'IO'                    => '1.25_08',
              'IO::Socket'            => '1.35',
              'Module::CoreList'      => '2.69',
              'PerlIO::scalar'        => '0.15',
              'Socket'                => '2.002',
              'Storable'              => '2.37',
              'TAP::Base'             => '3.25_01',
              'TAP::Formatter::Base'  => '3.25_01',
              'TAP::Formatter::Color' => '3.25_01',
              'TAP::Formatter::Console'=> '3.25_01',
              'TAP::Formatter::Console::ParallelSession'=> '3.25_01',
              'TAP::Formatter::Console::Session'=> '3.25_01',
              'TAP::Formatter::File'  => '3.25_01',
              'TAP::Formatter::File::Session'=> '3.25_01',
              'TAP::Formatter::Session'=> '3.25_01',
              'TAP::Harness'          => '3.25_01',
              'TAP::Object'           => '3.25_01',
              'TAP::Parser'           => '3.25_01',
              'TAP::Parser::Aggregator'=> '3.25_01',
              'TAP::Parser::Grammar'  => '3.25_01',
              'TAP::Parser::Iterator' => '3.25_01',
              'TAP::Parser::Iterator::Array'=> '3.25_01',
              'TAP::Parser::Iterator::Process'=> '3.25_01',
              'TAP::Parser::Iterator::Stream'=> '3.25_01',
              'TAP::Parser::IteratorFactory'=> '3.25_01',
              'TAP::Parser::Multiplexer'=> '3.25_01',
              'TAP::Parser::Result'   => '3.25_01',
              'TAP::Parser::Result::Bailout'=> '3.25_01',
              'TAP::Parser::Result::Comment'=> '3.25_01',
              'TAP::Parser::Result::Plan'=> '3.25_01',
              'TAP::Parser::Result::Pragma'=> '3.25_01',
              'TAP::Parser::Result::Test'=> '3.25_01',
              'TAP::Parser::Result::Unknown'=> '3.25_01',
              'TAP::Parser::Result::Version'=> '3.25_01',
              'TAP::Parser::Result::YAML'=> '3.25_01',
              'TAP::Parser::ResultFactory'=> '3.25_01',
              'TAP::Parser::Scheduler'=> '3.25_01',
              'TAP::Parser::Scheduler::Job'=> '3.25_01',
              'TAP::Parser::Scheduler::Spinner'=> '3.25_01',
              'TAP::Parser::Source'   => '3.25_01',
              'TAP::Parser::SourceHandler'=> '3.25_01',
              'TAP::Parser::SourceHandler::Executable'=> '3.25_01',
              'TAP::Parser::SourceHandler::File'=> '3.25_01',
              'TAP::Parser::SourceHandler::Handle'=> '3.25_01',
              'TAP::Parser::SourceHandler::Perl'=> '3.25_01',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.25_01',
              'TAP::Parser::Utils'    => '3.25_01',
              'TAP::Parser::YAMLish::Reader'=> '3.25_01',
              'TAP::Parser::YAMLish::Writer'=> '3.25_01',
              'Test::Harness'         => '3.25_01',
              'Tie::StdHandle'        => '4.3',
              'XS::APItest'           => '0.41',
              'autodie'               => '2.12',
              'autodie::exception'    => '2.12',
              'autodie::exception::system'=> '2.12',
              'autodie::hints'        => '2.12',
              'diagnostics'           => '1.30',
              'overload'              => '1.20',
              're'                    => '0.21',
              'vars'                  => '1.03',
          },
          removed => {
          }
      },
      5.017003 => {
          delta_from => 5.017002,
          changed => {
              'B'                     => '1.37',
              'B::Concise'            => '0.92',
              'B::Debug'              => '1.18',
              'B::Deparse'            => '1.16',
              'CGI'                   => '3.60',
              'Compress::Raw::Bzip2'  => '2.055',
              'Compress::Raw::Zlib'   => '2.056',
              'Compress::Zlib'        => '2.055',
              'Data::Dumper'          => '2.135_07',
              'Devel::Peek'           => '1.09',
              'Encode'                => '2.47',
              'Encode::Alias'         => '2.16',
              'Encode::GSM0338'       => '2.02',
              'Encode::Unicode::UTF7' => '2.06',
              'IO::Compress::Adapter::Bzip2'=> '2.055',
              'IO::Compress::Adapter::Deflate'=> '2.055',
              'IO::Compress::Adapter::Identity'=> '2.055',
              'IO::Compress::Base'    => '2.055',
              'IO::Compress::Base::Common'=> '2.055',
              'IO::Compress::Bzip2'   => '2.055',
              'IO::Compress::Deflate' => '2.055',
              'IO::Compress::Gzip'    => '2.055',
              'IO::Compress::Gzip::Constants'=> '2.055',
              'IO::Compress::RawDeflate'=> '2.055',
              'IO::Compress::Zip'     => '2.055',
              'IO::Compress::Zip::Constants'=> '2.055',
              'IO::Compress::Zlib::Constants'=> '2.055',
              'IO::Compress::Zlib::Extra'=> '2.055',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.055',
              'IO::Uncompress::Adapter::Identity'=> '2.055',
              'IO::Uncompress::Adapter::Inflate'=> '2.055',
              'IO::Uncompress::AnyInflate'=> '2.055',
              'IO::Uncompress::AnyUncompress'=> '2.055',
              'IO::Uncompress::Base'  => '2.055',
              'IO::Uncompress::Bunzip2'=> '2.055',
              'IO::Uncompress::Gunzip'=> '2.055',
              'IO::Uncompress::Inflate'=> '2.055',
              'IO::Uncompress::RawInflate'=> '2.055',
              'IO::Uncompress::Unzip' => '2.055',
              'Module::Build'         => '0.4003',
              'Module::Build::Base'   => '0.4003',
              'Module::Build::Compat' => '0.4003',
              'Module::Build::Config' => '0.4003',
              'Module::Build::Cookbook'=> '0.4003',
              'Module::Build::Dumper' => '0.4003',
              'Module::Build::ModuleInfo'=> '0.4003',
              'Module::Build::Notes'  => '0.4003',
              'Module::Build::PPMMaker'=> '0.4003',
              'Module::Build::Platform::Amiga'=> '0.4003',
              'Module::Build::Platform::Default'=> '0.4003',
              'Module::Build::Platform::EBCDIC'=> '0.4003',
              'Module::Build::Platform::MPEiX'=> '0.4003',
              'Module::Build::Platform::MacOS'=> '0.4003',
              'Module::Build::Platform::RiscOS'=> '0.4003',
              'Module::Build::Platform::Unix'=> '0.4003',
              'Module::Build::Platform::VMS'=> '0.4003',
              'Module::Build::Platform::VOS'=> '0.4003',
              'Module::Build::Platform::Windows'=> '0.4003',
              'Module::Build::Platform::aix'=> '0.4003',
              'Module::Build::Platform::cygwin'=> '0.4003',
              'Module::Build::Platform::darwin'=> '0.4003',
              'Module::Build::Platform::os2'=> '0.4003',
              'Module::Build::PodParser'=> '0.4003',
              'Module::CoreList'      => '2.71',
              'Module::CoreList::TieHashDelta'=> '2.71',
              'Module::Load::Conditional'=> '0.54',
              'Module::Metadata'      => '1.000011',
              'Module::Pluggable'     => '4.3',
              'Module::Pluggable::Object'=> '4.3',
              'Pod::Simple'           => '3.23',
              'Pod::Simple::BlackBox' => '3.23',
              'Pod::Simple::Checker'  => '3.23',
              'Pod::Simple::Debug'    => '3.23',
              'Pod::Simple::DumpAsText'=> '3.23',
              'Pod::Simple::DumpAsXML'=> '3.23',
              'Pod::Simple::HTML'     => '3.23',
              'Pod::Simple::HTMLBatch'=> '3.23',
              'Pod::Simple::LinkSection'=> '3.23',
              'Pod::Simple::Methody'  => '3.23',
              'Pod::Simple::Progress' => '3.23',
              'Pod::Simple::PullParser'=> '3.23',
              'Pod::Simple::PullParserEndToken'=> '3.23',
              'Pod::Simple::PullParserStartToken'=> '3.23',
              'Pod::Simple::PullParserTextToken'=> '3.23',
              'Pod::Simple::PullParserToken'=> '3.23',
              'Pod::Simple::RTF'      => '3.23',
              'Pod::Simple::Search'   => '3.23',
              'Pod::Simple::SimpleTree'=> '3.23',
              'Pod::Simple::Text'     => '3.23',
              'Pod::Simple::TextContent'=> '3.23',
              'Pod::Simple::TiedOutFH'=> '3.23',
              'Pod::Simple::Transcode'=> '3.23',
              'Pod::Simple::TranscodeDumb'=> '3.23',
              'Pod::Simple::TranscodeSmart'=> '3.23',
              'Pod::Simple::XHTML'    => '3.23',
              'Pod::Simple::XMLOutStream'=> '3.23',
              'Socket'                => '2.004',
              'Storable'              => '2.38',
              'Sys::Syslog'           => '0.31',
              'Term::ReadLine'        => '1.10',
              'Text::Tabs'            => '2012.0818',
              'Text::Wrap'            => '2012.0818',
              'Time::Local'           => '1.2300',
              'Unicode::UCD'          => '0.45',
              'Win32'                 => '0.45',
              'Win32CORE'             => '0.03',
              'XS::APItest'           => '0.42',
              'inc::latest'           => '0.4003',
              'perlfaq'               => '5.0150041',
              're'                    => '0.22',
          },
          removed => {
          }
      },
      5.017004 => {
          delta_from => 5.017003,
          changed => {
              'Archive::Tar'          => '1.90',
              'Archive::Tar::Constant'=> '1.90',
              'Archive::Tar::File'    => '1.90',
              'B'                     => '1.38',
              'B::Concise'            => '0.93',
              'B::Deparse'            => '1.17',
              'B::Xref'               => '1.04',
              'CPANPLUS'              => '0.9131',
              'CPANPLUS::Internals'   => '0.9131',
              'CPANPLUS::Shell::Default'=> '0.9131',
              'DB_File'               => '1.827',
              'Devel::Peek'           => '1.10',
              'DynaLoader'            => '1.16',
              'Errno'                 => '1.16',
              'ExtUtils::ParseXS'     => '3.18',
              'ExtUtils::ParseXS::Constants'=> '3.18',
              'ExtUtils::ParseXS::CountLines'=> '3.18',
              'ExtUtils::ParseXS::Utilities'=> '3.18',
              'File::Copy'            => '2.24',
              'File::Find'            => '1.22',
              'IPC::Open3'            => '1.13',
              'Locale::Codes'         => '3.23',
              'Locale::Codes::Constants'=> '3.23',
              'Locale::Codes::Country'=> '3.23',
              'Locale::Codes::Country_Codes'=> '3.23',
              'Locale::Codes::Country_Retired'=> '3.23',
              'Locale::Codes::Currency'=> '3.23',
              'Locale::Codes::Currency_Codes'=> '3.23',
              'Locale::Codes::Currency_Retired'=> '3.23',
              'Locale::Codes::LangExt'=> '3.23',
              'Locale::Codes::LangExt_Codes'=> '3.23',
              'Locale::Codes::LangExt_Retired'=> '3.23',
              'Locale::Codes::LangFam'=> '3.23',
              'Locale::Codes::LangFam_Codes'=> '3.23',
              'Locale::Codes::LangFam_Retired'=> '3.23',
              'Locale::Codes::LangVar'=> '3.23',
              'Locale::Codes::LangVar_Codes'=> '3.23',
              'Locale::Codes::LangVar_Retired'=> '3.23',
              'Locale::Codes::Language'=> '3.23',
              'Locale::Codes::Language_Codes'=> '3.23',
              'Locale::Codes::Language_Retired'=> '3.23',
              'Locale::Codes::Script' => '3.23',
              'Locale::Codes::Script_Codes'=> '3.23',
              'Locale::Codes::Script_Retired'=> '3.23',
              'Locale::Country'       => '3.23',
              'Locale::Currency'      => '3.23',
              'Locale::Language'      => '3.23',
              'Locale::Script'        => '3.23',
              'Math::BigFloat::Trace' => '0.30',
              'Math::BigInt::Trace'   => '0.30',
              'Module::CoreList'      => '2.73',
              'Module::CoreList::TieHashDelta'=> '2.73',
              'Opcode'                => '1.24',
              'Socket'                => '2.006',
              'Storable'              => '2.39',
              'Sys::Syslog'           => '0.32',
              'Unicode::UCD'          => '0.46',
              'XS::APItest'           => '0.43',
              'bignum'                => '0.30',
              'bigrat'                => '0.30',
              'constant'              => '1.24',
              'feature'               => '1.30',
              'threads::shared'       => '1.41',
              'version'               => '0.9901',
              'warnings'              => '1.14',
          },
          removed => {
          }
      },
      5.017005 => {
          delta_from => 5.017004,
          changed => {
              'AutoLoader'            => '5.73',
              'B'                     => '1.39',
              'B::Deparse'            => '1.18',
              'CPANPLUS'              => '0.9133',
              'CPANPLUS::Internals'   => '0.9133',
              'CPANPLUS::Shell::Default'=> '0.9133',
              'Carp'                  => '1.27',
              'Carp::Heavy'           => '1.27',
              'Data::Dumper'          => '2.136',
              'Digest::SHA'           => '5.72',
              'ExtUtils::CBuilder'    => '0.280209',
              'ExtUtils::CBuilder::Base'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280209',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280209',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280209',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280209',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280209',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280209',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280209',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280209',
              'File::Copy'            => '2.25',
              'File::Glob'            => '1.18',
              'HTTP::Tiny'            => '0.024',
              'Module::CoreList'      => '2.75',
              'Module::CoreList::TieHashDelta'=> '2.75',
              'PerlIO::encoding'      => '0.16',
              'Unicode::Collate'      => '0.90',
              'Unicode::Collate::Locale'=> '0.90',
              'Unicode::Normalize'    => '1.15',
              'Win32CORE'             => '0.04',
              'XS::APItest'           => '0.44',
              'attributes'            => '0.21',
              'bigint'                => '0.31',
              'bignum'                => '0.31',
              'bigrat'                => '0.31',
              'feature'               => '1.31',
              'threads::shared'       => '1.42',
              'warnings'              => '1.15',
          },
          removed => {
          }
      },
      5.017006 => {
          delta_from => 5.017005,
          changed => {
              'B'                     => '1.40',
              'B::Concise'            => '0.94',
              'B::Deparse'            => '1.19',
              'B::Xref'               => '1.05',
              'CGI'                   => '3.63',
              'CGI::Util'             => '3.62',
              'CPAN'                  => '1.99_51',
              'CPANPLUS::Dist::Build' => '0.64',
              'CPANPLUS::Dist::Build::Constants'=> '0.64',
              'Carp'                  => '1.28',
              'Carp::Heavy'           => '1.28',
              'Compress::Raw::Bzip2'  => '2.058',
              'Compress::Raw::Zlib'   => '2.058',
              'Compress::Zlib'        => '2.058',
              'Data::Dumper'          => '2.137',
              'Digest::SHA'           => '5.73',
              'DynaLoader'            => '1.17',
              'Env'                   => '1.04',
              'Errno'                 => '1.17',
              'ExtUtils::Manifest'    => '1.62',
              'ExtUtils::Typemaps'    => '3.18',
              'ExtUtils::Typemaps::Cmd'=> '3.18',
              'ExtUtils::Typemaps::InputMap'=> '3.18',
              'ExtUtils::Typemaps::OutputMap'=> '3.18',
              'ExtUtils::Typemaps::Type'=> '3.18',
              'Fatal'                 => '2.13',
              'File::Find'            => '1.23',
              'Hash::Util'            => '0.13',
              'IO::Compress::Adapter::Bzip2'=> '2.058',
              'IO::Compress::Adapter::Deflate'=> '2.058',
              'IO::Compress::Adapter::Identity'=> '2.058',
              'IO::Compress::Base'    => '2.058',
              'IO::Compress::Base::Common'=> '2.058',
              'IO::Compress::Bzip2'   => '2.058',
              'IO::Compress::Deflate' => '2.058',
              'IO::Compress::Gzip'    => '2.058',
              'IO::Compress::Gzip::Constants'=> '2.058',
              'IO::Compress::RawDeflate'=> '2.058',
              'IO::Compress::Zip'     => '2.058',
              'IO::Compress::Zip::Constants'=> '2.058',
              'IO::Compress::Zlib::Constants'=> '2.058',
              'IO::Compress::Zlib::Extra'=> '2.058',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.058',
              'IO::Uncompress::Adapter::Identity'=> '2.058',
              'IO::Uncompress::Adapter::Inflate'=> '2.058',
              'IO::Uncompress::AnyInflate'=> '2.058',
              'IO::Uncompress::AnyUncompress'=> '2.058',
              'IO::Uncompress::Base'  => '2.058',
              'IO::Uncompress::Bunzip2'=> '2.058',
              'IO::Uncompress::Gunzip'=> '2.058',
              'IO::Uncompress::Inflate'=> '2.058',
              'IO::Uncompress::RawInflate'=> '2.058',
              'IO::Uncompress::Unzip' => '2.058',
              'Module::CoreList'      => '2.78',
              'Module::CoreList::TieHashDelta'=> '2.77',
              'Module::Pluggable'     => '4.5',
              'Module::Pluggable::Object'=> '4.5',
              'Opcode'                => '1.25',
              'Sys::Hostname'         => '1.17',
              'Term::UI'              => '0.32',
              'Thread::Queue'         => '3.01',
              'Tie::Hash::NamedCapture'=> '0.09',
              'Unicode::Collate'      => '0.93',
              'Unicode::Collate::CJK::Korean'=> '0.93',
              'Unicode::Collate::Locale'=> '0.93',
              'Unicode::Normalize'    => '1.16',
              'Unicode::UCD'          => '0.47',
              'XS::APItest'           => '0.46',
              '_charnames'            => '1.33',
              'autodie'               => '2.13',
              'autodie::exception'    => '2.13',
              'autodie::exception::system'=> '2.13',
              'autodie::hints'        => '2.13',
              'charnames'             => '1.33',
              're'                    => '0.23',
          },
          removed => {
          }
      },
      5.017007 => {
          delta_from => 5.017006,
          changed => {
              'B'                     => '1.41',
              'CPANPLUS::Dist::Build' => '0.68',
              'CPANPLUS::Dist::Build::Constants'=> '0.68',
              'Compress::Raw::Bzip2'  => '2.059',
              'Compress::Raw::Zlib'   => '2.059',
              'Compress::Zlib'        => '2.059',
              'Cwd'                   => '3.39_03',
              'Data::Dumper'          => '2.139',
              'Devel::Peek'           => '1.11',
              'Digest::SHA'           => '5.80',
              'DynaLoader'            => '1.18',
              'English'               => '1.06',
              'Errno'                 => '1.18',
              'ExtUtils::Command::MM' => '6.64',
              'ExtUtils::Liblist'     => '6.64',
              'ExtUtils::Liblist::Kid'=> '6.64',
              'ExtUtils::MM'          => '6.64',
              'ExtUtils::MM_AIX'      => '6.64',
              'ExtUtils::MM_Any'      => '6.64',
              'ExtUtils::MM_BeOS'     => '6.64',
              'ExtUtils::MM_Cygwin'   => '6.64',
              'ExtUtils::MM_DOS'      => '6.64',
              'ExtUtils::MM_Darwin'   => '6.64',
              'ExtUtils::MM_MacOS'    => '6.64',
              'ExtUtils::MM_NW5'      => '6.64',
              'ExtUtils::MM_OS2'      => '6.64',
              'ExtUtils::MM_QNX'      => '6.64',
              'ExtUtils::MM_UWIN'     => '6.64',
              'ExtUtils::MM_Unix'     => '6.64',
              'ExtUtils::MM_VMS'      => '6.64',
              'ExtUtils::MM_VOS'      => '6.64',
              'ExtUtils::MM_Win32'    => '6.64',
              'ExtUtils::MM_Win95'    => '6.64',
              'ExtUtils::MY'          => '6.64',
              'ExtUtils::MakeMaker'   => '6.64',
              'ExtUtils::MakeMaker::Config'=> '6.64',
              'ExtUtils::Mkbootstrap' => '6.64',
              'ExtUtils::Mksymlists'  => '6.64',
              'ExtUtils::testlib'     => '6.64',
              'File::DosGlob'         => '1.09',
              'File::Glob'            => '1.19',
              'GDBM_File'             => '1.15',
              'IO::Compress::Adapter::Bzip2'=> '2.059',
              'IO::Compress::Adapter::Deflate'=> '2.059',
              'IO::Compress::Adapter::Identity'=> '2.059',
              'IO::Compress::Base'    => '2.059',
              'IO::Compress::Base::Common'=> '2.059',
              'IO::Compress::Bzip2'   => '2.059',
              'IO::Compress::Deflate' => '2.059',
              'IO::Compress::Gzip'    => '2.059',
              'IO::Compress::Gzip::Constants'=> '2.059',
              'IO::Compress::RawDeflate'=> '2.059',
              'IO::Compress::Zip'     => '2.059',
              'IO::Compress::Zip::Constants'=> '2.059',
              'IO::Compress::Zlib::Constants'=> '2.059',
              'IO::Compress::Zlib::Extra'=> '2.059',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.059',
              'IO::Uncompress::Adapter::Identity'=> '2.059',
              'IO::Uncompress::Adapter::Inflate'=> '2.059',
              'IO::Uncompress::AnyInflate'=> '2.059',
              'IO::Uncompress::AnyUncompress'=> '2.059',
              'IO::Uncompress::Base'  => '2.059',
              'IO::Uncompress::Bunzip2'=> '2.059',
              'IO::Uncompress::Gunzip'=> '2.059',
              'IO::Uncompress::Inflate'=> '2.059',
              'IO::Uncompress::RawInflate'=> '2.059',
              'IO::Uncompress::Unzip' => '2.059',
              'List::Util'            => '1.26',
              'List::Util::XS'        => '1.26',
              'Locale::Codes'         => '3.24',
              'Locale::Codes::Constants'=> '3.24',
              'Locale::Codes::Country'=> '3.24',
              'Locale::Codes::Country_Codes'=> '3.24',
              'Locale::Codes::Country_Retired'=> '3.24',
              'Locale::Codes::Currency'=> '3.24',
              'Locale::Codes::Currency_Codes'=> '3.24',
              'Locale::Codes::Currency_Retired'=> '3.24',
              'Locale::Codes::LangExt'=> '3.24',
              'Locale::Codes::LangExt_Codes'=> '3.24',
              'Locale::Codes::LangExt_Retired'=> '3.24',
              'Locale::Codes::LangFam'=> '3.24',
              'Locale::Codes::LangFam_Codes'=> '3.24',
              'Locale::Codes::LangFam_Retired'=> '3.24',
              'Locale::Codes::LangVar'=> '3.24',
              'Locale::Codes::LangVar_Codes'=> '3.24',
              'Locale::Codes::LangVar_Retired'=> '3.24',
              'Locale::Codes::Language'=> '3.24',
              'Locale::Codes::Language_Codes'=> '3.24',
              'Locale::Codes::Language_Retired'=> '3.24',
              'Locale::Codes::Script' => '3.24',
              'Locale::Codes::Script_Codes'=> '3.24',
              'Locale::Codes::Script_Retired'=> '3.24',
              'Locale::Country'       => '3.24',
              'Locale::Currency'      => '3.24',
              'Locale::Language'      => '3.24',
              'Locale::Maketext'      => '1.23',
              'Locale::Script'        => '3.24',
              'Module::CoreList'      => '2.79',
              'Module::CoreList::TieHashDelta'=> '2.79',
              'POSIX'                 => '1.32',
              'Scalar::Util'          => '1.26',
              'Socket'                => '2.006_001',
              'Storable'              => '2.40',
              'Term::ReadLine'        => '1.11',
              'Unicode::Collate'      => '0.96',
              'Unicode::Collate::CJK::Stroke'=> '0.94',
              'Unicode::Collate::CJK::Zhuyin'=> '0.94',
              'Unicode::Collate::Locale'=> '0.96',
              'XS::APItest'           => '0.48',
              'XS::Typemap'           => '0.09',
              '_charnames'            => '1.34',
              'charnames'             => '1.34',
              'feature'               => '1.32',
              'mro'                   => '1.10',
              'sigtrap'               => '1.07',
              'sort'                  => '2.02',
          },
          removed => {
          }
      },
      5.017008 => {
          delta_from => 5.017007,
          changed => {
              'Archive::Extract'      => '0.62',
              'B'                     => '1.42',
              'B::Concise'            => '0.95',
              'Compress::Raw::Bzip2'  => '2.060',
              'Compress::Raw::Zlib'   => '2.060',
              'Compress::Zlib'        => '2.060',
              'Cwd'                   => '3.40',
              'Data::Dumper'          => '2.141',
              'Digest::SHA'           => '5.81',
              'ExtUtils::Install'     => '1.59',
              'File::Fetch'           => '0.38',
              'File::Path'            => '2.09',
              'File::Spec'            => '3.40',
              'File::Spec::Cygwin'    => '3.40',
              'File::Spec::Epoc'      => '3.40',
              'File::Spec::Functions' => '3.40',
              'File::Spec::Mac'       => '3.40',
              'File::Spec::OS2'       => '3.40',
              'File::Spec::Unix'      => '3.40',
              'File::Spec::VMS'       => '3.40',
              'File::Spec::Win32'     => '3.40',
              'HTTP::Tiny'            => '0.025',
              'Hash::Util'            => '0.14',
              'I18N::LangTags'        => '0.39',
              'I18N::LangTags::List'  => '0.39',
              'I18N::Langinfo'        => '0.09',
              'IO'                    => '1.26',
              'IO::Compress::Adapter::Bzip2'=> '2.060',
              'IO::Compress::Adapter::Deflate'=> '2.060',
              'IO::Compress::Adapter::Identity'=> '2.060',
              'IO::Compress::Base'    => '2.060',
              'IO::Compress::Base::Common'=> '2.060',
              'IO::Compress::Bzip2'   => '2.060',
              'IO::Compress::Deflate' => '2.060',
              'IO::Compress::Gzip'    => '2.060',
              'IO::Compress::Gzip::Constants'=> '2.060',
              'IO::Compress::RawDeflate'=> '2.060',
              'IO::Compress::Zip'     => '2.060',
              'IO::Compress::Zip::Constants'=> '2.060',
              'IO::Compress::Zlib::Constants'=> '2.060',
              'IO::Compress::Zlib::Extra'=> '2.060',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.060',
              'IO::Uncompress::Adapter::Identity'=> '2.060',
              'IO::Uncompress::Adapter::Inflate'=> '2.060',
              'IO::Uncompress::AnyInflate'=> '2.060',
              'IO::Uncompress::AnyUncompress'=> '2.060',
              'IO::Uncompress::Base'  => '2.060',
              'IO::Uncompress::Bunzip2'=> '2.060',
              'IO::Uncompress::Gunzip'=> '2.060',
              'IO::Uncompress::Inflate'=> '2.060',
              'IO::Uncompress::RawInflate'=> '2.060',
              'IO::Uncompress::Unzip' => '2.060',
              'List::Util'            => '1.27',
              'List::Util::XS'        => '1.27',
              'Module::CoreList'      => '2.80',
              'Module::CoreList::TieHashDelta'=> '2.80',
              'Pod::Html'             => '1.17',
              'Pod::LaTeX'            => '0.61',
              'Pod::Man'              => '2.27',
              'Pod::Text'             => '3.17',
              'Pod::Text::Color'      => '2.07',
              'Pod::Text::Overstrike' => '2.05',
              'Pod::Text::Termcap'    => '2.07',
              'Safe'                  => '2.34',
              'Scalar::Util'          => '1.27',
              'Socket'                => '2.009',
              'Term::ANSIColor'       => '4.02',
              'Test'                  => '1.26',
              'Unicode::Collate'      => '0.97',
              'XS::APItest'           => '0.51',
              'XS::Typemap'           => '0.10',
              '_charnames'            => '1.35',
              'charnames'             => '1.35',
              'constant'              => '1.25',
              'diagnostics'           => '1.31',
              'threads::shared'       => '1.43',
              'warnings'              => '1.16',
          },
          removed => {
          }
      },
      5.017009 => {
          delta_from => 5.017008,
          changed => {
              'App::Cpan'             => '1.60_02',
              'App::Prove'            => '3.26',
              'App::Prove::State'     => '3.26',
              'App::Prove::State::Result'=> '3.26',
              'App::Prove::State::Result::Test'=> '3.26',
              'Archive::Extract'      => '0.68',
              'Attribute::Handlers'   => '0.94',
              'B::Lint'               => '1.17',
              'B::Lint::Debug'        => '1.17',
              'Benchmark'             => '1.14',
              'CPAN'                  => '2.00',
              'CPAN::Distribution'    => '2.00',
              'CPAN::FirstTime'       => '5.5304',
              'CPAN::Nox'             => '5.5001',
              'CPANPLUS'              => '0.9135',
              'CPANPLUS::Backend'     => '0.9135',
              'CPANPLUS::Backend::RV' => '0.9135',
              'CPANPLUS::Config'      => '0.9135',
              'CPANPLUS::Config::HomeEnv'=> '0.9135',
              'CPANPLUS::Configure'   => '0.9135',
              'CPANPLUS::Configure::Setup'=> '0.9135',
              'CPANPLUS::Dist'        => '0.9135',
              'CPANPLUS::Dist::Autobundle'=> '0.9135',
              'CPANPLUS::Dist::Base'  => '0.9135',
              'CPANPLUS::Dist::Build' => '0.70',
              'CPANPLUS::Dist::Build::Constants'=> '0.70',
              'CPANPLUS::Dist::MM'    => '0.9135',
              'CPANPLUS::Dist::Sample'=> '0.9135',
              'CPANPLUS::Error'       => '0.9135',
              'CPANPLUS::Internals'   => '0.9135',
              'CPANPLUS::Internals::Constants'=> '0.9135',
              'CPANPLUS::Internals::Constants::Report'=> '0.9135',
              'CPANPLUS::Internals::Extract'=> '0.9135',
              'CPANPLUS::Internals::Fetch'=> '0.9135',
              'CPANPLUS::Internals::Report'=> '0.9135',
              'CPANPLUS::Internals::Search'=> '0.9135',
              'CPANPLUS::Internals::Source'=> '0.9135',
              'CPANPLUS::Internals::Source::Memory'=> '0.9135',
              'CPANPLUS::Internals::Source::SQLite'=> '0.9135',
              'CPANPLUS::Internals::Source::SQLite::Tie'=> '0.9135',
              'CPANPLUS::Internals::Utils'=> '0.9135',
              'CPANPLUS::Internals::Utils::Autoflush'=> '0.9135',
              'CPANPLUS::Module'      => '0.9135',
              'CPANPLUS::Module::Author'=> '0.9135',
              'CPANPLUS::Module::Author::Fake'=> '0.9135',
              'CPANPLUS::Module::Checksums'=> '0.9135',
              'CPANPLUS::Module::Fake'=> '0.9135',
              'CPANPLUS::Module::Signature'=> '0.9135',
              'CPANPLUS::Selfupdate'  => '0.9135',
              'CPANPLUS::Shell'       => '0.9135',
              'CPANPLUS::Shell::Classic'=> '0.9135',
              'CPANPLUS::Shell::Default'=> '0.9135',
              'CPANPLUS::Shell::Default::Plugins::CustomSource'=> '0.9135',
              'CPANPLUS::Shell::Default::Plugins::Remote'=> '0.9135',
              'CPANPLUS::Shell::Default::Plugins::Source'=> '0.9135',
              'Config'                => '5.017009',
              'Config::Perl::V'       => '0.17',
              'DBM_Filter'            => '0.05',
              'Data::Dumper'          => '2.142',
              'Digest::SHA'           => '5.82',
              'Encode'                => '2.48',
              'ExtUtils::Installed'   => '1.999003',
              'ExtUtils::Manifest'    => '1.63',
              'ExtUtils::ParseXS::Utilities'=> '3.19',
              'ExtUtils::Typemaps'    => '3.19',
              'File::CheckTree'       => '4.42',
              'File::DosGlob'         => '1.10',
              'File::Temp'            => '0.22_90',
              'Filter::Simple'        => '0.89',
              'IO'                    => '1.27',
              'Log::Message'          => '0.06',
              'Log::Message::Config'  => '0.06',
              'Log::Message::Handlers'=> '0.06',
              'Log::Message::Item'    => '0.06',
              'Log::Message::Simple'  => '0.10',
              'Math::BigInt'          => '1.999',
              'Module::CoreList'      => '2.82',
              'Module::CoreList::TieHashDelta'=> '2.82',
              'Module::Load'          => '0.24',
              'Module::Pluggable'     => '4.6',
              'Module::Pluggable::Object'=> '4.6',
              'OS2::DLL'              => '1.05',
              'OS2::ExtAttr'          => '0.03',
              'OS2::Process'          => '1.08',
              'Object::Accessor'      => '0.46',
              'PerlIO::scalar'        => '0.16',
              'Pod::Checker'          => '1.60',
              'Pod::Find'             => '1.60',
              'Pod::Html'             => '1.18',
              'Pod::InputObjects'     => '1.60',
              'Pod::ParseUtils'       => '1.60',
              'Pod::Parser'           => '1.60',
              'Pod::Perldoc'          => '3.19',
              'Pod::Perldoc::BaseTo'  => '3.19',
              'Pod::Perldoc::GetOptsOO'=> '3.19',
              'Pod::Perldoc::ToANSI'  => '3.19',
              'Pod::Perldoc::ToChecker'=> '3.19',
              'Pod::Perldoc::ToMan'   => '3.19',
              'Pod::Perldoc::ToNroff' => '3.19',
              'Pod::Perldoc::ToPod'   => '3.19',
              'Pod::Perldoc::ToRtf'   => '3.19',
              'Pod::Perldoc::ToTerm'  => '3.19',
              'Pod::Perldoc::ToText'  => '3.19',
              'Pod::Perldoc::ToTk'    => '3.19',
              'Pod::Perldoc::ToXml'   => '3.19',
              'Pod::PlainText'        => '2.06',
              'Pod::Select'           => '1.60',
              'Pod::Usage'            => '1.61',
              'SelfLoader'            => '1.21',
              'TAP::Base'             => '3.26',
              'TAP::Formatter::Base'  => '3.26',
              'TAP::Formatter::Color' => '3.26',
              'TAP::Formatter::Console'=> '3.26',
              'TAP::Formatter::Console::ParallelSession'=> '3.26',
              'TAP::Formatter::Console::Session'=> '3.26',
              'TAP::Formatter::File'  => '3.26',
              'TAP::Formatter::File::Session'=> '3.26',
              'TAP::Formatter::Session'=> '3.26',
              'TAP::Harness'          => '3.26',
              'TAP::Object'           => '3.26',
              'TAP::Parser'           => '3.26',
              'TAP::Parser::Aggregator'=> '3.26',
              'TAP::Parser::Grammar'  => '3.26',
              'TAP::Parser::Iterator' => '3.26',
              'TAP::Parser::Iterator::Array'=> '3.26',
              'TAP::Parser::Iterator::Process'=> '3.26',
              'TAP::Parser::Iterator::Stream'=> '3.26',
              'TAP::Parser::IteratorFactory'=> '3.26',
              'TAP::Parser::Multiplexer'=> '3.26',
              'TAP::Parser::Result'   => '3.26',
              'TAP::Parser::Result::Bailout'=> '3.26',
              'TAP::Parser::Result::Comment'=> '3.26',
              'TAP::Parser::Result::Plan'=> '3.26',
              'TAP::Parser::Result::Pragma'=> '3.26',
              'TAP::Parser::Result::Test'=> '3.26',
              'TAP::Parser::Result::Unknown'=> '3.26',
              'TAP::Parser::Result::Version'=> '3.26',
              'TAP::Parser::Result::YAML'=> '3.26',
              'TAP::Parser::ResultFactory'=> '3.26',
              'TAP::Parser::Scheduler'=> '3.26',
              'TAP::Parser::Scheduler::Job'=> '3.26',
              'TAP::Parser::Scheduler::Spinner'=> '3.26',
              'TAP::Parser::Source'   => '3.26',
              'TAP::Parser::SourceHandler'=> '3.26',
              'TAP::Parser::SourceHandler::Executable'=> '3.26',
              'TAP::Parser::SourceHandler::File'=> '3.26',
              'TAP::Parser::SourceHandler::Handle'=> '3.26',
              'TAP::Parser::SourceHandler::Perl'=> '3.26',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.26',
              'TAP::Parser::Utils'    => '3.26',
              'TAP::Parser::YAMLish::Reader'=> '3.26',
              'TAP::Parser::YAMLish::Writer'=> '3.26',
              'Term::UI'              => '0.34',
              'Test::Harness'         => '3.26',
              'Text::Soundex'         => '3.04',
              'Thread::Queue'         => '3.02',
              'Unicode::UCD'          => '0.50',
              'Win32'                 => '0.46',
              'Win32API::File'        => '0.1201',
              '_charnames'            => '1.36',
              'arybase'               => '0.06',
              'bigint'                => '0.32',
              'bignum'                => '0.32',
              'charnames'             => '1.36',
              'filetest'              => '1.03',
              'locale'                => '1.02',
              'overload'              => '1.21',
              'warnings'              => '1.17',
          },
          removed => {
          }
      },
      5.017010 => {
          delta_from => 5.017009,
          changed => {
              'Benchmark'             => '1.15',
              'Config'                => '5.017009',
              'Data::Dumper'          => '2.145',
              'Digest::SHA'           => '5.84',
              'Encode'                => '2.49',
              'ExtUtils::Command::MM' => '6.65_01',
              'ExtUtils::Liblist'     => '6.65_01',
              'ExtUtils::Liblist::Kid'=> '6.65_01',
              'ExtUtils::MM'          => '6.65_01',
              'ExtUtils::MM_AIX'      => '6.65_01',
              'ExtUtils::MM_Any'      => '6.65_01',
              'ExtUtils::MM_BeOS'     => '6.65_01',
              'ExtUtils::MM_Cygwin'   => '6.65_01',
              'ExtUtils::MM_DOS'      => '6.65_01',
              'ExtUtils::MM_Darwin'   => '6.65_01',
              'ExtUtils::MM_MacOS'    => '6.65_01',
              'ExtUtils::MM_NW5'      => '6.65_01',
              'ExtUtils::MM_OS2'      => '6.65_01',
              'ExtUtils::MM_QNX'      => '6.65_01',
              'ExtUtils::MM_UWIN'     => '6.65_01',
              'ExtUtils::MM_Unix'     => '6.65_01',
              'ExtUtils::MM_VMS'      => '6.65_01',
              'ExtUtils::MM_VOS'      => '6.65_01',
              'ExtUtils::MM_Win32'    => '6.65_01',
              'ExtUtils::MM_Win95'    => '6.65_01',
              'ExtUtils::MY'          => '6.65_01',
              'ExtUtils::MakeMaker'   => '6.65_01',
              'ExtUtils::MakeMaker::Config'=> '6.65_01',
              'ExtUtils::Mkbootstrap' => '6.65_01',
              'ExtUtils::Mksymlists'  => '6.65_01',
              'ExtUtils::testlib'     => '6.65_01',
              'File::Copy'            => '2.26',
              'File::Temp'            => '0.23',
              'Getopt::Long'          => '2.39',
              'Hash::Util'            => '0.15',
              'I18N::Langinfo'        => '0.10',
              'IPC::Cmd'              => '0.80',
              'JSON::PP'              => '2.27202',
              'Locale::Codes'         => '3.25',
              'Locale::Codes::Constants'=> '3.25',
              'Locale::Codes::Country'=> '3.25',
              'Locale::Codes::Country_Codes'=> '3.25',
              'Locale::Codes::Country_Retired'=> '3.25',
              'Locale::Codes::Currency'=> '3.25',
              'Locale::Codes::Currency_Codes'=> '3.25',
              'Locale::Codes::Currency_Retired'=> '3.25',
              'Locale::Codes::LangExt'=> '3.25',
              'Locale::Codes::LangExt_Codes'=> '3.25',
              'Locale::Codes::LangExt_Retired'=> '3.25',
              'Locale::Codes::LangFam'=> '3.25',
              'Locale::Codes::LangFam_Codes'=> '3.25',
              'Locale::Codes::LangFam_Retired'=> '3.25',
              'Locale::Codes::LangVar'=> '3.25',
              'Locale::Codes::LangVar_Codes'=> '3.25',
              'Locale::Codes::LangVar_Retired'=> '3.25',
              'Locale::Codes::Language'=> '3.25',
              'Locale::Codes::Language_Codes'=> '3.25',
              'Locale::Codes::Language_Retired'=> '3.25',
              'Locale::Codes::Script' => '3.25',
              'Locale::Codes::Script_Codes'=> '3.25',
              'Locale::Codes::Script_Retired'=> '3.25',
              'Locale::Country'       => '3.25',
              'Locale::Currency'      => '3.25',
              'Locale::Language'      => '3.25',
              'Locale::Script'        => '3.25',
              'Math::BigFloat'        => '1.998',
              'Math::BigFloat::Trace' => '0.32',
              'Math::BigInt'          => '1.9991',
              'Math::BigInt::CalcEmu' => '1.998',
              'Math::BigInt::Trace'   => '0.32',
              'Math::BigRat'          => '0.2604',
              'Module::CoreList'      => '2.84',
              'Module::CoreList::TieHashDelta'=> '2.84',
              'Module::Pluggable'     => '4.7',
              'Net::Ping'             => '2.41',
              'Perl::OSType'          => '1.003',
              'Pod::Simple'           => '3.26',
              'Pod::Simple::BlackBox' => '3.26',
              'Pod::Simple::Checker'  => '3.26',
              'Pod::Simple::Debug'    => '3.26',
              'Pod::Simple::DumpAsText'=> '3.26',
              'Pod::Simple::DumpAsXML'=> '3.26',
              'Pod::Simple::HTML'     => '3.26',
              'Pod::Simple::HTMLBatch'=> '3.26',
              'Pod::Simple::LinkSection'=> '3.26',
              'Pod::Simple::Methody'  => '3.26',
              'Pod::Simple::Progress' => '3.26',
              'Pod::Simple::PullParser'=> '3.26',
              'Pod::Simple::PullParserEndToken'=> '3.26',
              'Pod::Simple::PullParserStartToken'=> '3.26',
              'Pod::Simple::PullParserTextToken'=> '3.26',
              'Pod::Simple::PullParserToken'=> '3.26',
              'Pod::Simple::RTF'      => '3.26',
              'Pod::Simple::Search'   => '3.26',
              'Pod::Simple::SimpleTree'=> '3.26',
              'Pod::Simple::Text'     => '3.26',
              'Pod::Simple::TextContent'=> '3.26',
              'Pod::Simple::TiedOutFH'=> '3.26',
              'Pod::Simple::Transcode'=> '3.26',
              'Pod::Simple::TranscodeDumb'=> '3.26',
              'Pod::Simple::TranscodeSmart'=> '3.26',
              'Pod::Simple::XHTML'    => '3.26',
              'Pod::Simple::XMLOutStream'=> '3.26',
              'Safe'                  => '2.35',
              'Term::ReadLine'        => '1.12',
              'Text::ParseWords'      => '3.28',
              'Tie::File'             => '0.99',
              'Unicode::UCD'          => '0.51',
              'Win32'                 => '0.47',
              'bigint'                => '0.33',
              'bignum'                => '0.33',
              'bigrat'                => '0.33',
              'constant'              => '1.27',
              'perlfaq'               => '5.0150042',
              'version'               => '0.9902',
          },
          removed => {
          }
      },
      5.017011 => {
          delta_from => 5.017010,
          changed => {
              'App::Cpan'             => '1.61',
              'B::Deparse'            => '1.20',
              'Config'                => '5.017009',
              'Exporter'              => '5.68',
              'Exporter::Heavy'       => '5.68',
              'ExtUtils::CBuilder'    => '0.280210',
              'ExtUtils::Command::MM' => '6.66',
              'ExtUtils::Liblist'     => '6.66',
              'ExtUtils::Liblist::Kid'=> '6.66',
              'ExtUtils::MM'          => '6.66',
              'ExtUtils::MM_AIX'      => '6.66',
              'ExtUtils::MM_Any'      => '6.66',
              'ExtUtils::MM_BeOS'     => '6.66',
              'ExtUtils::MM_Cygwin'   => '6.66',
              'ExtUtils::MM_DOS'      => '6.66',
              'ExtUtils::MM_Darwin'   => '6.66',
              'ExtUtils::MM_MacOS'    => '6.66',
              'ExtUtils::MM_NW5'      => '6.66',
              'ExtUtils::MM_OS2'      => '6.66',
              'ExtUtils::MM_QNX'      => '6.66',
              'ExtUtils::MM_UWIN'     => '6.66',
              'ExtUtils::MM_Unix'     => '6.66',
              'ExtUtils::MM_VMS'      => '6.66',
              'ExtUtils::MM_VOS'      => '6.66',
              'ExtUtils::MM_Win32'    => '6.66',
              'ExtUtils::MM_Win95'    => '6.66',
              'ExtUtils::MY'          => '6.66',
              'ExtUtils::MakeMaker'   => '6.66',
              'ExtUtils::MakeMaker::Config'=> '6.66',
              'ExtUtils::Mkbootstrap' => '6.66',
              'ExtUtils::Mksymlists'  => '6.66',
              'ExtUtils::testlib'     => '6.66',
              'File::Glob'            => '1.20',
              'IO'                    => '1.28',
              'Module::CoreList'      => '2.87',
              'Module::CoreList::TieHashDelta'=> '2.87',
              'Storable'              => '2.41',
              'bigint'                => '0.34',
              'mro'                   => '1.11',
              'overload'              => '1.22',
              'warnings'              => '1.18',
          },
          removed => {
          }
      },
      5.018000 => {
          delta_from => 5.017011,
          changed => {
              'Carp'                  => '1.29',
              'Carp::Heavy'           => '1.29',
              'Config'                => '5.018000',
              'Hash::Util'            => '0.16',
              'IO::Handle'            => '1.34',
              'IO::Socket'            => '1.36',
              'Module::CoreList'      => '2.89',
              'Module::CoreList::TieHashDelta'=> '2.89',
              'Pod::Simple'           => '3.28',
              'Pod::Simple::BlackBox' => '3.28',
              'Pod::Simple::Checker'  => '3.28',
              'Pod::Simple::Debug'    => '3.28',
              'Pod::Simple::DumpAsText'=> '3.28',
              'Pod::Simple::DumpAsXML'=> '3.28',
              'Pod::Simple::HTML'     => '3.28',
              'Pod::Simple::HTMLBatch'=> '3.28',
              'Pod::Simple::LinkSection'=> '3.28',
              'Pod::Simple::Methody'  => '3.28',
              'Pod::Simple::Progress' => '3.28',
              'Pod::Simple::PullParser'=> '3.28',
              'Pod::Simple::PullParserEndToken'=> '3.28',
              'Pod::Simple::PullParserStartToken'=> '3.28',
              'Pod::Simple::PullParserTextToken'=> '3.28',
              'Pod::Simple::PullParserToken'=> '3.28',
              'Pod::Simple::RTF'      => '3.28',
              'Pod::Simple::Search'   => '3.28',
              'Pod::Simple::SimpleTree'=> '3.28',
              'Pod::Simple::Text'     => '3.28',
              'Pod::Simple::TextContent'=> '3.28',
              'Pod::Simple::TiedOutFH'=> '3.28',
              'Pod::Simple::Transcode'=> '3.28',
              'Pod::Simple::TranscodeDumb'=> '3.28',
              'Pod::Simple::TranscodeSmart'=> '3.28',
              'Pod::Simple::XHTML'    => '3.28',
              'Pod::Simple::XMLOutStream'=> '3.28',
          },
          removed => {
          }
      },
      5.018001 => {
          delta_from => 5.018000,
          changed => {
              'B'                     => '1.42_01',
              'Config'                => '5.018001',
              'Digest::SHA'           => '5.84_01',
              'Module::CoreList'      => '2.96',
              'Module::CoreList::TieHashDelta'=> '2.96',
              'Module::CoreList::Utils'=> '2.96',
          },
          removed => {
             'VMS::Filespec'         => 1,
          }
      },
      5.018002 => {
          delta_from => 5.018001,
          changed => {
              'B'                     => '1.42_02',
              'B::Concise'            => '0.95_01',
              'Config'                => '5.018002',
              'File::Glob'            => '1.20_01',
              'Module::CoreList'      => '3.03',
              'Module::CoreList::TieHashDelta'=> '3.03',
              'Module::CoreList::Utils'=> '3.03',
          },
      },
      5.018003 => {
          delta_from => 5.018002,
          changed => {
              'Config'                => '5.018003',
              'Digest::SHA'           => '5.84_02',
              'Module::CoreList'      => '3.12',
              'Module::CoreList::TieHashDelta'=> '3.12',
              'Module::CoreList::Utils'=> '3.12',
          },
      },
      5.018004 => {
          delta_from => 5.018003,
          changed => {
              'Config'                => '5.018004',
              'Module::CoreList'      => '3.13',
              'Module::CoreList::TieHashDelta'=> '3.13',
              'Module::CoreList::Utils'=> '3.13',
          },
      },
      5.019000 => {
          delta_from => 5.018000,
          changed => {
              'Config'                => '5.019000',
              'Getopt::Std'           => '1.08',
              'Module::CoreList'      => '2.91',
              'Module::CoreList::TieHashDelta'=> '2.91',
              'Storable'              => '2.42',
              'feature'               => '1.33',
              'utf8'                  => '1.11',
          },
          removed => {
             'Archive::Extract'      => 1,
             'B::Lint'               => 1,
             'B::Lint::Debug'        => 1,
             'CPANPLUS'              => 1,
             'CPANPLUS::Backend'     => 1,
             'CPANPLUS::Backend::RV' => 1,
             'CPANPLUS::Config'      => 1,
             'CPANPLUS::Config::HomeEnv'=> 1,
             'CPANPLUS::Configure'   => 1,
             'CPANPLUS::Configure::Setup'=> 1,
             'CPANPLUS::Dist'        => 1,
             'CPANPLUS::Dist::Autobundle'=> 1,
             'CPANPLUS::Dist::Base'  => 1,
             'CPANPLUS::Dist::Build' => 1,
             'CPANPLUS::Dist::Build::Constants'=> 1,
             'CPANPLUS::Dist::MM'    => 1,
             'CPANPLUS::Dist::Sample'=> 1,
             'CPANPLUS::Error'       => 1,
             'CPANPLUS::Internals'   => 1,
             'CPANPLUS::Internals::Constants'=> 1,
             'CPANPLUS::Internals::Constants::Report'=> 1,
             'CPANPLUS::Internals::Extract'=> 1,
             'CPANPLUS::Internals::Fetch'=> 1,
             'CPANPLUS::Internals::Report'=> 1,
             'CPANPLUS::Internals::Search'=> 1,
             'CPANPLUS::Internals::Source'=> 1,
             'CPANPLUS::Internals::Source::Memory'=> 1,
             'CPANPLUS::Internals::Source::SQLite'=> 1,
             'CPANPLUS::Internals::Source::SQLite::Tie'=> 1,
             'CPANPLUS::Internals::Utils'=> 1,
             'CPANPLUS::Internals::Utils::Autoflush'=> 1,
             'CPANPLUS::Module'      => 1,
             'CPANPLUS::Module::Author'=> 1,
             'CPANPLUS::Module::Author::Fake'=> 1,
             'CPANPLUS::Module::Checksums'=> 1,
             'CPANPLUS::Module::Fake'=> 1,
             'CPANPLUS::Module::Signature'=> 1,
             'CPANPLUS::Selfupdate'  => 1,
             'CPANPLUS::Shell'       => 1,
             'CPANPLUS::Shell::Classic'=> 1,
             'CPANPLUS::Shell::Default'=> 1,
             'CPANPLUS::Shell::Default::Plugins::CustomSource'=> 1,
             'CPANPLUS::Shell::Default::Plugins::Remote'=> 1,
             'CPANPLUS::Shell::Default::Plugins::Source'=> 1,
             'Devel::InnerPackage'   => 1,
             'File::CheckTree'       => 1,
             'Log::Message'          => 1,
             'Log::Message::Config'  => 1,
             'Log::Message::Handlers'=> 1,
             'Log::Message::Item'    => 1,
             'Log::Message::Simple'  => 1,
             'Module::Pluggable'     => 1,
             'Module::Pluggable::Object'=> 1,
             'Object::Accessor'      => 1,
             'Pod::LaTeX'            => 1,
             'Term::UI'              => 1,
             'Term::UI::History'     => 1,
             'Text::Soundex'         => 1,
          }
      },
      5.019001 => {
          delta_from => 5.019000,
          changed => {
              'App::Prove'            => '3.28',
              'App::Prove::State'     => '3.28',
              'App::Prove::State::Result'=> '3.28',
              'App::Prove::State::Result::Test'=> '3.28',
              'Archive::Tar'          => '1.92',
              'Archive::Tar::Constant'=> '1.92',
              'Archive::Tar::File'    => '1.92',
              'Attribute::Handlers'   => '0.95',
              'B'                     => '1.43',
              'B::Concise'            => '0.96',
              'B::Deparse'            => '1.21',
              'B::Showlex'            => '1.04',
              'Benchmark'             => '1.16',
              'CPAN::Meta'            => '2.131560',
              'CPAN::Meta::Converter' => '2.131560',
              'CPAN::Meta::Feature'   => '2.131560',
              'CPAN::Meta::History'   => '2.131560',
              'CPAN::Meta::Prereqs'   => '2.131560',
              'CPAN::Meta::Spec'      => '2.131560',
              'CPAN::Meta::Validator' => '2.131560',
              'Carp'                  => '1.30',
              'Carp::Heavy'           => '1.30',
              'Compress::Raw::Bzip2'  => '2.061',
              'Compress::Raw::Zlib'   => '2.061',
              'Compress::Zlib'        => '2.061',
              'Config'                => '5.019001',
              'Config::Perl::V'       => '0.18',
              'Cwd'                   => '3.41',
              'DB'                    => '1.06',
              'DB_File'               => '1.828',
              'Data::Dumper'          => '2.146',
              'Encode'                => '2.51',
              'Encode::CN::HZ'        => '2.06',
              'Encode::GSM0338'       => '2.03',
              'Encode::Unicode::UTF7' => '2.07',
              'ExtUtils::CBuilder::Base'=> '0.280210',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280210',
              'ExtUtils::Command::MM' => '6.68',
              'ExtUtils::Install'     => '1.60',
              'ExtUtils::Liblist'     => '6.68',
              'ExtUtils::Liblist::Kid'=> '6.68',
              'ExtUtils::MM'          => '6.68',
              'ExtUtils::MM_AIX'      => '6.68',
              'ExtUtils::MM_Any'      => '6.68',
              'ExtUtils::MM_BeOS'     => '6.68',
              'ExtUtils::MM_Cygwin'   => '6.68',
              'ExtUtils::MM_DOS'      => '6.68',
              'ExtUtils::MM_Darwin'   => '6.68',
              'ExtUtils::MM_MacOS'    => '6.68',
              'ExtUtils::MM_NW5'      => '6.68',
              'ExtUtils::MM_OS2'      => '6.68',
              'ExtUtils::MM_QNX'      => '6.68',
              'ExtUtils::MM_UWIN'     => '6.68',
              'ExtUtils::MM_Unix'     => '6.68',
              'ExtUtils::MM_VMS'      => '6.68',
              'ExtUtils::MM_VOS'      => '6.68',
              'ExtUtils::MM_Win32'    => '6.68',
              'ExtUtils::MM_Win95'    => '6.68',
              'ExtUtils::MY'          => '6.68',
              'ExtUtils::MakeMaker'   => '6.68',
              'ExtUtils::MakeMaker::Config'=> '6.68',
              'ExtUtils::Mkbootstrap' => '6.68',
              'ExtUtils::Mksymlists'  => '6.68',
              'ExtUtils::ParseXS'     => '3.19',
              'ExtUtils::testlib'     => '6.68',
              'Fatal'                 => '2.19',
              'File::Copy'            => '2.27',
              'File::DosGlob'         => '1.11',
              'File::Fetch'           => '0.42',
              'File::Find'            => '1.24',
              'File::Spec'            => '3.41',
              'File::Spec::Cygwin'    => '3.41',
              'File::Spec::Epoc'      => '3.41',
              'File::Spec::Mac'       => '3.41',
              'File::Spec::OS2'       => '3.41',
              'File::Spec::Unix'      => '3.41',
              'File::Spec::VMS'       => '3.41',
              'File::Spec::Win32'     => '3.41',
              'File::Temp'            => '0.2301',
              'Filter::Simple'        => '0.90',
              'Filter::Util::Call'    => '1.49',
              'Getopt::Long'          => '2.4',
              'HTTP::Tiny'            => '0.031',
              'Hash::Util::FieldHash' => '1.11',
              'IO::Compress::Adapter::Bzip2'=> '2.061',
              'IO::Compress::Adapter::Deflate'=> '2.061',
              'IO::Compress::Adapter::Identity'=> '2.061',
              'IO::Compress::Base'    => '2.061',
              'IO::Compress::Base::Common'=> '2.061',
              'IO::Compress::Bzip2'   => '2.061',
              'IO::Compress::Deflate' => '2.061',
              'IO::Compress::Gzip'    => '2.061',
              'IO::Compress::Gzip::Constants'=> '2.061',
              'IO::Compress::RawDeflate'=> '2.061',
              'IO::Compress::Zip'     => '2.061',
              'IO::Compress::Zip::Constants'=> '2.061',
              'IO::Compress::Zlib::Constants'=> '2.061',
              'IO::Compress::Zlib::Extra'=> '2.061',
              'IO::Handle'            => '1.35',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.061',
              'IO::Uncompress::Adapter::Identity'=> '2.061',
              'IO::Uncompress::Adapter::Inflate'=> '2.061',
              'IO::Uncompress::AnyInflate'=> '2.061',
              'IO::Uncompress::AnyUncompress'=> '2.061',
              'IO::Uncompress::Base'  => '2.061',
              'IO::Uncompress::Bunzip2'=> '2.061',
              'IO::Uncompress::Gunzip'=> '2.061',
              'IO::Uncompress::Inflate'=> '2.061',
              'IO::Uncompress::RawInflate'=> '2.061',
              'IO::Uncompress::Unzip' => '2.061',
              'IPC::Open3'            => '1.14',
              'Locale::Codes'         => '3.26',
              'Locale::Codes::Constants'=> '3.26',
              'Locale::Codes::Country'=> '3.26',
              'Locale::Codes::Country_Codes'=> '3.26',
              'Locale::Codes::Country_Retired'=> '3.26',
              'Locale::Codes::Currency'=> '3.26',
              'Locale::Codes::Currency_Codes'=> '3.26',
              'Locale::Codes::Currency_Retired'=> '3.26',
              'Locale::Codes::LangExt'=> '3.26',
              'Locale::Codes::LangExt_Codes'=> '3.26',
              'Locale::Codes::LangExt_Retired'=> '3.26',
              'Locale::Codes::LangFam'=> '3.26',
              'Locale::Codes::LangFam_Codes'=> '3.26',
              'Locale::Codes::LangFam_Retired'=> '3.26',
              'Locale::Codes::LangVar'=> '3.26',
              'Locale::Codes::LangVar_Codes'=> '3.26',
              'Locale::Codes::LangVar_Retired'=> '3.26',
              'Locale::Codes::Language'=> '3.26',
              'Locale::Codes::Language_Codes'=> '3.26',
              'Locale::Codes::Language_Retired'=> '3.26',
              'Locale::Codes::Script' => '3.26',
              'Locale::Codes::Script_Codes'=> '3.26',
              'Locale::Codes::Script_Retired'=> '3.26',
              'Locale::Country'       => '3.26',
              'Locale::Currency'      => '3.26',
              'Locale::Language'      => '3.26',
              'Locale::Maketext'      => '1.24',
              'Locale::Script'        => '3.26',
              'Math::BigFloat'        => '1.999',
              'Math::BigInt'          => '1.9992',
              'Math::BigInt::Calc'    => '1.998',
              'Math::BigInt::CalcEmu' => '1.9991',
              'Math::BigRat'          => '0.2606',
              'Module::Build'         => '0.4005',
              'Module::Build::Base'   => '0.4005',
              'Module::Build::Compat' => '0.4005',
              'Module::Build::Config' => '0.4005',
              'Module::Build::Cookbook'=> '0.4005',
              'Module::Build::Dumper' => '0.4005',
              'Module::Build::ModuleInfo'=> '0.4005',
              'Module::Build::Notes'  => '0.4005',
              'Module::Build::PPMMaker'=> '0.4005',
              'Module::Build::Platform::Amiga'=> '0.4005',
              'Module::Build::Platform::Default'=> '0.4005',
              'Module::Build::Platform::EBCDIC'=> '0.4005',
              'Module::Build::Platform::MPEiX'=> '0.4005',
              'Module::Build::Platform::MacOS'=> '0.4005',
              'Module::Build::Platform::RiscOS'=> '0.4005',
              'Module::Build::Platform::Unix'=> '0.4005',
              'Module::Build::Platform::VMS'=> '0.4005',
              'Module::Build::Platform::VOS'=> '0.4005',
              'Module::Build::Platform::Windows'=> '0.4005',
              'Module::Build::Platform::aix'=> '0.4005',
              'Module::Build::Platform::cygwin'=> '0.4005',
              'Module::Build::Platform::darwin'=> '0.4005',
              'Module::Build::Platform::os2'=> '0.4005',
              'Module::Build::PodParser'=> '0.4005',
              'Module::CoreList'      => '2.92',
              'Module::CoreList::TieHashDelta'=> '2.92',
              'Module::CoreList::Utils'=> '2.92',
              'Module::Metadata'      => '1.000014',
              'Net::Ping'             => '2.42',
              'OS2::Process'          => '1.09',
              'POSIX'                 => '1.33',
              'Pod::Find'             => '1.61',
              'Pod::Html'             => '1.19',
              'Pod::InputObjects'     => '1.61',
              'Pod::ParseUtils'       => '1.61',
              'Pod::Parser'           => '1.61',
              'Pod::Perldoc'          => '3.20',
              'Pod::Perldoc::BaseTo'  => '3.20',
              'Pod::Perldoc::GetOptsOO'=> '3.20',
              'Pod::Perldoc::ToANSI'  => '3.20',
              'Pod::Perldoc::ToChecker'=> '3.20',
              'Pod::Perldoc::ToMan'   => '3.20',
              'Pod::Perldoc::ToNroff' => '3.20',
              'Pod::Perldoc::ToPod'   => '3.20',
              'Pod::Perldoc::ToRtf'   => '3.20',
              'Pod::Perldoc::ToTerm'  => '3.20',
              'Pod::Perldoc::ToText'  => '3.20',
              'Pod::Perldoc::ToTk'    => '3.20',
              'Pod::Perldoc::ToXml'   => '3.20',
              'Pod::Select'           => '1.61',
              'Pod::Usage'            => '1.63',
              'Safe'                  => '2.36',
              'Storable'              => '2.43',
              'Sys::Hostname'         => '1.18',
              'Sys::Syslog'           => '0.33',
              'TAP::Base'             => '3.28',
              'TAP::Formatter::Base'  => '3.28',
              'TAP::Formatter::Color' => '3.28',
              'TAP::Formatter::Console'=> '3.28',
              'TAP::Formatter::Console::ParallelSession'=> '3.28',
              'TAP::Formatter::Console::Session'=> '3.28',
              'TAP::Formatter::File'  => '3.28',
              'TAP::Formatter::File::Session'=> '3.28',
              'TAP::Formatter::Session'=> '3.28',
              'TAP::Harness'          => '3.28',
              'TAP::Object'           => '3.28',
              'TAP::Parser'           => '3.28',
              'TAP::Parser::Aggregator'=> '3.28',
              'TAP::Parser::Grammar'  => '3.28',
              'TAP::Parser::Iterator' => '3.28',
              'TAP::Parser::Iterator::Array'=> '3.28',
              'TAP::Parser::Iterator::Process'=> '3.28',
              'TAP::Parser::Iterator::Stream'=> '3.28',
              'TAP::Parser::IteratorFactory'=> '3.28',
              'TAP::Parser::Multiplexer'=> '3.28',
              'TAP::Parser::Result'   => '3.28',
              'TAP::Parser::Result::Bailout'=> '3.28',
              'TAP::Parser::Result::Comment'=> '3.28',
              'TAP::Parser::Result::Plan'=> '3.28',
              'TAP::Parser::Result::Pragma'=> '3.28',
              'TAP::Parser::Result::Test'=> '3.28',
              'TAP::Parser::Result::Unknown'=> '3.28',
              'TAP::Parser::Result::Version'=> '3.28',
              'TAP::Parser::Result::YAML'=> '3.28',
              'TAP::Parser::ResultFactory'=> '3.28',
              'TAP::Parser::Scheduler'=> '3.28',
              'TAP::Parser::Scheduler::Job'=> '3.28',
              'TAP::Parser::Scheduler::Spinner'=> '3.28',
              'TAP::Parser::Source'   => '3.28',
              'TAP::Parser::SourceHandler'=> '3.28',
              'TAP::Parser::SourceHandler::Executable'=> '3.28',
              'TAP::Parser::SourceHandler::File'=> '3.28',
              'TAP::Parser::SourceHandler::Handle'=> '3.28',
              'TAP::Parser::SourceHandler::Perl'=> '3.28',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.28',
              'TAP::Parser::Utils'    => '3.28',
              'TAP::Parser::YAMLish::Reader'=> '3.28',
              'TAP::Parser::YAMLish::Writer'=> '3.28',
              'Term::ReadLine'        => '1.13',
              'Test::Harness'         => '3.28',
              'Text::Tabs'            => '2013.0523',
              'Text::Wrap'            => '2013.0523',
              'Thread'                => '3.04',
              'Tie::File'             => '1.00',
              'Time::Piece'           => '1.2002',
              'Unicode::Collate'      => '0.98',
              'Unicode::UCD'          => '0.53',
              'XS::APItest'           => '0.53',
              '_charnames'            => '1.37',
              'autodie'               => '2.19',
              'autodie::exception'    => '2.19',
              'autodie::exception::system'=> '2.19',
              'autodie::hints'        => '2.19',
              'autodie::skip'         => '2.19',
              'bigint'                => '0.35',
              'charnames'             => '1.38',
              'encoding'              => '2.12',
              'inc::latest'           => '0.4005',
              'mro'                   => '1.12',
              'perlfaq'               => '5.0150043',
              're'                    => '0.25',
              'threads'               => '1.87',
              'threads::shared'       => '1.44',
              'utf8'                  => '1.12',
          },
          removed => {
          }
      },
      5.019002 => {
          delta_from => 5.019001,
          changed => {
              'B'                     => '1.44',
              'B::Concise'            => '0.98',
              'B::Deparse'            => '1.22',
              'Benchmark'             => '1.17',
              'Class::Struct'         => '0.65',
              'Config'                => '5.019002',
              'DB'                    => '1.07',
              'DBM_Filter'            => '0.06',
              'DBM_Filter::compress'  => '0.03',
              'DBM_Filter::encode'    => '0.03',
              'DBM_Filter::int32'     => '0.03',
              'DBM_Filter::null'      => '0.03',
              'DBM_Filter::utf8'      => '0.03',
              'DB_File'               => '1.829',
              'Data::Dumper'          => '2.147',
              'Devel::Peek'           => '1.12',
              'Digest::MD5'           => '2.53',
              'Digest::SHA'           => '5.85',
              'English'               => '1.07',
              'Errno'                 => '1.19',
              'ExtUtils::Embed'       => '1.31',
              'ExtUtils::Miniperl'    => '1',
              'ExtUtils::ParseXS'     => '3.21',
              'ExtUtils::ParseXS::Constants'=> '3.21',
              'ExtUtils::ParseXS::CountLines'=> '3.21',
              'ExtUtils::ParseXS::Eval'=> '3.19',
              'ExtUtils::ParseXS::Utilities'=> '3.21',
              'ExtUtils::Typemaps'    => '3.21',
              'ExtUtils::Typemaps::Cmd'=> '3.21',
              'ExtUtils::Typemaps::InputMap'=> '3.21',
              'ExtUtils::Typemaps::OutputMap'=> '3.21',
              'ExtUtils::Typemaps::Type'=> '3.21',
              'ExtUtils::XSSymSet'    => '1.3',
              'Fatal'                 => '2.20',
              'File::Basename'        => '2.85',
              'File::Spec::VMS'       => '3.43',
              'File::Spec::Win32'     => '3.42',
              'Getopt::Long'          => '2.41',
              'Getopt::Std'           => '1.09',
              'HTTP::Tiny'            => '0.034',
              'Hash::Util::FieldHash' => '1.12',
              'I18N::Langinfo'        => '0.11',
              'IO::Socket::INET'      => '1.34',
              'IO::Socket::UNIX'      => '1.25',
              'IPC::Cmd'              => '0.82',
              'MIME::Base64'          => '3.14',
              'Module::CoreList'      => '2.94',
              'Module::CoreList::TieHashDelta'=> '2.94',
              'Module::CoreList::Utils'=> '2.94',
              'POSIX'                 => '1.34',
              'Params::Check'         => '0.38',
              'Parse::CPAN::Meta'     => '1.4405',
              'Pod::Functions'        => '1.07',
              'Pod::Html'             => '1.2',
              'Safe'                  => '2.37',
              'Socket'                => '2.010',
              'Storable'              => '2.45',
              'Text::ParseWords'      => '3.29',
              'Tie::Array'            => '1.06',
              'Tie::Hash'             => '1.05',
              'Tie::Scalar'           => '1.03',
              'Time::Piece'           => '1.21',
              'Time::Seconds'         => '1.21',
              'XS::APItest'           => '0.54',
              'autodie'               => '2.20',
              'autodie::exception'    => '2.20',
              'autodie::exception::system'=> '2.20',
              'autodie::hints'        => '2.20',
              'autodie::skip'         => '2.20',
              'base'                  => '2.19',
              'deprecate'             => '0.03',
              'if'                    => '0.0603',
              'integer'               => '1.01',
              'strict'                => '1.08',
              'subs'                  => '1.02',
              'vmsish'                => '1.04',
          },
          removed => {
          }
      },
      5.019003 => {
          delta_from => 5.019002,
          changed => {
              'B'                     => '1.45',
              'CPAN::Meta'            => '2.132140',
              'CPAN::Meta::Converter' => '2.132140',
              'CPAN::Meta::Feature'   => '2.132140',
              'CPAN::Meta::History'   => '2.132140',
              'CPAN::Meta::Prereqs'   => '2.132140',
              'CPAN::Meta::Spec'      => '2.132140',
              'CPAN::Meta::Validator' => '2.132140',
              'Carp'                  => '1.31',
              'Carp::Heavy'           => '1.31',
              'Compress::Raw::Bzip2'  => '2.062',
              'Compress::Raw::Zlib'   => '2.062',
              'Compress::Zlib'        => '2.062',
              'Config'                => '5.019003',
              'Config::Perl::V'       => '0.19',
              'Cwd'                   => '3.44',
              'Data::Dumper'          => '2.148',
              'Devel::PPPort'         => '3.21',
              'Devel::Peek'           => '1.13',
              'DynaLoader'            => '1.19',
              'Encode'                => '2.52',
              'Encode::Alias'         => '2.17',
              'Encode::Encoding'      => '2.06',
              'Encode::GSM0338'       => '2.04',
              'Encode::MIME::Header'  => '2.14',
              'Encode::Unicode'       => '2.08',
              'English'               => '1.08',
              'Exporter'              => '5.69',
              'Exporter::Heavy'       => '5.69',
              'ExtUtils::Command::MM' => '6.72',
              'ExtUtils::Liblist'     => '6.72',
              'ExtUtils::Liblist::Kid'=> '6.72',
              'ExtUtils::MM'          => '6.72',
              'ExtUtils::MM_AIX'      => '6.72',
              'ExtUtils::MM_Any'      => '6.72',
              'ExtUtils::MM_BeOS'     => '6.72',
              'ExtUtils::MM_Cygwin'   => '6.72',
              'ExtUtils::MM_DOS'      => '6.72',
              'ExtUtils::MM_Darwin'   => '6.72',
              'ExtUtils::MM_MacOS'    => '6.72',
              'ExtUtils::MM_NW5'      => '6.72',
              'ExtUtils::MM_OS2'      => '6.72',
              'ExtUtils::MM_QNX'      => '6.72',
              'ExtUtils::MM_UWIN'     => '6.72',
              'ExtUtils::MM_Unix'     => '6.72',
              'ExtUtils::MM_VMS'      => '6.72',
              'ExtUtils::MM_VOS'      => '6.72',
              'ExtUtils::MM_Win32'    => '6.72',
              'ExtUtils::MM_Win95'    => '6.72',
              'ExtUtils::MY'          => '6.72',
              'ExtUtils::MakeMaker'   => '6.72',
              'ExtUtils::MakeMaker::Config'=> '6.72',
              'ExtUtils::Mkbootstrap' => '6.72',
              'ExtUtils::Mksymlists'  => '6.72',
              'ExtUtils::ParseXS::Eval'=> '3.21',
              'ExtUtils::testlib'     => '6.72',
              'File::Spec'            => '3.44',
              'File::Spec::Cygwin'    => '3.44',
              'File::Spec::Epoc'      => '3.44',
              'File::Spec::Functions' => '3.44',
              'File::Spec::Mac'       => '3.44',
              'File::Spec::OS2'       => '3.44',
              'File::Spec::Unix'      => '3.44',
              'File::Spec::VMS'       => '3.44',
              'File::Spec::Win32'     => '3.44',
              'Getopt::Std'           => '1.10',
              'IO::Compress::Adapter::Bzip2'=> '2.062',
              'IO::Compress::Adapter::Deflate'=> '2.062',
              'IO::Compress::Adapter::Identity'=> '2.062',
              'IO::Compress::Base'    => '2.062',
              'IO::Compress::Base::Common'=> '2.062',
              'IO::Compress::Bzip2'   => '2.062',
              'IO::Compress::Deflate' => '2.062',
              'IO::Compress::Gzip'    => '2.062',
              'IO::Compress::Gzip::Constants'=> '2.062',
              'IO::Compress::RawDeflate'=> '2.062',
              'IO::Compress::Zip'     => '2.062',
              'IO::Compress::Zip::Constants'=> '2.062',
              'IO::Compress::Zlib::Constants'=> '2.062',
              'IO::Compress::Zlib::Extra'=> '2.062',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.062',
              'IO::Uncompress::Adapter::Identity'=> '2.062',
              'IO::Uncompress::Adapter::Inflate'=> '2.062',
              'IO::Uncompress::AnyInflate'=> '2.062',
              'IO::Uncompress::AnyUncompress'=> '2.062',
              'IO::Uncompress::Base'  => '2.062',
              'IO::Uncompress::Bunzip2'=> '2.062',
              'IO::Uncompress::Gunzip'=> '2.062',
              'IO::Uncompress::Inflate'=> '2.062',
              'IO::Uncompress::RawInflate'=> '2.062',
              'IO::Uncompress::Unzip' => '2.062',
              'IPC::Cmd'              => '0.84',
              'IPC::Msg'              => '2.04',
              'IPC::Open3'            => '1.15',
              'IPC::Semaphore'        => '2.04',
              'IPC::SharedMem'        => '2.04',
              'IPC::SysV'             => '2.04',
              'List::Util'            => '1.31',
              'List::Util::XS'        => '1.31',
              'Math::BigFloat::Trace' => '0.36',
              'Math::BigInt::Trace'   => '0.36',
              'Module::Build'         => '0.4007',
              'Module::Build::Base'   => '0.4007',
              'Module::Build::Compat' => '0.4007',
              'Module::Build::Config' => '0.4007',
              'Module::Build::Cookbook'=> '0.4007',
              'Module::Build::Dumper' => '0.4007',
              'Module::Build::ModuleInfo'=> '0.4007',
              'Module::Build::Notes'  => '0.4007',
              'Module::Build::PPMMaker'=> '0.4007',
              'Module::Build::Platform::Default'=> '0.4007',
              'Module::Build::Platform::MacOS'=> '0.4007',
              'Module::Build::Platform::Unix'=> '0.4007',
              'Module::Build::Platform::VMS'=> '0.4007',
              'Module::Build::Platform::VOS'=> '0.4007',
              'Module::Build::Platform::Windows'=> '0.4007',
              'Module::Build::Platform::aix'=> '0.4007',
              'Module::Build::Platform::cygwin'=> '0.4007',
              'Module::Build::Platform::darwin'=> '0.4007',
              'Module::Build::Platform::os2'=> '0.4007',
              'Module::Build::PodParser'=> '0.4007',
              'Module::CoreList'      => '2.97',
              'Module::CoreList::TieHashDelta'=> '2.97',
              'Module::CoreList::Utils'=> '2.97',
              'Net::Cmd'              => '2.30',
              'Net::Config'           => '1.12',
              'Net::Domain'           => '2.22',
              'Net::FTP'              => '2.78',
              'Net::FTP::dataconn'    => '0.12',
              'Net::NNTP'             => '2.25',
              'Net::Netrc'            => '2.14',
              'Net::POP3'             => '2.30',
              'Net::SMTP'             => '2.32',
              'PerlIO'                => '1.08',
              'Pod::Functions'        => '1.08',
              'Scalar::Util'          => '1.31',
              'Socket'                => '2.011',
              'Storable'              => '2.46',
              'Time::HiRes'           => '1.9726',
              'Time::Piece'           => '1.22',
              'Time::Seconds'         => '1.22',
              'XS::APItest'           => '0.55',
              'bigint'                => '0.36',
              'bignum'                => '0.36',
              'bigrat'                => '0.36',
              'constant'              => '1.28',
              'diagnostics'           => '1.32',
              'inc::latest'           => '0.4007',
              'mro'                   => '1.13',
              'parent'                => '0.226',
              'utf8'                  => '1.13',
              'version'               => '0.9903',
          },
          removed => {
             'Module::Build::Platform::Amiga'=> 1,
             'Module::Build::Platform::EBCDIC'=> 1,
             'Module::Build::Platform::MPEiX'=> 1,
             'Module::Build::Platform::RiscOS'=> 1,
          }
      },
      5.019004 => {
          delta_from => 5.019003,
          changed => {
              'B'                     => '1.46',
              'B::Concise'            => '0.99',
              'B::Deparse'            => '1.23',
              'CPAN'                  => '2.03',
              'CPAN::Meta'            => '2.132620',
              'CPAN::Meta::Converter' => '2.132620',
              'CPAN::Meta::Feature'   => '2.132620',
              'CPAN::Meta::History'   => '2.132620',
              'CPAN::Meta::Prereqs'   => '2.132620',
              'CPAN::Meta::Requirements'=> '2.123',
              'CPAN::Meta::Spec'      => '2.132620',
              'CPAN::Meta::Validator' => '2.132620',
              'Carp'                  => '1.32',
              'Carp::Heavy'           => '1.32',
              'Config'                => '5.019004',
              'Data::Dumper'          => '2.149',
              'Devel::Peek'           => '1.14',
              'DynaLoader'            => '1.20',
              'Encode'                => '2.55',
              'Encode::Alias'         => '2.18',
              'Encode::CN::HZ'        => '2.07',
              'Encode::Encoder'       => '2.03',
              'Encode::Encoding'      => '2.07',
              'Encode::GSM0338'       => '2.05',
              'Encode::Guess'         => '2.06',
              'Encode::JP::JIS7'      => '2.05',
              'Encode::KR::2022_KR'   => '2.03',
              'Encode::MIME::Header'  => '2.15',
              'Encode::MIME::Header::ISO_2022_JP'=> '1.04',
              'Encode::Unicode'       => '2.09',
              'Encode::Unicode::UTF7' => '2.08',
              'Errno'                 => '1.20',
              'Exporter'              => '5.70',
              'Exporter::Heavy'       => '5.70',
              'ExtUtils::CBuilder'    => '0.280212',
              'ExtUtils::CBuilder::Base'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280212',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280212',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280212',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280212',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280212',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280212',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280212',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280212',
              'ExtUtils::Command'     => '1.18',
              'ExtUtils::Command::MM' => '6.76',
              'ExtUtils::Liblist'     => '6.76',
              'ExtUtils::Liblist::Kid'=> '6.76',
              'ExtUtils::MM'          => '6.76',
              'ExtUtils::MM_AIX'      => '6.76',
              'ExtUtils::MM_Any'      => '6.76',
              'ExtUtils::MM_BeOS'     => '6.76',
              'ExtUtils::MM_Cygwin'   => '6.76',
              'ExtUtils::MM_DOS'      => '6.76',
              'ExtUtils::MM_Darwin'   => '6.76',
              'ExtUtils::MM_MacOS'    => '6.76',
              'ExtUtils::MM_NW5'      => '6.76',
              'ExtUtils::MM_OS2'      => '6.76',
              'ExtUtils::MM_QNX'      => '6.76',
              'ExtUtils::MM_UWIN'     => '6.76',
              'ExtUtils::MM_Unix'     => '6.76',
              'ExtUtils::MM_VMS'      => '6.76',
              'ExtUtils::MM_VOS'      => '6.76',
              'ExtUtils::MM_Win32'    => '6.76',
              'ExtUtils::MM_Win95'    => '6.76',
              'ExtUtils::MY'          => '6.76',
              'ExtUtils::MakeMaker'   => '6.76',
              'ExtUtils::MakeMaker::Config'=> '6.76',
              'ExtUtils::Mkbootstrap' => '6.76',
              'ExtUtils::Mksymlists'  => '6.76',
              'ExtUtils::ParseXS'     => '3.23',
              'ExtUtils::ParseXS::Constants'=> '3.23',
              'ExtUtils::ParseXS::CountLines'=> '3.23',
              'ExtUtils::ParseXS::Eval'=> '3.23',
              'ExtUtils::ParseXS::Utilities'=> '3.23',
              'ExtUtils::Typemaps'    => '3.23',
              'ExtUtils::Typemaps::Cmd'=> '3.23',
              'ExtUtils::Typemaps::InputMap'=> '3.23',
              'ExtUtils::Typemaps::OutputMap'=> '3.23',
              'ExtUtils::Typemaps::Type'=> '3.23',
              'ExtUtils::testlib'     => '6.76',
              'Fatal'                 => '2.21',
              'File::Copy'            => '2.28',
              'File::Find'            => '1.25',
              'File::Glob'            => '1.21',
              'FileCache'             => '1.09',
              'HTTP::Tiny'            => '0.035',
              'Hash::Util::FieldHash' => '1.13',
              'I18N::LangTags'        => '0.40',
              'IO'                    => '1.29',
              'IO::Socket'            => '1.37',
              'IPC::Open3'            => '1.16',
              'JSON::PP'              => '2.27202_01',
              'List::Util'            => '1.32',
              'List::Util::XS'        => '1.32',
              'Locale::Codes'         => '3.27',
              'Locale::Codes::Constants'=> '3.27',
              'Locale::Codes::Country'=> '3.27',
              'Locale::Codes::Country_Codes'=> '3.27',
              'Locale::Codes::Country_Retired'=> '3.27',
              'Locale::Codes::Currency'=> '3.27',
              'Locale::Codes::Currency_Codes'=> '3.27',
              'Locale::Codes::Currency_Retired'=> '3.27',
              'Locale::Codes::LangExt'=> '3.27',
              'Locale::Codes::LangExt_Codes'=> '3.27',
              'Locale::Codes::LangExt_Retired'=> '3.27',
              'Locale::Codes::LangFam'=> '3.27',
              'Locale::Codes::LangFam_Codes'=> '3.27',
              'Locale::Codes::LangFam_Retired'=> '3.27',
              'Locale::Codes::LangVar'=> '3.27',
              'Locale::Codes::LangVar_Codes'=> '3.27',
              'Locale::Codes::LangVar_Retired'=> '3.27',
              'Locale::Codes::Language'=> '3.27',
              'Locale::Codes::Language_Codes'=> '3.27',
              'Locale::Codes::Language_Retired'=> '3.27',
              'Locale::Codes::Script' => '3.27',
              'Locale::Codes::Script_Codes'=> '3.27',
              'Locale::Codes::Script_Retired'=> '3.27',
              'Locale::Country'       => '3.27',
              'Locale::Currency'      => '3.27',
              'Locale::Language'      => '3.27',
              'Locale::Script'        => '3.27',
              'Math::BigFloat'        => '1.9991',
              'Math::BigInt'          => '1.9993',
              'Math::BigInt::FastCalc'=> '0.31',
              'Module::CoreList'      => '2.99',
              'Module::CoreList::TieHashDelta'=> '2.99',
              'Module::CoreList::Utils'=> '2.99',
              'Module::Load::Conditional'=> '0.58',
              'Module::Metadata'      => '1.000018',
              'Opcode'                => '1.26',
              'POSIX'                 => '1.35',
              'Parse::CPAN::Meta'     => '1.4407',
              'Perl::OSType'          => '1.005',
              'Pod::Html'             => '1.21',
              'Scalar::Util'          => '1.32',
              'Socket'                => '2.012',
              'Storable'              => '2.47',
              'Term::ReadLine'        => '1.14',
              'Test::Builder'         => '0.98_06',
              'Test::Builder::Module' => '0.98_06',
              'Test::More'            => '0.98_06',
              'Test::Simple'          => '0.98_06',
              'Time::Piece'           => '1.23',
              'Time::Seconds'         => '1.23',
              'Unicode::Collate'      => '0.99',
              'Unicode::UCD'          => '0.54',
              'XS::APItest'           => '0.56',
              'XS::Typemap'           => '0.11',
              '_charnames'            => '1.39',
              'autodie'               => '2.21',
              'autodie::exception'    => '2.21',
              'autodie::exception::system'=> '2.21',
              'autodie::hints'        => '2.21',
              'autodie::skip'         => '2.21',
              'charnames'             => '1.39',
              'diagnostics'           => '1.33',
              'mro'                   => '1.14',
              'parent'                => '0.228',
              'perlfaq'               => '5.0150044',
              're'                    => '0.26',
              'version'               => '0.9904',
              'warnings'              => '1.19',
          },
          removed => {
          }
      },
      5.019005 => {
          delta_from => 5.019004,
          changed => {
              'App::Prove'            => '3.29',
              'App::Prove::State'     => '3.29',
              'App::Prove::State::Result'=> '3.29',
              'App::Prove::State::Result::Test'=> '3.29',
              'CPAN::Meta'            => '2.132830',
              'CPAN::Meta::Converter' => '2.132830',
              'CPAN::Meta::Feature'   => '2.132830',
              'CPAN::Meta::History'   => '2.132830',
              'CPAN::Meta::Prereqs'   => '2.132830',
              'CPAN::Meta::Requirements'=> '2.125',
              'CPAN::Meta::Spec'      => '2.132830',
              'CPAN::Meta::Validator' => '2.132830',
              'CPAN::Meta::YAML'      => '0.010',
              'Config'                => '5.019005',
              'Cwd'                   => '3.45',
              'ExtUtils::Command::MM' => '6.80',
              'ExtUtils::Install'     => '1.61',
              'ExtUtils::Liblist'     => '6.80',
              'ExtUtils::Liblist::Kid'=> '6.80',
              'ExtUtils::MM'          => '6.80',
              'ExtUtils::MM_AIX'      => '6.80',
              'ExtUtils::MM_Any'      => '6.80',
              'ExtUtils::MM_BeOS'     => '6.80',
              'ExtUtils::MM_Cygwin'   => '6.80',
              'ExtUtils::MM_DOS'      => '6.80',
              'ExtUtils::MM_Darwin'   => '6.80',
              'ExtUtils::MM_MacOS'    => '6.80',
              'ExtUtils::MM_NW5'      => '6.80',
              'ExtUtils::MM_OS2'      => '6.80',
              'ExtUtils::MM_QNX'      => '6.80',
              'ExtUtils::MM_UWIN'     => '6.80',
              'ExtUtils::MM_Unix'     => '6.80',
              'ExtUtils::MM_VMS'      => '6.80',
              'ExtUtils::MM_VOS'      => '6.80',
              'ExtUtils::MM_Win32'    => '6.80',
              'ExtUtils::MM_Win95'    => '6.80',
              'ExtUtils::MY'          => '6.80',
              'ExtUtils::MakeMaker'   => '6.80',
              'ExtUtils::MakeMaker::Config'=> '6.80',
              'ExtUtils::Mkbootstrap' => '6.80',
              'ExtUtils::Mksymlists'  => '6.80',
              'ExtUtils::testlib'     => '6.80',
              'Fatal'                 => '2.22',
              'File::Fetch'           => '0.44',
              'File::Glob'            => '1.22',
              'File::Spec'            => '3.45',
              'File::Spec::Cygwin'    => '3.45',
              'File::Spec::Epoc'      => '3.45',
              'File::Spec::Functions' => '3.45',
              'File::Spec::Mac'       => '3.45',
              'File::Spec::OS2'       => '3.45',
              'File::Spec::Unix'      => '3.45',
              'File::Spec::VMS'       => '3.45',
              'File::Spec::Win32'     => '3.45',
              'File::Temp'            => '0.2304',
              'Getopt::Long'          => '2.42',
              'HTTP::Tiny'            => '0.036',
              'IPC::Cmd'              => '0.84_01',
              'JSON::PP'              => '2.27203',
              'List::Util'            => '1.35',
              'List::Util::XS'        => '1.35',
              'Module::CoreList'      => '3.00',
              'Module::CoreList::TieHashDelta'=> '3.00',
              'Module::CoreList::Utils'=> '3.00',
              'Module::Metadata'      => '1.000019',
              'Parse::CPAN::Meta'     => '1.4409',
              'Perl::OSType'          => '1.006',
              'PerlIO::scalar'        => '0.17',
              'Pod::Man'              => '2.28',
              'Pod::Text'             => '3.18',
              'Pod::Text::Termcap'    => '2.08',
              'Scalar::Util'          => '1.35',
              'TAP::Base'             => '3.29',
              'TAP::Formatter::Base'  => '3.29',
              'TAP::Formatter::Color' => '3.29',
              'TAP::Formatter::Console'=> '3.29',
              'TAP::Formatter::Console::ParallelSession'=> '3.29',
              'TAP::Formatter::Console::Session'=> '3.29',
              'TAP::Formatter::File'  => '3.29',
              'TAP::Formatter::File::Session'=> '3.29',
              'TAP::Formatter::Session'=> '3.29',
              'TAP::Harness'          => '3.29',
              'TAP::Harness::Env'     => '3.29',
              'TAP::Object'           => '3.29',
              'TAP::Parser'           => '3.29',
              'TAP::Parser::Aggregator'=> '3.29',
              'TAP::Parser::Grammar'  => '3.29',
              'TAP::Parser::Iterator' => '3.29',
              'TAP::Parser::Iterator::Array'=> '3.29',
              'TAP::Parser::Iterator::Process'=> '3.29',
              'TAP::Parser::Iterator::Stream'=> '3.29',
              'TAP::Parser::IteratorFactory'=> '3.29',
              'TAP::Parser::Multiplexer'=> '3.29',
              'TAP::Parser::Result'   => '3.29',
              'TAP::Parser::Result::Bailout'=> '3.29',
              'TAP::Parser::Result::Comment'=> '3.29',
              'TAP::Parser::Result::Plan'=> '3.29',
              'TAP::Parser::Result::Pragma'=> '3.29',
              'TAP::Parser::Result::Test'=> '3.29',
              'TAP::Parser::Result::Unknown'=> '3.29',
              'TAP::Parser::Result::Version'=> '3.29',
              'TAP::Parser::Result::YAML'=> '3.29',
              'TAP::Parser::ResultFactory'=> '3.29',
              'TAP::Parser::Scheduler'=> '3.29',
              'TAP::Parser::Scheduler::Job'=> '3.29',
              'TAP::Parser::Scheduler::Spinner'=> '3.29',
              'TAP::Parser::Source'   => '3.29',
              'TAP::Parser::SourceHandler'=> '3.29',
              'TAP::Parser::SourceHandler::Executable'=> '3.29',
              'TAP::Parser::SourceHandler::File'=> '3.29',
              'TAP::Parser::SourceHandler::Handle'=> '3.29',
              'TAP::Parser::SourceHandler::Perl'=> '3.29',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.29',
              'TAP::Parser::YAMLish::Reader'=> '3.29',
              'TAP::Parser::YAMLish::Writer'=> '3.29',
              'Test::Builder'         => '0.99',
              'Test::Builder::Module' => '0.99',
              'Test::Builder::Tester' => '1.23_002',
              'Test::Builder::Tester::Color'=> '1.23_002',
              'Test::Harness'         => '3.29',
              'Test::More'            => '0.99',
              'Test::Simple'          => '0.99',
              'Unicode'               => '6.3.0',
              'Unicode::Normalize'    => '1.17',
              'Unicode::UCD'          => '0.55',
              'attributes'            => '0.22',
              'autodie'               => '2.22',
              'autodie::exception'    => '2.22',
              'autodie::exception::system'=> '2.22',
              'autodie::hints'        => '2.22',
              'autodie::skip'         => '2.22',
              'feature'               => '1.34',
              'threads'               => '1.89',
              'warnings'              => '1.20',
          },
          removed => {
              'TAP::Parser::Utils'    => 1,
          }
      },
      5.019006 => {
          delta_from => 5.019005,
          changed => {
              'App::Prove'            => '3.30',
              'App::Prove::State'     => '3.30',
              'App::Prove::State::Result'=> '3.30',
              'App::Prove::State::Result::Test'=> '3.30',
              'Archive::Tar'          => '1.96',
              'Archive::Tar::Constant'=> '1.96',
              'Archive::Tar::File'    => '1.96',
              'AutoLoader'            => '5.74',
              'B'                     => '1.47',
              'B::Concise'            => '0.991',
              'B::Debug'              => '1.19',
              'B::Deparse'            => '1.24',
              'Benchmark'             => '1.18',
              'Compress::Raw::Bzip2'  => '2.063',
              'Compress::Raw::Zlib'   => '2.063',
              'Compress::Zlib'        => '2.063',
              'Config'                => '5.019006',
              'DB_File'               => '1.831',
              'Devel::Peek'           => '1.15',
              'DynaLoader'            => '1.21',
              'Errno'                 => '1.20_01',
              'ExtUtils::Command::MM' => '6.82',
              'ExtUtils::Liblist'     => '6.82',
              'ExtUtils::Liblist::Kid'=> '6.82',
              'ExtUtils::MM'          => '6.82',
              'ExtUtils::MM_AIX'      => '6.82',
              'ExtUtils::MM_Any'      => '6.82',
              'ExtUtils::MM_BeOS'     => '6.82',
              'ExtUtils::MM_Cygwin'   => '6.82',
              'ExtUtils::MM_DOS'      => '6.82',
              'ExtUtils::MM_Darwin'   => '6.82',
              'ExtUtils::MM_MacOS'    => '6.82',
              'ExtUtils::MM_NW5'      => '6.82',
              'ExtUtils::MM_OS2'      => '6.82',
              'ExtUtils::MM_QNX'      => '6.82',
              'ExtUtils::MM_UWIN'     => '6.82',
              'ExtUtils::MM_Unix'     => '6.82',
              'ExtUtils::MM_VMS'      => '6.82',
              'ExtUtils::MM_VOS'      => '6.82',
              'ExtUtils::MM_Win32'    => '6.82',
              'ExtUtils::MM_Win95'    => '6.82',
              'ExtUtils::MY'          => '6.82',
              'ExtUtils::MakeMaker'   => '6.82',
              'ExtUtils::MakeMaker::Config'=> '6.82',
              'ExtUtils::Mkbootstrap' => '6.82',
              'ExtUtils::Mksymlists'  => '6.82',
              'ExtUtils::testlib'     => '6.82',
              'File::DosGlob'         => '1.12',
              'File::Find'            => '1.26',
              'File::Glob'            => '1.23',
              'HTTP::Tiny'            => '0.038',
              'IO'                    => '1.30',
              'IO::Compress::Adapter::Bzip2'=> '2.063',
              'IO::Compress::Adapter::Deflate'=> '2.063',
              'IO::Compress::Adapter::Identity'=> '2.063',
              'IO::Compress::Base'    => '2.063',
              'IO::Compress::Base::Common'=> '2.063',
              'IO::Compress::Bzip2'   => '2.063',
              'IO::Compress::Deflate' => '2.063',
              'IO::Compress::Gzip'    => '2.063',
              'IO::Compress::Gzip::Constants'=> '2.063',
              'IO::Compress::RawDeflate'=> '2.063',
              'IO::Compress::Zip'     => '2.063',
              'IO::Compress::Zip::Constants'=> '2.063',
              'IO::Compress::Zlib::Constants'=> '2.063',
              'IO::Compress::Zlib::Extra'=> '2.063',
              'IO::Select'            => '1.22',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.063',
              'IO::Uncompress::Adapter::Identity'=> '2.063',
              'IO::Uncompress::Adapter::Inflate'=> '2.063',
              'IO::Uncompress::AnyInflate'=> '2.063',
              'IO::Uncompress::AnyUncompress'=> '2.063',
              'IO::Uncompress::Base'  => '2.063',
              'IO::Uncompress::Bunzip2'=> '2.063',
              'IO::Uncompress::Gunzip'=> '2.063',
              'IO::Uncompress::Inflate'=> '2.063',
              'IO::Uncompress::RawInflate'=> '2.063',
              'IO::Uncompress::Unzip' => '2.063',
              'IPC::Cmd'              => '0.90',
              'Locale::Maketext'      => '1.25',
              'Module::Build'         => '0.4202',
              'Module::Build::Base'   => '0.4202',
              'Module::Build::Compat' => '0.4202',
              'Module::Build::Config' => '0.4202',
              'Module::Build::Cookbook'=> '0.4202',
              'Module::Build::Dumper' => '0.4202',
              'Module::Build::ModuleInfo'=> '0.4202',
              'Module::Build::Notes'  => '0.4202',
              'Module::Build::PPMMaker'=> '0.4202',
              'Module::Build::Platform::Default'=> '0.4202',
              'Module::Build::Platform::MacOS'=> '0.4202',
              'Module::Build::Platform::Unix'=> '0.4202',
              'Module::Build::Platform::VMS'=> '0.4202',
              'Module::Build::Platform::VOS'=> '0.4202',
              'Module::Build::Platform::Windows'=> '0.4202',
              'Module::Build::Platform::aix'=> '0.4202',
              'Module::Build::Platform::cygwin'=> '0.4202',
              'Module::Build::Platform::darwin'=> '0.4202',
              'Module::Build::Platform::os2'=> '0.4202',
              'Module::Build::PodParser'=> '0.4202',
              'Module::CoreList'      => '3.01',
              'Module::CoreList::TieHashDelta'=> '3.01',
              'Module::CoreList::Utils'=> '3.01',
              'Opcode'                => '1.27',
              'POSIX'                 => '1.36',
              'Package::Constants'    => '0.04',
              'PerlIO::scalar'        => '0.18',
              'PerlIO::via'           => '0.13',
              'SDBM_File'             => '1.10',
              'Socket'                => '2.013',
              'TAP::Base'             => '3.30',
              'TAP::Formatter::Base'  => '3.30',
              'TAP::Formatter::Color' => '3.30',
              'TAP::Formatter::Console'=> '3.30',
              'TAP::Formatter::Console::ParallelSession'=> '3.30',
              'TAP::Formatter::Console::Session'=> '3.30',
              'TAP::Formatter::File'  => '3.30',
              'TAP::Formatter::File::Session'=> '3.30',
              'TAP::Formatter::Session'=> '3.30',
              'TAP::Harness'          => '3.30',
              'TAP::Harness::Env'     => '3.30',
              'TAP::Object'           => '3.30',
              'TAP::Parser'           => '3.30',
              'TAP::Parser::Aggregator'=> '3.30',
              'TAP::Parser::Grammar'  => '3.30',
              'TAP::Parser::Iterator' => '3.30',
              'TAP::Parser::Iterator::Array'=> '3.30',
              'TAP::Parser::Iterator::Process'=> '3.30',
              'TAP::Parser::Iterator::Stream'=> '3.30',
              'TAP::Parser::IteratorFactory'=> '3.30',
              'TAP::Parser::Multiplexer'=> '3.30',
              'TAP::Parser::Result'   => '3.30',
              'TAP::Parser::Result::Bailout'=> '3.30',
              'TAP::Parser::Result::Comment'=> '3.30',
              'TAP::Parser::Result::Plan'=> '3.30',
              'TAP::Parser::Result::Pragma'=> '3.30',
              'TAP::Parser::Result::Test'=> '3.30',
              'TAP::Parser::Result::Unknown'=> '3.30',
              'TAP::Parser::Result::Version'=> '3.30',
              'TAP::Parser::Result::YAML'=> '3.30',
              'TAP::Parser::ResultFactory'=> '3.30',
              'TAP::Parser::Scheduler'=> '3.30',
              'TAP::Parser::Scheduler::Job'=> '3.30',
              'TAP::Parser::Scheduler::Spinner'=> '3.30',
              'TAP::Parser::Source'   => '3.30',
              'TAP::Parser::SourceHandler'=> '3.30',
              'TAP::Parser::SourceHandler::Executable'=> '3.30',
              'TAP::Parser::SourceHandler::File'=> '3.30',
              'TAP::Parser::SourceHandler::Handle'=> '3.30',
              'TAP::Parser::SourceHandler::Perl'=> '3.30',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.30',
              'TAP::Parser::YAMLish::Reader'=> '3.30',
              'TAP::Parser::YAMLish::Writer'=> '3.30',
              'Term::Cap'             => '1.15',
              'Test::Builder'         => '1.001002',
              'Test::Builder::Module' => '1.001002',
              'Test::Harness'         => '3.30',
              'Test::More'            => '1.001002',
              'Test::Simple'          => '1.001002',
              'Tie::StdHandle'        => '4.4',
              'Unicode::Collate'      => '1.02',
              'Unicode::Collate::CJK::Korean'=> '1.02',
              'Unicode::Collate::Locale'=> '1.02',
              'XS::APItest'           => '0.57',
              'XS::Typemap'           => '0.12',
              'arybase'               => '0.07',
              'bignum'                => '0.37',
              'constant'              => '1.29',
              'fields'                => '2.17',
              'inc::latest'           => '0.4202',
              'threads'               => '1.90',
              'threads::shared'       => '1.45',
          },
          removed => {
          }
      },
      5.019007 => {
          delta_from => 5.019006,
          changed => {
              'CGI'                   => '3.64',
              'CGI::Apache'           => '1.02',
              'CGI::Carp'             => '3.64',
              'CGI::Cookie'           => '1.31',
              'CGI::Fast'             => '1.10',
              'CGI::Pretty'           => '3.64',
              'CGI::Push'             => '1.06',
              'CGI::Switch'           => '1.02',
              'CGI::Util'             => '3.64',
              'CPAN::Meta'            => '2.133380',
              'CPAN::Meta::Converter' => '2.133380',
              'CPAN::Meta::Feature'   => '2.133380',
              'CPAN::Meta::History'   => '2.133380',
              'CPAN::Meta::Prereqs'   => '2.133380',
              'CPAN::Meta::Spec'      => '2.133380',
              'CPAN::Meta::Validator' => '2.133380',
              'Config'                => '5.019007',
              'Data::Dumper'          => '2.150',
              'DynaLoader'            => '1.22',
              'ExtUtils::Command::MM' => '6.84',
              'ExtUtils::Liblist'     => '6.84',
              'ExtUtils::Liblist::Kid'=> '6.84',
              'ExtUtils::MM'          => '6.84',
              'ExtUtils::MM_AIX'      => '6.84',
              'ExtUtils::MM_Any'      => '6.84',
              'ExtUtils::MM_BeOS'     => '6.84',
              'ExtUtils::MM_Cygwin'   => '6.84',
              'ExtUtils::MM_DOS'      => '6.84',
              'ExtUtils::MM_Darwin'   => '6.84',
              'ExtUtils::MM_MacOS'    => '6.84',
              'ExtUtils::MM_NW5'      => '6.84',
              'ExtUtils::MM_OS2'      => '6.84',
              'ExtUtils::MM_QNX'      => '6.84',
              'ExtUtils::MM_UWIN'     => '6.84',
              'ExtUtils::MM_Unix'     => '6.84',
              'ExtUtils::MM_VMS'      => '6.84',
              'ExtUtils::MM_VOS'      => '6.84',
              'ExtUtils::MM_Win32'    => '6.84',
              'ExtUtils::MM_Win95'    => '6.84',
              'ExtUtils::MY'          => '6.84',
              'ExtUtils::MakeMaker'   => '6.84',
              'ExtUtils::MakeMaker::Config'=> '6.84',
              'ExtUtils::Mkbootstrap' => '6.84',
              'ExtUtils::Mksymlists'  => '6.84',
              'ExtUtils::testlib'     => '6.84',
              'File::Fetch'           => '0.46',
              'HTTP::Tiny'            => '0.039',
              'Locale::Codes'         => '3.28',
              'Locale::Codes::Constants'=> '3.28',
              'Locale::Codes::Country'=> '3.28',
              'Locale::Codes::Country_Codes'=> '3.28',
              'Locale::Codes::Country_Retired'=> '3.28',
              'Locale::Codes::Currency'=> '3.28',
              'Locale::Codes::Currency_Codes'=> '3.28',
              'Locale::Codes::Currency_Retired'=> '3.28',
              'Locale::Codes::LangExt'=> '3.28',
              'Locale::Codes::LangExt_Codes'=> '3.28',
              'Locale::Codes::LangExt_Retired'=> '3.28',
              'Locale::Codes::LangFam'=> '3.28',
              'Locale::Codes::LangFam_Codes'=> '3.28',
              'Locale::Codes::LangFam_Retired'=> '3.28',
              'Locale::Codes::LangVar'=> '3.28',
              'Locale::Codes::LangVar_Codes'=> '3.28',
              'Locale::Codes::LangVar_Retired'=> '3.28',
              'Locale::Codes::Language'=> '3.28',
              'Locale::Codes::Language_Codes'=> '3.28',
              'Locale::Codes::Language_Retired'=> '3.28',
              'Locale::Codes::Script' => '3.28',
              'Locale::Codes::Script_Codes'=> '3.28',
              'Locale::Codes::Script_Retired'=> '3.28',
              'Locale::Country'       => '3.28',
              'Locale::Currency'      => '3.28',
              'Locale::Language'      => '3.28',
              'Locale::Script'        => '3.28',
              'Module::Build'         => '0.4203',
              'Module::Build::Base'   => '0.4203',
              'Module::Build::Compat' => '0.4203',
              'Module::Build::Config' => '0.4203',
              'Module::Build::Cookbook'=> '0.4203',
              'Module::Build::Dumper' => '0.4203',
              'Module::Build::ModuleInfo'=> '0.4203',
              'Module::Build::Notes'  => '0.4203',
              'Module::Build::PPMMaker'=> '0.4203',
              'Module::Build::Platform::Default'=> '0.4203',
              'Module::Build::Platform::MacOS'=> '0.4203',
              'Module::Build::Platform::Unix'=> '0.4203',
              'Module::Build::Platform::VMS'=> '0.4203',
              'Module::Build::Platform::VOS'=> '0.4203',
              'Module::Build::Platform::Windows'=> '0.4203',
              'Module::Build::Platform::aix'=> '0.4203',
              'Module::Build::Platform::cygwin'=> '0.4203',
              'Module::Build::Platform::darwin'=> '0.4203',
              'Module::Build::Platform::os2'=> '0.4203',
              'Module::Build::PodParser'=> '0.4203',
              'Module::CoreList'      => '3.02',
              'Module::CoreList::TieHashDelta'=> '3.02',
              'Module::CoreList::Utils'=> '3.02',
              'POSIX'                 => '1.37',
              'PerlIO::encoding'      => '0.17',
              'PerlIO::via'           => '0.14',
              'SDBM_File'             => '1.11',
              'Storable'              => '2.48',
              'Time::Piece'           => '1.24',
              'Time::Seconds'         => '1.24',
              'Unicode::Collate'      => '1.04',
              'Win32'                 => '0.48',
              'XS::APItest'           => '0.58',
              'base'                  => '2.20',
              'constant'              => '1.30',
              'inc::latest'           => '0.4203',
              'threads'               => '1.91',
          },
          removed => {
          }
      },
      5.019008 => {
          delta_from => 5.019007,
          changed => {
              'Config'                => '5.019008',
              'DynaLoader'            => '1.24',
              'Encode'                => '2.57',
              'Errno'                 => '1.20_02',
              'ExtUtils::CBuilder'    => '0.280213',
              'ExtUtils::CBuilder::Base'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280213',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280213',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280213',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280213',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280213',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280213',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280213',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280213',
              'ExtUtils::Command::MM' => '6.86',
              'ExtUtils::Liblist'     => '6.86',
              'ExtUtils::Liblist::Kid'=> '6.86',
              'ExtUtils::MM'          => '6.86',
              'ExtUtils::MM_AIX'      => '6.86',
              'ExtUtils::MM_Any'      => '6.86',
              'ExtUtils::MM_BeOS'     => '6.86',
              'ExtUtils::MM_Cygwin'   => '6.86',
              'ExtUtils::MM_DOS'      => '6.86',
              'ExtUtils::MM_Darwin'   => '6.86',
              'ExtUtils::MM_MacOS'    => '6.86',
              'ExtUtils::MM_NW5'      => '6.86',
              'ExtUtils::MM_OS2'      => '6.86',
              'ExtUtils::MM_QNX'      => '6.86',
              'ExtUtils::MM_UWIN'     => '6.86',
              'ExtUtils::MM_Unix'     => '6.86',
              'ExtUtils::MM_VMS'      => '6.86',
              'ExtUtils::MM_VOS'      => '6.86',
              'ExtUtils::MM_Win32'    => '6.86',
              'ExtUtils::MM_Win95'    => '6.86',
              'ExtUtils::MY'          => '6.86',
              'ExtUtils::MakeMaker'   => '6.86',
              'ExtUtils::MakeMaker::Config'=> '6.86',
              'ExtUtils::Mkbootstrap' => '6.86',
              'ExtUtils::Mksymlists'  => '6.86',
              'ExtUtils::testlib'     => '6.86',
              'File::Copy'            => '2.29',
              'Hash::Util::FieldHash' => '1.14',
              'IO::Socket::IP'        => '0.26',
              'IO::Socket::UNIX'      => '1.26',
              'List::Util'            => '1.36',
              'List::Util::XS'        => '1.36',
              'Module::Build'         => '0.4204',
              'Module::Build::Base'   => '0.4204',
              'Module::Build::Compat' => '0.4204',
              'Module::Build::Config' => '0.4204',
              'Module::Build::Cookbook'=> '0.4204',
              'Module::Build::Dumper' => '0.4204',
              'Module::Build::ModuleInfo'=> '0.4204',
              'Module::Build::Notes'  => '0.4204',
              'Module::Build::PPMMaker'=> '0.4204',
              'Module::Build::Platform::Default'=> '0.4204',
              'Module::Build::Platform::MacOS'=> '0.4204',
              'Module::Build::Platform::Unix'=> '0.4204',
              'Module::Build::Platform::VMS'=> '0.4204',
              'Module::Build::Platform::VOS'=> '0.4204',
              'Module::Build::Platform::Windows'=> '0.4204',
              'Module::Build::Platform::aix'=> '0.4204',
              'Module::Build::Platform::cygwin'=> '0.4204',
              'Module::Build::Platform::darwin'=> '0.4204',
              'Module::Build::Platform::os2'=> '0.4204',
              'Module::Build::PodParser'=> '0.4204',
              'Module::CoreList'      => '3.04',
              'Module::CoreList::TieHashDelta'=> '3.04',
              'Module::CoreList::Utils'=> '3.04',
              'Module::Load'          => '0.28',
              'Module::Load::Conditional'=> '0.60',
              'Net::Config'           => '1.13',
              'Net::FTP::A'           => '1.19',
              'POSIX'                 => '1.38_01',
              'Perl::OSType'          => '1.007',
              'PerlIO::encoding'      => '0.18',
              'Pod::Perldoc'          => '3.21',
              'Pod::Perldoc::BaseTo'  => '3.21',
              'Pod::Perldoc::GetOptsOO'=> '3.21',
              'Pod::Perldoc::ToANSI'  => '3.21',
              'Pod::Perldoc::ToChecker'=> '3.21',
              'Pod::Perldoc::ToMan'   => '3.21',
              'Pod::Perldoc::ToNroff' => '3.21',
              'Pod::Perldoc::ToPod'   => '3.21',
              'Pod::Perldoc::ToRtf'   => '3.21',
              'Pod::Perldoc::ToTerm'  => '3.21',
              'Pod::Perldoc::ToText'  => '3.21',
              'Pod::Perldoc::ToTk'    => '3.21',
              'Pod::Perldoc::ToXml'   => '3.21',
              'Scalar::Util'          => '1.36',
              'Time::Piece'           => '1.27',
              'Time::Seconds'         => '1.27',
              'Unicode::UCD'          => '0.57',
              'XS::APItest'           => '0.59',
              'XSLoader'              => '0.17',
              'base'                  => '2.21',
              'constant'              => '1.31',
              'inc::latest'           => '0.4204',
              'threads::shared'       => '1.46',
              'version'               => '0.9907',
              'version::regex'        => '0.9907',
              'version::vpp'          => '0.9907',
              'warnings'              => '1.21',
          },
          removed => {
          }
      },
      5.019009 => {
          delta_from => 5.019008,
          changed => {
              'B'                     => '1.48',
              'B::Concise'            => '0.992',
              'B::Deparse'            => '1.25',
              'CGI'                   => '3.65',
              'CPAN::Meta::YAML'      => '0.011',
              'Compress::Raw::Bzip2'  => '2.064',
              'Compress::Raw::Zlib'   => '2.065',
              'Compress::Zlib'        => '2.064',
              'Config'                => '5.019009',
              'Config::Perl::V'       => '0.20',
              'Cwd'                   => '3.47',
              'Devel::Peek'           => '1.16',
              'Digest::SHA'           => '5.87',
              'DynaLoader'            => '1.25',
              'English'               => '1.09',
              'ExtUtils::CBuilder'    => '0.280216',
              'ExtUtils::CBuilder::Base'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280216',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280216',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280216',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280216',
              'ExtUtils::CBuilder::Platform::android'=> '0.280216',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280216',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280216',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280216',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280216',
              'ExtUtils::Command::MM' => '6.88',
              'ExtUtils::Embed'       => '1.32',
              'ExtUtils::Install'     => '1.62',
              'ExtUtils::Installed'   => '1.999004',
              'ExtUtils::Liblist'     => '6.88',
              'ExtUtils::Liblist::Kid'=> '6.88',
              'ExtUtils::MM'          => '6.88',
              'ExtUtils::MM_AIX'      => '6.88',
              'ExtUtils::MM_Any'      => '6.88',
              'ExtUtils::MM_BeOS'     => '6.88',
              'ExtUtils::MM_Cygwin'   => '6.88',
              'ExtUtils::MM_DOS'      => '6.88',
              'ExtUtils::MM_Darwin'   => '6.88',
              'ExtUtils::MM_MacOS'    => '6.88',
              'ExtUtils::MM_NW5'      => '6.88',
              'ExtUtils::MM_OS2'      => '6.88',
              'ExtUtils::MM_QNX'      => '6.88',
              'ExtUtils::MM_UWIN'     => '6.88',
              'ExtUtils::MM_Unix'     => '6.88',
              'ExtUtils::MM_VMS'      => '6.88',
              'ExtUtils::MM_VOS'      => '6.88',
              'ExtUtils::MM_Win32'    => '6.88',
              'ExtUtils::MM_Win95'    => '6.88',
              'ExtUtils::MY'          => '6.88',
              'ExtUtils::MakeMaker'   => '6.88',
              'ExtUtils::MakeMaker::Config'=> '6.88',
              'ExtUtils::Mkbootstrap' => '6.88',
              'ExtUtils::Mksymlists'  => '6.88',
              'ExtUtils::Packlist'    => '1.47',
              'ExtUtils::testlib'     => '6.88',
              'Fatal'                 => '2.23',
              'File::Fetch'           => '0.48',
              'File::Spec'            => '3.47',
              'File::Spec::Cygwin'    => '3.47',
              'File::Spec::Epoc'      => '3.47',
              'File::Spec::Functions' => '3.47',
              'File::Spec::Mac'       => '3.47',
              'File::Spec::OS2'       => '3.47',
              'File::Spec::Unix'      => '3.47',
              'File::Spec::VMS'       => '3.47',
              'File::Spec::Win32'     => '3.47',
              'HTTP::Tiny'            => '0.042',
              'IO::Compress::Adapter::Bzip2'=> '2.064',
              'IO::Compress::Adapter::Deflate'=> '2.064',
              'IO::Compress::Adapter::Identity'=> '2.064',
              'IO::Compress::Base'    => '2.064',
              'IO::Compress::Base::Common'=> '2.064',
              'IO::Compress::Bzip2'   => '2.064',
              'IO::Compress::Deflate' => '2.064',
              'IO::Compress::Gzip'    => '2.064',
              'IO::Compress::Gzip::Constants'=> '2.064',
              'IO::Compress::RawDeflate'=> '2.064',
              'IO::Compress::Zip'     => '2.064',
              'IO::Compress::Zip::Constants'=> '2.064',
              'IO::Compress::Zlib::Constants'=> '2.064',
              'IO::Compress::Zlib::Extra'=> '2.064',
              'IO::Socket::INET'      => '1.35',
              'IO::Socket::IP'        => '0.28',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.064',
              'IO::Uncompress::Adapter::Identity'=> '2.064',
              'IO::Uncompress::Adapter::Inflate'=> '2.064',
              'IO::Uncompress::AnyInflate'=> '2.064',
              'IO::Uncompress::AnyUncompress'=> '2.064',
              'IO::Uncompress::Base'  => '2.064',
              'IO::Uncompress::Bunzip2'=> '2.064',
              'IO::Uncompress::Gunzip'=> '2.064',
              'IO::Uncompress::Inflate'=> '2.064',
              'IO::Uncompress::RawInflate'=> '2.064',
              'IO::Uncompress::Unzip' => '2.064',
              'IPC::Cmd'              => '0.92',
              'List::Util'            => '1.38',
              'List::Util::XS'        => '1.38',
              'Locale::Codes'         => '3.29',
              'Locale::Codes::Constants'=> '3.29',
              'Locale::Codes::Country'=> '3.29',
              'Locale::Codes::Country_Codes'=> '3.29',
              'Locale::Codes::Country_Retired'=> '3.29',
              'Locale::Codes::Currency'=> '3.29',
              'Locale::Codes::Currency_Codes'=> '3.29',
              'Locale::Codes::Currency_Retired'=> '3.29',
              'Locale::Codes::LangExt'=> '3.29',
              'Locale::Codes::LangExt_Codes'=> '3.29',
              'Locale::Codes::LangExt_Retired'=> '3.29',
              'Locale::Codes::LangFam'=> '3.29',
              'Locale::Codes::LangFam_Codes'=> '3.29',
              'Locale::Codes::LangFam_Retired'=> '3.29',
              'Locale::Codes::LangVar'=> '3.29',
              'Locale::Codes::LangVar_Codes'=> '3.29',
              'Locale::Codes::LangVar_Retired'=> '3.29',
              'Locale::Codes::Language'=> '3.29',
              'Locale::Codes::Language_Codes'=> '3.29',
              'Locale::Codes::Language_Retired'=> '3.29',
              'Locale::Codes::Script' => '3.29',
              'Locale::Codes::Script_Codes'=> '3.29',
              'Locale::Codes::Script_Retired'=> '3.29',
              'Locale::Country'       => '3.29',
              'Locale::Currency'      => '3.29',
              'Locale::Language'      => '3.29',
              'Locale::Script'        => '3.29',
              'Module::Build'         => '0.4205',
              'Module::Build::Base'   => '0.4205',
              'Module::Build::Compat' => '0.4205',
              'Module::Build::Config' => '0.4205',
              'Module::Build::Cookbook'=> '0.4205',
              'Module::Build::Dumper' => '0.4205',
              'Module::Build::ModuleInfo'=> '0.4205',
              'Module::Build::Notes'  => '0.4205',
              'Module::Build::PPMMaker'=> '0.4205',
              'Module::Build::Platform::Default'=> '0.4205',
              'Module::Build::Platform::MacOS'=> '0.4205',
              'Module::Build::Platform::Unix'=> '0.4205',
              'Module::Build::Platform::VMS'=> '0.4205',
              'Module::Build::Platform::VOS'=> '0.4205',
              'Module::Build::Platform::Windows'=> '0.4205',
              'Module::Build::Platform::aix'=> '0.4205',
              'Module::Build::Platform::cygwin'=> '0.4205',
              'Module::Build::Platform::darwin'=> '0.4205',
              'Module::Build::Platform::os2'=> '0.4205',
              'Module::Build::PodParser'=> '0.4205',
              'Module::CoreList'      => '3.06',
              'Module::CoreList::TieHashDelta'=> '3.06',
              'Module::CoreList::Utils'=> '3.06',
              'Module::Load'          => '0.30',
              'Module::Load::Conditional'=> '0.62',
              'Net::Domain'           => '2.23',
              'Net::FTP'              => '2.79',
              'Net::NNTP'             => '2.26',
              'Net::POP3'             => '2.31',
              'Net::Ping'             => '2.43',
              'Net::SMTP'             => '2.33',
              'POSIX'                 => '1.38_02',
              'Parse::CPAN::Meta'     => '1.4413',
              'Pod::Escapes'          => '1.06',
              'Pod::Find'             => '1.62',
              'Pod::InputObjects'     => '1.62',
              'Pod::ParseUtils'       => '1.62',
              'Pod::Parser'           => '1.62',
              'Pod::Select'           => '1.62',
              'Scalar::Util'          => '1.38',
              'autodie'               => '2.23',
              'autodie::exception'    => '2.23',
              'autodie::exception::system'=> '2.23',
              'autodie::hints'        => '2.23',
              'autodie::skip'         => '2.23',
              'diagnostics'           => '1.34',
              'feature'               => '1.35',
              'inc::latest'           => '0.4205',
              'locale'                => '1.03',
              'mro'                   => '1.15',
              'threads'               => '1.92',
              'version'               => '0.9908',
              'version::regex'        => '0.9908',
              'version::vpp'          => '0.9908',
              'warnings'              => '1.22',
          },
          removed => {
          }
      },
      5.01901 => {
          delta_from => 5.019009,
          changed => {
              'App::Cpan'             => '1.62',
              'Attribute::Handlers'   => '0.96',
              'B::Deparse'            => '1.26',
              'CPAN'                  => '2.04',
              'CPAN::Bundle'          => '5.5001',
              'CPAN::Complete'        => '5.5001',
              'CPAN::Distribution'    => '2.01',
              'CPAN::Distroprefs'     => '6.0001',
              'CPAN::FirstTime'       => '5.5305',
              'CPAN::Meta'            => '2.140640',
              'CPAN::Meta::Converter' => '2.140640',
              'CPAN::Meta::Feature'   => '2.140640',
              'CPAN::Meta::History'   => '2.140640',
              'CPAN::Meta::Prereqs'   => '2.140640',
              'CPAN::Meta::Spec'      => '2.140640',
              'CPAN::Meta::Validator' => '2.140640',
              'CPAN::Meta::YAML'      => '0.012',
              'CPAN::Queue'           => '5.5002',
              'CPAN::Shell'           => '5.5003',
              'CPAN::Tarzip'          => '5.5012',
              'CPAN::Version'         => '5.5003',
              'Carp'                  => '1.33',
              'Carp::Heavy'           => '1.33',
              'Config'                => '5.019010',
              'Data::Dumper'          => '2.151',
              'Devel::PPPort'         => '3.22',
              'Digest::SHA'           => '5.88',
              'ExtUtils::Command::MM' => '6.92',
              'ExtUtils::Install'     => '1.63',
              'ExtUtils::Installed'   => '1.999005',
              'ExtUtils::Liblist'     => '6.92',
              'ExtUtils::Liblist::Kid'=> '6.92',
              'ExtUtils::MM'          => '6.92',
              'ExtUtils::MM_AIX'      => '6.92',
              'ExtUtils::MM_Any'      => '6.92',
              'ExtUtils::MM_BeOS'     => '6.92',
              'ExtUtils::MM_Cygwin'   => '6.92',
              'ExtUtils::MM_DOS'      => '6.92',
              'ExtUtils::MM_Darwin'   => '6.92',
              'ExtUtils::MM_MacOS'    => '6.92',
              'ExtUtils::MM_NW5'      => '6.92',
              'ExtUtils::MM_OS2'      => '6.92',
              'ExtUtils::MM_QNX'      => '6.92',
              'ExtUtils::MM_UWIN'     => '6.92',
              'ExtUtils::MM_Unix'     => '6.92',
              'ExtUtils::MM_VMS'      => '6.92',
              'ExtUtils::MM_VOS'      => '6.92',
              'ExtUtils::MM_Win32'    => '6.92',
              'ExtUtils::MM_Win95'    => '6.92',
              'ExtUtils::MY'          => '6.92',
              'ExtUtils::MakeMaker'   => '6.92',
              'ExtUtils::MakeMaker::Config'=> '6.92',
              'ExtUtils::Mkbootstrap' => '6.92',
              'ExtUtils::Mksymlists'  => '6.92',
              'ExtUtils::Packlist'    => '1.48',
              'ExtUtils::ParseXS'     => '3.24',
              'ExtUtils::ParseXS::Constants'=> '3.24',
              'ExtUtils::ParseXS::CountLines'=> '3.24',
              'ExtUtils::ParseXS::Eval'=> '3.24',
              'ExtUtils::ParseXS::Utilities'=> '3.24',
              'ExtUtils::Typemaps'    => '3.24',
              'ExtUtils::Typemaps::Cmd'=> '3.24',
              'ExtUtils::Typemaps::InputMap'=> '3.24',
              'ExtUtils::Typemaps::OutputMap'=> '3.24',
              'ExtUtils::Typemaps::Type'=> '3.24',
              'ExtUtils::testlib'     => '6.92',
              'File::Find'            => '1.27',
              'Filter::Simple'        => '0.91',
              'HTTP::Tiny'            => '0.043',
              'Hash::Util::FieldHash' => '1.15',
              'IO'                    => '1.31',
              'IO::Socket::IP'        => '0.29',
              'Locale::Codes'         => '3.30',
              'Locale::Codes::Constants'=> '3.30',
              'Locale::Codes::Country'=> '3.30',
              'Locale::Codes::Country_Codes'=> '3.30',
              'Locale::Codes::Country_Retired'=> '3.30',
              'Locale::Codes::Currency'=> '3.30',
              'Locale::Codes::Currency_Codes'=> '3.30',
              'Locale::Codes::Currency_Retired'=> '3.30',
              'Locale::Codes::LangExt'=> '3.30',
              'Locale::Codes::LangExt_Codes'=> '3.30',
              'Locale::Codes::LangExt_Retired'=> '3.30',
              'Locale::Codes::LangFam'=> '3.30',
              'Locale::Codes::LangFam_Codes'=> '3.30',
              'Locale::Codes::LangFam_Retired'=> '3.30',
              'Locale::Codes::LangVar'=> '3.30',
              'Locale::Codes::LangVar_Codes'=> '3.30',
              'Locale::Codes::LangVar_Retired'=> '3.30',
              'Locale::Codes::Language'=> '3.30',
              'Locale::Codes::Language_Codes'=> '3.30',
              'Locale::Codes::Language_Retired'=> '3.30',
              'Locale::Codes::Script' => '3.30',
              'Locale::Codes::Script_Codes'=> '3.30',
              'Locale::Codes::Script_Retired'=> '3.30',
              'Locale::Country'       => '3.30',
              'Locale::Currency'      => '3.30',
              'Locale::Language'      => '3.30',
              'Locale::Script'        => '3.30',
              'Module::CoreList'      => '3.09',
              'Module::CoreList::TieHashDelta'=> '3.09',
              'Module::CoreList::Utils'=> '3.09',
              'Module::Load'          => '0.32',
              'POSIX'                 => '1.38_03',
              'Parse::CPAN::Meta'     => '1.4414',
              'Pod::Perldoc'          => '3.23',
              'Pod::Perldoc::BaseTo'  => '3.23',
              'Pod::Perldoc::GetOptsOO'=> '3.23',
              'Pod::Perldoc::ToANSI'  => '3.23',
              'Pod::Perldoc::ToChecker'=> '3.23',
              'Pod::Perldoc::ToMan'   => '3.23',
              'Pod::Perldoc::ToNroff' => '3.23',
              'Pod::Perldoc::ToPod'   => '3.23',
              'Pod::Perldoc::ToRtf'   => '3.23',
              'Pod::Perldoc::ToTerm'  => '3.23',
              'Pod::Perldoc::ToText'  => '3.23',
              'Pod::Perldoc::ToTk'    => '3.23',
              'Pod::Perldoc::ToXml'   => '3.23',
              'Thread::Queue'         => '3.05',
              'XS::APItest'           => '0.60',
              'XS::Typemap'           => '0.13',
              'autouse'               => '1.08',
              'base'                  => '2.22',
              'charnames'             => '1.40',
              'feature'               => '1.36',
              'mro'                   => '1.16',
              'threads'               => '1.93',
              'warnings'              => '1.23',
              'warnings::register'    => '1.03',
          },
          removed => {
          }
      },
      5.019011 => {
          delta_from => 5.01901,
          changed => {
              'CPAN'                  => '2.05',
              'CPAN::Distribution'    => '2.02',
              'CPAN::FirstTime'       => '5.5306',
              'CPAN::Shell'           => '5.5004',
              'Carp'                  => '1.3301',
              'Carp::Heavy'           => '1.3301',
              'Config'                => '5.019011',
              'ExtUtils::Command::MM' => '6.94',
              'ExtUtils::Install'     => '1.67',
              'ExtUtils::Liblist'     => '6.94',
              'ExtUtils::Liblist::Kid'=> '6.94',
              'ExtUtils::MM'          => '6.94',
              'ExtUtils::MM_AIX'      => '6.94',
              'ExtUtils::MM_Any'      => '6.94',
              'ExtUtils::MM_BeOS'     => '6.94',
              'ExtUtils::MM_Cygwin'   => '6.94',
              'ExtUtils::MM_DOS'      => '6.94',
              'ExtUtils::MM_Darwin'   => '6.94',
              'ExtUtils::MM_MacOS'    => '6.94',
              'ExtUtils::MM_NW5'      => '6.94',
              'ExtUtils::MM_OS2'      => '6.94',
              'ExtUtils::MM_QNX'      => '6.94',
              'ExtUtils::MM_UWIN'     => '6.94',
              'ExtUtils::MM_Unix'     => '6.94',
              'ExtUtils::MM_VMS'      => '6.94',
              'ExtUtils::MM_VOS'      => '6.94',
              'ExtUtils::MM_Win32'    => '6.94',
              'ExtUtils::MM_Win95'    => '6.94',
              'ExtUtils::MY'          => '6.94',
              'ExtUtils::MakeMaker'   => '6.94',
              'ExtUtils::MakeMaker::Config'=> '6.94',
              'ExtUtils::Mkbootstrap' => '6.94',
              'ExtUtils::Mksymlists'  => '6.94',
              'ExtUtils::testlib'     => '6.94',
              'Module::CoreList'      => '3.10',
              'Module::CoreList::TieHashDelta'=> '3.10',
              'Module::CoreList::Utils'=> '3.10',
              'PerlIO'                => '1.09',
              'Storable'              => '2.49',
              'Win32'                 => '0.49',
              'experimental'          => '0.007',
          },
          removed => {
          }
      },
      5.020000 => {
          delta_from => 5.019011,
          changed => {
              'Config'                => '5.02',
              'Devel::PPPort'         => '3.21',
              'Encode'                => '2.60',
              'Errno'                 => '1.20_03',
              'ExtUtils::Command::MM' => '6.98',
              'ExtUtils::Liblist'     => '6.98',
              'ExtUtils::Liblist::Kid'=> '6.98',
              'ExtUtils::MM'          => '6.98',
              'ExtUtils::MM_AIX'      => '6.98',
              'ExtUtils::MM_Any'      => '6.98',
              'ExtUtils::MM_BeOS'     => '6.98',
              'ExtUtils::MM_Cygwin'   => '6.98',
              'ExtUtils::MM_DOS'      => '6.98',
              'ExtUtils::MM_Darwin'   => '6.98',
              'ExtUtils::MM_MacOS'    => '6.98',
              'ExtUtils::MM_NW5'      => '6.98',
              'ExtUtils::MM_OS2'      => '6.98',
              'ExtUtils::MM_QNX'      => '6.98',
              'ExtUtils::MM_UWIN'     => '6.98',
              'ExtUtils::MM_Unix'     => '6.98',
              'ExtUtils::MM_VMS'      => '6.98',
              'ExtUtils::MM_VOS'      => '6.98',
              'ExtUtils::MM_Win32'    => '6.98',
              'ExtUtils::MM_Win95'    => '6.98',
              'ExtUtils::MY'          => '6.98',
              'ExtUtils::MakeMaker'   => '6.98',
              'ExtUtils::MakeMaker::Config'=> '6.98',
              'ExtUtils::Miniperl'    => '1.01',
              'ExtUtils::Mkbootstrap' => '6.98',
              'ExtUtils::Mksymlists'  => '6.98',
              'ExtUtils::testlib'     => '6.98',
              'Pod::Functions::Functions'=> '1.08',
          },
          removed => {
          }
      },
      5.021000 => {
          delta_from => 5.020000,
          changed => {
              'Module::CoreList'      => '5.021001',
              'Module::CoreList::TieHashDelta'=> '5.021001',
              'Module::CoreList::Utils'=> '5.021001',
              'feature'               => '1.37',
          },
          removed => {
              'CGI'                   => 1,
              'CGI::Apache'           => 1,
              'CGI::Carp'             => 1,
              'CGI::Cookie'           => 1,
              'CGI::Fast'             => 1,
              'CGI::Pretty'           => 1,
              'CGI::Push'             => 1,
              'CGI::Switch'           => 1,
              'CGI::Util'             => 1,
              'Module::Build'         => 1,
              'Module::Build::Base'   => 1,
              'Module::Build::Compat' => 1,
              'Module::Build::Config' => 1,
              'Module::Build::ConfigData'=> 1,
              'Module::Build::Cookbook'=> 1,
              'Module::Build::Dumper' => 1,
              'Module::Build::ModuleInfo'=> 1,
              'Module::Build::Notes'  => 1,
              'Module::Build::PPMMaker'=> 1,
              'Module::Build::Platform::Default'=> 1,
              'Module::Build::Platform::MacOS'=> 1,
              'Module::Build::Platform::Unix'=> 1,
              'Module::Build::Platform::VMS'=> 1,
              'Module::Build::Platform::VOS'=> 1,
              'Module::Build::Platform::Windows'=> 1,
              'Module::Build::Platform::aix'=> 1,
              'Module::Build::Platform::cygwin'=> 1,
              'Module::Build::Platform::darwin'=> 1,
              'Module::Build::Platform::os2'=> 1,
              'Module::Build::PodParser'=> 1,
              'Module::Build::Version'=> 1,
              'Module::Build::YAML'   => 1,
              'Package::Constants'    => 1,
              'inc::latest'           => 1,
          }
      },
      5.021001 => {
          delta_from => 5.021000,
          changed => {
              'App::Prove'            => '3.32',
              'App::Prove::State'     => '3.32',
              'App::Prove::State::Result'=> '3.32',
              'App::Prove::State::Result::Test'=> '3.32',
              'Archive::Tar'          => '2.00',
              'Archive::Tar::Constant'=> '2.00',
              'Archive::Tar::File'    => '2.00',
              'B'                     => '1.49',
              'B::Deparse'            => '1.27',
              'Benchmark'             => '1.19',
              'CPAN::Meta'            => '2.141520',
              'CPAN::Meta::Converter' => '2.141520',
              'CPAN::Meta::Feature'   => '2.141520',
              'CPAN::Meta::History'   => '2.141520',
              'CPAN::Meta::Prereqs'   => '2.141520',
              'CPAN::Meta::Spec'      => '2.141520',
              'CPAN::Meta::Validator' => '2.141520',
              'Carp'                  => '1.34',
              'Carp::Heavy'           => '1.34',
              'Config'                => '5.021001',
              'Cwd'                   => '3.48',
              'Data::Dumper'          => '2.152',
              'Devel::PPPort'         => '3.24',
              'Devel::Peek'           => '1.17',
              'Digest::SHA'           => '5.92',
              'DynaLoader'            => '1.26',
              'Encode'                => '2.62',
              'Errno'                 => '1.20_04',
              'Exporter'              => '5.71',
              'Exporter::Heavy'       => '5.71',
              'ExtUtils::Install'     => '1.68',
              'ExtUtils::Miniperl'    => '1.02',
              'ExtUtils::ParseXS'     => '3.25',
              'ExtUtils::ParseXS::Constants'=> '3.25',
              'ExtUtils::ParseXS::CountLines'=> '3.25',
              'ExtUtils::ParseXS::Eval'=> '3.25',
              'ExtUtils::ParseXS::Utilities'=> '3.25',
              'ExtUtils::Typemaps'    => '3.25',
              'ExtUtils::Typemaps::Cmd'=> '3.25',
              'ExtUtils::Typemaps::InputMap'=> '3.25',
              'ExtUtils::Typemaps::OutputMap'=> '3.25',
              'ExtUtils::Typemaps::Type'=> '3.25',
              'Fatal'                 => '2.25',
              'File::Spec'            => '3.48',
              'File::Spec::Cygwin'    => '3.48',
              'File::Spec::Epoc'      => '3.48',
              'File::Spec::Functions' => '3.48',
              'File::Spec::Mac'       => '3.48',
              'File::Spec::OS2'       => '3.48',
              'File::Spec::Unix'      => '3.48',
              'File::Spec::VMS'       => '3.48',
              'File::Spec::Win32'     => '3.48',
              'Hash::Util'            => '0.17',
              'IO'                    => '1.32',
              'List::Util'            => '1.39',
              'List::Util::XS'        => '1.39',
              'Locale::Codes'         => '3.31',
              'Locale::Codes::Constants'=> '3.31',
              'Locale::Codes::Country'=> '3.31',
              'Locale::Codes::Country_Codes'=> '3.31',
              'Locale::Codes::Country_Retired'=> '3.31',
              'Locale::Codes::Currency'=> '3.31',
              'Locale::Codes::Currency_Codes'=> '3.31',
              'Locale::Codes::Currency_Retired'=> '3.31',
              'Locale::Codes::LangExt'=> '3.31',
              'Locale::Codes::LangExt_Codes'=> '3.31',
              'Locale::Codes::LangExt_Retired'=> '3.31',
              'Locale::Codes::LangFam'=> '3.31',
              'Locale::Codes::LangFam_Codes'=> '3.31',
              'Locale::Codes::LangFam_Retired'=> '3.31',
              'Locale::Codes::LangVar'=> '3.31',
              'Locale::Codes::LangVar_Codes'=> '3.31',
              'Locale::Codes::LangVar_Retired'=> '3.31',
              'Locale::Codes::Language'=> '3.31',
              'Locale::Codes::Language_Codes'=> '3.31',
              'Locale::Codes::Language_Retired'=> '3.31',
              'Locale::Codes::Script' => '3.31',
              'Locale::Codes::Script_Codes'=> '3.31',
              'Locale::Codes::Script_Retired'=> '3.31',
              'Locale::Country'       => '3.31',
              'Locale::Currency'      => '3.31',
              'Locale::Language'      => '3.31',
              'Locale::Script'        => '3.31',
              'Math::BigFloat'        => '1.9994',
              'Math::BigInt'          => '1.9995',
              'Math::BigInt::Calc'    => '1.9994',
              'Math::BigInt::CalcEmu' => '1.9994',
              'Math::BigRat'          => '0.2608',
              'Module::CoreList'      => '5.021001_01',
              'Module::CoreList::TieHashDelta'=> '5.021001_01',
              'Module::CoreList::Utils'=> '5.021001_01',
              'Module::Metadata'      => '1.000024',
              'NDBM_File'             => '1.13',
              'Net::Config'           => '1.14',
              'Net::SMTP'             => '2.34',
              'Net::Time'             => '2.11',
              'OS2::Process'          => '1.10',
              'POSIX'                 => '1.40',
              'PerlIO::encoding'      => '0.19',
              'PerlIO::mmap'          => '0.013',
              'PerlIO::scalar'        => '0.19',
              'PerlIO::via'           => '0.15',
              'Pod::Html'             => '1.22',
              'Scalar::Util'          => '1.39',
              'SelfLoader'            => '1.22',
              'Socket'                => '2.014',
              'Storable'              => '2.51',
              'TAP::Base'             => '3.32',
              'TAP::Formatter::Base'  => '3.32',
              'TAP::Formatter::Color' => '3.32',
              'TAP::Formatter::Console'=> '3.32',
              'TAP::Formatter::Console::ParallelSession'=> '3.32',
              'TAP::Formatter::Console::Session'=> '3.32',
              'TAP::Formatter::File'  => '3.32',
              'TAP::Formatter::File::Session'=> '3.32',
              'TAP::Formatter::Session'=> '3.32',
              'TAP::Harness'          => '3.32',
              'TAP::Harness::Env'     => '3.32',
              'TAP::Object'           => '3.32',
              'TAP::Parser'           => '3.32',
              'TAP::Parser::Aggregator'=> '3.32',
              'TAP::Parser::Grammar'  => '3.32',
              'TAP::Parser::Iterator' => '3.32',
              'TAP::Parser::Iterator::Array'=> '3.32',
              'TAP::Parser::Iterator::Process'=> '3.32',
              'TAP::Parser::Iterator::Stream'=> '3.32',
              'TAP::Parser::IteratorFactory'=> '3.32',
              'TAP::Parser::Multiplexer'=> '3.32',
              'TAP::Parser::Result'   => '3.32',
              'TAP::Parser::Result::Bailout'=> '3.32',
              'TAP::Parser::Result::Comment'=> '3.32',
              'TAP::Parser::Result::Plan'=> '3.32',
              'TAP::Parser::Result::Pragma'=> '3.32',
              'TAP::Parser::Result::Test'=> '3.32',
              'TAP::Parser::Result::Unknown'=> '3.32',
              'TAP::Parser::Result::Version'=> '3.32',
              'TAP::Parser::Result::YAML'=> '3.32',
              'TAP::Parser::ResultFactory'=> '3.32',
              'TAP::Parser::Scheduler'=> '3.32',
              'TAP::Parser::Scheduler::Job'=> '3.32',
              'TAP::Parser::Scheduler::Spinner'=> '3.32',
              'TAP::Parser::Source'   => '3.32',
              'TAP::Parser::SourceHandler'=> '3.32',
              'TAP::Parser::SourceHandler::Executable'=> '3.32',
              'TAP::Parser::SourceHandler::File'=> '3.32',
              'TAP::Parser::SourceHandler::Handle'=> '3.32',
              'TAP::Parser::SourceHandler::Perl'=> '3.32',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.32',
              'TAP::Parser::YAMLish::Reader'=> '3.32',
              'TAP::Parser::YAMLish::Writer'=> '3.32',
              'Term::ANSIColor'       => '4.03',
              'Test::Builder'         => '1.001003',
              'Test::Builder::Module' => '1.001003',
              'Test::Builder::Tester' => '1.23_003',
              'Test::Harness'         => '3.32',
              'Test::More'            => '1.001003',
              'Test::Simple'          => '1.001003',
              'Tie::File'             => '1.01',
              'Unicode'               => '7.0.0',
              'Unicode::Collate'      => '1.07',
              'Unicode::Normalize'    => '1.18',
              'Unicode::UCD'          => '0.58',
              'XS::APItest'           => '0.61',
              '_charnames'            => '1.41',
              'autodie'               => '2.25',
              'autodie::Scope::Guard' => '2.25',
              'autodie::Scope::GuardStack'=> '2.25',
              'autodie::ScopeUtil'    => '2.25',
              'autodie::exception'    => '2.25',
              'autodie::exception::system'=> '2.25',
              'autodie::hints'        => '2.25',
              'autodie::skip'         => '2.25',
              'charnames'             => '1.41',
              'locale'                => '1.04',
              'threads'               => '1.94',
              'utf8'                  => '1.14',
              'warnings'              => '1.24',
          },
          removed => {
          }
      },
      5.021002 => {
          delta_from => 5.021001,
          changed => {
              'B'                     => '1.50',
              'Config'                => '5.021002',
              'Cwd'                   => '3.49',
              'Devel::Peek'           => '1.18',
              'ExtUtils::Manifest'    => '1.64',
              'File::Copy'            => '2.30',
              'File::Spec'            => '3.49',
              'File::Spec::Cygwin'    => '3.49',
              'File::Spec::Epoc'      => '3.49',
              'File::Spec::Functions' => '3.49',
              'File::Spec::Mac'       => '3.49',
              'File::Spec::OS2'       => '3.49',
              'File::Spec::Unix'      => '3.49',
              'File::Spec::VMS'       => '3.49',
              'File::Spec::Win32'     => '3.49',
              'Filter::Simple'        => '0.92',
              'Hash::Util'            => '0.18',
              'IO'                    => '1.33',
              'IO::Socket::IP'        => '0.31',
              'IPC::Open3'            => '1.17',
              'Math::BigFloat'        => '1.9996',
              'Math::BigInt'          => '1.9996',
              'Math::BigInt::Calc'    => '1.9996',
              'Math::BigInt::CalcEmu' => '1.9996',
              'Module::CoreList'      => '5.021002',
              'Module::CoreList::TieHashDelta'=> '5.021002',
              'Module::CoreList::Utils'=> '5.021002',
              'POSIX'                 => '1.41',
              'Pod::Usage'            => '1.64',
              'XS::APItest'           => '0.62',
              'arybase'               => '0.08',
              'experimental'          => '0.008',
              'threads'               => '1.95',
              'warnings'              => '1.26',
          },
          removed => {
          }
      },
      5.021003 => {
          delta_from => 5.021002,
          changed => {
              'B::Debug'              => '1.21',
              'CPAN::Meta'            => '2.142060',
              'CPAN::Meta::Converter' => '2.142060',
              'CPAN::Meta::Feature'   => '2.142060',
              'CPAN::Meta::History'   => '2.142060',
              'CPAN::Meta::Merge'     => '2.142060',
              'CPAN::Meta::Prereqs'   => '2.142060',
              'CPAN::Meta::Requirements'=> '2.126',
              'CPAN::Meta::Spec'      => '2.142060',
              'CPAN::Meta::Validator' => '2.142060',
              'Config'                => '5.021003',
              'Config::Perl::V'       => '0.22',
              'ExtUtils::CBuilder'    => '0.280217',
              'ExtUtils::CBuilder::Base'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::android'=> '0.280217',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280217',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280217',
              'ExtUtils::Manifest'    => '1.65',
              'HTTP::Tiny'            => '0.047',
              'IPC::Open3'            => '1.18',
              'Module::CoreList'      => '5.021003',
              'Module::CoreList::TieHashDelta'=> '5.021003',
              'Module::CoreList::Utils'=> '5.021003',
              'Opcode'                => '1.28',
              'POSIX'                 => '1.42',
              'Safe'                  => '2.38',
              'Socket'                => '2.015',
              'Sys::Hostname'         => '1.19',
              'UNIVERSAL'             => '1.12',
              'XS::APItest'           => '0.63',
              'perlfaq'               => '5.0150045',
          },
          removed => {
          }
      },
      5.020001 => {
          delta_from => 5.020000,
          changed => {
              'Config'                => '5.020001',
              'Config::Perl::V'       => '0.22',
              'Cwd'                   => '3.48',
              'Exporter'              => '5.71',
              'Exporter::Heavy'       => '5.71',
              'ExtUtils::CBuilder'    => '0.280217',
              'ExtUtils::CBuilder::Base'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280217',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280217',
              'ExtUtils::CBuilder::Platform::android'=> '0.280217',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280217',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280217',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280217',
              'File::Copy'            => '2.30',
              'File::Spec'            => '3.48',
              'File::Spec::Cygwin'    => '3.48',
              'File::Spec::Epoc'      => '3.48',
              'File::Spec::Functions' => '3.48',
              'File::Spec::Mac'       => '3.48',
              'File::Spec::OS2'       => '3.48',
              'File::Spec::Unix'      => '3.48',
              'File::Spec::VMS'       => '3.48',
              'File::Spec::Win32'     => '3.48',
              'Module::CoreList'      => '5.020001',
              'Module::CoreList::TieHashDelta'=> '5.020001',
              'Module::CoreList::Utils'=> '5.020001',
              'PerlIO::via'           => '0.15',
              'Unicode::UCD'          => '0.58',
              'XS::APItest'           => '0.60_01',
              'utf8'                  => '1.13_01',
              'version'               => '0.9909',
              'version::regex'        => '0.9909',
              'version::vpp'          => '0.9909',
          },
          removed => {
          }
      },
      5.021004 => {
          delta_from => 5.021003,
          changed => {
              'App::Prove'            => '3.33',
              'App::Prove::State'     => '3.33',
              'App::Prove::State::Result'=> '3.33',
              'App::Prove::State::Result::Test'=> '3.33',
              'Archive::Tar'          => '2.02',
              'Archive::Tar::Constant'=> '2.02',
              'Archive::Tar::File'    => '2.02',
              'Attribute::Handlers'   => '0.97',
              'B'                     => '1.51',
              'B::Concise'            => '0.993',
              'B::Deparse'            => '1.28',
              'B::Op_private'         => '5.021004',
              'CPAN::Meta::Requirements'=> '2.128',
              'Config'                => '5.021004',
              'Cwd'                   => '3.50',
              'Data::Dumper'          => '2.154',
              'ExtUtils::CBuilder'    => '0.280219',
              'ExtUtils::CBuilder::Base'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280219',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280219',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280219',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280219',
              'ExtUtils::CBuilder::Platform::android'=> '0.280219',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280219',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280219',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280219',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280219',
              'ExtUtils::Install'     => '2.04',
              'ExtUtils::Installed'   => '2.04',
              'ExtUtils::Liblist::Kid'=> '6.98_01',
              'ExtUtils::Manifest'    => '1.68',
              'ExtUtils::Packlist'    => '2.04',
              'File::Find'            => '1.28',
              'File::Spec'            => '3.50',
              'File::Spec::Cygwin'    => '3.50',
              'File::Spec::Epoc'      => '3.50',
              'File::Spec::Functions' => '3.50',
              'File::Spec::Mac'       => '3.50',
              'File::Spec::OS2'       => '3.50',
              'File::Spec::Unix'      => '3.50',
              'File::Spec::VMS'       => '3.50',
              'File::Spec::Win32'     => '3.50',
              'Getopt::Std'           => '1.11',
              'HTTP::Tiny'            => '0.049',
              'IO'                    => '1.34',
              'IO::Socket::IP'        => '0.32',
              'List::Util'            => '1.41',
              'List::Util::XS'        => '1.41',
              'Locale::Codes'         => '3.32',
              'Locale::Codes::Constants'=> '3.32',
              'Locale::Codes::Country'=> '3.32',
              'Locale::Codes::Country_Codes'=> '3.32',
              'Locale::Codes::Country_Retired'=> '3.32',
              'Locale::Codes::Currency'=> '3.32',
              'Locale::Codes::Currency_Codes'=> '3.32',
              'Locale::Codes::Currency_Retired'=> '3.32',
              'Locale::Codes::LangExt'=> '3.32',
              'Locale::Codes::LangExt_Codes'=> '3.32',
              'Locale::Codes::LangExt_Retired'=> '3.32',
              'Locale::Codes::LangFam'=> '3.32',
              'Locale::Codes::LangFam_Codes'=> '3.32',
              'Locale::Codes::LangFam_Retired'=> '3.32',
              'Locale::Codes::LangVar'=> '3.32',
              'Locale::Codes::LangVar_Codes'=> '3.32',
              'Locale::Codes::LangVar_Retired'=> '3.32',
              'Locale::Codes::Language'=> '3.32',
              'Locale::Codes::Language_Codes'=> '3.32',
              'Locale::Codes::Language_Retired'=> '3.32',
              'Locale::Codes::Script' => '3.32',
              'Locale::Codes::Script_Codes'=> '3.32',
              'Locale::Codes::Script_Retired'=> '3.32',
              'Locale::Country'       => '3.32',
              'Locale::Currency'      => '3.32',
              'Locale::Language'      => '3.32',
              'Locale::Script'        => '3.32',
              'Math::BigFloat'        => '1.9997',
              'Math::BigInt'          => '1.9997',
              'Math::BigInt::Calc'    => '1.9997',
              'Math::BigInt::CalcEmu' => '1.9997',
              'Module::CoreList'      => '5.20140920',
              'Module::CoreList::TieHashDelta'=> '5.20140920',
              'Module::CoreList::Utils'=> '5.20140920',
              'POSIX'                 => '1.43',
              'Pod::Perldoc'          => '3.24',
              'Pod::Perldoc::BaseTo'  => '3.24',
              'Pod::Perldoc::GetOptsOO'=> '3.24',
              'Pod::Perldoc::ToANSI'  => '3.24',
              'Pod::Perldoc::ToChecker'=> '3.24',
              'Pod::Perldoc::ToMan'   => '3.24',
              'Pod::Perldoc::ToNroff' => '3.24',
              'Pod::Perldoc::ToPod'   => '3.24',
              'Pod::Perldoc::ToRtf'   => '3.24',
              'Pod::Perldoc::ToTerm'  => '3.24',
              'Pod::Perldoc::ToText'  => '3.24',
              'Pod::Perldoc::ToTk'    => '3.24',
              'Pod::Perldoc::ToXml'   => '3.24',
              'Scalar::Util'          => '1.41',
              'Sub::Util'             => '1.41',
              'TAP::Base'             => '3.33',
              'TAP::Formatter::Base'  => '3.33',
              'TAP::Formatter::Color' => '3.33',
              'TAP::Formatter::Console'=> '3.33',
              'TAP::Formatter::Console::ParallelSession'=> '3.33',
              'TAP::Formatter::Console::Session'=> '3.33',
              'TAP::Formatter::File'  => '3.33',
              'TAP::Formatter::File::Session'=> '3.33',
              'TAP::Formatter::Session'=> '3.33',
              'TAP::Harness'          => '3.33',
              'TAP::Harness::Env'     => '3.33',
              'TAP::Object'           => '3.33',
              'TAP::Parser'           => '3.33',
              'TAP::Parser::Aggregator'=> '3.33',
              'TAP::Parser::Grammar'  => '3.33',
              'TAP::Parser::Iterator' => '3.33',
              'TAP::Parser::Iterator::Array'=> '3.33',
              'TAP::Parser::Iterator::Process'=> '3.33',
              'TAP::Parser::Iterator::Stream'=> '3.33',
              'TAP::Parser::IteratorFactory'=> '3.33',
              'TAP::Parser::Multiplexer'=> '3.33',
              'TAP::Parser::Result'   => '3.33',
              'TAP::Parser::Result::Bailout'=> '3.33',
              'TAP::Parser::Result::Comment'=> '3.33',
              'TAP::Parser::Result::Plan'=> '3.33',
              'TAP::Parser::Result::Pragma'=> '3.33',
              'TAP::Parser::Result::Test'=> '3.33',
              'TAP::Parser::Result::Unknown'=> '3.33',
              'TAP::Parser::Result::Version'=> '3.33',
              'TAP::Parser::Result::YAML'=> '3.33',
              'TAP::Parser::ResultFactory'=> '3.33',
              'TAP::Parser::Scheduler'=> '3.33',
              'TAP::Parser::Scheduler::Job'=> '3.33',
              'TAP::Parser::Scheduler::Spinner'=> '3.33',
              'TAP::Parser::Source'   => '3.33',
              'TAP::Parser::SourceHandler'=> '3.33',
              'TAP::Parser::SourceHandler::Executable'=> '3.33',
              'TAP::Parser::SourceHandler::File'=> '3.33',
              'TAP::Parser::SourceHandler::Handle'=> '3.33',
              'TAP::Parser::SourceHandler::Perl'=> '3.33',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.33',
              'TAP::Parser::YAMLish::Reader'=> '3.33',
              'TAP::Parser::YAMLish::Writer'=> '3.33',
              'Term::ReadLine'        => '1.15',
              'Test::Builder'         => '1.001006',
              'Test::Builder::Module' => '1.001006',
              'Test::Builder::Tester' => '1.24',
              'Test::Builder::Tester::Color'=> '1.24',
              'Test::Harness'         => '3.33',
              'Test::More'            => '1.001006',
              'Test::Simple'          => '1.001006',
              'Time::Piece'           => '1.29',
              'Time::Seconds'         => '1.29',
              'XS::APItest'           => '0.64',
              '_charnames'            => '1.42',
              'attributes'            => '0.23',
              'bigint'                => '0.37',
              'bignum'                => '0.38',
              'bigrat'                => '0.37',
              'constant'              => '1.32',
              'experimental'          => '0.010',
              'overload'              => '1.23',
              'threads'               => '1.96',
              'version'               => '0.9909',
              'version::regex'        => '0.9909',
              'version::vpp'          => '0.9909',
          },
          removed => {
          }
      },
      5.021005 => {
          delta_from => 5.021004,
          changed => {
              'B'                     => '1.52',
              'B::Concise'            => '0.994',
              'B::Debug'              => '1.22',
              'B::Deparse'            => '1.29',
              'B::Op_private'         => '5.021005',
              'CPAN::Meta'            => '2.142690',
              'CPAN::Meta::Converter' => '2.142690',
              'CPAN::Meta::Feature'   => '2.142690',
              'CPAN::Meta::History'   => '2.142690',
              'CPAN::Meta::Merge'     => '2.142690',
              'CPAN::Meta::Prereqs'   => '2.142690',
              'CPAN::Meta::Spec'      => '2.142690',
              'CPAN::Meta::Validator' => '2.142690',
              'Compress::Raw::Bzip2'  => '2.066',
              'Compress::Raw::Zlib'   => '2.066',
              'Compress::Zlib'        => '2.066',
              'Config'                => '5.021005',
              'Cwd'                   => '3.51',
              'DynaLoader'            => '1.27',
              'Errno'                 => '1.21',
              'ExtUtils::CBuilder'    => '0.280220',
              'ExtUtils::CBuilder::Base'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280220',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280220',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280220',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280220',
              'ExtUtils::CBuilder::Platform::android'=> '0.280220',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280220',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280220',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280220',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280220',
              'ExtUtils::Miniperl'    => '1.03',
              'Fcntl'                 => '1.13',
              'File::Find'            => '1.29',
              'File::Spec'            => '3.51',
              'File::Spec::Cygwin'    => '3.51',
              'File::Spec::Epoc'      => '3.51',
              'File::Spec::Functions' => '3.51',
              'File::Spec::Mac'       => '3.51',
              'File::Spec::OS2'       => '3.51',
              'File::Spec::Unix'      => '3.51',
              'File::Spec::VMS'       => '3.51',
              'File::Spec::Win32'     => '3.51',
              'HTTP::Tiny'            => '0.050',
              'IO::Compress::Adapter::Bzip2'=> '2.066',
              'IO::Compress::Adapter::Deflate'=> '2.066',
              'IO::Compress::Adapter::Identity'=> '2.066',
              'IO::Compress::Base'    => '2.066',
              'IO::Compress::Base::Common'=> '2.066',
              'IO::Compress::Bzip2'   => '2.066',
              'IO::Compress::Deflate' => '2.066',
              'IO::Compress::Gzip'    => '2.066',
              'IO::Compress::Gzip::Constants'=> '2.066',
              'IO::Compress::RawDeflate'=> '2.066',
              'IO::Compress::Zip'     => '2.066',
              'IO::Compress::Zip::Constants'=> '2.066',
              'IO::Compress::Zlib::Constants'=> '2.066',
              'IO::Compress::Zlib::Extra'=> '2.066',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.066',
              'IO::Uncompress::Adapter::Identity'=> '2.066',
              'IO::Uncompress::Adapter::Inflate'=> '2.066',
              'IO::Uncompress::AnyInflate'=> '2.066',
              'IO::Uncompress::AnyUncompress'=> '2.066',
              'IO::Uncompress::Base'  => '2.066',
              'IO::Uncompress::Bunzip2'=> '2.066',
              'IO::Uncompress::Gunzip'=> '2.066',
              'IO::Uncompress::Inflate'=> '2.066',
              'IO::Uncompress::RawInflate'=> '2.066',
              'IO::Uncompress::Unzip' => '2.066',
              'JSON::PP'              => '2.27300',
              'Module::CoreList'      => '5.20141020',
              'Module::CoreList::TieHashDelta'=> '5.20141020',
              'Module::CoreList::Utils'=> '5.20141020',
              'Net::Cmd'              => '3.02',
              'Net::Config'           => '3.02',
              'Net::Domain'           => '3.02',
              'Net::FTP'              => '3.02',
              'Net::FTP::A'           => '3.02',
              'Net::FTP::E'           => '3.02',
              'Net::FTP::I'           => '3.02',
              'Net::FTP::L'           => '3.02',
              'Net::FTP::dataconn'    => '3.02',
              'Net::NNTP'             => '3.02',
              'Net::Netrc'            => '3.02',
              'Net::POP3'             => '3.02',
              'Net::SMTP'             => '3.02',
              'Net::Time'             => '3.02',
              'Opcode'                => '1.29',
              'POSIX'                 => '1.45',
              'Socket'                => '2.016',
              'Test::Builder'         => '1.001008',
              'Test::Builder::Module' => '1.001008',
              'Test::More'            => '1.001008',
              'Test::Simple'          => '1.001008',
              'XS::APItest'           => '0.65',
              'XSLoader'              => '0.18',
              'attributes'            => '0.24',
              'experimental'          => '0.012',
              'feature'               => '1.38',
              'perlfaq'               => '5.0150046',
              're'                    => '0.27',
              'threads::shared'       => '1.47',
              'warnings'              => '1.28',
              'warnings::register'    => '1.04',
          },
          removed => {
          }
      },
      5.021006 => {
          delta_from => 5.021005,
          changed => {
              'App::Prove'            => '3.34',
              'App::Prove::State'     => '3.34',
              'App::Prove::State::Result'=> '3.34',
              'App::Prove::State::Result::Test'=> '3.34',
              'B'                     => '1.53',
              'B::Concise'            => '0.995',
              'B::Deparse'            => '1.30',
              'B::Op_private'         => '5.021006',
              'CPAN::Meta'            => '2.143240',
              'CPAN::Meta::Converter' => '2.143240',
              'CPAN::Meta::Feature'   => '2.143240',
              'CPAN::Meta::History'   => '2.143240',
              'CPAN::Meta::Merge'     => '2.143240',
              'CPAN::Meta::Prereqs'   => '2.143240',
              'CPAN::Meta::Requirements'=> '2.130',
              'CPAN::Meta::Spec'      => '2.143240',
              'CPAN::Meta::Validator' => '2.143240',
              'Config'                => '5.021006',
              'Devel::Peek'           => '1.19',
              'Digest::SHA'           => '5.93',
              'DynaLoader'            => '1.28',
              'Encode'                => '2.64',
              'Exporter'              => '5.72',
              'Exporter::Heavy'       => '5.72',
              'ExtUtils::Command::MM' => '7.02',
              'ExtUtils::Liblist'     => '7.02',
              'ExtUtils::Liblist::Kid'=> '7.02',
              'ExtUtils::MM'          => '7.02',
              'ExtUtils::MM_AIX'      => '7.02',
              'ExtUtils::MM_Any'      => '7.02',
              'ExtUtils::MM_BeOS'     => '7.02',
              'ExtUtils::MM_Cygwin'   => '7.02',
              'ExtUtils::MM_DOS'      => '7.02',
              'ExtUtils::MM_Darwin'   => '7.02',
              'ExtUtils::MM_MacOS'    => '7.02',
              'ExtUtils::MM_NW5'      => '7.02',
              'ExtUtils::MM_OS2'      => '7.02',
              'ExtUtils::MM_QNX'      => '7.02',
              'ExtUtils::MM_UWIN'     => '7.02',
              'ExtUtils::MM_Unix'     => '7.02',
              'ExtUtils::MM_VMS'      => '7.02',
              'ExtUtils::MM_VOS'      => '7.02',
              'ExtUtils::MM_Win32'    => '7.02',
              'ExtUtils::MM_Win95'    => '7.02',
              'ExtUtils::MY'          => '7.02',
              'ExtUtils::MakeMaker'   => '7.02',
              'ExtUtils::MakeMaker::Config'=> '7.02',
              'ExtUtils::MakeMaker::Locale'=> '7.02',
              'ExtUtils::MakeMaker::version'=> '7.02',
              'ExtUtils::MakeMaker::version::regex'=> '7.02',
              'ExtUtils::MakeMaker::version::vpp'=> '7.02',
              'ExtUtils::Manifest'    => '1.69',
              'ExtUtils::Mkbootstrap' => '7.02',
              'ExtUtils::Mksymlists'  => '7.02',
              'ExtUtils::ParseXS'     => '3.26',
              'ExtUtils::ParseXS::Constants'=> '3.26',
              'ExtUtils::ParseXS::CountLines'=> '3.26',
              'ExtUtils::ParseXS::Eval'=> '3.26',
              'ExtUtils::ParseXS::Utilities'=> '3.26',
              'ExtUtils::testlib'     => '7.02',
              'File::Spec::VMS'       => '3.52',
              'HTTP::Tiny'            => '0.051',
              'I18N::Langinfo'        => '0.12',
              'IO::Socket'            => '1.38',
              'Module::CoreList'      => '5.20141120',
              'Module::CoreList::TieHashDelta'=> '5.20141120',
              'Module::CoreList::Utils'=> '5.20141120',
              'POSIX'                 => '1.46',
              'PerlIO::encoding'      => '0.20',
              'PerlIO::scalar'        => '0.20',
              'TAP::Base'             => '3.34',
              'TAP::Formatter::Base'  => '3.34',
              'TAP::Formatter::Color' => '3.34',
              'TAP::Formatter::Console'=> '3.34',
              'TAP::Formatter::Console::ParallelSession'=> '3.34',
              'TAP::Formatter::Console::Session'=> '3.34',
              'TAP::Formatter::File'  => '3.34',
              'TAP::Formatter::File::Session'=> '3.34',
              'TAP::Formatter::Session'=> '3.34',
              'TAP::Harness'          => '3.34',
              'TAP::Harness::Env'     => '3.34',
              'TAP::Object'           => '3.34',
              'TAP::Parser'           => '3.34',
              'TAP::Parser::Aggregator'=> '3.34',
              'TAP::Parser::Grammar'  => '3.34',
              'TAP::Parser::Iterator' => '3.34',
              'TAP::Parser::Iterator::Array'=> '3.34',
              'TAP::Parser::Iterator::Process'=> '3.34',
              'TAP::Parser::Iterator::Stream'=> '3.34',
              'TAP::Parser::IteratorFactory'=> '3.34',
              'TAP::Parser::Multiplexer'=> '3.34',
              'TAP::Parser::Result'   => '3.34',
              'TAP::Parser::Result::Bailout'=> '3.34',
              'TAP::Parser::Result::Comment'=> '3.34',
              'TAP::Parser::Result::Plan'=> '3.34',
              'TAP::Parser::Result::Pragma'=> '3.34',
              'TAP::Parser::Result::Test'=> '3.34',
              'TAP::Parser::Result::Unknown'=> '3.34',
              'TAP::Parser::Result::Version'=> '3.34',
              'TAP::Parser::Result::YAML'=> '3.34',
              'TAP::Parser::ResultFactory'=> '3.34',
              'TAP::Parser::Scheduler'=> '3.34',
              'TAP::Parser::Scheduler::Job'=> '3.34',
              'TAP::Parser::Scheduler::Spinner'=> '3.34',
              'TAP::Parser::Source'   => '3.34',
              'TAP::Parser::SourceHandler'=> '3.34',
              'TAP::Parser::SourceHandler::Executable'=> '3.34',
              'TAP::Parser::SourceHandler::File'=> '3.34',
              'TAP::Parser::SourceHandler::Handle'=> '3.34',
              'TAP::Parser::SourceHandler::Perl'=> '3.34',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.34',
              'TAP::Parser::YAMLish::Reader'=> '3.34',
              'TAP::Parser::YAMLish::Writer'=> '3.34',
              'Test::Builder'         => '1.301001_075',
              'Test::Builder::Module' => '1.301001_075',
              'Test::Builder::Tester' => '1.301001_075',
              'Test::Builder::Tester::Color'=> '1.301001_075',
              'Test::Harness'         => '3.34',
              'Test::More'            => '1.301001_075',
              'Test::More::DeepCheck' => undef,
              'Test::More::DeepCheck::Strict'=> undef,
              'Test::More::DeepCheck::Tolerant'=> undef,
              'Test::More::Tools'     => undef,
              'Test::MostlyLike'      => undef,
              'Test::Simple'          => '1.301001_075',
              'Test::Stream'          => '1.301001_075',
              'Test::Stream::ArrayBase'=> undef,
              'Test::Stream::ArrayBase::Meta'=> undef,
              'Test::Stream::Carp'    => undef,
              'Test::Stream::Context' => undef,
              'Test::Stream::Event'   => undef,
              'Test::Stream::Event::Bail'=> undef,
              'Test::Stream::Event::Child'=> undef,
              'Test::Stream::Event::Diag'=> undef,
              'Test::Stream::Event::Finish'=> undef,
              'Test::Stream::Event::Note'=> undef,
              'Test::Stream::Event::Ok'=> undef,
              'Test::Stream::Event::Plan'=> undef,
              'Test::Stream::Event::Subtest'=> undef,
              'Test::Stream::ExitMagic'=> undef,
              'Test::Stream::ExitMagic::Context'=> undef,
              'Test::Stream::Exporter'=> undef,
              'Test::Stream::Exporter::Meta'=> undef,
              'Test::Stream::IOSets'  => undef,
              'Test::Stream::Meta'    => undef,
              'Test::Stream::PackageUtil'=> undef,
              'Test::Stream::Tester'  => undef,
              'Test::Stream::Tester::Checks'=> undef,
              'Test::Stream::Tester::Checks::Event'=> undef,
              'Test::Stream::Tester::Events'=> undef,
              'Test::Stream::Tester::Events::Event'=> undef,
              'Test::Stream::Tester::Grab'=> undef,
              'Test::Stream::Threads' => undef,
              'Test::Stream::Toolset' => undef,
              'Test::Stream::Util'    => undef,
              'Test::Tester'          => '1.301001_075',
              'Test::Tester::Capture' => undef,
              'Test::use::ok'         => '1.301001_075',
              'Unicode::UCD'          => '0.59',
              'XS::APItest'           => '0.68',
              'XSLoader'              => '0.19',
              'experimental'          => '0.013',
              'locale'                => '1.05',
              'ok'                    => '1.301001_075',
              'overload'              => '1.24',
              're'                    => '0.28',
              'warnings'              => '1.29',
          },
          removed => {
          }
      },
      5.021007 => {
          delta_from => 5.021006,
          changed => {
              'Archive::Tar'          => '2.04',
              'Archive::Tar::Constant'=> '2.04',
              'Archive::Tar::File'    => '2.04',
              'B'                     => '1.54',
              'B::Concise'            => '0.996',
              'B::Deparse'            => '1.31',
              'B::Op_private'         => '5.021007',
              'B::Showlex'            => '1.05',
              'Compress::Raw::Bzip2'  => '2.067',
              'Compress::Raw::Zlib'   => '2.067',
              'Compress::Zlib'        => '2.067',
              'Config'                => '5.021007',
              'Cwd'                   => '3.54',
              'DB_File'               => '1.834',
              'Data::Dumper'          => '2.155',
              'Devel::PPPort'         => '3.25',
              'Devel::Peek'           => '1.20',
              'DynaLoader'            => '1.29',
              'Encode'                => '2.67',
              'Errno'                 => '1.22',
              'ExtUtils::CBuilder'    => '0.280221',
              'ExtUtils::CBuilder::Base'=> '0.280221',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280221',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280221',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280221',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280221',
              'ExtUtils::CBuilder::Platform::android'=> '0.280221',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280221',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280221',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280221',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280221',
              'ExtUtils::Command::MM' => '7.04',
              'ExtUtils::Liblist'     => '7.04',
              'ExtUtils::Liblist::Kid'=> '7.04',
              'ExtUtils::MM'          => '7.04',
              'ExtUtils::MM_AIX'      => '7.04',
              'ExtUtils::MM_Any'      => '7.04',
              'ExtUtils::MM_BeOS'     => '7.04',
              'ExtUtils::MM_Cygwin'   => '7.04',
              'ExtUtils::MM_DOS'      => '7.04',
              'ExtUtils::MM_Darwin'   => '7.04',
              'ExtUtils::MM_MacOS'    => '7.04',
              'ExtUtils::MM_NW5'      => '7.04',
              'ExtUtils::MM_OS2'      => '7.04',
              'ExtUtils::MM_QNX'      => '7.04',
              'ExtUtils::MM_UWIN'     => '7.04',
              'ExtUtils::MM_Unix'     => '7.04',
              'ExtUtils::MM_VMS'      => '7.04',
              'ExtUtils::MM_VOS'      => '7.04',
              'ExtUtils::MM_Win32'    => '7.04',
              'ExtUtils::MM_Win95'    => '7.04',
              'ExtUtils::MY'          => '7.04',
              'ExtUtils::MakeMaker'   => '7.04',
              'ExtUtils::MakeMaker::Config'=> '7.04',
              'ExtUtils::MakeMaker::Locale'=> '7.04',
              'ExtUtils::MakeMaker::version'=> '7.04',
              'ExtUtils::MakeMaker::version::regex'=> '7.04',
              'ExtUtils::MakeMaker::version::vpp'=> '7.04',
              'ExtUtils::Mkbootstrap' => '7.04',
              'ExtUtils::Mksymlists'  => '7.04',
              'ExtUtils::ParseXS'     => '3.27',
              'ExtUtils::ParseXS::Constants'=> '3.27',
              'ExtUtils::ParseXS::CountLines'=> '3.27',
              'ExtUtils::ParseXS::Eval'=> '3.27',
              'ExtUtils::ParseXS::Utilities'=> '3.27',
              'ExtUtils::testlib'     => '7.04',
              'File::Spec'            => '3.53',
              'File::Spec::Cygwin'    => '3.54',
              'File::Spec::Epoc'      => '3.54',
              'File::Spec::Functions' => '3.54',
              'File::Spec::Mac'       => '3.54',
              'File::Spec::OS2'       => '3.54',
              'File::Spec::Unix'      => '3.54',
              'File::Spec::VMS'       => '3.54',
              'File::Spec::Win32'     => '3.54',
              'Filter::Util::Call'    => '1.51',
              'HTTP::Tiny'            => '0.053',
              'IO'                    => '1.35',
              'IO::Compress::Adapter::Bzip2'=> '2.067',
              'IO::Compress::Adapter::Deflate'=> '2.067',
              'IO::Compress::Adapter::Identity'=> '2.067',
              'IO::Compress::Base'    => '2.067',
              'IO::Compress::Base::Common'=> '2.067',
              'IO::Compress::Bzip2'   => '2.067',
              'IO::Compress::Deflate' => '2.067',
              'IO::Compress::Gzip'    => '2.067',
              'IO::Compress::Gzip::Constants'=> '2.067',
              'IO::Compress::RawDeflate'=> '2.067',
              'IO::Compress::Zip'     => '2.067',
              'IO::Compress::Zip::Constants'=> '2.067',
              'IO::Compress::Zlib::Constants'=> '2.067',
              'IO::Compress::Zlib::Extra'=> '2.067',
              'IO::Socket::IP'        => '0.34',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.067',
              'IO::Uncompress::Adapter::Identity'=> '2.067',
              'IO::Uncompress::Adapter::Inflate'=> '2.067',
              'IO::Uncompress::AnyInflate'=> '2.067',
              'IO::Uncompress::AnyUncompress'=> '2.067',
              'IO::Uncompress::Base'  => '2.067',
              'IO::Uncompress::Bunzip2'=> '2.067',
              'IO::Uncompress::Gunzip'=> '2.067',
              'IO::Uncompress::Inflate'=> '2.067',
              'IO::Uncompress::RawInflate'=> '2.067',
              'IO::Uncompress::Unzip' => '2.067',
              'Locale::Codes'         => '3.33',
              'Locale::Codes::Constants'=> '3.33',
              'Locale::Codes::Country'=> '3.33',
              'Locale::Codes::Country_Codes'=> '3.33',
              'Locale::Codes::Country_Retired'=> '3.33',
              'Locale::Codes::Currency'=> '3.33',
              'Locale::Codes::Currency_Codes'=> '3.33',
              'Locale::Codes::Currency_Retired'=> '3.33',
              'Locale::Codes::LangExt'=> '3.33',
              'Locale::Codes::LangExt_Codes'=> '3.33',
              'Locale::Codes::LangExt_Retired'=> '3.33',
              'Locale::Codes::LangFam'=> '3.33',
              'Locale::Codes::LangFam_Codes'=> '3.33',
              'Locale::Codes::LangFam_Retired'=> '3.33',
              'Locale::Codes::LangVar'=> '3.33',
              'Locale::Codes::LangVar_Codes'=> '3.33',
              'Locale::Codes::LangVar_Retired'=> '3.33',
              'Locale::Codes::Language'=> '3.33',
              'Locale::Codes::Language_Codes'=> '3.33',
              'Locale::Codes::Language_Retired'=> '3.33',
              'Locale::Codes::Script' => '3.33',
              'Locale::Codes::Script_Codes'=> '3.33',
              'Locale::Codes::Script_Retired'=> '3.33',
              'Locale::Country'       => '3.33',
              'Locale::Currency'      => '3.33',
              'Locale::Language'      => '3.33',
              'Locale::Maketext'      => '1.26',
              'Locale::Script'        => '3.33',
              'Module::CoreList'      => '5.20141220',
              'Module::CoreList::TieHashDelta'=> '5.20141220',
              'Module::CoreList::Utils'=> '5.20141220',
              'NDBM_File'             => '1.14',
              'Net::Cmd'              => '3.04',
              'Net::Config'           => '3.04',
              'Net::Domain'           => '3.04',
              'Net::FTP'              => '3.04',
              'Net::FTP::A'           => '3.04',
              'Net::FTP::E'           => '3.04',
              'Net::FTP::I'           => '3.04',
              'Net::FTP::L'           => '3.04',
              'Net::FTP::dataconn'    => '3.04',
              'Net::NNTP'             => '3.04',
              'Net::Netrc'            => '3.04',
              'Net::POP3'             => '3.04',
              'Net::SMTP'             => '3.04',
              'Net::Time'             => '3.04',
              'Opcode'                => '1.30',
              'POSIX'                 => '1.48',
              'PerlIO::scalar'        => '0.21',
              'Pod::Escapes'          => '1.07',
              'SDBM_File'             => '1.12',
              'Storable'              => '2.52',
              'Sys::Hostname'         => '1.20',
              'Test::Builder'         => '1.301001_090',
              'Test::Builder::Module' => '1.301001_090',
              'Test::Builder::Tester' => '1.301001_090',
              'Test::Builder::Tester::Color'=> '1.301001_090',
              'Test::CanFork'         => undef,
              'Test::CanThread'       => undef,
              'Test::More'            => '1.301001_090',
              'Test::Simple'          => '1.301001_090',
              'Test::Stream'          => '1.301001_090',
              'Test::Stream::API'     => undef,
              'Test::Stream::ForceExit'=> undef,
              'Test::Stream::Subtest' => undef,
              'Test::Tester'          => '1.301001_090',
              'Test::use::ok'         => '1.301001_090',
              'Unicode::Collate'      => '1.09',
              'Unicode::Collate::CJK::Big5'=> '1.09',
              'Unicode::Collate::CJK::GB2312'=> '1.09',
              'Unicode::Collate::CJK::JISX0208'=> '1.09',
              'Unicode::Collate::CJK::Korean'=> '1.09',
              'Unicode::Collate::CJK::Pinyin'=> '1.09',
              'Unicode::Collate::CJK::Stroke'=> '1.09',
              'Unicode::Collate::CJK::Zhuyin'=> '1.09',
              'Unicode::Collate::Locale'=> '1.09',
              'XS::APItest'           => '0.69',
              'XSLoader'              => '0.20',
              '_charnames'            => '1.43',
              'arybase'               => '0.09',
              'charnames'             => '1.43',
              'feature'               => '1.39',
              'mro'                   => '1.17',
              'ok'                    => '1.301001_090',
              'strict'                => '1.09',
              'threads'               => '1.96_001',
          },
          removed => {
          }
      },
      5.021008 => {
          delta_from => 5.021007,
          changed => {
              'App::Prove'            => '3.35',
              'App::Prove::State'     => '3.35',
              'App::Prove::State::Result'=> '3.35',
              'App::Prove::State::Result::Test'=> '3.35',
              'B'                     => '1.55',
              'B::Deparse'            => '1.32',
              'B::Op_private'         => '5.021008',
              'CPAN::Meta::Requirements'=> '2.131',
              'Compress::Raw::Bzip2'  => '2.068',
              'Compress::Raw::Zlib'   => '2.068',
              'Compress::Zlib'        => '2.068',
              'Config'                => '5.021008',
              'DB_File'               => '1.835',
              'Data::Dumper'          => '2.156',
              'Devel::PPPort'         => '3.28',
              'Devel::Peek'           => '1.21',
              'Digest::MD5'           => '2.54',
              'Digest::SHA'           => '5.95',
              'DynaLoader'            => '1.30',
              'ExtUtils::Command'     => '1.20',
              'ExtUtils::Manifest'    => '1.70',
              'Fatal'                 => '2.26',
              'File::Glob'            => '1.24',
              'Filter::Util::Call'    => '1.54',
              'Getopt::Long'          => '2.43',
              'IO::Compress::Adapter::Bzip2'=> '2.068',
              'IO::Compress::Adapter::Deflate'=> '2.068',
              'IO::Compress::Adapter::Identity'=> '2.068',
              'IO::Compress::Base'    => '2.068',
              'IO::Compress::Base::Common'=> '2.068',
              'IO::Compress::Bzip2'   => '2.068',
              'IO::Compress::Deflate' => '2.068',
              'IO::Compress::Gzip'    => '2.068',
              'IO::Compress::Gzip::Constants'=> '2.068',
              'IO::Compress::RawDeflate'=> '2.068',
              'IO::Compress::Zip'     => '2.068',
              'IO::Compress::Zip::Constants'=> '2.068',
              'IO::Compress::Zlib::Constants'=> '2.068',
              'IO::Compress::Zlib::Extra'=> '2.068',
              'IO::Socket::IP'        => '0.36',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.068',
              'IO::Uncompress::Adapter::Identity'=> '2.068',
              'IO::Uncompress::Adapter::Inflate'=> '2.068',
              'IO::Uncompress::AnyInflate'=> '2.068',
              'IO::Uncompress::AnyUncompress'=> '2.068',
              'IO::Uncompress::Base'  => '2.068',
              'IO::Uncompress::Bunzip2'=> '2.068',
              'IO::Uncompress::Gunzip'=> '2.068',
              'IO::Uncompress::Inflate'=> '2.068',
              'IO::Uncompress::RawInflate'=> '2.068',
              'IO::Uncompress::Unzip' => '2.068',
              'MIME::Base64'          => '3.15',
              'Module::CoreList'      => '5.20150220',
              'Module::CoreList::TieHashDelta'=> '5.20150220',
              'Module::CoreList::Utils'=> '5.20150220',
              'Module::Load::Conditional'=> '0.64',
              'Module::Metadata'      => '1.000026',
              'Net::Cmd'              => '3.05',
              'Net::Config'           => '3.05',
              'Net::Domain'           => '3.05',
              'Net::FTP'              => '3.05',
              'Net::FTP::A'           => '3.05',
              'Net::FTP::E'           => '3.05',
              'Net::FTP::I'           => '3.05',
              'Net::FTP::L'           => '3.05',
              'Net::FTP::dataconn'    => '3.05',
              'Net::NNTP'             => '3.05',
              'Net::Netrc'            => '3.05',
              'Net::POP3'             => '3.05',
              'Net::SMTP'             => '3.05',
              'Net::Time'             => '3.05',
              'Opcode'                => '1.31',
              'POSIX'                 => '1.49',
              'PerlIO::encoding'      => '0.21',
              'Pod::Simple'           => '3.29',
              'Pod::Simple::BlackBox' => '3.29',
              'Pod::Simple::Checker'  => '3.29',
              'Pod::Simple::Debug'    => '3.29',
              'Pod::Simple::DumpAsText'=> '3.29',
              'Pod::Simple::DumpAsXML'=> '3.29',
              'Pod::Simple::HTML'     => '3.29',
              'Pod::Simple::HTMLBatch'=> '3.29',
              'Pod::Simple::LinkSection'=> '3.29',
              'Pod::Simple::Methody'  => '3.29',
              'Pod::Simple::Progress' => '3.29',
              'Pod::Simple::PullParser'=> '3.29',
              'Pod::Simple::PullParserEndToken'=> '3.29',
              'Pod::Simple::PullParserStartToken'=> '3.29',
              'Pod::Simple::PullParserTextToken'=> '3.29',
              'Pod::Simple::PullParserToken'=> '3.29',
              'Pod::Simple::RTF'      => '3.29',
              'Pod::Simple::Search'   => '3.29',
              'Pod::Simple::SimpleTree'=> '3.29',
              'Pod::Simple::Text'     => '3.29',
              'Pod::Simple::TextContent'=> '3.29',
              'Pod::Simple::TiedOutFH'=> '3.29',
              'Pod::Simple::Transcode'=> '3.29',
              'Pod::Simple::TranscodeDumb'=> '3.29',
              'Pod::Simple::TranscodeSmart'=> '3.29',
              'Pod::Simple::XHTML'    => '3.29',
              'Pod::Simple::XMLOutStream'=> '3.29',
              'SDBM_File'             => '1.13',
              'Safe'                  => '2.39',
              'TAP::Base'             => '3.35',
              'TAP::Formatter::Base'  => '3.35',
              'TAP::Formatter::Color' => '3.35',
              'TAP::Formatter::Console'=> '3.35',
              'TAP::Formatter::Console::ParallelSession'=> '3.35',
              'TAP::Formatter::Console::Session'=> '3.35',
              'TAP::Formatter::File'  => '3.35',
              'TAP::Formatter::File::Session'=> '3.35',
              'TAP::Formatter::Session'=> '3.35',
              'TAP::Harness'          => '3.35',
              'TAP::Harness::Env'     => '3.35',
              'TAP::Object'           => '3.35',
              'TAP::Parser'           => '3.35',
              'TAP::Parser::Aggregator'=> '3.35',
              'TAP::Parser::Grammar'  => '3.35',
              'TAP::Parser::Iterator' => '3.35',
              'TAP::Parser::Iterator::Array'=> '3.35',
              'TAP::Parser::Iterator::Process'=> '3.35',
              'TAP::Parser::Iterator::Stream'=> '3.35',
              'TAP::Parser::IteratorFactory'=> '3.35',
              'TAP::Parser::Multiplexer'=> '3.35',
              'TAP::Parser::Result'   => '3.35',
              'TAP::Parser::Result::Bailout'=> '3.35',
              'TAP::Parser::Result::Comment'=> '3.35',
              'TAP::Parser::Result::Plan'=> '3.35',
              'TAP::Parser::Result::Pragma'=> '3.35',
              'TAP::Parser::Result::Test'=> '3.35',
              'TAP::Parser::Result::Unknown'=> '3.35',
              'TAP::Parser::Result::Version'=> '3.35',
              'TAP::Parser::Result::YAML'=> '3.35',
              'TAP::Parser::ResultFactory'=> '3.35',
              'TAP::Parser::Scheduler'=> '3.35',
              'TAP::Parser::Scheduler::Job'=> '3.35',
              'TAP::Parser::Scheduler::Spinner'=> '3.35',
              'TAP::Parser::Source'   => '3.35',
              'TAP::Parser::SourceHandler'=> '3.35',
              'TAP::Parser::SourceHandler::Executable'=> '3.35',
              'TAP::Parser::SourceHandler::File'=> '3.35',
              'TAP::Parser::SourceHandler::Handle'=> '3.35',
              'TAP::Parser::SourceHandler::Perl'=> '3.35',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.35',
              'TAP::Parser::YAMLish::Reader'=> '3.35',
              'TAP::Parser::YAMLish::Writer'=> '3.35',
              'Test::Builder'         => '1.301001_097',
              'Test::Builder::Module' => '1.301001_097',
              'Test::Builder::Tester' => '1.301001_097',
              'Test::Builder::Tester::Color'=> '1.301001_097',
              'Test::Harness'         => '3.35',
              'Test::More'            => '1.301001_097',
              'Test::Simple'          => '1.301001_097',
              'Test::Stream'          => '1.301001_097',
              'Test::Stream::Block'   => undef,
              'Test::Tester'          => '1.301001_097',
              'Test::Tester::CaptureRunner'=> undef,
              'Test::Tester::Delegate'=> undef,
              'Test::use::ok'         => '1.301001_097',
              'Unicode::Collate'      => '1.10',
              'Unicode::Collate::CJK::Big5'=> '1.10',
              'Unicode::Collate::CJK::GB2312'=> '1.10',
              'Unicode::Collate::CJK::JISX0208'=> '1.10',
              'Unicode::Collate::CJK::Korean'=> '1.10',
              'Unicode::Collate::CJK::Pinyin'=> '1.10',
              'Unicode::Collate::CJK::Stroke'=> '1.10',
              'Unicode::Collate::CJK::Zhuyin'=> '1.10',
              'Unicode::Collate::Locale'=> '1.10',
              'VMS::DCLsym'           => '1.06',
              'XS::APItest'           => '0.70',
              'arybase'               => '0.10',
              'attributes'            => '0.25',
              'autodie'               => '2.26',
              'autodie::Scope::Guard' => '2.26',
              'autodie::Scope::GuardStack'=> '2.26',
              'autodie::ScopeUtil'    => '2.26',
              'autodie::exception'    => '2.26',
              'autodie::exception::system'=> '2.26',
              'autodie::hints'        => '2.26',
              'autodie::skip'         => '2.26',
              'ok'                    => '1.301001_097',
              're'                    => '0.30',
              'warnings'              => '1.30',
          },
          removed => {
          }
      },
      5.020002 => {
          delta_from => 5.020001,
          changed => {
              'CPAN::Author'          => '5.5002',
              'CPAN::CacheMgr'        => '5.5002',
              'CPAN::FTP'             => '5.5006',
              'CPAN::HTTP::Client'    => '1.9601',
              'CPAN::HandleConfig'    => '5.5005',
              'CPAN::Index'           => '1.9601',
              'CPAN::LWP::UserAgent'  => '1.9601',
              'CPAN::Mirrors'         => '1.9601',
              'Config'                => '5.020002',
              'Cwd'                   => '3.48_01',
              'Data::Dumper'          => '2.151_01',
              'Errno'                 => '1.20_05',
              'File::Spec'            => '3.48_01',
              'File::Spec::Cygwin'    => '3.48_01',
              'File::Spec::Epoc'      => '3.48_01',
              'File::Spec::Functions' => '3.48_01',
              'File::Spec::Mac'       => '3.48_01',
              'File::Spec::OS2'       => '3.48_01',
              'File::Spec::Unix'      => '3.48_01',
              'File::Spec::VMS'       => '3.48_01',
              'File::Spec::Win32'     => '3.48_01',
              'IO::Socket'            => '1.38',
              'Module::CoreList'      => '5.20150214',
              'Module::CoreList::TieHashDelta'=> '5.20150214',
              'Module::CoreList::Utils'=> '5.20150214',
              'PerlIO::scalar'        => '0.18_01',
              'Pod::PlainText'        => '2.07',
              'Storable'              => '2.49_01',
              'VMS::DCLsym'           => '1.05_01',
              'VMS::Stdio'            => '2.41',
              'attributes'            => '0.23',
              'feature'               => '1.36_01',
          },
          removed => {
          }
      },
      5.021009 => {
          delta_from => 5.021008,
          changed => {
              'B'                     => '1.56',
              'B::Debug'              => '1.23',
              'B::Deparse'            => '1.33',
              'B::Op_private'         => '5.021009',
              'Benchmark'             => '1.20',
              'CPAN::Author'          => '5.5002',
              'CPAN::CacheMgr'        => '5.5002',
              'CPAN::FTP'             => '5.5006',
              'CPAN::HTTP::Client'    => '1.9601',
              'CPAN::HandleConfig'    => '5.5005',
              'CPAN::Index'           => '1.9601',
              'CPAN::LWP::UserAgent'  => '1.9601',
              'CPAN::Meta::Requirements'=> '2.132',
              'CPAN::Mirrors'         => '1.9601',
              'Carp'                  => '1.35',
              'Carp::Heavy'           => '1.35',
              'Config'                => '5.021009',
              'Config::Perl::V'       => '0.23',
              'Data::Dumper'          => '2.157',
              'Devel::Peek'           => '1.22',
              'DynaLoader'            => '1.31',
              'Encode'                => '2.70',
              'Encode::MIME::Header'  => '2.16',
              'Errno'                 => '1.23',
              'ExtUtils::Miniperl'    => '1.04',
              'HTTP::Tiny'            => '0.054',
              'Module::CoreList'      => '5.20150220',
              'Module::CoreList::TieHashDelta'=> '5.20150220',
              'Module::CoreList::Utils'=> '5.20150220',
              'Opcode'                => '1.32',
              'POSIX'                 => '1.51',
              'Perl::OSType'          => '1.008',
              'PerlIO::scalar'        => '0.22',
              'Pod::Find'             => '1.63',
              'Pod::InputObjects'     => '1.63',
              'Pod::ParseUtils'       => '1.63',
              'Pod::Parser'           => '1.63',
              'Pod::Perldoc'          => '3.25',
              'Pod::Perldoc::BaseTo'  => '3.25',
              'Pod::Perldoc::GetOptsOO'=> '3.25',
              'Pod::Perldoc::ToANSI'  => '3.25',
              'Pod::Perldoc::ToChecker'=> '3.25',
              'Pod::Perldoc::ToMan'   => '3.25',
              'Pod::Perldoc::ToNroff' => '3.25',
              'Pod::Perldoc::ToPod'   => '3.25',
              'Pod::Perldoc::ToRtf'   => '3.25',
              'Pod::Perldoc::ToTerm'  => '3.25',
              'Pod::Perldoc::ToText'  => '3.25',
              'Pod::Perldoc::ToTk'    => '3.25',
              'Pod::Perldoc::ToXml'   => '3.25',
              'Pod::PlainText'        => '2.07',
              'Pod::Select'           => '1.63',
              'Socket'                => '2.018',
              'Storable'              => '2.53',
              'Test::Builder'         => '1.301001_098',
              'Test::Builder::Module' => '1.301001_098',
              'Test::Builder::Tester' => '1.301001_098',
              'Test::Builder::Tester::Color'=> '1.301001_098',
              'Test::More'            => '1.301001_098',
              'Test::Simple'          => '1.301001_098',
              'Test::Stream'          => '1.301001_098',
              'Test::Tester'          => '1.301001_098',
              'Test::use::ok'         => '1.301001_098',
              'Unicode::Collate'      => '1.11',
              'Unicode::Collate::CJK::Big5'=> '1.11',
              'Unicode::Collate::CJK::GB2312'=> '1.11',
              'Unicode::Collate::CJK::JISX0208'=> '1.11',
              'Unicode::Collate::CJK::Korean'=> '1.11',
              'Unicode::Collate::CJK::Pinyin'=> '1.11',
              'Unicode::Collate::CJK::Stroke'=> '1.11',
              'Unicode::Collate::CJK::Zhuyin'=> '1.11',
              'Unicode::Collate::Locale'=> '1.11',
              'Unicode::UCD'          => '0.61',
              'VMS::Stdio'            => '2.41',
              'Win32'                 => '0.51',
              'Win32API::File'        => '0.1202',
              'attributes'            => '0.26',
              'bigint'                => '0.39',
              'bignum'                => '0.39',
              'bigrat'                => '0.39',
              'constant'              => '1.33',
              'encoding'              => '2.13',
              'feature'               => '1.40',
              'ok'                    => '1.301001_098',
              'overload'              => '1.25',
              'perlfaq'               => '5.021009',
              're'                    => '0.31',
              'threads::shared'       => '1.48',
              'warnings'              => '1.31',
          },
          removed => {
          }
      },
      5.021010 => {
          delta_from => 5.021009,
          changed => {
              'App::Cpan'             => '1.63',
              'B'                     => '1.57',
              'B::Deparse'            => '1.34',
              'B::Op_private'         => '5.021010',
              'Benchmark'             => '1.2',
              'CPAN'                  => '2.10',
              'CPAN::Distribution'    => '2.04',
              'CPAN::FirstTime'       => '5.5307',
              'CPAN::HTTP::Credentials'=> '1.9601',
              'CPAN::HandleConfig'    => '5.5006',
              'CPAN::Meta'            => '2.150001',
              'CPAN::Meta::Converter' => '2.150001',
              'CPAN::Meta::Feature'   => '2.150001',
              'CPAN::Meta::History'   => '2.150001',
              'CPAN::Meta::Merge'     => '2.150001',
              'CPAN::Meta::Prereqs'   => '2.150001',
              'CPAN::Meta::Spec'      => '2.150001',
              'CPAN::Meta::Validator' => '2.150001',
              'CPAN::Module'          => '5.5002',
              'CPAN::Plugin'          => '0.95',
              'CPAN::Plugin::Specfile'=> '0.01',
              'CPAN::Shell'           => '5.5005',
              'Carp'                  => '1.36',
              'Carp::Heavy'           => '1.36',
              'Config'                => '5.02101',
              'Cwd'                   => '3.55',
              'DB'                    => '1.08',
              'Data::Dumper'          => '2.158',
              'Devel::PPPort'         => '3.31',
              'DynaLoader'            => '1.32',
              'Encode'                => '2.72',
              'Encode::Alias'         => '2.19',
              'File::Spec'            => '3.55',
              'File::Spec::Cygwin'    => '3.55',
              'File::Spec::Epoc'      => '3.55',
              'File::Spec::Functions' => '3.55',
              'File::Spec::Mac'       => '3.55',
              'File::Spec::OS2'       => '3.55',
              'File::Spec::Unix'      => '3.55',
              'File::Spec::VMS'       => '3.55',
              'File::Spec::Win32'     => '3.55',
              'Getopt::Long'          => '2.45',
              'Locale::Codes'         => '3.34',
              'Locale::Codes::Constants'=> '3.34',
              'Locale::Codes::Country'=> '3.34',
              'Locale::Codes::Country_Codes'=> '3.34',
              'Locale::Codes::Country_Retired'=> '3.34',
              'Locale::Codes::Currency'=> '3.34',
              'Locale::Codes::Currency_Codes'=> '3.34',
              'Locale::Codes::Currency_Retired'=> '3.34',
              'Locale::Codes::LangExt'=> '3.34',
              'Locale::Codes::LangExt_Codes'=> '3.34',
              'Locale::Codes::LangExt_Retired'=> '3.34',
              'Locale::Codes::LangFam'=> '3.34',
              'Locale::Codes::LangFam_Codes'=> '3.34',
              'Locale::Codes::LangFam_Retired'=> '3.34',
              'Locale::Codes::LangVar'=> '3.34',
              'Locale::Codes::LangVar_Codes'=> '3.34',
              'Locale::Codes::LangVar_Retired'=> '3.34',
              'Locale::Codes::Language'=> '3.34',
              'Locale::Codes::Language_Codes'=> '3.34',
              'Locale::Codes::Language_Retired'=> '3.34',
              'Locale::Codes::Script' => '3.34',
              'Locale::Codes::Script_Codes'=> '3.34',
              'Locale::Codes::Script_Retired'=> '3.34',
              'Locale::Country'       => '3.34',
              'Locale::Currency'      => '3.34',
              'Locale::Language'      => '3.34',
              'Locale::Script'        => '3.34',
              'Module::CoreList'      => '5.20150320',
              'Module::CoreList::TieHashDelta'=> '5.20150320',
              'Module::CoreList::Utils'=> '5.20150320',
              'POSIX'                 => '1.52',
              'Pod::Functions'        => '1.09',
              'Pod::Functions::Functions'=> '1.09',
              'Term::Complete'        => '1.403',
              'Test::Builder'         => '1.001014',
              'Test::Builder::IO::Scalar'=> '2.113',
              'Test::Builder::Module' => '1.001014',
              'Test::Builder::Tester' => '1.28',
              'Test::Builder::Tester::Color'=> '1.290001',
              'Test::More'            => '1.001014',
              'Test::Simple'          => '1.001014',
              'Test::Tester'          => '0.114',
              'Test::use::ok'         => '0.16',
              'Text::Balanced'        => '2.03',
              'Text::ParseWords'      => '3.30',
              'Unicode::Collate'      => '1.12',
              'Unicode::Collate::CJK::Big5'=> '1.12',
              'Unicode::Collate::CJK::GB2312'=> '1.12',
              'Unicode::Collate::CJK::JISX0208'=> '1.12',
              'Unicode::Collate::CJK::Korean'=> '1.12',
              'Unicode::Collate::CJK::Pinyin'=> '1.12',
              'Unicode::Collate::CJK::Stroke'=> '1.12',
              'Unicode::Collate::CJK::Zhuyin'=> '1.12',
              'Unicode::Collate::Locale'=> '1.12',
              'XS::APItest'           => '0.71',
              'encoding'              => '2.14',
              'locale'                => '1.06',
              'meta_notation'         => undef,
              'ok'                    => '0.16',
              'parent'                => '0.232',
              're'                    => '0.32',
              'sigtrap'               => '1.08',
              'threads'               => '2.01',
              'utf8'                  => '1.15',
          },
          removed => {
              'Test::CanFork'         => 1,
              'Test::CanThread'       => 1,
              'Test::More::DeepCheck' => 1,
              'Test::More::DeepCheck::Strict'=> 1,
              'Test::More::DeepCheck::Tolerant'=> 1,
              'Test::More::Tools'     => 1,
              'Test::MostlyLike'      => 1,
              'Test::Stream'          => 1,
              'Test::Stream::API'     => 1,
              'Test::Stream::ArrayBase'=> 1,
              'Test::Stream::ArrayBase::Meta'=> 1,
              'Test::Stream::Block'   => 1,
              'Test::Stream::Carp'    => 1,
              'Test::Stream::Context' => 1,
              'Test::Stream::Event'   => 1,
              'Test::Stream::Event::Bail'=> 1,
              'Test::Stream::Event::Child'=> 1,
              'Test::Stream::Event::Diag'=> 1,
              'Test::Stream::Event::Finish'=> 1,
              'Test::Stream::Event::Note'=> 1,
              'Test::Stream::Event::Ok'=> 1,
              'Test::Stream::Event::Plan'=> 1,
              'Test::Stream::Event::Subtest'=> 1,
              'Test::Stream::ExitMagic'=> 1,
              'Test::Stream::ExitMagic::Context'=> 1,
              'Test::Stream::Exporter'=> 1,
              'Test::Stream::Exporter::Meta'=> 1,
              'Test::Stream::ForceExit'=> 1,
              'Test::Stream::IOSets'  => 1,
              'Test::Stream::Meta'    => 1,
              'Test::Stream::PackageUtil'=> 1,
              'Test::Stream::Subtest' => 1,
              'Test::Stream::Tester'  => 1,
              'Test::Stream::Tester::Checks'=> 1,
              'Test::Stream::Tester::Checks::Event'=> 1,
              'Test::Stream::Tester::Events'=> 1,
              'Test::Stream::Tester::Events::Event'=> 1,
              'Test::Stream::Tester::Grab'=> 1,
              'Test::Stream::Threads' => 1,
              'Test::Stream::Toolset' => 1,
              'Test::Stream::Util'    => 1,
          }
      },
      5.021011 => {
          delta_from => 5.021010,
          changed => {
              'B'                     => '1.58',
              'B::Deparse'            => '1.35',
              'B::Op_private'         => '5.021011',
              'CPAN'                  => '2.11',
              'Config'                => '5.021011',
              'Config::Perl::V'       => '0.24',
              'Cwd'                   => '3.56',
              'ExtUtils::Miniperl'    => '1.05',
              'ExtUtils::ParseXS'     => '3.28',
              'ExtUtils::ParseXS::Constants'=> '3.28',
              'ExtUtils::ParseXS::CountLines'=> '3.28',
              'ExtUtils::ParseXS::Eval'=> '3.28',
              'ExtUtils::ParseXS::Utilities'=> '3.28',
              'ExtUtils::Typemaps'    => '3.28',
              'ExtUtils::Typemaps::Cmd'=> '3.28',
              'ExtUtils::Typemaps::InputMap'=> '3.28',
              'ExtUtils::Typemaps::OutputMap'=> '3.28',
              'ExtUtils::Typemaps::Type'=> '3.28',
              'File::Spec'            => '3.56',
              'File::Spec::Cygwin'    => '3.56',
              'File::Spec::Epoc'      => '3.56',
              'File::Spec::Functions' => '3.56',
              'File::Spec::Mac'       => '3.56',
              'File::Spec::OS2'       => '3.56',
              'File::Spec::Unix'      => '3.56',
              'File::Spec::VMS'       => '3.56',
              'File::Spec::Win32'     => '3.56',
              'IO::Socket::IP'        => '0.37',
              'Module::CoreList'      => '5.20150420',
              'Module::CoreList::TieHashDelta'=> '5.20150420',
              'Module::CoreList::Utils'=> '5.20150420',
              'PerlIO::mmap'          => '0.014',
              'XS::APItest'           => '0.72',
              'attributes'            => '0.27',
              'if'                    => '0.0604',
              'utf8'                  => '1.16',
              'warnings'              => '1.32',
          },
          removed => {
          }
      },
      5.022000 => {
          delta_from => 5.021011,
          changed => {
              'B::Op_private'         => '5.022000',
              'Config'                => '5.022',
              'ExtUtils::Command::MM' => '7.04_01',
              'ExtUtils::Liblist'     => '7.04_01',
              'ExtUtils::Liblist::Kid'=> '7.04_01',
              'ExtUtils::MM'          => '7.04_01',
              'ExtUtils::MM_AIX'      => '7.04_01',
              'ExtUtils::MM_Any'      => '7.04_01',
              'ExtUtils::MM_BeOS'     => '7.04_01',
              'ExtUtils::MM_Cygwin'   => '7.04_01',
              'ExtUtils::MM_DOS'      => '7.04_01',
              'ExtUtils::MM_Darwin'   => '7.04_01',
              'ExtUtils::MM_MacOS'    => '7.04_01',
              'ExtUtils::MM_NW5'      => '7.04_01',
              'ExtUtils::MM_OS2'      => '7.04_01',
              'ExtUtils::MM_QNX'      => '7.04_01',
              'ExtUtils::MM_UWIN'     => '7.04_01',
              'ExtUtils::MM_Unix'     => '7.04_01',
              'ExtUtils::MM_VMS'      => '7.04_01',
              'ExtUtils::MM_VOS'      => '7.04_01',
              'ExtUtils::MM_Win32'    => '7.04_01',
              'ExtUtils::MM_Win95'    => '7.04_01',
              'ExtUtils::MY'          => '7.04_01',
              'ExtUtils::MakeMaker'   => '7.04_01',
              'ExtUtils::MakeMaker::Config'=> '7.04_01',
              'ExtUtils::MakeMaker::Locale'=> '7.04_01',
              'ExtUtils::MakeMaker::version'=> '7.04_01',
              'ExtUtils::MakeMaker::version::regex'=> '7.04_01',
              'ExtUtils::MakeMaker::version::vpp'=> '7.04_01',
              'ExtUtils::Mkbootstrap' => '7.04_01',
              'ExtUtils::Mksymlists'  => '7.04_01',
              'ExtUtils::testlib'     => '7.04_01',
              'Module::CoreList'      => '5.20150520',
              'Module::CoreList::TieHashDelta'=> '5.20150520',
              'Module::CoreList::Utils'=> '5.20150520',
              'POSIX'                 => '1.53',
              'PerlIO::via::QuotedPrint'=> '0.08',
              'overload'              => '1.26',
              'utf8'                  => '1.17',
          },
          removed => {
          }
      },
      5.023000 => {
          delta_from => 5.022000,
          changed => {
              'B::Op_private'         => '5.023000',
              'CPAN::Meta'            => '2.150005',
              'CPAN::Meta::Converter' => '2.150005',
              'CPAN::Meta::Feature'   => '2.150005',
              'CPAN::Meta::History'   => '2.150005',
              'CPAN::Meta::Merge'     => '2.150005',
              'CPAN::Meta::Prereqs'   => '2.150005',
              'CPAN::Meta::Requirements'=> '2.133',
              'CPAN::Meta::Spec'      => '2.150005',
              'CPAN::Meta::Validator' => '2.150005',
              'CPAN::Meta::YAML'      => '0.016',
              'Config'                => '5.023',
              'Encode'                => '2.73',
              'ExtUtils::CBuilder'    => '0.280223',
              'ExtUtils::CBuilder::Base'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280223',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280223',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280223',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280223',
              'ExtUtils::CBuilder::Platform::android'=> '0.280223',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280223',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280223',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280223',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280223',
              'Fatal'                 => '2.27',
              'Getopt::Long'          => '2.46',
              'HTTP::Tiny'            => '0.056',
              'List::Util'            => '1.42_01',
              'List::Util::XS'        => '1.42_01',
              'Locale::Codes'         => '3.35',
              'Locale::Codes::Constants'=> '3.35',
              'Locale::Codes::Country'=> '3.35',
              'Locale::Codes::Country_Codes'=> '3.35',
              'Locale::Codes::Country_Retired'=> '3.35',
              'Locale::Codes::Currency'=> '3.35',
              'Locale::Codes::Currency_Codes'=> '3.35',
              'Locale::Codes::Currency_Retired'=> '3.35',
              'Locale::Codes::LangExt'=> '3.35',
              'Locale::Codes::LangExt_Codes'=> '3.35',
              'Locale::Codes::LangExt_Retired'=> '3.35',
              'Locale::Codes::LangFam'=> '3.35',
              'Locale::Codes::LangFam_Codes'=> '3.35',
              'Locale::Codes::LangFam_Retired'=> '3.35',
              'Locale::Codes::LangVar'=> '3.35',
              'Locale::Codes::LangVar_Codes'=> '3.35',
              'Locale::Codes::LangVar_Retired'=> '3.35',
              'Locale::Codes::Language'=> '3.35',
              'Locale::Codes::Language_Codes'=> '3.35',
              'Locale::Codes::Language_Retired'=> '3.35',
              'Locale::Codes::Script' => '3.35',
              'Locale::Codes::Script_Codes'=> '3.35',
              'Locale::Codes::Script_Retired'=> '3.35',
              'Locale::Country'       => '3.35',
              'Locale::Currency'      => '3.35',
              'Locale::Language'      => '3.35',
              'Locale::Script'        => '3.35',
              'Math::BigFloat'        => '1.999701',
              'Math::BigInt'          => '1.999701',
              'Math::BigInt::Calc'    => '1.999701',
              'Math::BigInt::CalcEmu' => '1.999701',
              'Math::BigRat'          => '0.260801',
              'Module::CoreList'      => '5.20150620',
              'Module::CoreList::TieHashDelta'=> '5.20150620',
              'Module::CoreList::Utils'=> '5.20150620',
              'Module::Metadata'      => '1.000027',
              'Net::Cmd'              => '3.06',
              'Net::Config'           => '3.06',
              'Net::Domain'           => '3.06',
              'Net::FTP'              => '3.06',
              'Net::FTP::A'           => '3.06',
              'Net::FTP::E'           => '3.06',
              'Net::FTP::I'           => '3.06',
              'Net::FTP::L'           => '3.06',
              'Net::FTP::dataconn'    => '3.06',
              'Net::NNTP'             => '3.06',
              'Net::Netrc'            => '3.06',
              'Net::POP3'             => '3.06',
              'Net::SMTP'             => '3.06',
              'Net::Time'             => '3.06',
              'POSIX'                 => '1.54',
              'Parse::CPAN::Meta'     => '1.4417',
              'Pod::Simple'           => '3.30',
              'Pod::Simple::BlackBox' => '3.30',
              'Pod::Simple::Checker'  => '3.30',
              'Pod::Simple::Debug'    => '3.30',
              'Pod::Simple::DumpAsText'=> '3.30',
              'Pod::Simple::DumpAsXML'=> '3.30',
              'Pod::Simple::HTML'     => '3.30',
              'Pod::Simple::HTMLBatch'=> '3.30',
              'Pod::Simple::LinkSection'=> '3.30',
              'Pod::Simple::Methody'  => '3.30',
              'Pod::Simple::Progress' => '3.30',
              'Pod::Simple::PullParser'=> '3.30',
              'Pod::Simple::PullParserEndToken'=> '3.30',
              'Pod::Simple::PullParserStartToken'=> '3.30',
              'Pod::Simple::PullParserTextToken'=> '3.30',
              'Pod::Simple::PullParserToken'=> '3.30',
              'Pod::Simple::RTF'      => '3.30',
              'Pod::Simple::Search'   => '3.30',
              'Pod::Simple::SimpleTree'=> '3.30',
              'Pod::Simple::Text'     => '3.30',
              'Pod::Simple::TextContent'=> '3.30',
              'Pod::Simple::TiedOutFH'=> '3.30',
              'Pod::Simple::Transcode'=> '3.30',
              'Pod::Simple::TranscodeDumb'=> '3.30',
              'Pod::Simple::TranscodeSmart'=> '3.30',
              'Pod::Simple::XHTML'    => '3.30',
              'Pod::Simple::XMLOutStream'=> '3.30',
              'Pod::Usage'            => '1.67',
              'Scalar::Util'          => '1.42_01',
              'Socket'                => '2.019',
              'Sub::Util'             => '1.42_01',
              'Time::Piece'           => '1.30',
              'Time::Seconds'         => '1.30',
              'UNIVERSAL'             => '1.13',
              'Unicode'               => '8.0.0',
              'XS::APItest'           => '0.73',
              'autodie'               => '2.27',
              'autodie::Scope::Guard' => '2.27',
              'autodie::Scope::GuardStack'=> '2.27',
              'autodie::Util'         => '2.27',
              'autodie::exception'    => '2.27',
              'autodie::exception::system'=> '2.27',
              'autodie::hints'        => '2.27',
              'autodie::skip'         => '2.27',
              'encoding'              => '2.15',
              'feature'               => '1.41',
              'parent'                => '0.234',
              'threads'               => '2.02',
          },
          removed => {
          }
      },
      5.023001 => {
          delta_from => 5.023000,
          changed => {
              'B::Op_private'         => '5.023001',
              'Config'                => '5.023001',
              'DynaLoader'            => '1.33',
              'Encode'                => '2.75',
              'Encode::MIME::Header'  => '2.17',
              'Encode::Unicode'       => '2.13',
              'Fatal'                 => '2.29',
              'File::Path'            => '2.11',
              'Getopt::Long'          => '2.47',
              'I18N::Langinfo'        => '0.13',
              'IPC::Open3'            => '1.19',
              'Module::CoreList'      => '5.20150720',
              'Module::CoreList::TieHashDelta'=> '5.20150720',
              'Module::CoreList::Utils'=> '5.20150720',
              'Net::Cmd'              => '3.07',
              'Net::Config'           => '3.07',
              'Net::Domain'           => '3.07',
              'Net::FTP'              => '3.07',
              'Net::FTP::A'           => '3.07',
              'Net::FTP::E'           => '3.07',
              'Net::FTP::I'           => '3.07',
              'Net::FTP::L'           => '3.07',
              'Net::FTP::dataconn'    => '3.07',
              'Net::NNTP'             => '3.07',
              'Net::Netrc'            => '3.07',
              'Net::POP3'             => '3.07',
              'Net::SMTP'             => '3.07',
              'Net::Time'             => '3.07',
              'Opcode'                => '1.33',
              'POSIX'                 => '1.55',
              'PerlIO::scalar'        => '0.23',
              'Socket'                => '2.020',
              'Storable'              => '2.54',
              'Unicode::Collate'      => '1.14',
              'Unicode::Collate::CJK::Big5'=> '1.14',
              'Unicode::Collate::CJK::GB2312'=> '1.14',
              'Unicode::Collate::CJK::JISX0208'=> '1.14',
              'Unicode::Collate::CJK::Korean'=> '1.14',
              'Unicode::Collate::CJK::Pinyin'=> '1.14',
              'Unicode::Collate::CJK::Stroke'=> '1.14',
              'Unicode::Collate::CJK::Zhuyin'=> '1.14',
              'Unicode::Collate::Locale'=> '1.14',
              'Unicode::Normalize'    => '1.19',
              'XS::APItest'           => '0.74',
              'XS::Typemap'           => '0.14',
              'autodie'               => '2.29',
              'autodie::Scope::Guard' => '2.29',
              'autodie::Scope::GuardStack'=> '2.29',
              'autodie::Util'         => '2.29',
              'autodie::exception'    => '2.29',
              'autodie::exception::system'=> '2.29',
              'autodie::hints'        => '2.29',
              'autodie::skip'         => '2.29',
              'encoding'              => '2.16',
              'feature'               => '1.42',
              'warnings'              => '1.33',
          },
          removed => {
              'autodie::ScopeUtil'    => 1,
          }
      },
      5.023002 => {
          delta_from => 5.023001,
          changed => {
              'Attribute::Handlers'   => '0.99',
              'B::Op_private'         => '5.023002',
              'CPAN::Meta::YAML'      => '0.017',
              'Config'                => '5.023002',
              'Cwd'                   => '3.57',
              'Encode'                => '2.76',
              'ExtUtils::ParseXS'     => '3.29',
              'ExtUtils::ParseXS::Constants'=> '3.29',
              'ExtUtils::ParseXS::CountLines'=> '3.29',
              'ExtUtils::ParseXS::Eval'=> '3.29',
              'ExtUtils::ParseXS::Utilities'=> '3.29',
              'ExtUtils::Typemaps'    => '3.29',
              'File::Find'            => '1.30',
              'File::Spec'            => '3.57',
              'File::Spec::Cygwin'    => '3.57',
              'File::Spec::Epoc'      => '3.57',
              'File::Spec::Functions' => '3.57',
              'File::Spec::Mac'       => '3.57',
              'File::Spec::OS2'       => '3.57',
              'File::Spec::Unix'      => '3.57',
              'File::Spec::VMS'       => '3.57',
              'File::Spec::Win32'     => '3.57',
              'Filter::Util::Call'    => '1.55',
              'Hash::Util'            => '0.19',
              'Module::CoreList'      => '5.20150820',
              'Module::CoreList::TieHashDelta'=> '5.20150820',
              'Module::CoreList::Utils'=> '5.20150820',
              'POSIX'                 => '1.56',
              'Term::Cap'             => '1.17',
              'Unicode::UCD'          => '0.62',
              'perlfaq'               => '5.021010',
          },
          removed => {
          }
      },
      5.020003 => {
          delta_from => 5.020002,
          changed => {
              'Config'                => '5.020003',
              'Errno'                 => '1.20_06',
              'Module::CoreList'      => '5.20150912',
              'Module::CoreList::TieHashDelta'=> '5.20150912',
              'Module::CoreList::Utils'=> '5.20150912',
          },
          removed => {
          }
      },
      5.023003 => {
          delta_from => 5.023002,
          changed => {
              'Amiga::ARexx'          => '0.02',
              'Amiga::Exec'           => '0.01',
              'B'                     => '1.59',
              'B::Op_private'         => '5.023003',
              'Carp'                  => '1.37',
              'Carp::Heavy'           => '1.37',
              'Compress::Raw::Zlib'   => '2.068_01',
              'Config'                => '5.023003',
              'Cwd'                   => '3.58',
              'DynaLoader'            => '1.34',
              'Encode'                => '2.77',
              'Encode::Unicode'       => '2.14',
              'English'               => '1.10',
              'Errno'                 => '1.24',
              'ExtUtils::Command'     => '7.10',
              'ExtUtils::Command::MM' => '7.10',
              'ExtUtils::Liblist'     => '7.10',
              'ExtUtils::Liblist::Kid'=> '7.10',
              'ExtUtils::MM'          => '7.10',
              'ExtUtils::MM_AIX'      => '7.10',
              'ExtUtils::MM_Any'      => '7.10',
              'ExtUtils::MM_BeOS'     => '7.10',
              'ExtUtils::MM_Cygwin'   => '7.10',
              'ExtUtils::MM_DOS'      => '7.10',
              'ExtUtils::MM_Darwin'   => '7.10',
              'ExtUtils::MM_MacOS'    => '7.10',
              'ExtUtils::MM_NW5'      => '7.10',
              'ExtUtils::MM_OS2'      => '7.10',
              'ExtUtils::MM_QNX'      => '7.10',
              'ExtUtils::MM_UWIN'     => '7.10',
              'ExtUtils::MM_Unix'     => '7.10',
              'ExtUtils::MM_VMS'      => '7.10',
              'ExtUtils::MM_VOS'      => '7.10',
              'ExtUtils::MM_Win32'    => '7.10',
              'ExtUtils::MM_Win95'    => '7.10',
              'ExtUtils::MY'          => '7.10',
              'ExtUtils::MakeMaker'   => '7.10',
              'ExtUtils::MakeMaker::Config'=> '7.10',
              'ExtUtils::MakeMaker::Locale'=> '7.10',
              'ExtUtils::MakeMaker::version'=> '7.10',
              'ExtUtils::MakeMaker::version::regex'=> '7.10',
              'ExtUtils::MakeMaker::version::vpp'=> '7.10',
              'ExtUtils::Mkbootstrap' => '7.10',
              'ExtUtils::Mksymlists'  => '7.10',
              'ExtUtils::ParseXS'     => '3.30',
              'ExtUtils::ParseXS::Constants'=> '3.30',
              'ExtUtils::ParseXS::CountLines'=> '3.30',
              'ExtUtils::ParseXS::Eval'=> '3.30',
              'ExtUtils::ParseXS::Utilities'=> '3.30',
              'ExtUtils::Typemaps'    => '3.30',
              'ExtUtils::Typemaps::Cmd'=> '3.30',
              'ExtUtils::Typemaps::InputMap'=> '3.30',
              'ExtUtils::Typemaps::OutputMap'=> '3.30',
              'ExtUtils::Typemaps::Type'=> '3.30',
              'ExtUtils::testlib'     => '7.10',
              'File::Find'            => '1.31',
              'File::Glob'            => '1.25',
              'File::Spec'            => '3.58',
              'File::Spec::AmigaOS'   => '3.58',
              'File::Spec::Cygwin'    => '3.58',
              'File::Spec::Epoc'      => '3.58',
              'File::Spec::Functions' => '3.58',
              'File::Spec::Mac'       => '3.58',
              'File::Spec::OS2'       => '3.58',
              'File::Spec::Unix'      => '3.58',
              'File::Spec::VMS'       => '3.58',
              'File::Spec::Win32'     => '3.58',
              'Hash::Util::FieldHash' => '1.17',
              'Locale::Codes'         => '3.36',
              'Locale::Codes::Constants'=> '3.36',
              'Locale::Codes::Country'=> '3.36',
              'Locale::Codes::Country_Codes'=> '3.36',
              'Locale::Codes::Country_Retired'=> '3.36',
              'Locale::Codes::Currency'=> '3.36',
              'Locale::Codes::Currency_Codes'=> '3.36',
              'Locale::Codes::Currency_Retired'=> '3.36',
              'Locale::Codes::LangExt'=> '3.36',
              'Locale::Codes::LangExt_Codes'=> '3.36',
              'Locale::Codes::LangExt_Retired'=> '3.36',
              'Locale::Codes::LangFam'=> '3.36',
              'Locale::Codes::LangFam_Codes'=> '3.36',
              'Locale::Codes::LangFam_Retired'=> '3.36',
              'Locale::Codes::LangVar'=> '3.36',
              'Locale::Codes::LangVar_Codes'=> '3.36',
              'Locale::Codes::LangVar_Retired'=> '3.36',
              'Locale::Codes::Language'=> '3.36',
              'Locale::Codes::Language_Codes'=> '3.36',
              'Locale::Codes::Language_Retired'=> '3.36',
              'Locale::Codes::Script' => '3.36',
              'Locale::Codes::Script_Codes'=> '3.36',
              'Locale::Codes::Script_Retired'=> '3.36',
              'Locale::Country'       => '3.36',
              'Locale::Currency'      => '3.36',
              'Locale::Language'      => '3.36',
              'Locale::Script'        => '3.36',
              'Math::BigFloat::Trace' => '0.40',
              'Math::BigInt::Trace'   => '0.40',
              'Module::CoreList'      => '5.20150920',
              'Module::CoreList::TieHashDelta'=> '5.20150920',
              'Module::CoreList::Utils'=> '5.20150920',
              'OS2::DLL'              => '1.06',
              'OS2::ExtAttr'          => '0.04',
              'OS2::Process'          => '1.11',
              'OS2::REXX'             => '1.05',
              'POSIX'                 => '1.57',
              'Pod::Perldoc'          => '3.25_01',
              'Socket'                => '2.020_01',
              'Test'                  => '1.27',
              'Thread::Queue'         => '3.06',
              'Time::HiRes'           => '1.9727_02',
              'Unicode::UCD'          => '0.63',
              'Win32'                 => '0.52',
              'XS::APItest'           => '0.75',
              'bigint'                => '0.40',
              'bignum'                => '0.40',
              'bigrat'                => '0.40',
              'encoding'              => '2.17',
              'experimental'          => '0.014',
              'if'                    => '0.0605',
              'locale'                => '1.07',
              'mro'                   => '1.18',
              'threads'               => '2.03',
          },
          removed => {
          }
      },
      5.023004 => {
          delta_from => 5.023003,
          changed => {
              'B'                     => '1.60',
              'B::Op_private'         => '5.023004',
              'Compress::Raw::Bzip2'  => '2.069',
              'Compress::Raw::Zlib'   => '2.069',
              'Compress::Zlib'        => '2.069',
              'Config'                => '5.023004',
              'Devel::PPPort'         => '3.32',
              'DynaLoader'            => '1.35',
              'Encode'                => '2.78',
              'ExtUtils::CBuilder'    => '0.280224',
              'ExtUtils::CBuilder::Base'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280224',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280224',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280224',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280224',
              'ExtUtils::CBuilder::Platform::android'=> '0.280224',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280224',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280224',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280224',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280224',
              'File::Path'            => '2.12',
              'IO'                    => '1.36',
              'IO::Compress::Adapter::Bzip2'=> '2.069',
              'IO::Compress::Adapter::Deflate'=> '2.069',
              'IO::Compress::Adapter::Identity'=> '2.069',
              'IO::Compress::Base'    => '2.069',
              'IO::Compress::Base::Common'=> '2.069',
              'IO::Compress::Bzip2'   => '2.069',
              'IO::Compress::Deflate' => '2.069',
              'IO::Compress::Gzip'    => '2.069',
              'IO::Compress::Gzip::Constants'=> '2.069',
              'IO::Compress::RawDeflate'=> '2.069',
              'IO::Compress::Zip'     => '2.069',
              'IO::Compress::Zip::Constants'=> '2.069',
              'IO::Compress::Zlib::Constants'=> '2.069',
              'IO::Compress::Zlib::Extra'=> '2.069',
              'IO::Poll'              => '0.10',
              'IO::Uncompress::Adapter::Bunzip2'=> '2.069',
              'IO::Uncompress::Adapter::Identity'=> '2.069',
              'IO::Uncompress::Adapter::Inflate'=> '2.069',
              'IO::Uncompress::AnyInflate'=> '2.069',
              'IO::Uncompress::AnyUncompress'=> '2.069',
              'IO::Uncompress::Base'  => '2.069',
              'IO::Uncompress::Bunzip2'=> '2.069',
              'IO::Uncompress::Gunzip'=> '2.069',
              'IO::Uncompress::Inflate'=> '2.069',
              'IO::Uncompress::RawInflate'=> '2.069',
              'IO::Uncompress::Unzip' => '2.069',
              'Math::BigFloat'        => '1.999704',
              'Math::BigFloat::Trace' => '0.41',
              'Math::BigInt'          => '1.999704',
              'Math::BigInt::Calc'    => '1.999704',
              'Math::BigInt::CalcEmu' => '1.999704',
              'Math::BigInt::FastCalc'=> '0.34',
              'Math::BigInt::Trace'   => '0.41',
              'Module::CoreList'      => '5.20151020',
              'Module::CoreList::TieHashDelta'=> '5.20151020',
              'Module::CoreList::Utils'=> '5.20151020',
              'Module::Metadata'      => '1.000029',
              'POSIX'                 => '1.58',
              'Perl::OSType'          => '1.009',
              'PerlIO::encoding'      => '0.22',
              'Socket'                => '2.020_02',
              'Unicode::Normalize'    => '1.21',
              'XS::APItest'           => '0.76',
              'bigint'                => '0.41',
              'bignum'                => '0.41',
              'bigrat'                => '0.41',
              'experimental'          => '0.016',
              'if'                    => '0.0606',
              'warnings'              => '1.35',
          },
          removed => {
          }
      },
      5.023005 => {
          delta_from => 5.023004,
          changed => {
              'B'                     => '1.61',
              'B::Op_private'         => '5.023005',
              'Carp'                  => '1.38',
              'Carp::Heavy'           => '1.38',
              'Config'                => '5.023005',
              'Config::Perl::V'       => '0.25',
              'Cwd'                   => '3.59',
              'Devel::Peek'           => '1.23',
              'Dumpvalue'             => '1.18',
              'DynaLoader'            => '1.36',
              'File::Find'            => '1.32',
              'File::Spec'            => '3.59',
              'File::Spec::AmigaOS'   => '3.59',
              'File::Spec::Cygwin'    => '3.59',
              'File::Spec::Epoc'      => '3.59',
              'File::Spec::Functions' => '3.59',
              'File::Spec::Mac'       => '3.59',
              'File::Spec::OS2'       => '3.59',
              'File::Spec::Unix'      => '3.59',
              'File::Spec::VMS'       => '3.59',
              'File::Spec::Win32'     => '3.59',
              'Getopt::Long'          => '2.48',
              'Hash::Util::FieldHash' => '1.18',
              'IPC::Open3'            => '1.20',
              'Math::BigFloat'        => '1.999710',
              'Math::BigInt'          => '1.999710',
              'Math::BigInt::Calc'    => '1.999710',
              'Math::BigInt::CalcEmu' => '1.999710',
              'Math::BigInt::FastCalc'=> '0.37',
              'Module::CoreList'      => '5.20151120',
              'Module::CoreList::TieHashDelta'=> '5.20151120',
              'Module::CoreList::Utils'=> '5.20151120',
              'Module::Metadata'      => '1.000030',
              'POSIX'                 => '1.59',
              'PerlIO::encoding'      => '0.23',
              'PerlIO::mmap'          => '0.015',
              'PerlIO::scalar'        => '0.24',
              'PerlIO::via'           => '0.16',
              'Pod::Simple'           => '3.32',
              'Pod::Simple::BlackBox' => '3.32',
              'Pod::Simple::Checker'  => '3.32',
              'Pod::Simple::Debug'    => '3.32',
              'Pod::Simple::DumpAsText'=> '3.32',
              'Pod::Simple::DumpAsXML'=> '3.32',
              'Pod::Simple::HTML'     => '3.32',
              'Pod::Simple::HTMLBatch'=> '3.32',
              'Pod::Simple::LinkSection'=> '3.32',
              'Pod::Simple::Methody'  => '3.32',
              'Pod::Simple::Progress' => '3.32',
              'Pod::Simple::PullParser'=> '3.32',
              'Pod::Simple::PullParserEndToken'=> '3.32',
              'Pod::Simple::PullParserStartToken'=> '3.32',
              'Pod::Simple::PullParserTextToken'=> '3.32',
              'Pod::Simple::PullParserToken'=> '3.32',
              'Pod::Simple::RTF'      => '3.32',
              'Pod::Simple::Search'   => '3.32',
              'Pod::Simple::SimpleTree'=> '3.32',
              'Pod::Simple::Text'     => '3.32',
              'Pod::Simple::TextContent'=> '3.32',
              'Pod::Simple::TiedOutFH'=> '3.32',
              'Pod::Simple::Transcode'=> '3.32',
              'Pod::Simple::TranscodeDumb'=> '3.32',
              'Pod::Simple::TranscodeSmart'=> '3.32',
              'Pod::Simple::XHTML'    => '3.32',
              'Pod::Simple::XMLOutStream'=> '3.32',
              'Thread::Queue'         => '3.07',
              'Tie::Scalar'           => '1.04',
              'Time::HiRes'           => '1.9728',
              'Time::Piece'           => '1.31',
              'Time::Seconds'         => '1.31',
              'Unicode::Normalize'    => '1.23',
              'XSLoader'              => '0.21',
              'arybase'               => '0.11',
              'base'                  => '2.22_01',
              'fields'                => '2.22_01',
              'threads'               => '2.04',
              'threads::shared'       => '1.49',
          },
          removed => {
              'ExtUtils::MakeMaker::version::vpp'=> 1,
              'version::vpp'          => 1,
          }
      },
      5.022001 => {
          delta_from => 5.022,
          changed => {
              'B::Op_private'         => '5.022001',
              'Config'                => '5.022001',
              'Module::CoreList'      => '5.20151213',
              'Module::CoreList::TieHashDelta'=> '5.20151213',
              'Module::CoreList::Utils'=> '5.20151213',
              'POSIX'                 => '1.53_01',
              'PerlIO::scalar'        => '0.23',
              'Storable'              => '2.53_01',
              'Win32'                 => '0.52',
              'warnings'              => '1.34',
          },
          removed => {
          }
      },
      5.023006 => {
          delta_from => 5.023005,
          changed => {
              'B::Deparse'            => '1.36',
              'B::Op_private'         => '5.023006',
              'Benchmark'             => '1.21',
              'CPAN::Meta::Requirements'=> '2.140',
              'CPAN::Meta::YAML'      => '0.018',
              'Config'                => '5.023006',
              'Cwd'                   => '3.60',
              'Data::Dumper'          => '2.159',
              'DynaLoader'            => '1.37',
              'File::Spec'            => '3.60',
              'File::Spec::AmigaOS'   => '3.60',
              'File::Spec::Cygwin'    => '3.60',
              'File::Spec::Epoc'      => '3.60',
              'File::Spec::Functions' => '3.60',
              'File::Spec::Mac'       => '3.60',
              'File::Spec::OS2'       => '3.60',
              'File::Spec::Unix'      => '3.60',
              'File::Spec::VMS'       => '3.60',
              'File::Spec::Win32'     => '3.60',
              'Hash::Util::FieldHash' => '1.19',
              'Locale::Codes'         => '3.37',
              'Locale::Codes::Constants'=> '3.37',
              'Locale::Codes::Country'=> '3.37',
              'Locale::Codes::Country_Codes'=> '3.37',
              'Locale::Codes::Country_Retired'=> '3.37',
              'Locale::Codes::Currency'=> '3.37',
              'Locale::Codes::Currency_Codes'=> '3.37',
              'Locale::Codes::Currency_Retired'=> '3.37',
              'Locale::Codes::LangExt'=> '3.37',
              'Locale::Codes::LangExt_Codes'=> '3.37',
              'Locale::Codes::LangExt_Retired'=> '3.37',
              'Locale::Codes::LangFam'=> '3.37',
              'Locale::Codes::LangFam_Codes'=> '3.37',
              'Locale::Codes::LangFam_Retired'=> '3.37',
              'Locale::Codes::LangVar'=> '3.37',
              'Locale::Codes::LangVar_Codes'=> '3.37',
              'Locale::Codes::LangVar_Retired'=> '3.37',
              'Locale::Codes::Language'=> '3.37',
              'Locale::Codes::Language_Codes'=> '3.37',
              'Locale::Codes::Language_Retired'=> '3.37',
              'Locale::Codes::Script' => '3.37',
              'Locale::Codes::Script_Codes'=> '3.37',
              'Locale::Codes::Script_Retired'=> '3.37',
              'Locale::Country'       => '3.37',
              'Locale::Currency'      => '3.37',
              'Locale::Language'      => '3.37',
              'Locale::Script'        => '3.37',
              'Math::BigInt::FastCalc'=> '0.38',
              'Module::CoreList'      => '5.20151220',
              'Module::CoreList::TieHashDelta'=> '5.20151220',
              'Module::CoreList::Utils'=> '5.20151220',
              'Module::Metadata'      => '1.000031',
              'Opcode'                => '1.34',
              'PerlIO::mmap'          => '0.016',
              'Pod::Perldoc'          => '3.25_02',
              'SDBM_File'             => '1.14',
              'Term::ANSIColor'       => '4.04',
              'Test'                  => '1.28',
              'Unicode::Normalize'    => '1.24',
              'XS::APItest'           => '0.77',
              'base'                  => '2.23',
              'encoding::warnings'    => '0.12',
              'fields'                => '2.23',
              'locale'                => '1.08',
              'strict'                => '1.10',
              'threads'               => '2.05',
              'threads::shared'       => '1.50',
              'utf8'                  => '1.18',
          },
          removed => {
          }
      },
      5.023007 => {
          delta_from => 5.023006,
          changed => {
              'App::Prove'            => '3.36',
              'App::Prove::State'     => '3.36',
              'App::Prove::State::Result'=> '3.36',
              'App::Prove::State::Result::Test'=> '3.36',
              'B'                     => '1.62',
              'B::Deparse'            => '1.37',
              'B::Op_private'         => '5.023007',
              'Benchmark'             => '1.22',
              'Config'                => '5.023007',
              'Cwd'                   => '3.62',
              'Data::Dumper'          => '2.160',
              'ExtUtils::ParseXS'     => '3.31',
              'ExtUtils::ParseXS::Constants'=> '3.31',
              'ExtUtils::ParseXS::CountLines'=> '3.31',
              'ExtUtils::ParseXS::Eval'=> '3.31',
              'ExtUtils::ParseXS::Utilities'=> '3.31',
              'ExtUtils::Typemaps'    => '3.31',
              'ExtUtils::Typemaps::Cmd'=> '3.31',
              'ExtUtils::Typemaps::InputMap'=> '3.31',
              'ExtUtils::Typemaps::OutputMap'=> '3.31',
              'ExtUtils::Typemaps::Type'=> '3.31',
              'File::Find'            => '1.33',
              'File::Spec'            => '3.62',
              'File::Spec::AmigaOS'   => '3.62',
              'File::Spec::Cygwin'    => '3.62',
              'File::Spec::Epoc'      => '3.62',
              'File::Spec::Functions' => '3.62',
              'File::Spec::Mac'       => '3.62',
              'File::Spec::OS2'       => '3.62',
              'File::Spec::Unix'      => '3.62',
              'File::Spec::VMS'       => '3.62',
              'File::Spec::Win32'     => '3.62',
              'Math::BigFloat'        => '1.999715',
              'Math::BigFloat::Trace' => '0.42',
              'Math::BigInt'          => '1.999715',
              'Math::BigInt::Calc'    => '1.999715',
              'Math::BigInt::CalcEmu' => '1.999715',
              'Math::BigInt::FastCalc'=> '0.40',
              'Math::BigInt::Trace'   => '0.42',
              'Math::BigRat'          => '0.260802',
              'Module::CoreList'      => '5.20160120',
              'Module::CoreList::TieHashDelta'=> '5.20160120',
              'Module::CoreList::Utils'=> '5.20160120',
              'Net::Cmd'              => '3.08',
              'Net::Config'           => '3.08',
              'Net::Domain'           => '3.08',
              'Net::FTP'              => '3.08',
              'Net::FTP::A'           => '3.08',
              'Net::FTP::E'           => '3.08',
              'Net::FTP::I'           => '3.08',
              'Net::FTP::L'           => '3.08',
              'Net::FTP::dataconn'    => '3.08',
              'Net::NNTP'             => '3.08',
              'Net::Netrc'            => '3.08',
              'Net::POP3'             => '3.08',
              'Net::SMTP'             => '3.08',
              'Net::Time'             => '3.08',
              'Pod::Man'              => '4.04',
              'Pod::ParseLink'        => '4.04',
              'Pod::Text'             => '4.04',
              'Pod::Text::Color'      => '4.04',
              'Pod::Text::Overstrike' => '4.04',
              'Pod::Text::Termcap'    => '4.04',
              'Pod::Usage'            => '1.68',
              'TAP::Base'             => '3.36',
              'TAP::Formatter::Base'  => '3.36',
              'TAP::Formatter::Color' => '3.36',
              'TAP::Formatter::Console'=> '3.36',
              'TAP::Formatter::Console::ParallelSession'=> '3.36',
              'TAP::Formatter::Console::Session'=> '3.36',
              'TAP::Formatter::File'  => '3.36',
              'TAP::Formatter::File::Session'=> '3.36',
              'TAP::Formatter::Session'=> '3.36',
              'TAP::Harness'          => '3.36',
              'TAP::Harness::Env'     => '3.36',
              'TAP::Object'           => '3.36',
              'TAP::Parser'           => '3.36',
              'TAP::Parser::Aggregator'=> '3.36',
              'TAP::Parser::Grammar'  => '3.36',
              'TAP::Parser::Iterator' => '3.36',
              'TAP::Parser::Iterator::Array'=> '3.36',
              'TAP::Parser::Iterator::Process'=> '3.36',
              'TAP::Parser::Iterator::Stream'=> '3.36',
              'TAP::Parser::IteratorFactory'=> '3.36',
              'TAP::Parser::Multiplexer'=> '3.36',
              'TAP::Parser::Result'   => '3.36',
              'TAP::Parser::Result::Bailout'=> '3.36',
              'TAP::Parser::Result::Comment'=> '3.36',
              'TAP::Parser::Result::Plan'=> '3.36',
              'TAP::Parser::Result::Pragma'=> '3.36',
              'TAP::Parser::Result::Test'=> '3.36',
              'TAP::Parser::Result::Unknown'=> '3.36',
              'TAP::Parser::Result::Version'=> '3.36',
              'TAP::Parser::Result::YAML'=> '3.36',
              'TAP::Parser::ResultFactory'=> '3.36',
              'TAP::Parser::Scheduler'=> '3.36',
              'TAP::Parser::Scheduler::Job'=> '3.36',
              'TAP::Parser::Scheduler::Spinner'=> '3.36',
              'TAP::Parser::Source'   => '3.36',
              'TAP::Parser::SourceHandler'=> '3.36',
              'TAP::Parser::SourceHandler::Executable'=> '3.36',
              'TAP::Parser::SourceHandler::File'=> '3.36',
              'TAP::Parser::SourceHandler::Handle'=> '3.36',
              'TAP::Parser::SourceHandler::Perl'=> '3.36',
              'TAP::Parser::SourceHandler::RawTAP'=> '3.36',
              'TAP::Parser::YAMLish::Reader'=> '3.36',
              'TAP::Parser::YAMLish::Writer'=> '3.36',
              'Test::Harness'         => '3.36',
              'Unicode::Normalize'    => '1.25',
              'Unicode::UCD'          => '0.64',
              'XS::APItest'           => '0.78',
              'bigint'                => '0.42',
              'bignum'                => '0.42',
              'bigrat'                => '0.42',
              'utf8'                  => '1.19',
          },
          removed => {
          }
      },
      5.023008 => {
          delta_from => 5.023007,
          changed => {
              'B::Op_private'         => '5.023008',
              'Config'                => '5.023008',
              'Cwd'                   => '3.63',
              'DynaLoader'            => '1.38',
              'Encode'                => '2.80',
              'Encode::Alias'         => '2.20',
              'Encode::MIME::Header'  => '2.19',
              'Encode::Unicode'       => '2.15',
              'ExtUtils::CBuilder'    => '0.280225',
              'ExtUtils::CBuilder::Base'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Unix'=> '0.280225',
              'ExtUtils::CBuilder::Platform::VMS'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows::BCC'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows::GCC'=> '0.280225',
              'ExtUtils::CBuilder::Platform::Windows::MSVC'=> '0.280225',
              'ExtUtils::CBuilder::Platform::aix'=> '0.280225',
              'ExtUtils::CBuilder::Platform::android'=> '0.280225',
              'ExtUtils::CBuilder::Platform::cygwin'=> '0.280225',
              'ExtUtils::CBuilder::Platform::darwin'=> '0.280225',
              'ExtUtils::CBuilder::Platform::dec_osf'=> '0.280225',
              'ExtUtils::CBuilder::Platform::os2'=> '0.280225',
              'ExtUtils::Command::MM' => '7.10_01',
              'ExtUtils::Liblist'     => '7.10_01',
              'ExtUtils::Liblist::Kid'=> '7.10_01',
              'ExtUtils::MM'          => '7.10_01',
              'ExtUtils::MM_AIX'      => '7.10_01',
              'ExtUtils::MM_Any'      => '7.10_01',
              'ExtUtils::MM_BeOS'     => '7.10_01',
              'ExtUtils::MM_Cygwin'   => '7.10_01',
              'ExtUtils::MM_DOS'      => '7.10_01',
              'ExtUtils::MM_Darwin'   => '7.10_01',
              'ExtUtils::MM_MacOS'    => '7.10_01',
              'ExtUtils::MM_NW5'      => '7.10_01',
              'ExtUtils::MM_OS2'      => '7.10_01',
              'ExtUtils::MM_QNX'      => '7.10_01',
              'ExtUtils::MM_UWIN'     => '7.10_01',
              'ExtUtils::MM_Unix'     => '7.10_01',
              'ExtUtils::MM_VMS'      => '7.10_01',
              'ExtUtils::MM_VOS'      => '7.10_01',
              'ExtUtils::MM_Win32'    => '7.10_01',
              'ExtUtils::MM_Win95'    => '7.10_01',
              'ExtUtils::MY'          => '7.10_01',
              'ExtUtils::MakeMaker'   => '7.10_01',
              'ExtUtils::MakeMaker::Config'=> '7.10_01',
              'ExtUtils::MakeMaker::version'=> '7.10_01',
              'ExtUtils::MakeMaker::version::regex'=> '7.10_01',
              'ExtUtils::Mkbootstrap' => '7.10_01',
              'ExtUtils::Mksymlists'  => '7.10_01',
              'ExtUtils::testlib'     => '7.10_01',
              'File::Spec'            => '3.63',
              'File::Spec::AmigaOS'   => '3.63',
              'File::Spec::Cygwin'    => '3.63',
              'File::Spec::Epoc'      => '3.63',
              'File::Spec::Functions' => '3.63',
              'File::Spec::Mac'       => '3.63',
              'File::Spec::OS2'       => '3.63',
              'File::Spec::Unix'      => '3.63',
              'File::Spec::VMS'       => '3.63',
              'File::Spec::Win32'     => '3.63',
              'IPC::Msg'              => '2.05',
              'IPC::Semaphore'        => '2.05',
              'IPC::SharedMem'        => '2.05',
              'IPC::SysV'             => '2.05',
              'Module::CoreList'      => '5.20160121',
              'Module::CoreList::TieHashDelta'=> '5.20160121',
              'Module::CoreList::Utils'=> '5.20160121',
              'ODBM_File'             => '1.13',
              'POSIX'                 => '1.63',
              'PerlIO::encoding'      => '0.24',
              'Pod::Man'              => '4.06',
              'Pod::ParseLink'        => '4.06',
              'Pod::Text'             => '4.06',
              'Pod::Text::Color'      => '4.06',
              'Pod::Text::Overstrike' => '4.06',
              'Pod::Text::Termcap'    => '4.06',
              'Storable'              => '2.55',
              'Time::HiRes'           => '1.9730',
              'XS::APItest'           => '0.79',
          },
          removed => {
          }
      },
      5.023009 => {
          delta_from => 5.023008,
          changed => {
              'Amiga::ARexx'          => '0.04',
              'Amiga::Exec'           => '0.02',
              'B::Op_private'         => '5.023009',
              'Carp'                  => '1.40',
              'Carp::Heavy'           => '1.40',
              'Config'                => '5.023009',
              'Errno'                 => '1.25',
              'ExtUtils::Embed'       => '1.33',
              'File::Find'            => '1.34',
              'File::Glob'            => '1.26',
              'File::Spec::AmigaOS'   => ';.64',
              'IPC::Msg'              => '2.06_01',
              'IPC::Semaphore'        => '2.06_01',
              'IPC::SharedMem'        => '2.06_01',
              'IPC::SysV'             => '2.06_01',
              'List::Util'            => '1.42_02',
              'List::Util::XS'        => '1.42_02',
              'Module::CoreList'      => '5.20160320',
              'Module::CoreList::TieHashDelta'=> '5.20160320',
              'Module::CoreList::Utils'=> '5.20160320',
              'POSIX'                 => '1.64',
              'Pod::Functions'        => '1.10',
              'Pod::Functions::Functions'=> '1.10',
              'Scalar::Util'          => '1.42_02',
              'SelfLoader'            => '1.23',
              'Socket'                => '2.020_03',
              'Storable'              => '2.56',
              'Sub::Util'             => '1.42_02',
              'Thread::Queue'         => '3.08',
              'Tie::File'             => '1.02',
              'Time::HiRes'           => '1.9732',
              'Win32API::File'        => '0.1203',
              'Win32API::File::inc::ExtUtils::Myconst2perl'=> '1',
              'XS::APItest'           => '0.80',
              'autouse'               => '1.11',
              'bytes'                 => '1.05',
              'strict'                => '1.11',
              'threads'               => '2.06',
              'version'               => '0.9916',
              'version::regex'        => '0.9916',
              'warnings'              => '1.36',
          },
          removed => {
              'Win32API::File::ExtUtils::Myconst2perl'=> 1,
          }
      },
      5.022002 => {
          delta_from => 5.022001,
          changed => {
              'B::Op_private'         => '5.022002',
              'Config'                => '5.022002',
              'Cwd'                   => '3.56_01',
              'File::Spec'            => '3.56_01',
              'File::Spec::Cygwin'    => '3.56_01',
              'File::Spec::Epoc'      => '3.56_01',
              'File::Spec::Functions' => '3.56_01',
              'File::Spec::Mac'       => '3.56_01',
              'File::Spec::OS2'       => '3.56_01',
              'File::Spec::Unix'      => '3.56_01',
              'File::Spec::VMS'       => '3.56_01',
              'File::Spec::Win32'     => '3.56_01',
              'Module::CoreList'      => '5.20160429',
              'Module::CoreList::TieHashDelta'=> '5.20160429',
              'Module::CoreList::Utils'=> '5.20160429',
              'XS::APItest'           => '0.72_01',
          },
          removed => {
          }
      },
      5.024000 => {
          delta_from => 5.023009,
          changed => {
              'B::Op_private'         => '5.024000',
              'Config'                => '5.024',
              'File::Copy'            => '2.31',
              'File::Path'            => '2.12_01',
              'File::Spec::AmigaOS'   => '3.64',
              'IO::Handle'            => '1.36',
              'Module::CoreList'      => '5.20160506',
              'Module::CoreList::TieHashDelta'=> '5.20160506',
              'Module::CoreList::Utils'=> '5.20160506',
              'ODBM_File'             => '1.14',
              'POSIX'                 => '1.65',
              'Pod::Man'              => '4.07',
              'Pod::ParseLink'        => '4.07',
              'Pod::Text'             => '4.07',
              'Pod::Text::Color'      => '4.07',
              'Pod::Text::Overstrike' => '4.07',
              'Pod::Text::Termcap'    => '4.07',
              'Thread::Queue'         => '3.09',
              'Time::HiRes'           => '1.9733',
              'threads'               => '2.07',
              'threads::shared'       => '1.51',
              'locale'                => '1.09',
          },
          removed => {
          }
      },
      5.025000 => {
          delta_from => 5.024,
          changed => {
              'B::Op_private'         => '5.025000',
              'Config'                => '5.025',
              'Module::CoreList'      => '5.20160507',
              'Module::CoreList::TieHashDelta'=> '5.20160507',
              'Module::CoreList::Utils'=> '5.20160507',
              'feature'               => '1.43',
          },
          removed => {
          }
      },
      5.025001 => {
          delta_from => 5.025,
          changed => {
              'Archive::Tar'          => '2.08',
              'Archive::Tar::Constant'=> '2.08',
              'Archive::Tar::File'    => '2.08',
              'B::Op_private'         => '5.025001',
              'Carp'                  => '1.41',
              'Carp::Heavy'           => '1.41',
              'Config'                => '5.025001',
              'Config::Perl::V'       => '0.26',
              'DB_File'               => '1.838',
              'Digest::MD5'           => '2.55',
              'IPC::Cmd'              => '0.94',
              'IPC::Msg'              => '2.07',
              'IPC::Semaphore'        => '2.07',
              'IPC::SharedMem'        => '2.07',
              'IPC::SysV'             => '2.07',
              'List::Util'            => '1.45_01',
              'List::Util::XS'        => '1.45_01',
              'Locale::Codes'         => '3.38',
              'Locale::Codes::Constants'=> '3.38',
              'Locale::Codes::Country'=> '3.38',
              'Locale::Codes::Country_Codes'=> '3.38',
              'Locale::Codes::Country_Retired'=> '3.38',
              'Locale::Codes::Currency'=> '3.38',
              'Locale::Codes::Currency_Codes'=> '3.38',
              'Locale::Codes::Currency_Retired'=> '3.38',
              'Locale::Codes::LangExt'=> '3.38',
              'Locale::Codes::LangExt_Codes'=> '3.38',
              'Locale::Codes::LangExt_Retired'=> '3.38',
              'Locale::Codes::LangFam'=> '3.38',
              'Locale::Codes::LangFam_Codes'=> '3.38',
              'Locale::Codes::LangFam_Retired'=> '3.38',
              'Locale::Codes::LangVar'=> '3.38',
              'Locale::Codes::LangVar_Codes'=> '3.38',
              'Locale::Codes::LangVar_Retired'=> '3.38',
              'Locale::Codes::Language'=> '3.38',
              'Locale::Codes::Language_Codes'=> '3.38',
              'Locale::Codes::Language_Retired'=> '3.38',
              'Locale::Codes::Script' => '3.38',
              'Locale::Codes::Script_Codes'=> '3.38',
              'Locale::Codes::Script_Retired'=> '3.38',
              'Locale::Country'       => '3.38',
              'Locale::Currency'      => '3.38',
              'Locale::Language'      => '3.38',
              'Locale::Maketext'      => '1.27',
              'Locale::Script'        => '3.38',
              'Module::CoreList'      => '5.20160520',
              'Module::CoreList::TieHashDelta'=> '5.20160520',
              'Module::CoreList::Utils'=> '5.20160520',
              'Module::Metadata'      => '1.000032',
              'POSIX'                 => '1.69',
              'Scalar::Util'          => '1.45_01',
              'Sub::Util'             => '1.45_01',
              'Sys::Syslog'           => '0.34',
              'Term::ANSIColor'       => '4.05',
              'Test2'                 => '1.302015',
              'Test2::API'            => '1.302015',
              'Test2::API::Breakage'  => '1.302015',
              'Test2::API::Context'   => '1.302015',
              'Test2::API::Instance'  => '1.302015',
              'Test2::API::Stack'     => '1.302015',
              'Test2::Event'          => '1.302015',
              'Test2::Event::Bail'    => '1.302015',
              'Test2::Event::Diag'    => '1.302015',
              'Test2::Event::Exception'=> '1.302015',
              'Test2::Event::Note'    => '1.302015',
              'Test2::Event::Ok'      => '1.302015',
              'Test2::Event::Plan'    => '1.302015',
              'Test2::Event::Skip'    => '1.302015',
              'Test2::Event::Subtest' => '1.302015',
              'Test2::Event::Waiting' => '1.302015',
              'Test2::Formatter'      => '1.302015',
              'Test2::Formatter::TAP' => '1.302015',
              'Test2::Hub'            => '1.302015',
              'Test2::Hub::Interceptor'=> '1.302015',
              'Test2::Hub::Interceptor::Terminator'=> '1.302015',
              'Test2::Hub::Subtest'   => '1.302015',
              'Test2::IPC'            => '1.302015',
              'Test2::IPC::Driver'    => '1.302015',
              'Test2::IPC::Driver::Files'=> '1.302015',
              'Test2::Util'           => '1.302015',
              'Test2::Util::ExternalMeta'=> '1.302015',
              'Test2::Util::HashBase' => '1.302015',
              'Test2::Util::Trace'    => '1.302015',
              'Test::Builder'         => '1.302015',
              'Test::Builder::Formatter'=> '1.302015',
              'Test::Builder::Module' => '1.302015',
              'Test::Builder::Tester' => '1.302015',
              'Test::Builder::Tester::Color'=> '1.302015',
              'Test::Builder::TodoDiag'=> '1.302015',
              'Test::More'            => '1.302015',
              'Test::Simple'          => '1.302015',
              'Test::Tester'          => '1.302015',
              'Test::Tester::Capture' => '1.302015',
              'Test::Tester::CaptureRunner'=> '1.302015',
              'Test::Tester::Delegate'=> '1.302015',
              'Test::use::ok'         => '1.302015',
              'XS::APItest'           => '0.81',
              '_charnames'            => '1.44',
              'charnames'             => '1.44',
              'ok'                    => '1.302015',
              'perlfaq'               => '5.021011',
              're'                    => '0.33',
              'threads'               => '2.08',
              'threads::shared'       => '1.52',
          },
          removed => {
          }
      },
  );
  
  sub is_core
  {
      my $module = shift;
      $module = shift if eval { $module->isa(__PACKAGE__) } && @_ > 0 && defined($_[0]) && $_[0] =~ /^\w/;
      my ($module_version, $perl_version);
  
      $module_version = shift if @_ > 0;
      $perl_version   = @_ > 0 ? shift : $];
  
      my $first_release = first_release($module);
  
      return 0 if !defined($first_release) || $first_release > $perl_version;
  
      my $final_release = removed_from($module);
  
      return 0 if defined($final_release) && $perl_version >= $final_release;
  
      # If a minimum version of the module was specified:
      # Step through all perl releases ($prn)
      # so we can find what version of the module
      # was included in the specified version of perl.
      # On the way if we pass the required module version, we can
      # short-circuit and return true
      if (defined($module_version)) {
          # The Perl releases aren't a linear sequence, but a tree. We need to build the path
          # of releases from 5 to the specified release, and follow the module's version(s)
          # along that path.
          my @releases = ($perl_version);
          my $rel = $perl_version;
          while (defined($rel)) {
              # XXX: This line is a sign of failure. -- rjbs, 2015-04-15
              my $this_delta = $delta{$rel} || $delta{ sprintf '%0.6f', $rel };
              $rel = $this_delta->{delta_from};
              unshift(@releases, $rel) if defined($rel);
          }
          RELEASE:
          foreach my $prn (@releases) {
              next RELEASE if $prn < $first_release;
              last RELEASE if $prn > $perl_version;
              next unless defined(my $next_module_version
                                     = $delta{$prn}->{changed}->{$module});
              return 1 if version->parse($next_module_version) >= version->parse($module_version);
          }
          return 0;
      }
  
      return 1 if !defined($final_release);
  
      return $perl_version <= $final_release;
  }
  
  for my $version (sort { $a <=> $b } keys %delta) {
      my $data = $delta{$version};
  
      tie %{$version{$version}}, 'Module::CoreList::TieHashDelta',
          $data->{changed}, $data->{removed},
          $data->{delta_from} ? $version{$data->{delta_from}} : undef;
  }
  
  %deprecated = (
      5.011    => {
          changed => { map { $_ => 1 } qw/
              Class::ISA
              Pod::Plainer
              Shell
              Switch
          /},
      },
      5.011001 => { delta_from => 5.011 },
      5.011002 => { delta_from => 5.011001 },
      5.011003 => { delta_from => 5.011002 },
      5.011004 => { delta_from => 5.011003 },
      5.011005 => { delta_from => 5.011004 },
  
      5.012    => { delta_from => 5.011005 },
      5.012001 => { delta_from => 5.012 },
      5.012002 => { delta_from => 5.012001 },
      5.012003 => { delta_from => 5.012002 },
      5.012004 => { delta_from => 5.012003 },
      5.012005 => { delta_from => 5.012004 },
  
      5.013    => { delta_from => 5.012005 },
      5.013001 => {
          delta_from => 5.013,
          removed => { map { $_ => 1 } qw/
              Class::ISA
              Pod::Plainer
              Switch
          /},
      },
      5.013002 => { delta_from => 5.013001 },
      5.013003 => { delta_from => 5.013002 },
      5.013004 => { delta_from => 5.013003 },
      5.013005 => { delta_from => 5.013004 },
      5.013006 => { delta_from => 5.013005 },
      5.013007 => { delta_from => 5.013006 },
      5.013008 => { delta_from => 5.013007 },
      5.013009 => { delta_from => 5.013008 },
      5.01301  => { delta_from => 5.013009 },
      5.013011 => { delta_from => 5.01301  },
  
      5.014    => { delta_from => 5.013011 },
      5.014001 => { delta_from => 5.014    },
      5.014002 => { delta_from => 5.014001 },
      5.014003 => { delta_from => 5.014002 },
      5.014004 => { delta_from => 5.014003 },
  
      5.015    => {
          delta_from => 5.014004,
          removed => { Shell => 1 },
      },
      5.015001 => { delta_from => 5.015    },
      5.015002 => { delta_from => 5.015001 },
      5.015003 => { delta_from => 5.015002 },
      5.015004 => { delta_from => 5.015003 },
      5.015005 => { delta_from => 5.015004 },
      5.015006 => { delta_from => 5.015005 },
      5.015007 => { delta_from => 5.015006 },
      5.015008 => { delta_from => 5.015007 },
      5.015009 => { delta_from => 5.015008 },
  
      5.016    => { delta_from => 5.015009 },
      5.016001 => { delta_from => 5.016    },
      5.016002 => { delta_from => 5.016001 },
      5.016003 => { delta_from => 5.016002 },
  
      5.017    => { delta_from => 5.016003 },
      5.017001 => { delta_from => 5.017    },
      5.017002 => { delta_from => 5.017001 },
      5.017003 => { delta_from => 5.017002 },
      5.017004 => { delta_from => 5.017003 },
      5.017005 => { delta_from => 5.017004 },
      5.017006 => { delta_from => 5.017005 },
      5.017007 => { delta_from => 5.017006 },
      5.017008 => {
          delta_from => 5.017007,
          changed => { 'Pod::LaTeX' => 1 },
      },
      5.017009 => {
          delta_from => 5.017008,
          changed => { map { $_ => 1 } qw/
              Archive::Extract
              B::Lint
              B::Lint::Debug
              CPANPLUS
              CPANPLUS::Backend
              CPANPLUS::Backend::RV
              CPANPLUS::Config
              CPANPLUS::Config::HomeEnv
              CPANPLUS::Configure
              CPANPLUS::Configure::Setup
              CPANPLUS::Dist
              CPANPLUS::Dist::Autobundle
              CPANPLUS::Dist::Base
              CPANPLUS::Dist::Build
              CPANPLUS::Dist::Build::Constants
              CPANPLUS::Dist::MM
              CPANPLUS::Dist::Sample
              CPANPLUS::Error
              CPANPLUS::Internals
              CPANPLUS::Internals::Constants
              CPANPLUS::Internals::Constants::Report
              CPANPLUS::Internals::Extract
              CPANPLUS::Internals::Fetch
              CPANPLUS::Internals::Report
              CPANPLUS::Internals::Search
              CPANPLUS::Internals::Source
              CPANPLUS::Internals::Source::Memory
              CPANPLUS::Internals::Source::SQLite
              CPANPLUS::Internals::Source::SQLite::Tie
              CPANPLUS::Internals::Utils
              CPANPLUS::Internals::Utils::Autoflush
              CPANPLUS::Module
              CPANPLUS::Module::Author
              CPANPLUS::Module::Author::Fake
              CPANPLUS::Module::Checksums
              CPANPLUS::Module::Fake
              CPANPLUS::Module::Signature
              CPANPLUS::Selfupdate
              CPANPLUS::Shell
              CPANPLUS::Shell::Classic
              CPANPLUS::Shell::Default
              CPANPLUS::Shell::Default::Plugins::CustomSource
              CPANPLUS::Shell::Default::Plugins::Remote
              CPANPLUS::Shell::Default::Plugins::Source
              Devel::InnerPackage
              File::CheckTree
              Log::Message
              Log::Message::Config
              Log::Message::Handlers
              Log::Message::Item
              Log::Message::Simple
              Module::Pluggable
              Module::Pluggable::Object
              Object::Accessor
              Term::UI
              Term::UI::History
              Text::Soundex
          /},
      },
      5.01701  => { delta_from => 5.017009 },
      5.017011 => { delta_from => 5.01701  },
  
      5.018    => { delta_from => 5.017011 },
      5.018001 => {
          delta_from => 5.018,
          changed => {
          },
          removed => {
          }
      },
      5.018002 => {
          delta_from => 5.018001,
          changed => {
          },
          removed => {
          }
      },
      5.018003 => {
          delta_from => 5.018,
          changed => {
          },
          removed => {
          }
      },
      5.018004 => {
          delta_from => 5.018,
          changed => {
          },
          removed => {
          }
      },
  
      5.019    => {
          delta_from => 5.018,
          changed => { 'Module::Build' => 1 },
          removed => { map { $_ => 1 } qw/
              Archive::Extract
              B::Lint
              B::Lint::Debug
              CPANPLUS
              CPANPLUS::Backend
              CPANPLUS::Backend::RV
              CPANPLUS::Config
              CPANPLUS::Config::HomeEnv
              CPANPLUS::Configure
              CPANPLUS::Configure::Setup
              CPANPLUS::Dist
              CPANPLUS::Dist::Autobundle
              CPANPLUS::Dist::Base
              CPANPLUS::Dist::Build
              CPANPLUS::Dist::Build::Constants
              CPANPLUS::Dist::MM
              CPANPLUS::Dist::Sample
              CPANPLUS::Error
              CPANPLUS::Internals
              CPANPLUS::Internals::Constants
              CPANPLUS::Internals::Constants::Report
              CPANPLUS::Internals::Extract
              CPANPLUS::Internals::Fetch
              CPANPLUS::Internals::Report
              CPANPLUS::Internals::Search
              CPANPLUS::Internals::Source
              CPANPLUS::Internals::Source::Memory
              CPANPLUS::Internals::Source::SQLite
              CPANPLUS::Internals::Source::SQLite::Tie
              CPANPLUS::Internals::Utils
              CPANPLUS::Internals::Utils::Autoflush
              CPANPLUS::Module
              CPANPLUS::Module::Author
              CPANPLUS::Module::Author::Fake
              CPANPLUS::Module::Checksums
              CPANPLUS::Module::Fake
              CPANPLUS::Module::Signature
              CPANPLUS::Selfupdate
              CPANPLUS::Shell
              CPANPLUS::Shell::Classic
              CPANPLUS::Shell::Default
              CPANPLUS::Shell::Default::Plugins::CustomSource
              CPANPLUS::Shell::Default::Plugins::Remote
              CPANPLUS::Shell::Default::Plugins::Source
              Devel::InnerPackage
              File::CheckTree
              Log::Message
              Log::Message::Config
              Log::Message::Handlers
              Log::Message::Item
              Log::Message::Simple
              Module::Pluggable
              Module::Pluggable::Object
              Object::Accessor
              Pod::LaTeX
              Term::UI
              Term::UI::History
              Text::Soundex
          /}
      },
      5.019001 => {
          delta_from => 5.019,
          changed => {
          },
          removed => {
          }
      },
      5.019002 => {
          delta_from => 5.019001,
          changed => {
          },
          removed => {
          }
      },
      5.019003 => {
          delta_from => 5.019002,
          changed => {
          },
          removed => {
          }
      },
      5.019004 => {
          delta_from => 5.019003,
          changed => {
              'Module::Build::Base'   => '1',
              'Module::Build::Compat' => '1',
              'Module::Build::Config' => '1',
              'Module::Build::ConfigData'=> '1',
              'Module::Build::Cookbook'=> '1',
              'Module::Build::Dumper' => '1',
              'Module::Build::ModuleInfo'=> '1',
              'Module::Build::Notes'  => '1',
              'Module::Build::PPMMaker'=> '1',
              'Module::Build::Platform::Default'=> '1',
              'Module::Build::Platform::MacOS'=> '1',
              'Module::Build::Platform::Unix'=> '1',
              'Module::Build::Platform::VMS'=> '1',
              'Module::Build::Platform::VOS'=> '1',
              'Module::Build::Platform::Windows'=> '1',
              'Module::Build::Platform::aix'=> '1',
              'Module::Build::Platform::cygwin'=> '1',
              'Module::Build::Platform::darwin'=> '1',
              'Module::Build::Platform::os2'=> '1',
              'Module::Build::PodParser'=> '1',
              'Module::Build::Version'=> '1',
              'Module::Build::YAML'   => '1',
              'inc::latest'           => '1',
          },
          removed => {
          }
      },
      5.019005 => {
          delta_from => 5.019004,
          changed => {
          },
          removed => {
          }
      },
      5.019006 => {
          delta_from => 5.019005,
          changed => {
              'Package::Constants'    => '1',
          },
          removed => {
          }
      },
      5.019007 => {
          delta_from => 5.019006,
          changed => {
              'CGI'                   => '1',
              'CGI::Apache'           => '1',
              'CGI::Carp'             => '1',
              'CGI::Cookie'           => '1',
              'CGI::Fast'             => '1',
              'CGI::Pretty'           => '1',
              'CGI::Push'             => '1',
              'CGI::Switch'           => '1',
              'CGI::Util'             => '1',
          },
          removed => {
          }
      },
      5.019008 => {
          delta_from => 5.019007,
          changed => {
          },
          removed => {
          }
      },
      5.019009 => {
          delta_from => 5.019008,
          changed => {
          },
          removed => {
          }
      },
      5.01901 => {
          delta_from => 5.019009,
          changed => {
          },
          removed => {
          }
      },
      5.019011 => {
          delta_from => 5.019010,
          changed => {
          },
          removed => {
          }
      },
      5.020000 => {
          delta_from => 5.019011,
          changed => {
          },
          removed => {
          }
      },
      5.021000 => {
          delta_from => 5.020000,
          changed => {
          },
          removed => {
              'CGI'                   => 1,
              'CGI::Apache'           => 1,
              'CGI::Carp'             => 1,
              'CGI::Cookie'           => 1,
              'CGI::Fast'             => 1,
              'CGI::Pretty'           => 1,
              'CGI::Push'             => 1,
              'CGI::Switch'           => 1,
              'CGI::Util'             => 1,
              'Module::Build'         => 1,
              'Module::Build::Base'   => 1,
              'Module::Build::Compat' => 1,
              'Module::Build::Config' => 1,
              'Module::Build::ConfigData'=> 1,
              'Module::Build::Cookbook'=> 1,
              'Module::Build::Dumper' => 1,
              'Module::Build::ModuleInfo'=> 1,
              'Module::Build::Notes'  => 1,
              'Module::Build::PPMMaker'=> 1,
              'Module::Build::Platform::Default'=> 1,
              'Module::Build::Platform::MacOS'=> 1,
              'Module::Build::Platform::Unix'=> 1,
              'Module::Build::Platform::VMS'=> 1,
              'Module::Build::Platform::VOS'=> 1,
              'Module::Build::Platform::Windows'=> 1,
              'Module::Build::Platform::aix'=> 1,
              'Module::Build::Platform::cygwin'=> 1,
              'Module::Build::Platform::darwin'=> 1,
              'Module::Build::Platform::os2'=> 1,
              'Module::Build::PodParser'=> 1,
              'Module::Build::Version'=> 1,
              'Module::Build::YAML'   => 1,
              'Package::Constants'    => 1,
              'inc::latest'           => 1,
          }
      },
      5.021001 => {
          delta_from => 5.021000,
          changed => {
          },
          removed => {
          }
      },
      5.021002 => {
          delta_from => 5.021001,
          changed => {
          },
          removed => {
          }
      },
      5.021003 => {
          delta_from => 5.021002,
          changed => {
          },
          removed => {
          }
      },
      5.020001 => {
          delta_from => 5.020000,
          changed => {
          },
          removed => {
          }
      },
      5.021004 => {
          delta_from => 5.021003,
          changed => {
          },
          removed => {
          }
      },
      5.021005 => {
          delta_from => 5.021004,
          changed => {
          },
          removed => {
          }
      },
      5.021006 => {
          delta_from => 5.021005,
          changed => {
          },
          removed => {
          }
      },
      5.021007 => {
          delta_from => 5.021006,
          changed => {
          },
          removed => {
          }
      },
      5.021008 => {
          delta_from => 5.021007,
          changed => {
          },
          removed => {
          }
      },
      5.020002 => {
          delta_from => 5.020001,
          changed => {
          },
          removed => {
          }
      },
      5.021009 => {
          delta_from => 5.021008,
          changed => {
          },
          removed => {
          }
      },
      5.021010 => {
          delta_from => 5.021009,
          changed => {
          },
          removed => {
          }
      },
      5.021011 => {
          delta_from => 5.02101,
          changed => {
          },
          removed => {
          }
      },
      5.022000 => {
          delta_from => 5.021011,
          changed => {
          },
          removed => {
          }
      },
      5.023000 => {
          delta_from => 5.022000,
          changed => {
          },
          removed => {
          }
      },
      5.023001 => {
          delta_from => 5.023000,
          changed => {
          },
          removed => {
          }
      },
      5.023002 => {
          delta_from => 5.023001,
          changed => {
          },
          removed => {
          }
      },
      5.020003 => {
          delta_from => 5.020002,
          changed => {
          },
          removed => {
          }
      },
      5.023003 => {
          delta_from => 5.023002,
          changed => {
          },
          removed => {
          }
      },
      5.023004 => {
          delta_from => 5.023003,
          changed => {
          },
          removed => {
          }
      },
      5.023005 => {
          delta_from => 5.023004,
          changed => {
          },
          removed => {
          }
      },
      5.022001 => {
          delta_from => 5.022,
          changed => {
          },
          removed => {
          }
      },
      5.023006 => {
          delta_from => 5.023005,
          changed => {
          },
          removed => {
          }
      },
      5.023007 => {
          delta_from => 5.023006,
          changed => {
          },
          removed => {
          }
      },
      5.023008 => {
          delta_from => 5.023007,
          changed => {
          },
          removed => {
          }
      },
      5.023009 => {
          delta_from => 5.023008,
          changed => {
          },
          removed => {
          }
      },
      5.022002 => {
          delta_from => 5.022001,
          changed => {
          },
          removed => {
          }
      },
      5.024000 => {
          delta_from => 5.023009,
          changed => {
          },
          removed => {
          }
      },
      5.025000 => {
          delta_from => 5.024,
          changed => {
          },
          removed => {
          }
      },
      5.025001 => {
          delta_from => 5.025,
          changed => {
          },
          removed => {
          }
      },
  );
  
  for my $version (sort { $a <=> $b } keys %deprecated) {
      my $data = $deprecated{$version};
  
      tie %{ $deprecated{$version} }, 'Module::CoreList::TieHashDelta',
          $data->{changed}, $data->{removed},
          $data->{delta_from} ? $deprecated{ $data->{delta_from} } : undef;
  }
  
  %upstream = (
      'App::Cpan'             => 'cpan',
      'App::Prove'            => 'cpan',
      'App::Prove::State'     => 'cpan',
      'App::Prove::State::Result'=> 'cpan',
      'App::Prove::State::Result::Test'=> 'cpan',
      'Archive::Tar'          => 'cpan',
      'Archive::Tar::Constant'=> 'cpan',
      'Archive::Tar::File'    => 'cpan',
      'AutoLoader'            => 'cpan',
      'AutoSplit'             => 'cpan',
      'B::Debug'              => 'cpan',
      'CPAN'                  => 'cpan',
      'CPAN::Author'          => 'cpan',
      'CPAN::Bundle'          => 'cpan',
      'CPAN::CacheMgr'        => 'cpan',
      'CPAN::Complete'        => 'cpan',
      'CPAN::Debug'           => 'cpan',
      'CPAN::DeferredCode'    => 'cpan',
      'CPAN::Distribution'    => 'cpan',
      'CPAN::Distroprefs'     => 'cpan',
      'CPAN::Distrostatus'    => 'cpan',
      'CPAN::Exception::RecursiveDependency'=> 'cpan',
      'CPAN::Exception::blocked_urllist'=> 'cpan',
      'CPAN::Exception::yaml_not_installed'=> 'cpan',
      'CPAN::Exception::yaml_process_error'=> 'cpan',
      'CPAN::FTP'             => 'cpan',
      'CPAN::FTP::netrc'      => 'cpan',
      'CPAN::FirstTime'       => 'cpan',
      'CPAN::HTTP::Client'    => 'cpan',
      'CPAN::HTTP::Credentials'=> 'cpan',
      'CPAN::HandleConfig'    => 'cpan',
      'CPAN::Index'           => 'cpan',
      'CPAN::InfoObj'         => 'cpan',
      'CPAN::Kwalify'         => 'cpan',
      'CPAN::LWP::UserAgent'  => 'cpan',
      'CPAN::Meta'            => 'cpan',
      'CPAN::Meta::Converter' => 'cpan',
      'CPAN::Meta::Feature'   => 'cpan',
      'CPAN::Meta::History'   => 'cpan',
      'CPAN::Meta::Merge'     => 'cpan',
      'CPAN::Meta::Prereqs'   => 'cpan',
      'CPAN::Meta::Requirements'=> 'cpan',
      'CPAN::Meta::Spec'      => 'cpan',
      'CPAN::Meta::Validator' => 'cpan',
      'CPAN::Meta::YAML'      => 'cpan',
      'CPAN::Mirrors'         => 'cpan',
      'CPAN::Module'          => 'cpan',
      'CPAN::Nox'             => 'cpan',
      'CPAN::Plugin'          => 'cpan',
      'CPAN::Plugin::Specfile'=> 'cpan',
      'CPAN::Prompt'          => 'cpan',
      'CPAN::Queue'           => 'cpan',
      'CPAN::Shell'           => 'cpan',
      'CPAN::Tarzip'          => 'cpan',
      'CPAN::URL'             => 'cpan',
      'CPAN::Version'         => 'cpan',
      'Compress::Raw::Bzip2'  => 'cpan',
      'Compress::Raw::Zlib'   => 'cpan',
      'Compress::Zlib'        => 'cpan',
      'Config::Perl::V'       => 'cpan',
      'DB_File'               => 'cpan',
      'Devel::PPPort'         => 'cpan',
      'Digest'                => 'cpan',
      'Digest::MD5'           => 'cpan',
      'Digest::SHA'           => 'cpan',
      'Digest::base'          => 'cpan',
      'Digest::file'          => 'cpan',
      'Encode'                => 'cpan',
      'Encode::Alias'         => 'cpan',
      'Encode::Byte'          => 'cpan',
      'Encode::CJKConstants'  => 'cpan',
      'Encode::CN'            => 'cpan',
      'Encode::CN::HZ'        => 'cpan',
      'Encode::Config'        => 'cpan',
      'Encode::EBCDIC'        => 'cpan',
      'Encode::Encoder'       => 'cpan',
      'Encode::Encoding'      => 'cpan',
      'Encode::GSM0338'       => 'cpan',
      'Encode::Guess'         => 'cpan',
      'Encode::JP'            => 'cpan',
      'Encode::JP::H2Z'       => 'cpan',
      'Encode::JP::JIS7'      => 'cpan',
      'Encode::KR'            => 'cpan',
      'Encode::KR::2022_KR'   => 'cpan',
      'Encode::MIME::Header'  => 'cpan',
      'Encode::MIME::Header::ISO_2022_JP'=> 'cpan',
      'Encode::MIME::Name'    => 'cpan',
      'Encode::Symbol'        => 'cpan',
      'Encode::TW'            => 'cpan',
      'Encode::Unicode'       => 'cpan',
      'Encode::Unicode::UTF7' => 'cpan',
      'ExtUtils::Command'     => 'cpan',
      'ExtUtils::Command::MM' => 'cpan',
      'ExtUtils::Constant'    => 'cpan',
      'ExtUtils::Constant::Base'=> 'cpan',
      'ExtUtils::Constant::ProxySubs'=> 'cpan',
      'ExtUtils::Constant::Utils'=> 'cpan',
      'ExtUtils::Constant::XS'=> 'cpan',
      'ExtUtils::Install'     => 'cpan',
      'ExtUtils::Installed'   => 'cpan',
      'ExtUtils::Liblist'     => 'cpan',
      'ExtUtils::Liblist::Kid'=> 'cpan',
      'ExtUtils::MM'          => 'cpan',
      'ExtUtils::MM_AIX'      => 'cpan',
      'ExtUtils::MM_Any'      => 'cpan',
      'ExtUtils::MM_BeOS'     => 'cpan',
      'ExtUtils::MM_Cygwin'   => 'cpan',
      'ExtUtils::MM_DOS'      => 'cpan',
      'ExtUtils::MM_Darwin'   => 'cpan',
      'ExtUtils::MM_MacOS'    => 'cpan',
      'ExtUtils::MM_NW5'      => 'cpan',
      'ExtUtils::MM_OS2'      => 'cpan',
      'ExtUtils::MM_QNX'      => 'cpan',
      'ExtUtils::MM_UWIN'     => 'cpan',
      'ExtUtils::MM_Unix'     => 'cpan',
      'ExtUtils::MM_VMS'      => 'cpan',
      'ExtUtils::MM_VOS'      => 'cpan',
      'ExtUtils::MM_Win32'    => 'cpan',
      'ExtUtils::MM_Win95'    => 'cpan',
      'ExtUtils::MY'          => 'cpan',
      'ExtUtils::MakeMaker'   => 'cpan',
      'ExtUtils::MakeMaker::Config'=> 'cpan',
      'ExtUtils::MakeMaker::Locale'=> 'cpan',
      'ExtUtils::MakeMaker::version'=> 'cpan',
      'ExtUtils::MakeMaker::version::regex'=> 'cpan',
      'ExtUtils::Manifest'    => 'cpan',
      'ExtUtils::Mkbootstrap' => 'cpan',
      'ExtUtils::Mksymlists'  => 'cpan',
      'ExtUtils::Packlist'    => 'cpan',
      'ExtUtils::testlib'     => 'cpan',
      'Fatal'                 => 'cpan',
      'File::Fetch'           => 'cpan',
      'File::GlobMapper'      => 'cpan',
      'File::Path'            => 'cpan',
      'File::Temp'            => 'cpan',
      'Filter::Util::Call'    => 'cpan',
      'Getopt::Long'          => 'cpan',
      'HTTP::Tiny'            => 'cpan',
      'IO::Compress::Adapter::Bzip2'=> 'cpan',
      'IO::Compress::Adapter::Deflate'=> 'cpan',
      'IO::Compress::Adapter::Identity'=> 'cpan',
      'IO::Compress::Base'    => 'cpan',
      'IO::Compress::Base::Common'=> 'cpan',
      'IO::Compress::Bzip2'   => 'cpan',
      'IO::Compress::Deflate' => 'cpan',
      'IO::Compress::Gzip'    => 'cpan',
      'IO::Compress::Gzip::Constants'=> 'cpan',
      'IO::Compress::RawDeflate'=> 'cpan',
      'IO::Compress::Zip'     => 'cpan',
      'IO::Compress::Zip::Constants'=> 'cpan',
      'IO::Compress::Zlib::Constants'=> 'cpan',
      'IO::Compress::Zlib::Extra'=> 'cpan',
      'IO::Socket::IP'        => 'cpan',
      'IO::Uncompress::Adapter::Bunzip2'=> 'cpan',
      'IO::Uncompress::Adapter::Identity'=> 'cpan',
      'IO::Uncompress::Adapter::Inflate'=> 'cpan',
      'IO::Uncompress::AnyInflate'=> 'cpan',
      'IO::Uncompress::AnyUncompress'=> 'cpan',
      'IO::Uncompress::Base'  => 'cpan',
      'IO::Uncompress::Bunzip2'=> 'cpan',
      'IO::Uncompress::Gunzip'=> 'cpan',
      'IO::Uncompress::Inflate'=> 'cpan',
      'IO::Uncompress::RawInflate'=> 'cpan',
      'IO::Uncompress::Unzip' => 'cpan',
      'IO::Zlib'              => 'cpan',
      'IPC::Cmd'              => 'cpan',
      'IPC::Msg'              => 'cpan',
      'IPC::Semaphore'        => 'cpan',
      'IPC::SharedMem'        => 'cpan',
      'IPC::SysV'             => 'cpan',
      'JSON::PP'              => 'cpan',
      'JSON::PP::Boolean'     => 'cpan',
      'List::Util'            => 'cpan',
      'List::Util::XS'        => 'cpan',
      'Locale::Codes'         => 'cpan',
      'Locale::Codes::Constants'=> 'cpan',
      'Locale::Codes::Country'=> 'cpan',
      'Locale::Codes::Country_Codes'=> 'cpan',
      'Locale::Codes::Country_Retired'=> 'cpan',
      'Locale::Codes::Currency'=> 'cpan',
      'Locale::Codes::Currency_Codes'=> 'cpan',
      'Locale::Codes::Currency_Retired'=> 'cpan',
      'Locale::Codes::LangExt'=> 'cpan',
      'Locale::Codes::LangExt_Codes'=> 'cpan',
      'Locale::Codes::LangExt_Retired'=> 'cpan',
      'Locale::Codes::LangFam'=> 'cpan',
      'Locale::Codes::LangFam_Codes'=> 'cpan',
      'Locale::Codes::LangFam_Retired'=> 'cpan',
      'Locale::Codes::LangVar'=> 'cpan',
      'Locale::Codes::LangVar_Codes'=> 'cpan',
      'Locale::Codes::LangVar_Retired'=> 'cpan',
      'Locale::Codes::Language'=> 'cpan',
      'Locale::Codes::Language_Codes'=> 'cpan',
      'Locale::Codes::Language_Retired'=> 'cpan',
      'Locale::Codes::Script' => 'cpan',
      'Locale::Codes::Script_Codes'=> 'cpan',
      'Locale::Codes::Script_Retired'=> 'cpan',
      'Locale::Country'       => 'cpan',
      'Locale::Currency'      => 'cpan',
      'Locale::Language'      => 'cpan',
      'Locale::Maketext::Simple'=> 'cpan',
      'Locale::Script'        => 'cpan',
      'MIME::Base64'          => 'cpan',
      'MIME::QuotedPrint'     => 'cpan',
      'Math::BigFloat'        => 'cpan',
      'Math::BigFloat::Trace' => 'cpan',
      'Math::BigInt'          => 'cpan',
      'Math::BigInt::Calc'    => 'cpan',
      'Math::BigInt::CalcEmu' => 'cpan',
      'Math::BigInt::FastCalc'=> 'cpan',
      'Math::BigInt::Trace'   => 'cpan',
      'Math::BigRat'          => 'cpan',
      'Math::Complex'         => 'cpan',
      'Math::Trig'            => 'cpan',
      'Memoize'               => 'cpan',
      'Memoize::AnyDBM_File'  => 'cpan',
      'Memoize::Expire'       => 'cpan',
      'Memoize::ExpireFile'   => 'cpan',
      'Memoize::ExpireTest'   => 'cpan',
      'Memoize::NDBM_File'    => 'cpan',
      'Memoize::SDBM_File'    => 'cpan',
      'Memoize::Storable'     => 'cpan',
      'Module::Load'          => 'cpan',
      'Module::Load::Conditional'=> 'cpan',
      'Module::Loaded'        => 'cpan',
      'Module::Metadata'      => 'cpan',
      'NEXT'                  => 'cpan',
      'Net::Cmd'              => 'cpan',
      'Net::Config'           => 'cpan',
      'Net::Domain'           => 'cpan',
      'Net::FTP'              => 'cpan',
      'Net::FTP::A'           => 'cpan',
      'Net::FTP::E'           => 'cpan',
      'Net::FTP::I'           => 'cpan',
      'Net::FTP::L'           => 'cpan',
      'Net::FTP::dataconn'    => 'cpan',
      'Net::NNTP'             => 'cpan',
      'Net::Netrc'            => 'cpan',
      'Net::POP3'             => 'cpan',
      'Net::SMTP'             => 'cpan',
      'Net::Time'             => 'cpan',
      'Params::Check'         => 'cpan',
      'Parse::CPAN::Meta'     => 'cpan',
      'Perl::OSType'          => 'cpan',
      'PerlIO::via::QuotedPrint'=> 'cpan',
      'Pod::Checker'          => 'cpan',
      'Pod::Escapes'          => 'cpan',
      'Pod::Find'             => 'cpan',
      'Pod::InputObjects'     => 'cpan',
      'Pod::Man'              => 'cpan',
      'Pod::ParseLink'        => 'cpan',
      'Pod::ParseUtils'       => 'cpan',
      'Pod::Parser'           => 'cpan',
      'Pod::Perldoc'          => 'cpan',
      'Pod::Perldoc::BaseTo'  => 'cpan',
      'Pod::Perldoc::GetOptsOO'=> 'cpan',
      'Pod::Perldoc::ToANSI'  => 'cpan',
      'Pod::Perldoc::ToChecker'=> 'cpan',
      'Pod::Perldoc::ToMan'   => 'cpan',
      'Pod::Perldoc::ToNroff' => 'cpan',
      'Pod::Perldoc::ToPod'   => 'cpan',
      'Pod::Perldoc::ToRtf'   => 'cpan',
      'Pod::Perldoc::ToTerm'  => 'cpan',
      'Pod::Perldoc::ToText'  => 'cpan',
      'Pod::Perldoc::ToTk'    => 'cpan',
      'Pod::Perldoc::ToXml'   => 'cpan',
      'Pod::PlainText'        => 'cpan',
      'Pod::Select'           => 'cpan',
      'Pod::Simple'           => 'cpan',
      'Pod::Simple::BlackBox' => 'cpan',
      'Pod::Simple::Checker'  => 'cpan',
      'Pod::Simple::Debug'    => 'cpan',
      'Pod::Simple::DumpAsText'=> 'cpan',
      'Pod::Simple::DumpAsXML'=> 'cpan',
      'Pod::Simple::HTML'     => 'cpan',
      'Pod::Simple::HTMLBatch'=> 'cpan',
      'Pod::Simple::HTMLLegacy'=> 'cpan',
      'Pod::Simple::LinkSection'=> 'cpan',
      'Pod::Simple::Methody'  => 'cpan',
      'Pod::Simple::Progress' => 'cpan',
      'Pod::Simple::PullParser'=> 'cpan',
      'Pod::Simple::PullParserEndToken'=> 'cpan',
      'Pod::Simple::PullParserStartToken'=> 'cpan',
      'Pod::Simple::PullParserTextToken'=> 'cpan',
      'Pod::Simple::PullParserToken'=> 'cpan',
      'Pod::Simple::RTF'      => 'cpan',
      'Pod::Simple::Search'   => 'cpan',
      'Pod::Simple::SimpleTree'=> 'cpan',
      'Pod::Simple::Text'     => 'cpan',
      'Pod::Simple::TextContent'=> 'cpan',
      'Pod::Simple::TiedOutFH'=> 'cpan',
      'Pod::Simple::Transcode'=> 'cpan',
      'Pod::Simple::TranscodeDumb'=> 'cpan',
      'Pod::Simple::TranscodeSmart'=> 'cpan',
      'Pod::Simple::XHTML'    => 'cpan',
      'Pod::Simple::XMLOutStream'=> 'cpan',
      'Pod::Text'             => 'cpan',
      'Pod::Text::Color'      => 'cpan',
      'Pod::Text::Overstrike' => 'cpan',
      'Pod::Text::Termcap'    => 'cpan',
      'Pod::Usage'            => 'cpan',
      'Scalar::Util'          => 'cpan',
      'Socket'                => 'cpan',
      'Sub::Util'             => 'cpan',
      'Sys::Syslog'           => 'cpan',
      'Sys::Syslog::Win32'    => 'cpan',
      'TAP::Base'             => 'cpan',
      'TAP::Formatter::Base'  => 'cpan',
      'TAP::Formatter::Color' => 'cpan',
      'TAP::Formatter::Console'=> 'cpan',
      'TAP::Formatter::Console::ParallelSession'=> 'cpan',
      'TAP::Formatter::Console::Session'=> 'cpan',
      'TAP::Formatter::File'  => 'cpan',
      'TAP::Formatter::File::Session'=> 'cpan',
      'TAP::Formatter::Session'=> 'cpan',
      'TAP::Harness'          => 'cpan',
      'TAP::Harness::Env'     => 'cpan',
      'TAP::Object'           => 'cpan',
      'TAP::Parser'           => 'cpan',
      'TAP::Parser::Aggregator'=> 'cpan',
      'TAP::Parser::Grammar'  => 'cpan',
      'TAP::Parser::Iterator' => 'cpan',
      'TAP::Parser::Iterator::Array'=> 'cpan',
      'TAP::Parser::Iterator::Process'=> 'cpan',
      'TAP::Parser::Iterator::Stream'=> 'cpan',
      'TAP::Parser::IteratorFactory'=> 'cpan',
      'TAP::Parser::Multiplexer'=> 'cpan',
      'TAP::Parser::Result'   => 'cpan',
      'TAP::Parser::Result::Bailout'=> 'cpan',
      'TAP::Parser::Result::Comment'=> 'cpan',
      'TAP::Parser::Result::Plan'=> 'cpan',
      'TAP::Parser::Result::Pragma'=> 'cpan',
      'TAP::Parser::Result::Test'=> 'cpan',
      'TAP::Parser::Result::Unknown'=> 'cpan',
      'TAP::Parser::Result::Version'=> 'cpan',
      'TAP::Parser::Result::YAML'=> 'cpan',
      'TAP::Parser::ResultFactory'=> 'cpan',
      'TAP::Parser::Scheduler'=> 'cpan',
      'TAP::Parser::Scheduler::Job'=> 'cpan',
      'TAP::Parser::Scheduler::Spinner'=> 'cpan',
      'TAP::Parser::Source'   => 'cpan',
      'TAP::Parser::SourceHandler'=> 'cpan',
      'TAP::Parser::SourceHandler::Executable'=> 'cpan',
      'TAP::Parser::SourceHandler::File'=> 'cpan',
      'TAP::Parser::SourceHandler::Handle'=> 'cpan',
      'TAP::Parser::SourceHandler::Perl'=> 'cpan',
      'TAP::Parser::SourceHandler::RawTAP'=> 'cpan',
      'TAP::Parser::YAMLish::Reader'=> 'cpan',
      'TAP::Parser::YAMLish::Writer'=> 'cpan',
      'Term::ANSIColor'       => 'cpan',
      'Term::Cap'             => 'cpan',
      'Test2'                 => 'cpan',
      'Test2::API'            => 'cpan',
      'Test2::API::Breakage'  => 'cpan',
      'Test2::API::Context'   => 'cpan',
      'Test2::API::Instance'  => 'cpan',
      'Test2::API::Stack'     => 'cpan',
      'Test2::Event'          => 'cpan',
      'Test2::Event::Bail'    => 'cpan',
      'Test2::Event::Diag'    => 'cpan',
      'Test2::Event::Exception'=> 'cpan',
      'Test2::Event::Note'    => 'cpan',
      'Test2::Event::Ok'      => 'cpan',
      'Test2::Event::Plan'    => 'cpan',
      'Test2::Event::Skip'    => 'cpan',
      'Test2::Event::Subtest' => 'cpan',
      'Test2::Event::Waiting' => 'cpan',
      'Test2::Formatter'      => 'cpan',
      'Test2::Formatter::TAP' => 'cpan',
      'Test2::Hub'            => 'cpan',
      'Test2::Hub::Interceptor'=> 'cpan',
      'Test2::Hub::Interceptor::Terminator'=> 'cpan',
      'Test2::Hub::Subtest'   => 'cpan',
      'Test2::IPC'            => 'cpan',
      'Test2::IPC::Driver'    => 'cpan',
      'Test2::IPC::Driver::Files'=> 'cpan',
      'Test2::Util'           => 'cpan',
      'Test2::Util::ExternalMeta'=> 'cpan',
      'Test2::Util::HashBase' => 'cpan',
      'Test2::Util::Trace'    => 'cpan',
      'Test::Builder'         => 'cpan',
      'Test::Builder::Formatter'=> 'cpan',
      'Test::Builder::IO::Scalar'=> 'cpan',
      'Test::Builder::Module' => 'cpan',
      'Test::Builder::Tester' => 'cpan',
      'Test::Builder::Tester::Color'=> 'cpan',
      'Test::Builder::TodoDiag'=> 'cpan',
      'Test::Harness'         => 'cpan',
      'Test::More'            => 'cpan',
      'Test::Simple'          => 'cpan',
      'Test::Tester'          => 'cpan',
      'Test::Tester::Capture' => 'cpan',
      'Test::Tester::CaptureRunner'=> 'cpan',
      'Test::Tester::Delegate'=> 'cpan',
      'Test::use::ok'         => 'cpan',
      'Text::Balanced'        => 'cpan',
      'Text::ParseWords'      => 'cpan',
      'Text::Tabs'            => 'cpan',
      'Text::Wrap'            => 'cpan',
      'Tie::RefHash'          => 'cpan',
      'Time::Local'           => 'cpan',
      'Time::Piece'           => 'cpan',
      'Time::Seconds'         => 'cpan',
      'Unicode::Collate'      => 'cpan',
      'Unicode::Collate::CJK::Big5'=> 'cpan',
      'Unicode::Collate::CJK::GB2312'=> 'cpan',
      'Unicode::Collate::CJK::JISX0208'=> 'cpan',
      'Unicode::Collate::CJK::Korean'=> 'cpan',
      'Unicode::Collate::CJK::Pinyin'=> 'cpan',
      'Unicode::Collate::CJK::Stroke'=> 'cpan',
      'Unicode::Collate::CJK::Zhuyin'=> 'cpan',
      'Unicode::Collate::Locale'=> 'cpan',
      'Unicode::Normalize'    => 'cpan',
      'Win32'                 => 'cpan',
      'Win32API::File'        => 'cpan',
      'Win32API::File::inc::ExtUtils::Myconst2perl'=> 'cpan',
      'autodie'               => 'cpan',
      'autodie::Scope::Guard' => 'cpan',
      'autodie::Scope::GuardStack'=> 'cpan',
      'autodie::Util'         => 'cpan',
      'autodie::exception'    => 'cpan',
      'autodie::exception::system'=> 'cpan',
      'autodie::hints'        => 'cpan',
      'autodie::skip'         => 'cpan',
      'bigint'                => 'cpan',
      'bignum'                => 'cpan',
      'bigrat'                => 'cpan',
      'encoding'              => 'cpan',
      'experimental'          => 'cpan',
      'ok'                    => 'cpan',
      'parent'                => 'cpan',
      'perlfaq'               => 'cpan',
      'version'               => 'cpan',
      'version::regex'        => 'cpan',
  );
  
  %bug_tracker = (
      'App::Cpan'             => undef,
      'App::Prove'            => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'App::Prove::State'     => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'App::Prove::State::Result'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'App::Prove::State::Result::Test'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'Archive::Tar'          => undef,
      'Archive::Tar::Constant'=> undef,
      'Archive::Tar::File'    => undef,
      'B::Debug'              => undef,
      'CPAN'                  => undef,
      'CPAN::Author'          => undef,
      'CPAN::Bundle'          => undef,
      'CPAN::CacheMgr'        => undef,
      'CPAN::Complete'        => undef,
      'CPAN::Debug'           => undef,
      'CPAN::DeferredCode'    => undef,
      'CPAN::Distribution'    => undef,
      'CPAN::Distroprefs'     => undef,
      'CPAN::Distrostatus'    => undef,
      'CPAN::Exception::RecursiveDependency'=> undef,
      'CPAN::Exception::blocked_urllist'=> undef,
      'CPAN::Exception::yaml_not_installed'=> undef,
      'CPAN::Exception::yaml_process_error'=> undef,
      'CPAN::FTP'             => undef,
      'CPAN::FTP::netrc'      => undef,
      'CPAN::FirstTime'       => undef,
      'CPAN::HTTP::Client'    => undef,
      'CPAN::HTTP::Credentials'=> undef,
      'CPAN::HandleConfig'    => undef,
      'CPAN::Index'           => undef,
      'CPAN::InfoObj'         => undef,
      'CPAN::Kwalify'         => undef,
      'CPAN::LWP::UserAgent'  => undef,
      'CPAN::Meta'            => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Converter' => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Feature'   => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::History'   => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Merge'     => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Prereqs'   => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Requirements'=> 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues',
      'CPAN::Meta::Spec'      => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::Validator' => 'https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues',
      'CPAN::Meta::YAML'      => 'https://github.com/Perl-Toolchain-Gang/YAML-Tiny/issues',
      'CPAN::Mirrors'         => undef,
      'CPAN::Module'          => undef,
      'CPAN::Nox'             => undef,
      'CPAN::Plugin'          => undef,
      'CPAN::Plugin::Specfile'=> undef,
      'CPAN::Prompt'          => undef,
      'CPAN::Queue'           => undef,
      'CPAN::Shell'           => undef,
      'CPAN::Tarzip'          => undef,
      'CPAN::URL'             => undef,
      'CPAN::Version'         => undef,
      'Compress::Raw::Bzip2'  => undef,
      'Compress::Raw::Zlib'   => undef,
      'Compress::Zlib'        => undef,
      'Config::Perl::V'       => undef,
      'DB_File'               => undef,
      'Devel::PPPort'         => 'https://github.com/mhx/Devel-PPPort/issues/',
      'Digest'                => undef,
      'Digest::MD5'           => undef,
      'Digest::SHA'           => undef,
      'Digest::base'          => undef,
      'Digest::file'          => undef,
      'Encode'                => undef,
      'Encode::Alias'         => undef,
      'Encode::Byte'          => undef,
      'Encode::CJKConstants'  => undef,
      'Encode::CN'            => undef,
      'Encode::CN::HZ'        => undef,
      'Encode::Config'        => undef,
      'Encode::EBCDIC'        => undef,
      'Encode::Encoder'       => undef,
      'Encode::Encoding'      => undef,
      'Encode::GSM0338'       => undef,
      'Encode::Guess'         => undef,
      'Encode::JP'            => undef,
      'Encode::JP::H2Z'       => undef,
      'Encode::JP::JIS7'      => undef,
      'Encode::KR'            => undef,
      'Encode::KR::2022_KR'   => undef,
      'Encode::MIME::Header'  => undef,
      'Encode::MIME::Header::ISO_2022_JP'=> undef,
      'Encode::MIME::Name'    => undef,
      'Encode::Symbol'        => undef,
      'Encode::TW'            => undef,
      'Encode::Unicode'       => undef,
      'Encode::Unicode::UTF7' => undef,
      'ExtUtils::Command'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Command::MM' => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Constant'    => undef,
      'ExtUtils::Constant::Base'=> undef,
      'ExtUtils::Constant::ProxySubs'=> undef,
      'ExtUtils::Constant::Utils'=> undef,
      'ExtUtils::Constant::XS'=> undef,
      'ExtUtils::Install'     => 'https://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-Install',
      'ExtUtils::Installed'   => 'https://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-Install',
      'ExtUtils::Liblist'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Liblist::Kid'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM'          => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_AIX'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Any'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_BeOS'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Cygwin'   => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_DOS'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Darwin'   => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_MacOS'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_NW5'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_OS2'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_QNX'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_UWIN'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Unix'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_VMS'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_VOS'      => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Win32'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MM_Win95'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MY'          => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker'   => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::Config'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::Locale'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::version'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::MakeMaker::version::regex'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Manifest'    => 'http://github.com/Perl-Toolchain-Gang/ExtUtils-Manifest/issues',
      'ExtUtils::Mkbootstrap' => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Mksymlists'  => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'ExtUtils::Packlist'    => 'https://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-Install',
      'ExtUtils::testlib'     => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=ExtUtils-MakeMaker',
      'Fatal'                 => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'File::Fetch'           => undef,
      'File::GlobMapper'      => undef,
      'File::Path'            => undef,
      'File::Temp'            => 'http://rt.cpan.org/Public/Dist/Display.html?Name=File-Temp',
      'Filter::Util::Call'    => undef,
      'Getopt::Long'          => undef,
      'HTTP::Tiny'            => 'https://github.com/chansen/p5-http-tiny/issues',
      'IO::Compress::Adapter::Bzip2'=> undef,
      'IO::Compress::Adapter::Deflate'=> undef,
      'IO::Compress::Adapter::Identity'=> undef,
      'IO::Compress::Base'    => undef,
      'IO::Compress::Base::Common'=> undef,
      'IO::Compress::Bzip2'   => undef,
      'IO::Compress::Deflate' => undef,
      'IO::Compress::Gzip'    => undef,
      'IO::Compress::Gzip::Constants'=> undef,
      'IO::Compress::RawDeflate'=> undef,
      'IO::Compress::Zip'     => undef,
      'IO::Compress::Zip::Constants'=> undef,
      'IO::Compress::Zlib::Constants'=> undef,
      'IO::Compress::Zlib::Extra'=> undef,
      'IO::Socket::IP'        => undef,
      'IO::Uncompress::Adapter::Bunzip2'=> undef,
      'IO::Uncompress::Adapter::Identity'=> undef,
      'IO::Uncompress::Adapter::Inflate'=> undef,
      'IO::Uncompress::AnyInflate'=> undef,
      'IO::Uncompress::AnyUncompress'=> undef,
      'IO::Uncompress::Base'  => undef,
      'IO::Uncompress::Bunzip2'=> undef,
      'IO::Uncompress::Gunzip'=> undef,
      'IO::Uncompress::Inflate'=> undef,
      'IO::Uncompress::RawInflate'=> undef,
      'IO::Uncompress::Unzip' => undef,
      'IO::Zlib'              => undef,
      'IPC::Cmd'              => undef,
      'IPC::Msg'              => undef,
      'IPC::Semaphore'        => undef,
      'IPC::SharedMem'        => undef,
      'IPC::SysV'             => undef,
      'JSON::PP'              => undef,
      'JSON::PP::Boolean'     => undef,
      'List::Util'            => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'List::Util::XS'        => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'Locale::Codes'         => undef,
      'Locale::Codes::Constants'=> undef,
      'Locale::Codes::Country'=> undef,
      'Locale::Codes::Country_Codes'=> undef,
      'Locale::Codes::Country_Retired'=> undef,
      'Locale::Codes::Currency'=> undef,
      'Locale::Codes::Currency_Codes'=> undef,
      'Locale::Codes::Currency_Retired'=> undef,
      'Locale::Codes::LangExt'=> undef,
      'Locale::Codes::LangExt_Codes'=> undef,
      'Locale::Codes::LangExt_Retired'=> undef,
      'Locale::Codes::LangFam'=> undef,
      'Locale::Codes::LangFam_Codes'=> undef,
      'Locale::Codes::LangFam_Retired'=> undef,
      'Locale::Codes::LangVar'=> undef,
      'Locale::Codes::LangVar_Codes'=> undef,
      'Locale::Codes::LangVar_Retired'=> undef,
      'Locale::Codes::Language'=> undef,
      'Locale::Codes::Language_Codes'=> undef,
      'Locale::Codes::Language_Retired'=> undef,
      'Locale::Codes::Script' => undef,
      'Locale::Codes::Script_Codes'=> undef,
      'Locale::Codes::Script_Retired'=> undef,
      'Locale::Country'       => undef,
      'Locale::Currency'      => undef,
      'Locale::Language'      => undef,
      'Locale::Maketext::Simple'=> undef,
      'Locale::Script'        => undef,
      'MIME::Base64'          => undef,
      'MIME::QuotedPrint'     => undef,
      'Math::BigFloat'        => undef,
      'Math::BigFloat::Trace' => undef,
      'Math::BigInt'          => undef,
      'Math::BigInt::Calc'    => undef,
      'Math::BigInt::CalcEmu' => undef,
      'Math::BigInt::FastCalc'=> undef,
      'Math::BigInt::Trace'   => undef,
      'Math::BigRat'          => undef,
      'Math::Complex'         => undef,
      'Math::Trig'            => undef,
      'Memoize'               => undef,
      'Memoize::AnyDBM_File'  => undef,
      'Memoize::Expire'       => undef,
      'Memoize::ExpireFile'   => undef,
      'Memoize::ExpireTest'   => undef,
      'Memoize::NDBM_File'    => undef,
      'Memoize::SDBM_File'    => undef,
      'Memoize::Storable'     => undef,
      'Module::Load'          => undef,
      'Module::Load::Conditional'=> undef,
      'Module::Loaded'        => undef,
      'Module::Metadata'      => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Module-Metadata',
      'NEXT'                  => undef,
      'Net::Cmd'              => undef,
      'Net::Config'           => undef,
      'Net::Domain'           => undef,
      'Net::FTP'              => undef,
      'Net::FTP::A'           => undef,
      'Net::FTP::E'           => undef,
      'Net::FTP::I'           => undef,
      'Net::FTP::L'           => undef,
      'Net::FTP::dataconn'    => undef,
      'Net::NNTP'             => undef,
      'Net::Netrc'            => undef,
      'Net::POP3'             => undef,
      'Net::SMTP'             => undef,
      'Net::Time'             => undef,
      'Params::Check'         => undef,
      'Parse::CPAN::Meta'     => 'https://github.com/Perl-Toolchain-Gang/Parse-CPAN-Meta/issues',
      'Perl::OSType'          => 'https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues',
      'PerlIO::via::QuotedPrint'=> undef,
      'Pod::Checker'          => undef,
      'Pod::Escapes'          => undef,
      'Pod::Find'             => undef,
      'Pod::InputObjects'     => undef,
      'Pod::Man'              => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::ParseLink'        => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::ParseUtils'       => undef,
      'Pod::Parser'           => undef,
      'Pod::Perldoc'          => undef,
      'Pod::Perldoc::BaseTo'  => undef,
      'Pod::Perldoc::GetOptsOO'=> undef,
      'Pod::Perldoc::ToANSI'  => undef,
      'Pod::Perldoc::ToChecker'=> undef,
      'Pod::Perldoc::ToMan'   => undef,
      'Pod::Perldoc::ToNroff' => undef,
      'Pod::Perldoc::ToPod'   => undef,
      'Pod::Perldoc::ToRtf'   => undef,
      'Pod::Perldoc::ToTerm'  => undef,
      'Pod::Perldoc::ToText'  => undef,
      'Pod::Perldoc::ToTk'    => undef,
      'Pod::Perldoc::ToXml'   => undef,
      'Pod::PlainText'        => undef,
      'Pod::Select'           => undef,
      'Pod::Simple'           => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::BlackBox' => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Checker'  => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Debug'    => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::DumpAsText'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::DumpAsXML'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::HTML'     => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::HTMLBatch'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::HTMLLegacy'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::LinkSection'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Methody'  => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Progress' => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParser'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserEndToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserStartToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserTextToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::PullParserToken'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::RTF'      => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Search'   => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::SimpleTree'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Text'     => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TextContent'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TiedOutFH'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::Transcode'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TranscodeDumb'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::TranscodeSmart'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::XHTML'    => 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Simple::XMLOutStream'=> 'https://github.com/perl-pod/pod-simple/issues',
      'Pod::Text'             => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Text::Color'      => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Text::Overstrike' => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Text::Termcap'    => 'https://rt.cpan.org/Dist/Display.html?Name=podlators',
      'Pod::Usage'            => undef,
      'Scalar::Util'          => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'Socket'                => undef,
      'Sub::Util'             => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Scalar-List-Utils',
      'Sys::Syslog'           => undef,
      'Sys::Syslog::Win32'    => undef,
      'TAP::Base'             => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Base'  => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Color' => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Console'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Console::ParallelSession'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Console::Session'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::File'  => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::File::Session'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Formatter::Session'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Harness'          => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Harness::Env'     => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Object'           => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser'           => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Aggregator'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Grammar'  => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator' => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator::Array'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator::Process'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Iterator::Stream'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::IteratorFactory'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Multiplexer'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result'   => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Bailout'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Comment'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Plan'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Pragma'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Test'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Unknown'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::Version'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Result::YAML'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::ResultFactory'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Scheduler'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Scheduler::Job'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Scheduler::Spinner'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::Source'   => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::Executable'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::File'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::Handle'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::Perl'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::SourceHandler::RawTAP'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::YAMLish::Reader'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'TAP::Parser::YAMLish::Writer'=> 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'Term::ANSIColor'       => 'https://rt.cpan.org/Dist/Display.html?Name=Term-ANSIColor',
      'Term::Cap'             => undef,
      'Test2'                 => 'http://github.com/Test-More/test-more/issues',
      'Test2::API'            => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Breakage'  => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Context'   => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Instance'  => 'http://github.com/Test-More/test-more/issues',
      'Test2::API::Stack'     => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event'          => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Bail'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Diag'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Exception'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Note'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Ok'      => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Plan'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Skip'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Subtest' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Event::Waiting' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Formatter'      => 'http://github.com/Test-More/test-more/issues',
      'Test2::Formatter::TAP' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub'            => 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub::Interceptor'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub::Interceptor::Terminator'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Hub::Subtest'   => 'http://github.com/Test-More/test-more/issues',
      'Test2::IPC'            => 'http://github.com/Test-More/test-more/issues',
      'Test2::IPC::Driver'    => 'http://github.com/Test-More/test-more/issues',
      'Test2::IPC::Driver::Files'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Util'           => 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::ExternalMeta'=> 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::HashBase' => 'http://github.com/Test-More/test-more/issues',
      'Test2::Util::Trace'    => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder'         => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Formatter'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::IO::Scalar'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Module' => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Tester' => 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::Tester::Color'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Builder::TodoDiag'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Harness'         => 'http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Harness',
      'Test::More'            => 'http://github.com/Test-More/test-more/issues',
      'Test::Simple'          => 'http://github.com/Test-More/test-more/issues',
      'Test::Tester'          => 'http://github.com/Test-More/test-more/issues',
      'Test::Tester::Capture' => 'http://github.com/Test-More/test-more/issues',
      'Test::Tester::CaptureRunner'=> 'http://github.com/Test-More/test-more/issues',
      'Test::Tester::Delegate'=> 'http://github.com/Test-More/test-more/issues',
      'Test::use::ok'         => 'http://github.com/Test-More/test-more/issues',
      'Text::Balanced'        => undef,
      'Text::ParseWords'      => undef,
      'Text::Tabs'            => undef,
      'Text::Wrap'            => undef,
      'Tie::RefHash'          => undef,
      'Time::Local'           => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=Time-Local',
      'Time::Piece'           => undef,
      'Time::Seconds'         => undef,
      'Unicode::Collate'      => undef,
      'Unicode::Collate::CJK::Big5'=> undef,
      'Unicode::Collate::CJK::GB2312'=> undef,
      'Unicode::Collate::CJK::JISX0208'=> undef,
      'Unicode::Collate::CJK::Korean'=> undef,
      'Unicode::Collate::CJK::Pinyin'=> undef,
      'Unicode::Collate::CJK::Stroke'=> undef,
      'Unicode::Collate::CJK::Zhuyin'=> undef,
      'Unicode::Collate::Locale'=> undef,
      'Unicode::Normalize'    => 'https://rt.cpan.org/Public/Dist/Display.html?Name=Unicode-Normalize',
      'Win32'                 => undef,
      'Win32API::File'        => undef,
      'Win32API::File::inc::ExtUtils::Myconst2perl'=> undef,
      'autodie'               => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::Scope::Guard' => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::Scope::GuardStack'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::Util'         => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::exception'    => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::exception::system'=> 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::hints'        => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'autodie::skip'         => 'http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie',
      'bigint'                => undef,
      'bignum'                => undef,
      'bigrat'                => undef,
      'encoding'              => undef,
      'experimental'          => 'http://rt.cpan.org/Public/Dist/Display.html?Name=experimental',
      'ok'                    => 'http://github.com/Test-More/test-more/issues',
      'parent'                => undef,
      'perlfaq'               => 'https://github.com/perl-doc-cats/perlfaq/issues',
      'version'               => 'https://rt.cpan.org/Public/Dist/Display.html?Name=version',
      'version::regex'        => 'https://rt.cpan.org/Public/Dist/Display.html?Name=version',
  );
  
  # Create aliases with trailing zeros for $] use
  
  $released{'5.000'} = $released{5};
  $version{'5.000'} = $version{5};
  
  _create_aliases(\%delta);
  _create_aliases(\%released);
  _create_aliases(\%version);
  _create_aliases(\%deprecated);
  
  sub _create_aliases {
      my ($hash) = @_;
  
      for my $version (keys %$hash) {
          next unless $version >= 5.006;
  
          my $padded = sprintf "%0.6f", $version;
  
          # If the version in string form isn't the same as the numeric version,
          # alias it.
          if ($padded ne $version && $version == $padded) {
              $hash->{$padded} = $hash->{$version};
          }
      }
  }
  
  1;
  __END__
MODULE_CORELIST

$fatpacked{"Module/CoreList/TieHashDelta.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_CORELIST_TIEHASHDELTA';
  # For internal Module::CoreList use only.
  package Module::CoreList::TieHashDelta;
  use strict;
  use vars qw($VERSION);
  
  $VERSION = '5.20160520';
  
  sub TIEHASH {
      my ($class, $changed, $removed, $parent) = @_;
  
      return bless {
          changed => $changed,
          removed => $removed,
          parent => $parent,
          keys_inflated => 0,
      }, $class;
  }
  
  sub FETCH {
      my ($self, $key) = @_;
  
      if (exists $self->{changed}{$key}) {
          return $self->{changed}{$key};
      } elsif (exists $self->{removed}{$key}) {
          return undef;
      } elsif (defined $self->{parent}) {
          return $self->{parent}{$key};
      }
      return undef;
  }
  
  sub EXISTS {
      my ($self, $key) = @_;
  
      restart:
      if (exists $self->{changed}{$key}) {
          return 1;
      } elsif (exists $self->{removed}{$key}) {
          return '';
      } elsif (defined $self->{parent}) {
          $self = tied %{$self->{parent}}; #avoid extreme magic/tie recursion
          goto restart;
      }
      return '';
  }
  
  sub FIRSTKEY {
      my ($self) = @_;
  
      if (not $self->{keys_inflated}) {
          # exceeds the warning limit of 100 calls since 5.23.2
          no warnings 'recursion';
  
          # This inflates the whole set of hashes... Somewhat expensive, but saves
          # many tied hash calls later.
          my @parent_keys;
          if (defined $self->{parent}) {
              @parent_keys = keys %{$self->{parent}};
          }
  
          @parent_keys = grep !exists $self->{removed}{$_}, @parent_keys;
          for my $key (@parent_keys) {
              next if exists $self->{changed}->{$key};
              $self->{changed}{$key} = $self->{parent}{$key};
          }
  
          $self->{keys_inflated} = 1;
      }
  
      keys %{$self->{changed}}; # reset each
      $self->NEXTKEY;
  }
  
  sub NEXTKEY {
      my ($self) = @_;
      each %{$self->{changed}};
  }
  
  1;
MODULE_CORELIST_TIEHASHDELTA

$fatpacked{"Module/CoreList/Utils.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_CORELIST_UTILS';
  package Module::CoreList::Utils;
  
  use strict;
  use warnings;
  use vars qw[$VERSION %utilities];
  use Module::CoreList;
  use Module::CoreList::TieHashDelta;
  
  $VERSION = '5.20160520';
  
  sub utilities {
      my $perl = shift;
      $perl = shift if eval { $perl->isa(__PACKAGE__) };
      return unless $perl or exists $utilities{$perl};
      return sort keys %{ $utilities{$perl} };
  }
  
  sub _released_order {   # Sort helper, to make '?' sort after everything else
      (substr($Module::CoreList::released{$a}, 0, 1) eq "?")
      ? ((substr($Module::CoreList::released{$b}, 0, 1) eq "?")
          ? 0
          : 1)
      : ((substr($Module::CoreList::released{$b}, 0, 1) eq "?")
          ? -1
          : $Module::CoreList::released{$a} cmp $Module::CoreList::released{$b} )
  }
  
  sub first_release_raw {
      my $util = shift;
      $util = shift if eval { $util->isa(__PACKAGE__) };
        #and scalar @_ and $_[0] =~ m#\A[a-zA-Z_][0-9a-zA-Z_]*(?:(::|')[0-9a-zA-Z_]+)*\z#;
      my $version = shift;
  
      my @perls = $version
          ? grep { exists $utilities{$_}{ $util } &&
                          $utilities{$_}{ $util } ge $version } keys %utilities
          : grep { exists $utilities{$_}{ $util }             } keys %utilities;
  
      return grep { exists $Module::CoreList::released{$_} } @perls;
  }
  
  sub first_release_by_date {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort _released_order @perls)[0];
  }
  
  sub first_release {
      my @perls = &first_release_raw;
      return unless @perls;
      return (sort { $a cmp $b } @perls)[0];
  }
  
  sub removed_from {
    my @perls = &removed_raw;
    return shift @perls;
  }
  
  sub removed_from_by_date {
    my @perls = sort _released_order &removed_raw;
    return shift @perls;
  }
  
  sub removed_raw {
    my $util = shift;
    $util = shift if eval { $util->isa(__PACKAGE__) };
    return unless my @perls = sort { $a cmp $b } first_release_raw($util);
    @perls = grep { exists $Module::CoreList::released{$_} } @perls;
    my $last = pop @perls;
    my @removed = grep { $_ > $last } sort { $a cmp $b } keys %utilities;
    return @removed;
  }
  
  my %delta = (
      5 => {
          changed => {
              'a2p'                   => '1',
              'c2ph'                  => '1',
              'cppstdin'              => '1',
              'find2perl'             => '1',
              'pstruct'               => '1',
              's2p'                   => '1',
          },
          removed => {
          }
      },
  
      5.001 => {
          delta_from => 5,
          changed => {
              'h2xs'                  => '1',
          },
          removed => {
          }
      },
  
      5.002 => {
          delta_from => 5.001,
          changed => {
              'h2ph'                  => '1',
              'perlbug'               => '1',
              'perldoc'               => '1',
              'pod2html'              => '1',
              'pod2latex'             => '1',
              'pod2man'               => '1',
              'pod2text'              => '1',
          },
          removed => {
          }
      },
  
      5.00307 => {
          delta_from => 5.002,
          changed => {
              'pl2pm'                 => '1',
          },
          removed => {
             'cppstdin'              => 1,
             'pstruct'               => 1,
          }
      },
  
      5.004 => {
          delta_from => 5.00307,
          changed => {
              'splain'                => '1',
          },
          removed => {
          }
      },
  
      5.005 => {
          delta_from => 5.00405,
          changed => {
              'perlcc'                => '1',
          },
          removed => {
          }
      },
  
      5.00503 => {
          delta_from => 5.005,
          changed => {
          },
          removed => {
          }
      },
  
      5.00405 => {
          delta_from => 5.004,
          changed => {
          },
          removed => {
          }
      },
  
      5.006 => {
          delta_from => 5.00504,
          changed => {
              'dprofpp'               => '1',
              'pod2usage'             => '1',
              'podchecker'            => '1',
              'podselect'             => '1',
              'pstruct'               => '1',
          },
          removed => {
          }
      },
  
      5.006001 => {
          delta_from => 5.006,
          changed => {
          },
          removed => {
          }
      },
  
      5.007003 => {
          delta_from => 5.006002,
          changed => {
              'libnetcfg'             => '1',
              'perlivp'               => '1',
              'psed'                  => '1',
              'xsubpp'                => '1',
          },
          removed => {
          }
      },
  
      5.008 => {
          delta_from => 5.007003,
          changed => {
              'enc2xs'                => '1',
              'piconv'                => '1',
          },
          removed => {
          }
      },
  
      5.008001 => {
          delta_from => 5.008,
          changed => {
              'cpan'                  => '1',
          },
          removed => {
          }
      },
  
      5.009 => {
          delta_from => 5.008009,
          changed => {
          },
          removed => {
             'corelist'              => 1,
             'instmodsh'             => 1,
             'prove'                 => 1,
          }
      },
  
      5.008002 => {
          delta_from => 5.008001,
          changed => {
          },
          removed => {
          }
      },
  
      5.006002 => {
          delta_from => 5.006001,
          changed => {
          },
          removed => {
          }
      },
  
      5.008003 => {
          delta_from => 5.008002,
          changed => {
              'instmodsh'             => '1',
              'prove'                 => '1',
          },
          removed => {
          }
      },
  
      5.00504 => {
          delta_from => 5.00503,
          changed => {
          },
          removed => {
          }
      },
  
      5.009001 => {
          delta_from => 5.009,
          changed => {
              'instmodsh'             => '1',
              'prove'                 => '1',
          },
          removed => {
          }
      },
  
      5.008004 => {
          delta_from => 5.008003,
          changed => {
          },
          removed => {
          }
      },
  
      5.008005 => {
          delta_from => 5.008004,
          changed => {
          },
          removed => {
          }
      },
  
      5.008006 => {
          delta_from => 5.008005,
          changed => {
          },
          removed => {
          }
      },
  
      5.009002 => {
          delta_from => 5.009001,
          changed => {
              'corelist'              => '1',
          },
          removed => {
          }
      },
  
      5.008007 => {
          delta_from => 5.008006,
          changed => {
          },
          removed => {
          }
      },
  
      5.009003 => {
          delta_from => 5.009002,
          changed => {
              'ptar'                  => '1',
              'ptardiff'              => '1',
              'shasum'                => '1',
          },
          removed => {
          }
      },
  
      5.008008 => {
          delta_from => 5.008007,
          changed => {
          },
          removed => {
          }
      },
  
      5.009004 => {
          delta_from => 5.009003,
          changed => {
              'config_data'           => '1',
          },
          removed => {
          }
      },
  
      5.009005 => {
          delta_from => 5.009004,
          changed => {
              'cpan2dist'             => '1',
              'cpanp'                 => '1',
              'cpanp-run-perl'        => '1',
          },
          removed => {
             'perlcc'                => 1,
          }
      },
  
      5.010000 => {
          delta_from => 5.009005,
          changed => {
          },
          removed => {
          }
      },
  
      5.008009 => {
          delta_from => 5.008008,
          changed => {
              'corelist'              => '1',
          },
          removed => {
          }
      },
  
      5.010001 => {
          delta_from => 5.010000,
          changed => {
          },
          removed => {
          }
      },
  
      5.011 => {
          delta_from => 5.010001,
          changed => {
          },
          removed => {
          }
      },
  
      5.011001 => {
          delta_from => 5.011,
          changed => {
          },
          removed => {
          }
      },
  
      5.011002 => {
          delta_from => 5.011001,
          changed => {
              'perlthanks'            => '1',
          },
          removed => {
          }
      },
  
      5.011003 => {
          delta_from => 5.011002,
          changed => {
          },
          removed => {
          }
      },
  
      5.011004 => {
          delta_from => 5.011003,
          changed => {
          },
          removed => {
          }
      },
  
      5.011005 => {
          delta_from => 5.011004,
          changed => {
          },
          removed => {
          }
      },
  
      5.012 => {
          delta_from => 5.011005,
          changed => {
          },
          removed => {
          }
      },
  
      5.013 => {
          delta_from => 5.012005,
          changed => {
          },
          removed => {
          }
      },
  
      5.012001 => {
          delta_from => 5.012,
          changed => {
          },
          removed => {
          }
      },
  
      5.013001 => {
          delta_from => 5.013,
          changed => {
          },
          removed => {
          }
      },
  
      5.013002 => {
          delta_from => 5.013001,
          changed => {
          },
          removed => {
          }
      },
  
      5.013003 => {
          delta_from => 5.013002,
          changed => {
          },
          removed => {
          }
      },
  
      5.013004 => {
          delta_from => 5.013003,
          changed => {
          },
          removed => {
          }
      },
  
      5.012002 => {
          delta_from => 5.012001,
          changed => {
          },
          removed => {
          }
      },
  
      5.013005 => {
          delta_from => 5.013004,
          changed => {
          },
          removed => {
          }
      },
  
      5.013006 => {
          delta_from => 5.013005,
          changed => {
          },
          removed => {
          }
      },
  
      5.013007 => {
          delta_from => 5.013006,
          changed => {
              'ptargrep'              => '1',
          },
          removed => {
          }
      },
  
      5.013008 => {
          delta_from => 5.013007,
          changed => {
          },
          removed => {
          }
      },
  
      5.013009 => {
          delta_from => 5.013008,
          changed => {
              'json_pp'               => '1',
          },
          removed => {
          }
      },
  
      5.012003 => {
          delta_from => 5.012002,
          changed => {
          },
          removed => {
          }
      },
  
      5.013010 => {
          delta_from => 5.013009,
          changed => {
          },
          removed => {
          }
      },
  
      5.013011 => {
          delta_from => 5.013010,
          changed => {
          },
          removed => {
          }
      },
  
      5.014 => {
          delta_from => 5.013011,
          changed => {
          },
          removed => {
          }
      },
  
      5.014001 => {
          delta_from => 5.014,
          changed => {
          },
          removed => {
          }
      },
  
      5.015 => {
          delta_from => 5.014004,
          changed => {
          },
          removed => {
             'dprofpp'               => 1,
          }
      },
  
      5.012004 => {
          delta_from => 5.012003,
          changed => {
          },
          removed => {
          }
      },
  
      5.015001 => {
          delta_from => 5.015,
          changed => {
          },
          removed => {
          }
      },
  
      5.015002 => {
          delta_from => 5.015001,
          changed => {
          },
          removed => {
          }
      },
  
      5.015003 => {
          delta_from => 5.015002,
          changed => {
          },
          removed => {
          }
      },
  
      5.014002 => {
          delta_from => 5.014001,
          changed => {
          },
          removed => {
          }
      },
  
      5.015004 => {
          delta_from => 5.015003,
          changed => {
          },
          removed => {
          }
      },
  
      5.015005 => {
          delta_from => 5.015004,
          changed => {
          },
          removed => {
          }
      },
  
      5.015006 => {
          delta_from => 5.015005,
          changed => {
              'zipdetails'            => '1',
          },
          removed => {
          }
      },
  
      5.015007 => {
          delta_from => 5.015006,
          changed => {
          },
          removed => {
          }
      },
  
      5.015008 => {
          delta_from => 5.015007,
          changed => {
          },
          removed => {
          }
      },
  
      5.015009 => {
          delta_from => 5.015008,
          changed => {
          },
          removed => {
          }
      },
  
      5.016 => {
          delta_from => 5.015009,
          changed => {
          },
          removed => {
          }
      },
  
      5.017 => {
          delta_from => 5.016003,
          changed => {
          },
          removed => {
          }
      },
  
      5.017001 => {
          delta_from => 5.017,
          changed => {
          },
          removed => {
          }
      },
  
      5.017002 => {
          delta_from => 5.017001,
          changed => {
          },
          removed => {
          }
      },
  
      5.016001 => {
          delta_from => 5.016,
          changed => {
          },
          removed => {
          }
      },
  
      5.017003 => {
          delta_from => 5.017002,
          changed => {
          },
          removed => {
          }
      },
  
      5.017004 => {
          delta_from => 5.017003,
          changed => {
          },
          removed => {
          }
      },
  
      5.014003 => {
          delta_from => 5.014002,
          changed => {
          },
          removed => {
          }
      },
  
      5.017005 => {
          delta_from => 5.017004,
          changed => {
          },
          removed => {
          }
      },
  
      5.016002 => {
          delta_from => 5.016001,
          changed => {
          },
          removed => {
          }
      },
  
      5.012005 => {
          delta_from => 5.012004,
          changed => {
          },
          removed => {
          }
      },
  
      5.017006 => {
          delta_from => 5.017005,
          changed => {
          },
          removed => {
          }
      },
  
      5.017007 => {
          delta_from => 5.017006,
          changed => {
          },
          removed => {
          }
      },
  
      5.017008 => {
          delta_from => 5.017007,
          changed => {
          },
          removed => {
          }
      },
  
      5.017009 => {
          delta_from => 5.017008,
          changed => {
          },
          removed => {
          }
      },
  
      5.014004 => {
          delta_from => 5.014003,
          changed => {
          },
          removed => {
          }
      },
  
      5.016003 => {
          delta_from => 5.016002,
          changed => {
          },
          removed => {
          }
      },
  
      5.017010 => {
          delta_from => 5.017009,
          changed => {
          },
          removed => {
          }
      },
  
      5.017011 => {
          delta_from => 5.017010,
          changed => {
          },
          removed => {
          }
      },
      5.018000 => {
          delta_from => 5.017011,
          changed => {
          },
          removed => {
          }
      },
      5.018001 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
          }
      },
      5.018002 => {
          delta_from => 5.018001,
          changed => {
          },
          removed => {
          }
      },
      5.018003 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
          }
      },
      5.018004 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
          }
      },
      5.019000 => {
          delta_from => 5.018000,
          changed => {
          },
          removed => {
              'cpan2dist'             => '1',
              'cpanp'                 => '1',
              'cpanp-run-perl'        => '1',
              'pod2latex'             => '1',
          }
      },
      5.019001 => {
          delta_from => 5.019000,
          changed => {
          },
          removed => {
          }
      },
      5.019002 => {
          delta_from => 5.019001,
          changed => {
          },
          removed => {
          }
      },
      5.019003 => {
          delta_from => 5.019002,
          changed => {
          },
          removed => {
          }
      },
      5.019004 => {
          delta_from => 5.019003,
          changed => {
          },
          removed => {
          }
      },
      5.019005 => {
          delta_from => 5.019004,
          changed => {
          },
          removed => {
          }
      },
      5.019006 => {
          delta_from => 5.019005,
          changed => {
          },
          removed => {
          }
      },
      5.019007 => {
          delta_from => 5.019006,
          changed => {
          },
          removed => {
          }
      },
      5.019008 => {
          delta_from => 5.019007,
          changed => {
          },
          removed => {
          }
      },
      5.019009 => {
          delta_from => 5.019008,
          changed => {
          },
          removed => {
          }
      },
      5.019010 => {
          delta_from => 5.019009,
          changed => {
          },
          removed => {
          }
      },
      5.019011 => {
          delta_from => 5.019010,
          changed => {
          },
          removed => {
          }
      },
      5.020000 => {
          delta_from => 5.019011,
          changed => {
          },
          removed => {
          }
      },
      5.021000 => {
          delta_from => 5.020000,
          changed => {
          },
          removed => {
          }
      },
      5.021001 => {
          delta_from => 5.021000,
          changed => {
          },
          removed => {
              'a2p'                   => 1,
              'config_data'           => 1,
              'find2perl'             => 1,
              'psed'                  => 1,
              's2p'                   => 1,
          }
      },
      5.021002 => {
          delta_from => 5.021001,
          changed => {
          },
          removed => {
          }
      },
      5.021003 => {
          delta_from => 5.021002,
          changed => {
          },
          removed => {
          }
      },
      5.020001 => {
          delta_from => 5.02,
          changed => {
          },
          removed => {
          }
      },
      5.021004 => {
          delta_from => 5.021003,
          changed => {
          },
          removed => {
          }
      },
      5.021005 => {
          delta_from => 5.021004,
          changed => {
          },
          removed => {
          }
      },
      5.021006 => {
          delta_from => 5.021005,
          changed => {
          },
          removed => {
          }
      },
      5.021007 => {
          delta_from => 5.021006,
          changed => {
          },
          removed => {
          }
      },
      5.021008 => {
          delta_from => 5.021007,
          changed => {
          },
          removed => {
          }
      },
      5.020002 => {
          delta_from => 5.020001,
          changed => {
          },
          removed => {
          }
      },
      5.021009 => {
          delta_from => 5.021008,
          changed => {
              'encguess'              => '1',
          },
          removed => {
          }
      },
      5.021010 => {
          delta_from => 5.021009,
          changed => {
          },
          removed => {
          }
      },
      5.021011 => {
          delta_from => 5.02101,
          changed => {
          },
          removed => {
          }
      },
      5.022000 => {
          delta_from => 5.021011,
          changed => {
          },
          removed => {
          }
      },
      5.023000 => {
          delta_from => 5.022000,
          changed => {
          },
          removed => {
          }
      },
      5.023001 => {
          delta_from => 5.023,
          changed => {
          },
          removed => {
          }
      },
      5.023002 => {
          delta_from => 5.023001,
          changed => {
          },
          removed => {
          }
      },
      5.020003 => {
          delta_from => 5.020002,
          changed => {
          },
          removed => {
          }
      },
      5.023003 => {
          delta_from => 5.023002,
          changed => {
          },
          removed => {
          }
      },
      5.023004 => {
          delta_from => 5.023003,
          changed => {
          },
          removed => {
          }
      },
      5.023005 => {
          delta_from => 5.023004,
          changed => {
          },
          removed => {
          }
      },
      5.022001 => {
          delta_from => 5.022,
          changed => {
          },
          removed => {
          }
      },
      5.023006 => {
          delta_from => 5.023005,
          changed => {
          },
          removed => {
          }
      },
      5.023007 => {
          delta_from => 5.023006,
          changed => {
          },
          removed => {
          }
      },
      5.023008 => {
          delta_from => 5.023007,
          changed => {
          },
          removed => {
          }
      },
      5.023009 => {
          delta_from => 5.023008,
          changed => {
          },
          removed => {
          }
      },
      5.022002 => {
          delta_from => 5.022001,
          changed => {
          },
          removed => {
          }
      },
      5.024000 => {
          delta_from => 5.023009,
          changed => {
          },
          removed => {
          }
      },
      5.025000 => {
          delta_from => 5.024000,
          changed => {
          },
          removed => {
          }
      },
      5.025001 => {
          delta_from => 5.025000,
          changed => {
          },
          removed => {
          }
      },
  );
  
  for my $version (sort { $a <=> $b } keys %delta) {
      my $data = $delta{$version};
  
      tie %{$utilities{$version}}, 'Module::CoreList::TieHashDelta',
          $data->{changed}, $data->{removed},
          $data->{delta_from} ? $utilities{$data->{delta_from}} : undef;
  }
  
  # Create aliases with trailing zeros for $] use
  
  $utilities{'5.000'} = $utilities{5};
  
  _create_aliases(\%utilities);
  
  sub _create_aliases {
      my ($hash) = @_;
  
      for my $version (keys %$hash) {
          next unless $version >= 5.010;
  
          my $padded = sprintf "%0.6f", $version;
  
          # If the version in string form isn't the same as the numeric version,
          # alias it.
          if ($padded ne $version && $version == $padded) {
              $hash->{$padded} = $hash->{$version};
          }
      }
  }
  
  'foo';
  
  =pod
  
  =head1 NAME
  
  Module::CoreList::Utils - what utilities shipped with versions of perl
  
  =head1 SYNOPSIS
  
   use Module::CoreList::Utils;
  
   print $Module::CoreList::Utils::utilities{5.009003}{ptar}; # prints 1
  
   print Module::CoreList::Utils->first_release('corelist');
   # prints 5.008009
  
   print Module::CoreList::Utils->first_release_by_date('corelist');
   # prints 5.009002
  
  =head1 DESCRIPTION
  
  Module::CoreList::Utils provides information on which core and dual-life utilities shipped
  with each version of L<perl>.
  
  It provides a number of mechanisms for querying this information.
  
  There is a functional programming API available for programmers to query
  information.
  
  Programmers may also query the contained hash structure to find relevant
  information.
  
  =head1 FUNCTIONS API
  
  These are the functions that are available, they may either be called as functions or class methods:
  
    Module::CoreList::Utils::first_release('corelist'); # as a function
  
    Module::CoreList::Utils->first_release('corelist'); # class method
  
  =over
  
  =item C<utilities>
  
  Requires a perl version as an argument, returns a list of utilities that shipped with
  that version of perl, or undef/empty list if that perl doesn't exist.
  
  =item C<first_release( UTILITY )>
  
  Requires a UTILITY name as an argument, returns the perl version when that utility first
  appeared in core as ordered by perl version number or undef ( in scalar context )
  or an empty list ( in list context ) if that utility is not in core.
  
  =item C<first_release_by_date( UTILITY )>
  
  Requires a UTILITY name as an argument, returns the perl version when that utility first
  appeared in core as ordered by release date or undef ( in scalar context )
  or an empty list ( in list context ) if that utility is not in core.
  
  =item C<removed_from( UTILITY )>
  
  Takes a UTILITY name as an argument, returns the first perl version where that utility
  was removed from core. Returns undef if the given utility was never in core or remains
  in core.
  
  =item C<removed_from_by_date( UTILITY )>
  
  Takes a UTILITY name as an argument, returns the first perl version by release date where that
  utility was removed from core. Returns undef if the given utility was never in core or remains
  in core.
  
  =back
  
  =head1 DATA STRUCTURES
  
  These are the hash data structures that are available:
  
  =over
  
  =item C<%Module::CoreList::Utils::utilities>
  
  A hash of hashes that is keyed on perl version as indicated
  in $].  The second level hash is utility / defined pairs.
  
  =back
  
  =head1 AUTHOR
  
  Chris C<BinGOs> Williams <chris@bingosnet.co.uk>
  
  Currently maintained by the perl 5 porters E<lt>perl5-porters@perl.orgE<gt>.
  
  This module is the result of archaeology undertaken during QA Hackathon
  in Lancaster, April 2013.
  
  =head1 LICENSE
  
  Copyright (C) 2013 Chris Williams.  All Rights Reserved.
  
  This module is free software; you can redistribute it and/or modify it
  under the same terms as Perl itself.
  
  =head1 SEE ALSO
  
  L<corelist>, L<Module::CoreList>, L<perl>, L<http://perlpunks.de/corelist>
  
  =cut
MODULE_CORELIST_UTILS

$fatpacked{"Module/Metadata.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MODULE_METADATA';
  # -*- mode: cperl; tab-width: 8; indent-tabs-mode: nil; basic-offset: 2 -*-
  # vim:ts=8:sw=2:et:sta:sts=2
  package Module::Metadata; # git description: v1.000026-12-g9b12bf1
  
  # Adapted from Perl-licensed code originally distributed with
  # Module-Build by Ken Williams
  
  # This module provides routines to gather information about
  # perl modules (assuming this may be expanded in the distant
  # parrot future to look at other types of modules).
  
  sub __clean_eval { eval $_[0] }
  use strict;
  use warnings;
  
  our $VERSION = '1.000027';
  
  use Carp qw/croak/;
  use File::Spec;
  BEGIN {
         # Try really hard to not depend ony any DynaLoaded module, such as IO::File or Fcntl
         eval {
                 require Fcntl; Fcntl->import('SEEK_SET'); 1;
         } or *SEEK_SET = sub { 0 }
  }
  use version 0.87;
  BEGIN {
    if ($INC{'Log/Contextual.pm'}) {
      require "Log/Contextual/WarnLogger.pm"; # Hide from AutoPrereqs
      Log::Contextual->import('log_info',
        '-default_logger' => Log::Contextual::WarnLogger->new({ env_prefix => 'MODULE_METADATA', }),
      );
    } else {
      *log_info = sub (&) { warn $_[0]->() };
    }
  }
  use File::Find qw(find);
  
  my $V_NUM_REGEXP = qr{v?[0-9._]+};  # crudely, a v-string or decimal
  
  my $PKG_FIRST_WORD_REGEXP = qr{ # the FIRST word in a package name
    [a-zA-Z_]                     # the first word CANNOT start with a digit
      (?:
        [\w']?                    # can contain letters, digits, _, or ticks
        \w                        # But, NO multi-ticks or trailing ticks
      )*
  }x;
  
  my $PKG_ADDL_WORD_REGEXP = qr{ # the 2nd+ word in a package name
    \w                           # the 2nd+ word CAN start with digits
      (?:
        [\w']?                   # and can contain letters or ticks
        \w                       # But, NO multi-ticks or trailing ticks
      )*
  }x;
  
  my $PKG_NAME_REGEXP = qr{ # match a package name
    (?: :: )?               # a pkg name can start with arisdottle
    $PKG_FIRST_WORD_REGEXP  # a package word
    (?:
      (?: :: )+             ### arisdottle (allow one or many times)
      $PKG_ADDL_WORD_REGEXP ### a package word
    )*                      # ^ zero, one or many times
    (?:
      ::                    # allow trailing arisdottle
    )?
  }x;
  
  my $PKG_REGEXP  = qr{   # match a package declaration
    ^[\s\{;]*             # intro chars on a line
    package               # the word 'package'
    \s+                   # whitespace
    ($PKG_NAME_REGEXP)    # a package name
    \s*                   # optional whitespace
    ($V_NUM_REGEXP)?        # optional version number
    \s*                   # optional whitesapce
    [;\{]                 # semicolon line terminator or block start (since 5.16)
  }x;
  
  my $VARNAME_REGEXP = qr{ # match fully-qualified VERSION name
    ([\$*])         # sigil - $ or *
    (
      (             # optional leading package name
        (?:::|\')?  # possibly starting like just :: (a la $::VERSION)
        (?:\w+(?:::|\'))*  # Foo::Bar:: ...
      )?
      VERSION
    )\b
  }x;
  
  my $VERS_REGEXP = qr{ # match a VERSION definition
    (?:
      \(\s*$VARNAME_REGEXP\s*\) # with parens
    |
      $VARNAME_REGEXP           # without parens
    )
    \s*
    =[^=~>]  # = but not ==, nor =~, nor =>
  }x;
  
  sub new_from_file {
    my $class    = shift;
    my $filename = File::Spec->rel2abs( shift );
  
    return undef unless defined( $filename ) && -f $filename;
    return $class->_init(undef, $filename, @_);
  }
  
  sub new_from_handle {
    my $class    = shift;
    my $handle   = shift;
    my $filename = shift;
    return undef unless defined($handle) && defined($filename);
    $filename = File::Spec->rel2abs( $filename );
  
    return $class->_init(undef, $filename, @_, handle => $handle);
  
  }
  
  
  sub new_from_module {
    my $class   = shift;
    my $module  = shift;
    my %props   = @_;
  
    $props{inc} ||= \@INC;
    my $filename = $class->find_module_by_name( $module, $props{inc} );
    return undef unless defined( $filename ) && -f $filename;
    return $class->_init($module, $filename, %props);
  }
  
  {
  
    my $compare_versions = sub {
      my ($v1, $op, $v2) = @_;
      $v1 = version->new($v1)
        unless UNIVERSAL::isa($v1,'version');
  
      my $eval_str = "\$v1 $op \$v2";
      my $result   = eval $eval_str;
      log_info { "error comparing versions: '$eval_str' $@" } if $@;
  
      return $result;
    };
  
    my $normalize_version = sub {
      my ($version) = @_;
      if ( $version =~ /[=<>!,]/ ) { # logic, not just version
        # take as is without modification
      }
      elsif ( ref $version eq 'version' ) { # version objects
        $version = $version->is_qv ? $version->normal : $version->stringify;
      }
      elsif ( $version =~ /^[^v][^.]*\.[^.]+\./ ) { # no leading v, multiple dots
        # normalize string tuples without "v": "1.2.3" -> "v1.2.3"
        $version = "v$version";
      }
      else {
        # leave alone
      }
      return $version;
    };
  
    # separate out some of the conflict resolution logic
  
    my $resolve_module_versions = sub {
      my $packages = shift;
  
      my( $file, $version );
      my $err = '';
        foreach my $p ( @$packages ) {
          if ( defined( $p->{version} ) ) {
            if ( defined( $version ) ) {
              if ( $compare_versions->( $version, '!=', $p->{version} ) ) {
                $err .= "  $p->{file} ($p->{version})\n";
              } else {
                # same version declared multiple times, ignore
              }
            } else {
              $file    = $p->{file};
              $version = $p->{version};
            }
          }
        $file ||= $p->{file} if defined( $p->{file} );
      }
  
      if ( $err ) {
        $err = "  $file ($version)\n" . $err;
      }
  
      my %result = (
        file    => $file,
        version => $version,
        err     => $err
      );
  
      return \%result;
    };
  
    sub provides {
      my $class = shift;
  
      croak "provides() requires key/value pairs \n" if @_ % 2;
      my %args = @_;
  
      croak "provides() takes only one of 'dir' or 'files'\n"
        if $args{dir} && $args{files};
  
      croak "provides() requires a 'version' argument"
        unless defined $args{version};
  
      croak "provides() does not support version '$args{version}' metadata"
          unless grep { $args{version} eq $_ } qw/1.4 2/;
  
      $args{prefix} = 'lib' unless defined $args{prefix};
  
      my $p;
      if ( $args{dir} ) {
        $p = $class->package_versions_from_directory($args{dir});
      }
      else {
        croak "provides() requires 'files' to be an array reference\n"
          unless ref $args{files} eq 'ARRAY';
        $p = $class->package_versions_from_directory($args{files});
      }
  
      # Now, fix up files with prefix
      if ( length $args{prefix} ) { # check in case disabled with q{}
        $args{prefix} =~ s{/$}{};
        for my $v ( values %$p ) {
          $v->{file} = "$args{prefix}/$v->{file}";
        }
      }
  
      return $p
    }
  
    sub package_versions_from_directory {
      my ( $class, $dir, $files ) = @_;
  
      my @files;
  
      if ( $files ) {
        @files = @$files;
      } else {
        find( {
          wanted => sub {
            push @files, $_ if -f $_ && /\.pm$/;
          },
          no_chdir => 1,
        }, $dir );
      }
  
      # First, we enumerate all packages & versions,
      # separating into primary & alternative candidates
      my( %prime, %alt );
      foreach my $file (@files) {
        my $mapped_filename = File::Spec::Unix->abs2rel( $file, $dir );
        my @path = split( /\//, $mapped_filename );
        (my $prime_package = join( '::', @path )) =~ s/\.pm$//;
  
        my $pm_info = $class->new_from_file( $file );
  
        foreach my $package ( $pm_info->packages_inside ) {
          next if $package eq 'main';  # main can appear numerous times, ignore
          next if $package eq 'DB';    # special debugging package, ignore
          next if grep /^_/, split( /::/, $package ); # private package, ignore
  
          my $version = $pm_info->version( $package );
  
          $prime_package = $package if lc($prime_package) eq lc($package);
          if ( $package eq $prime_package ) {
            if ( exists( $prime{$package} ) ) {
              croak "Unexpected conflict in '$package'; multiple versions found.\n";
            } else {
              $mapped_filename = "$package.pm" if lc("$package.pm") eq lc($mapped_filename);
              $prime{$package}{file} = $mapped_filename;
              $prime{$package}{version} = $version if defined( $version );
            }
          } else {
            push( @{$alt{$package}}, {
                                      file    => $mapped_filename,
                                      version => $version,
                                     } );
          }
        }
      }
  
      # Then we iterate over all the packages found above, identifying conflicts
      # and selecting the "best" candidate for recording the file & version
      # for each package.
      foreach my $package ( keys( %alt ) ) {
        my $result = $resolve_module_versions->( $alt{$package} );
  
        if ( exists( $prime{$package} ) ) { # primary package selected
  
          if ( $result->{err} ) {
          # Use the selected primary package, but there are conflicting
          # errors among multiple alternative packages that need to be
          # reported
            log_info {
              "Found conflicting versions for package '$package'\n" .
              "  $prime{$package}{file} ($prime{$package}{version})\n" .
              $result->{err}
            };
  
          } elsif ( defined( $result->{version} ) ) {
          # There is a primary package selected, and exactly one
          # alternative package
  
          if ( exists( $prime{$package}{version} ) &&
               defined( $prime{$package}{version} ) ) {
            # Unless the version of the primary package agrees with the
            # version of the alternative package, report a conflict
          if ( $compare_versions->(
                   $prime{$package}{version}, '!=', $result->{version}
                 )
               ) {
  
              log_info {
                "Found conflicting versions for package '$package'\n" .
                "  $prime{$package}{file} ($prime{$package}{version})\n" .
                "  $result->{file} ($result->{version})\n"
              };
            }
  
          } else {
            # The prime package selected has no version so, we choose to
            # use any alternative package that does have a version
            $prime{$package}{file}    = $result->{file};
            $prime{$package}{version} = $result->{version};
          }
  
          } else {
          # no alt package found with a version, but we have a prime
          # package so we use it whether it has a version or not
          }
  
        } else { # No primary package was selected, use the best alternative
  
          if ( $result->{err} ) {
            log_info {
              "Found conflicting versions for package '$package'\n" .
              $result->{err}
            };
          }
  
          # Despite possible conflicting versions, we choose to record
          # something rather than nothing
          $prime{$package}{file}    = $result->{file};
          $prime{$package}{version} = $result->{version}
            if defined( $result->{version} );
        }
      }
  
      # Normalize versions.  Can't use exists() here because of bug in YAML::Node.
      # XXX "bug in YAML::Node" comment seems irrelevant -- dagolden, 2009-05-18
      for (grep defined $_->{version}, values %prime) {
        $_->{version} = $normalize_version->( $_->{version} );
      }
  
      return \%prime;
    }
  }
  
  
  sub _init {
    my $class    = shift;
    my $module   = shift;
    my $filename = shift;
    my %props = @_;
  
    my $handle = delete $props{handle};
    my( %valid_props, @valid_props );
    @valid_props = qw( collect_pod inc );
    @valid_props{@valid_props} = delete( @props{@valid_props} );
    warn "Unknown properties: @{[keys %props]}\n" if scalar( %props );
  
    my %data = (
      module       => $module,
      filename     => $filename,
      version      => undef,
      packages     => [],
      versions     => {},
      pod          => {},
      pod_headings => [],
      collect_pod  => 0,
  
      %valid_props,
    );
  
    my $self = bless(\%data, $class);
  
    if ( not $handle ) {
      my $filename = $self->{filename};
      open $handle, '<', $filename
        or croak( "Can't open '$filename': $!" );
  
      $self->_handle_bom($handle, $filename);
    }
    $self->_parse_fh($handle);
  
    unless($self->{module} and length($self->{module})) {
      my ($v, $d, $f) = File::Spec->splitpath($self->{filename});
      if($f =~ /\.pm$/) {
        $f =~ s/\..+$//;
        my @candidates = grep /$f$/, @{$self->{packages}};
        $self->{module} = shift(@candidates); # punt
      }
      else {
        if(grep /main/, @{$self->{packages}}) {
          $self->{module} = 'main';
        }
        else {
          $self->{module} = $self->{packages}[0] || '';
        }
      }
    }
  
    $self->{version} = $self->{versions}{$self->{module}}
        if defined( $self->{module} );
  
    return $self;
  }
  
  # class method
  sub _do_find_module {
    my $class   = shift;
    my $module  = shift || croak 'find_module_by_name() requires a package name';
    my $dirs    = shift || \@INC;
  
    my $file = File::Spec->catfile(split( /::/, $module));
    foreach my $dir ( @$dirs ) {
      my $testfile = File::Spec->catfile($dir, $file);
      return [ File::Spec->rel2abs( $testfile ), $dir ]
        if -e $testfile and !-d _;  # For stuff like ExtUtils::xsubpp
      $testfile .= '.pm';
      return [ File::Spec->rel2abs( $testfile ), $dir ]
        if -e $testfile;
    }
    return;
  }
  
  # class method
  sub find_module_by_name {
    my $found = shift()->_do_find_module(@_) or return;
    return $found->[0];
  }
  
  # class method
  sub find_module_dir_by_name {
    my $found = shift()->_do_find_module(@_) or return;
    return $found->[1];
  }
  
  
  # given a line of perl code, attempt to parse it if it looks like a
  # $VERSION assignment, returning sigil, full name, & package name
  sub _parse_version_expression {
    my $self = shift;
    my $line = shift;
  
    my( $sigil, $variable_name, $package);
    if ( $line =~ /$VERS_REGEXP/o ) {
      ( $sigil, $variable_name, $package) = $2 ? ( $1, $2, $3 ) : ( $4, $5, $6 );
      if ( $package ) {
        $package = ($package eq '::') ? 'main' : $package;
        $package =~ s/::$//;
      }
    }
  
    return ( $sigil, $variable_name, $package );
  }
  
  # Look for a UTF-8/UTF-16BE/UTF-16LE BOM at the beginning of the stream.
  # If there's one, then skip it and set the :encoding layer appropriately.
  sub _handle_bom {
    my ($self, $fh, $filename) = @_;
  
    my $pos = tell $fh;
    return unless defined $pos;
  
    my $buf = ' ' x 2;
    my $count = read $fh, $buf, length $buf;
    return unless defined $count and $count >= 2;
  
    my $encoding;
    if ( $buf eq "\x{FE}\x{FF}" ) {
      $encoding = 'UTF-16BE';
    } elsif ( $buf eq "\x{FF}\x{FE}" ) {
      $encoding = 'UTF-16LE';
    } elsif ( $buf eq "\x{EF}\x{BB}" ) {
      $buf = ' ';
      $count = read $fh, $buf, length $buf;
      if ( defined $count and $count >= 1 and $buf eq "\x{BF}" ) {
        $encoding = 'UTF-8';
      }
    }
  
    if ( defined $encoding ) {
      if ( "$]" >= 5.008 ) {
        binmode( $fh, ":encoding($encoding)" );
      }
    } else {
      seek $fh, $pos, SEEK_SET
        or croak( sprintf "Can't reset position to the top of '$filename'" );
    }
  
    return $encoding;
  }
  
  sub _parse_fh {
    my ($self, $fh) = @_;
  
    my( $in_pod, $seen_end, $need_vers ) = ( 0, 0, 0 );
    my( @packages, %vers, %pod, @pod );
    my $package = 'main';
    my $pod_sect = '';
    my $pod_data = '';
    my $in_end = 0;
  
    while (defined( my $line = <$fh> )) {
      my $line_num = $.;
  
      chomp( $line );
  
      # From toke.c : any line that begins by "=X", where X is an alphabetic
      # character, introduces a POD segment.
      my $is_cut;
      if ( $line =~ /^=([a-zA-Z].*)/ ) {
        my $cmd = $1;
        # Then it goes back to Perl code for "=cutX" where X is a non-alphabetic
        # character (which includes the newline, but here we chomped it away).
        $is_cut = $cmd =~ /^cut(?:[^a-zA-Z]|$)/;
        $in_pod = !$is_cut;
      }
  
      if ( $in_pod ) {
  
        if ( $line =~ /^=head[1-4]\s+(.+)\s*$/ ) {
          push( @pod, $1 );
          if ( $self->{collect_pod} && length( $pod_data ) ) {
            $pod{$pod_sect} = $pod_data;
            $pod_data = '';
          }
          $pod_sect = $1;
  
        } elsif ( $self->{collect_pod} ) {
          $pod_data .= "$line\n";
  
        }
  
      } elsif ( $is_cut ) {
  
        if ( $self->{collect_pod} && length( $pod_data ) ) {
          $pod{$pod_sect} = $pod_data;
          $pod_data = '';
        }
        $pod_sect = '';
  
      } else {
  
        # Skip after __END__
        next if $in_end;
  
        # Skip comments in code
        next if $line =~ /^\s*#/;
  
        # Would be nice if we could also check $in_string or something too
        if ($line eq '__END__') {
          $in_end++;
          next;
        }
        last if $line eq '__DATA__';
  
        # parse $line to see if it's a $VERSION declaration
        my( $version_sigil, $version_fullname, $version_package ) =
            index($line, 'VERSION') >= 1
                ? $self->_parse_version_expression( $line )
                : ();
  
        if ( $line =~ /$PKG_REGEXP/o ) {
          $package = $1;
          my $version = $2;
          push( @packages, $package ) unless grep( $package eq $_, @packages );
          $need_vers = defined $version ? 0 : 1;
  
          if ( not exists $vers{$package} and defined $version ){
            # Upgrade to a version object.
            my $dwim_version = eval { _dwim_version($version) };
            croak "Version '$version' from $self->{filename} does not appear to be valid:\n$line\n\nThe fatal error was: $@\n"
                unless defined $dwim_version;  # "0" is OK!
            $vers{$package} = $dwim_version;
          }
  
        # VERSION defined with full package spec, i.e. $Module::VERSION
        } elsif ( $version_fullname && $version_package ) {
          push( @packages, $version_package ) unless grep( $version_package eq $_, @packages );
          $need_vers = 0 if $version_package eq $package;
  
          unless ( defined $vers{$version_package} && length $vers{$version_package} ) {
          $vers{$version_package} = $self->_evaluate_version_line( $version_sigil, $version_fullname, $line );
        }
  
        # first non-comment line in undeclared package main is VERSION
        } elsif ( $package eq 'main' && $version_fullname && !exists($vers{main}) ) {
          $need_vers = 0;
          my $v = $self->_evaluate_version_line( $version_sigil, $version_fullname, $line );
          $vers{$package} = $v;
          push( @packages, 'main' );
  
        # first non-comment line in undeclared package defines package main
        } elsif ( $package eq 'main' && !exists($vers{main}) && $line =~ /\w/ ) {
          $need_vers = 1;
          $vers{main} = '';
          push( @packages, 'main' );
  
        # only keep if this is the first $VERSION seen
        } elsif ( $version_fullname && $need_vers ) {
          $need_vers = 0;
          my $v = $self->_evaluate_version_line( $version_sigil, $version_fullname, $line );
  
          unless ( defined $vers{$package} && length $vers{$package} ) {
            $vers{$package} = $v;
          }
        }
      }
    }
  
    if ( $self->{collect_pod} && length($pod_data) ) {
      $pod{$pod_sect} = $pod_data;
    }
  
    $self->{versions} = \%vers;
    $self->{packages} = \@packages;
    $self->{pod} = \%pod;
    $self->{pod_headings} = \@pod;
  }
  
  {
  my $pn = 0;
  sub _evaluate_version_line {
    my $self = shift;
    my( $sigil, $variable_name, $line ) = @_;
  
    # We compile into a local sub because 'use version' would cause
    # compiletime/runtime issues with local()
    $pn++; # everybody gets their own package
    my $eval = qq{ my \$dummy = q#  Hide from _packages_inside()
      #; package Module::Metadata::_version::p${pn};
      use version;
      sub {
        local $sigil$variable_name;
        $line;
        \$$variable_name
      };
    };
  
    $eval = $1 if $eval =~ m{^(.+)}s;
  
    local $^W;
    # Try to get the $VERSION
    my $vsub = __clean_eval($eval);
    # some modules say $VERSION <equal sign> $Foo::Bar::VERSION, but Foo::Bar isn't
    # installed, so we need to hunt in ./lib for it
    if ( $@ =~ /Can't locate/ && -d 'lib' ) {
      local @INC = ('lib',@INC);
      $vsub = __clean_eval($eval);
    }
    warn "Error evaling version line '$eval' in $self->{filename}: $@\n"
      if $@;
  
    (ref($vsub) eq 'CODE') or
      croak "failed to build version sub for $self->{filename}";
  
    my $result = eval { $vsub->() };
    # FIXME: $eval is not the right thing to print here
    croak "Could not get version from $self->{filename} by executing:\n$eval\n\nThe fatal error was: $@\n"
      if $@;
  
    # Upgrade it into a version object
    my $version = eval { _dwim_version($result) };
  
    # FIXME: $eval is not the right thing to print here
    croak "Version '$result' from $self->{filename} does not appear to be valid:\n$eval\n\nThe fatal error was: $@\n"
      unless defined $version; # "0" is OK!
  
    return $version;
  }
  }
  
  # Try to DWIM when things fail the lax version test in obvious ways
  {
    my @version_prep = (
      # Best case, it just works
      sub { return shift },
  
      # If we still don't have a version, try stripping any
      # trailing junk that is prohibited by lax rules
      sub {
        my $v = shift;
        $v =~ s{([0-9])[a-z-].*$}{$1}i; # 1.23-alpha or 1.23b
        return $v;
      },
  
      # Activestate apparently creates custom versions like '1.23_45_01', which
      # cause version.pm to think it's an invalid alpha.  So check for that
      # and strip them
      sub {
        my $v = shift;
        my $num_dots = () = $v =~ m{(\.)}g;
        my $num_unders = () = $v =~ m{(_)}g;
        my $leading_v = substr($v,0,1) eq 'v';
        if ( ! $leading_v && $num_dots < 2 && $num_unders > 1 ) {
          $v =~ s{_}{}g;
          $num_unders = () = $v =~ m{(_)}g;
        }
        return $v;
      },
  
      # Worst case, try numifying it like we would have before version objects
      sub {
        my $v = shift;
        no warnings 'numeric';
        return 0 + $v;
      },
  
    );
  
    sub _dwim_version {
      my ($result) = shift;
  
      return $result if ref($result) eq 'version';
  
      my ($version, $error);
      for my $f (@version_prep) {
        $result = $f->($result);
        $version = eval { version->new($result) };
        $error ||= $@ if $@; # capture first failure
        last if defined $version;
      }
  
      croak $error unless defined $version;
  
      return $version;
    }
  }
  
  ############################################################
  
  # accessors
  sub name            { $_[0]->{module}            }
  
  sub filename        { $_[0]->{filename}          }
  sub packages_inside { @{$_[0]->{packages}}       }
  sub pod_inside      { @{$_[0]->{pod_headings}}   }
  sub contains_pod    { 0+@{$_[0]->{pod_headings}} }
  
  sub version {
      my $self = shift;
      my $mod  = shift || $self->{module};
      my $vers;
      if ( defined( $mod ) && length( $mod ) &&
           exists( $self->{versions}{$mod} ) ) {
          return $self->{versions}{$mod};
      } else {
          return undef;
      }
  }
  
  sub pod {
      my $self = shift;
      my $sect = shift;
      if ( defined( $sect ) && length( $sect ) &&
           exists( $self->{pod}{$sect} ) ) {
          return $self->{pod}{$sect};
      } else {
          return undef;
      }
  }
  
  sub is_indexable {
    my ($self, $package) = @_;
  
    my @indexable_packages = grep { $_ ne 'main' } $self->packages_inside;
  
    # check for specific package, if provided
    return !! grep { $_ eq $package } @indexable_packages if $package;
  
    # otherwise, check for any indexable packages at all
    return !! @indexable_packages;
  }
  
  1;
  
  =head1 NAME
  
  Module::Metadata - Gather package and POD information from perl module files
  
  =head1 SYNOPSIS
  
    use Module::Metadata;
  
    # information about a .pm file
    my $info = Module::Metadata->new_from_file( $file );
    my $version = $info->version;
  
    # CPAN META 'provides' field for .pm files in a directory
    my $provides = Module::Metadata->provides(
      dir => 'lib', version => 2
    );
  
  =head1 DESCRIPTION
  
  This module provides a standard way to gather metadata about a .pm file through
  (mostly) static analysis and (some) code execution.  When determining the
  version of a module, the C<$VERSION> assignment is C<eval>ed, as is traditional
  in the CPAN toolchain.
  
  =head1 CLASS METHODS
  
  =head2 C<< new_from_file($filename, collect_pod => 1) >>
  
  Constructs a C<Module::Metadata> object given the path to a file.  Returns
  undef if the filename does not exist.
  
  C<collect_pod> is a optional boolean argument that determines whether POD
  data is collected and stored for reference.  POD data is not collected by
  default.  POD headings are always collected.
  
  If the file begins by an UTF-8, UTF-16BE or UTF-16LE byte-order mark, then
  it is skipped before processing, and the content of the file is also decoded
  appropriately starting from perl 5.8.
  
  =head2 C<< new_from_handle($handle, $filename, collect_pod => 1) >>
  
  This works just like C<new_from_file>, except that a handle can be provided
  as the first argument.
  
  Note that there is no validation to confirm that the handle is a handle or
  something that can act like one.  Passing something that isn't a handle will
  cause a exception when trying to read from it.  The C<filename> argument is
  mandatory or undef will be returned.
  
  You are responsible for setting the decoding layers on C<$handle> if
  required.
  
  =head2 C<< new_from_module($module, collect_pod => 1, inc => \@dirs) >>
  
  Constructs a C<Module::Metadata> object given a module or package name.
  Returns undef if the module cannot be found.
  
  In addition to accepting the C<collect_pod> argument as described above,
  this method accepts a C<inc> argument which is a reference to an array of
  directories to search for the module.  If none are given, the default is
  @INC.
  
  If the file that contains the module begins by an UTF-8, UTF-16BE or
  UTF-16LE byte-order mark, then it is skipped before processing, and the
  content of the file is also decoded appropriately starting from perl 5.8.
  
  =head2 C<< find_module_by_name($module, \@dirs) >>
  
  Returns the path to a module given the module or package name. A list
  of directories can be passed in as an optional parameter, otherwise
  @INC is searched.
  
  Can be called as either an object or a class method.
  
  =head2 C<< find_module_dir_by_name($module, \@dirs) >>
  
  Returns the entry in C<@dirs> (or C<@INC> by default) that contains
  the module C<$module>. A list of directories can be passed in as an
  optional parameter, otherwise @INC is searched.
  
  Can be called as either an object or a class method.
  
  =head2 C<< provides( %options ) >>
  
  This is a convenience wrapper around C<package_versions_from_directory>
  to generate a CPAN META C<provides> data structure.  It takes key/value
  pairs.  Valid option keys include:
  
  =over
  
  =item version B<(required)>
  
  Specifies which version of the L<CPAN::Meta::Spec> should be used as
  the format of the C<provides> output.  Currently only '1.4' and '2'
  are supported (and their format is identical).  This may change in
  the future as the definition of C<provides> changes.
  
  The C<version> option is required.  If it is omitted or if
  an unsupported version is given, then C<provides> will throw an error.
  
  =item dir
  
  Directory to search recursively for F<.pm> files.  May not be specified with
  C<files>.
  
  =item files
  
  Array reference of files to examine.  May not be specified with C<dir>.
  
  =item prefix
  
  String to prepend to the C<file> field of the resulting output. This defaults
  to F<lib>, which is the common case for most CPAN distributions with their
  F<.pm> files in F<lib>.  This option ensures the META information has the
  correct relative path even when the C<dir> or C<files> arguments are
  absolute or have relative paths from a location other than the distribution
  root.
  
  =back
  
  For example, given C<dir> of 'lib' and C<prefix> of 'lib', the return value
  is a hashref of the form:
  
    {
      'Package::Name' => {
        version => '0.123',
        file => 'lib/Package/Name.pm'
      },
      'OtherPackage::Name' => ...
    }
  
  =head2 C<< package_versions_from_directory($dir, \@files?) >>
  
  Scans C<$dir> for .pm files (unless C<@files> is given, in which case looks
  for those files in C<$dir> - and reads each file for packages and versions,
  returning a hashref of the form:
  
    {
      'Package::Name' => {
        version => '0.123',
        file => 'Package/Name.pm'
      },
      'OtherPackage::Name' => ...
    }
  
  The C<DB> and C<main> packages are always omitted, as are any "private"
  packages that have leading underscores in the namespace (e.g.
  C<Foo::_private>)
  
  Note that the file path is relative to C<$dir> if that is specified.
  This B<must not> be used directly for CPAN META C<provides>.  See
  the C<provides> method instead.
  
  =head2 C<< log_info (internal) >>
  
  Used internally to perform logging; imported from Log::Contextual if
  Log::Contextual has already been loaded, otherwise simply calls warn.
  
  =head1 OBJECT METHODS
  
  =head2 C<< name() >>
  
  Returns the name of the package represented by this module. If there
  is more than one package, it makes a best guess based on the
  filename. If it's a script (i.e. not a *.pm) the package name is
  'main'.
  
  =head2 C<< version($package) >>
  
  Returns the version as defined by the $VERSION variable for the
  package as returned by the C<name> method if no arguments are
  given. If given the name of a package it will attempt to return the
  version of that package if it is specified in the file.
  
  =head2 C<< filename() >>
  
  Returns the absolute path to the file.
  Note that this file may not actually exist on disk yet, e.g. if the module was read from an in-memory filehandle.
  
  =head2 C<< packages_inside() >>
  
  Returns a list of packages. Note: this is a raw list of packages
  discovered (or assumed, in the case of C<main>).  It is not
  filtered for C<DB>, C<main> or private packages the way the
  C<provides> method does.  Invalid package names are not returned,
  for example "Foo:Bar".  Strange but valid package names are
  returned, for example "Foo::Bar::", and are left up to the caller
  on how to handle.
  
  =head2 C<< pod_inside() >>
  
  Returns a list of POD sections.
  
  =head2 C<< contains_pod() >>
  
  Returns true if there is any POD in the file.
  
  =head2 C<< pod($section) >>
  
  Returns the POD data in the given section.
  
  =head2 C<< is_indexable($package) >> or C<< is_indexable() >>
  
  Returns a boolean indicating whether the package (if provided) or any package
  (otherwise) is eligible for indexing by PAUSE, the Perl Authors Upload Server.
  Note This only checks for valid C<package> declarations, and does not take any
  ownership information into account.
  
  =head1 AUTHOR
  
  Original code from Module::Build::ModuleInfo by Ken Williams
  <kwilliams@cpan.org>, Randy W. Sims <RandyS@ThePierianSpring.org>
  
  Released as Module::Metadata by Matt S Trout (mst) <mst@shadowcat.co.uk> with
  assistance from David Golden (xdg) <dagolden@cpan.org>.
  
  =head1 COPYRIGHT & LICENSE
  
  Original code Copyright (c) 2001-2011 Ken Williams.
  Additional code Copyright (c) 2010-2011 Matt Trout and David Golden.
  All rights reserved.
  
  This library is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.
  
  =cut
MODULE_METADATA

$fatpacked{"version.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'VERSION';
  #!perl -w
  package version;
  
  use 5.006002;
  use strict;
  use warnings::register;
  if ($] >= 5.015) {
      warnings::register_categories(qw/version/);
  }
  
  use vars qw(@ISA $VERSION $CLASS $STRICT $LAX *declare *qv);
  
  $VERSION = 0.9917;
  $CLASS = 'version';
  
  # !!!!Delete this next block completely when adding to Perl core!!!!
  {
      local $SIG{'__DIE__'};
      eval "use version::vxs $VERSION";
      if ( $@ ) { # don't have the XS version installed
  	eval "use version::vpp $VERSION"; # don't tempt fate
  	die "$@" if ( $@ );
  	push @ISA, "version::vpp";
  	local $^W;
  	*version::qv = \&version::vpp::qv;
  	*version::declare = \&version::vpp::declare;
  	*version::_VERSION = \&version::vpp::_VERSION;
  	*version::vcmp = \&version::vpp::vcmp;
  	*version::new = \&version::vpp::new;
  	*version::numify = \&version::vpp::numify;
  	*version::normal = \&version::vpp::normal;
  	if ($] >= 5.009000) {
  	    no strict 'refs';
  	    *version::stringify = \&version::vpp::stringify;
  	    *{'version::(""'} = \&version::vpp::stringify;
  	    *{'version::(<=>'} = \&version::vpp::vcmp;
  	    *{'version::(cmp'} = \&version::vpp::vcmp;
  	    *version::parse = \&version::vpp::parse;
  	}
      }
      else { # use XS module
  	push @ISA, "version::vxs";
  	local $^W;
  	*version::declare = \&version::vxs::declare;
  	*version::qv = \&version::vxs::qv;
  	*version::_VERSION = \&version::vxs::_VERSION;
  	*version::vcmp = \&version::vxs::VCMP;
  	*version::new = \&version::vxs::new;
  	*version::numify = \&version::vxs::numify;
  	*version::normal = \&version::vxs::normal;
  	if ($] >= 5.009000) {
  	    no strict 'refs';
  	    *version::stringify = \&version::vxs::stringify;
  	    *{'version::(""'} = \&version::vxs::stringify;
  	    *{'version::(<=>'} = \&version::vxs::VCMP;
  	    *{'version::(cmp'} = \&version::vxs::VCMP;
  	    *version::parse = \&version::vxs::parse;
  	}
      }
  }
  
  # avoid using Exporter
  require version::regex;
  *version::is_lax = \&version::regex::is_lax;
  *version::is_strict = \&version::regex::is_strict;
  *LAX = \$version::regex::LAX;
  *STRICT = \$version::regex::STRICT;
  
  sub import {
      no strict 'refs';
      my ($class) = shift;
  
      # Set up any derived class
      unless ($class eq $CLASS) {
  	local $^W;
  	*{$class.'::declare'} =  \&{$CLASS.'::declare'};
  	*{$class.'::qv'} = \&{$CLASS.'::qv'};
      }
  
      my %args;
      if (@_) { # any remaining terms are arguments
  	map { $args{$_} = 1 } @_
      }
      else { # no parameters at all on use line
  	%args =
  	(
  	    qv => 1,
  	    'UNIVERSAL::VERSION' => 1,
  	);
      }
  
      my $callpkg = caller();
  
      if (exists($args{declare})) {
  	*{$callpkg.'::declare'} =
  	    sub {return $class->declare(shift) }
  	  unless defined(&{$callpkg.'::declare'});
      }
  
      if (exists($args{qv})) {
  	*{$callpkg.'::qv'} =
  	    sub {return $class->qv(shift) }
  	  unless defined(&{$callpkg.'::qv'});
      }
  
      if (exists($args{'UNIVERSAL::VERSION'})) {
  	local $^W;
  	*UNIVERSAL::VERSION
  		= \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'VERSION'})) {
  	*{$callpkg.'::VERSION'} = \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'is_strict'})) {
  	*{$callpkg.'::is_strict'} = \&{$CLASS.'::is_strict'}
  	  unless defined(&{$callpkg.'::is_strict'});
      }
  
      if (exists($args{'is_lax'})) {
  	*{$callpkg.'::is_lax'} = \&{$CLASS.'::is_lax'}
  	  unless defined(&{$callpkg.'::is_lax'});
      }
  }
  
  
  1;
VERSION

$fatpacked{"version/regex.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'VERSION_REGEX';
  package version::regex;
  
  use strict;
  
  use vars qw($VERSION $CLASS $STRICT $LAX);
  
  $VERSION = 0.9917;
  
  #--------------------------------------------------------------------------#
  # Version regexp components
  #--------------------------------------------------------------------------#
  
  # Fraction part of a decimal version number.  This is a common part of
  # both strict and lax decimal versions
  
  my $FRACTION_PART = qr/\.[0-9]+/;
  
  # First part of either decimal or dotted-decimal strict version number.
  # Unsigned integer with no leading zeroes (except for zero itself) to
  # avoid confusion with octal.
  
  my $STRICT_INTEGER_PART = qr/0|[1-9][0-9]*/;
  
  # First part of either decimal or dotted-decimal lax version number.
  # Unsigned integer, but allowing leading zeros.  Always interpreted
  # as decimal.  However, some forms of the resulting syntax give odd
  # results if used as ordinary Perl expressions, due to how perl treats
  # octals.  E.g.
  #   version->new("010" ) == 10
  #   version->new( 010  ) == 8
  #   version->new( 010.2) == 82  # "8" . "2"
  
  my $LAX_INTEGER_PART = qr/[0-9]+/;
  
  # Second and subsequent part of a strict dotted-decimal version number.
  # Leading zeroes are permitted, and the number is always decimal.
  # Limited to three digits to avoid overflow when converting to decimal
  # form and also avoid problematic style with excessive leading zeroes.
  
  my $STRICT_DOTTED_DECIMAL_PART = qr/\.[0-9]{1,3}/;
  
  # Second and subsequent part of a lax dotted-decimal version number.
  # Leading zeroes are permitted, and the number is always decimal.  No
  # limit on the numerical value or number of digits, so there is the
  # possibility of overflow when converting to decimal form.
  
  my $LAX_DOTTED_DECIMAL_PART = qr/\.[0-9]+/;
  
  # Alpha suffix part of lax version number syntax.  Acts like a
  # dotted-decimal part.
  
  my $LAX_ALPHA_PART = qr/_[0-9]+/;
  
  #--------------------------------------------------------------------------#
  # Strict version regexp definitions
  #--------------------------------------------------------------------------#
  
  # Strict decimal version number.
  
  my $STRICT_DECIMAL_VERSION =
      qr/ $STRICT_INTEGER_PART $FRACTION_PART? /x;
  
  # Strict dotted-decimal version number.  Must have both leading "v" and
  # at least three parts, to avoid confusion with decimal syntax.
  
  my $STRICT_DOTTED_DECIMAL_VERSION =
      qr/ v $STRICT_INTEGER_PART $STRICT_DOTTED_DECIMAL_PART{2,} /x;
  
  # Complete strict version number syntax -- should generally be used
  # anchored: qr/ \A $STRICT \z /x
  
  $STRICT =
      qr/ $STRICT_DECIMAL_VERSION | $STRICT_DOTTED_DECIMAL_VERSION /x;
  
  #--------------------------------------------------------------------------#
  # Lax version regexp definitions
  #--------------------------------------------------------------------------#
  
  # Lax decimal version number.  Just like the strict one except for
  # allowing an alpha suffix or allowing a leading or trailing
  # decimal-point
  
  my $LAX_DECIMAL_VERSION =
      qr/ $LAX_INTEGER_PART (?: $FRACTION_PART | \. )? $LAX_ALPHA_PART?
  	|
  	$FRACTION_PART $LAX_ALPHA_PART?
      /x;
  
  # Lax dotted-decimal version number.  Distinguished by having either
  # leading "v" or at least three non-alpha parts.  Alpha part is only
  # permitted if there are at least two non-alpha parts. Strangely
  # enough, without the leading "v", Perl takes .1.2 to mean v0.1.2,
  # so when there is no "v", the leading part is optional
  
  my $LAX_DOTTED_DECIMAL_VERSION =
      qr/
  	v $LAX_INTEGER_PART (?: $LAX_DOTTED_DECIMAL_PART+ $LAX_ALPHA_PART? )?
  	|
  	$LAX_INTEGER_PART? $LAX_DOTTED_DECIMAL_PART{2,} $LAX_ALPHA_PART?
      /x;
  
  # Complete lax version number syntax -- should generally be used
  # anchored: qr/ \A $LAX \z /x
  #
  # The string 'undef' is a special case to make for easier handling
  # of return values from ExtUtils::MM->parse_version
  
  $LAX =
      qr/ undef | $LAX_DOTTED_DECIMAL_VERSION | $LAX_DECIMAL_VERSION /x;
  
  #--------------------------------------------------------------------------#
  
  # Preloaded methods go here.
  sub is_strict	{ defined $_[0] && $_[0] =~ qr/ \A $STRICT \z /x }
  sub is_lax	{ defined $_[0] && $_[0] =~ qr/ \A $LAX \z /x }
  
  1;
VERSION_REGEX

$fatpacked{"version/vpp.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'VERSION_VPP';
  package charstar;
  # a little helper class to emulate C char* semantics in Perl
  # so that prescan_version can use the same code as in C
  
  use overload (
      '""'	=> \&thischar,
      '0+'	=> \&thischar,
      '++'	=> \&increment,
      '--'	=> \&decrement,
      '+'		=> \&plus,
      '-'		=> \&minus,
      '*'		=> \&multiply,
      'cmp'	=> \&cmp,
      '<=>'	=> \&spaceship,
      'bool'	=> \&thischar,
      '='		=> \&clone,
  );
  
  sub new {
      my ($self, $string) = @_;
      my $class = ref($self) || $self;
  
      my $obj = {
  	string  => [split(//,$string)],
  	current => 0,
      };
      return bless $obj, $class;
  }
  
  sub thischar {
      my ($self) = @_;
      my $last = $#{$self->{string}};
      my $curr = $self->{current};
      if ($curr >= 0 && $curr <= $last) {
  	return $self->{string}->[$curr];
      }
      else {
  	return '';
      }
  }
  
  sub increment {
      my ($self) = @_;
      $self->{current}++;
  }
  
  sub decrement {
      my ($self) = @_;
      $self->{current}--;
  }
  
  sub plus {
      my ($self, $offset) = @_;
      my $rself = $self->clone;
      $rself->{current} += $offset;
      return $rself;
  }
  
  sub minus {
      my ($self, $offset) = @_;
      my $rself = $self->clone;
      $rself->{current} -= $offset;
      return $rself;
  }
  
  sub multiply {
      my ($left, $right, $swapped) = @_;
      my $char = $left->thischar();
      return $char * $right;
  }
  
  sub spaceship {
      my ($left, $right, $swapped) = @_;
      unless (ref($right)) { # not an object already
  	$right = $left->new($right);
      }
      return $left->{current} <=> $right->{current};
  }
  
  sub cmp {
      my ($left, $right, $swapped) = @_;
      unless (ref($right)) { # not an object already
  	if (length($right) == 1) { # comparing single character only
  	    return $left->thischar cmp $right;
  	}
  	$right = $left->new($right);
      }
      return $left->currstr cmp $right->currstr;
  }
  
  sub bool {
      my ($self) = @_;
      my $char = $self->thischar;
      return ($char ne '');
  }
  
  sub clone {
      my ($left, $right, $swapped) = @_;
      $right = {
  	string  => [@{$left->{string}}],
  	current => $left->{current},
      };
      return bless $right, ref($left);
  }
  
  sub currstr {
      my ($self, $s) = @_;
      my $curr = $self->{current};
      my $last = $#{$self->{string}};
      if (defined($s) && $s->{current} < $last) {
  	$last = $s->{current};
      }
  
      my $string = join('', @{$self->{string}}[$curr..$last]);
      return $string;
  }
  
  package version::vpp;
  
  use 5.006002;
  use strict;
  use warnings::register;
  
  use Config;
  use vars qw($VERSION $CLASS @ISA $LAX $STRICT $WARN_CATEGORY);
  $VERSION = 0.9917;
  $CLASS = 'version::vpp';
  if ($] > 5.015) {
      warnings::register_categories(qw/version/);
      $WARN_CATEGORY = 'version';
  } else {
      $WARN_CATEGORY = 'numeric';
  }
  
  require version::regex;
  *version::vpp::is_strict = \&version::regex::is_strict;
  *version::vpp::is_lax = \&version::regex::is_lax;
  *LAX = \$version::regex::LAX;
  *STRICT = \$version::regex::STRICT;
  
  use overload (
      '""'       => \&stringify,
      '0+'       => \&numify,
      'cmp'      => \&vcmp,
      '<=>'      => \&vcmp,
      'bool'     => \&vbool,
      '+'        => \&vnoop,
      '-'        => \&vnoop,
      '*'        => \&vnoop,
      '/'        => \&vnoop,
      '+='        => \&vnoop,
      '-='        => \&vnoop,
      '*='        => \&vnoop,
      '/='        => \&vnoop,
      'abs'      => \&vnoop,
  );
  
  sub import {
      no strict 'refs';
      my ($class) = shift;
  
      # Set up any derived class
      unless ($class eq $CLASS) {
  	local $^W;
  	*{$class.'::declare'} =  \&{$CLASS.'::declare'};
  	*{$class.'::qv'} = \&{$CLASS.'::qv'};
      }
  
      my %args;
      if (@_) { # any remaining terms are arguments
  	map { $args{$_} = 1 } @_
      }
      else { # no parameters at all on use line
  	%args =
  	(
  	    qv => 1,
  	    'UNIVERSAL::VERSION' => 1,
  	);
      }
  
      my $callpkg = caller();
  
      if (exists($args{declare})) {
  	*{$callpkg.'::declare'} =
  	    sub {return $class->declare(shift) }
  	  unless defined(&{$callpkg.'::declare'});
      }
  
      if (exists($args{qv})) {
  	*{$callpkg.'::qv'} =
  	    sub {return $class->qv(shift) }
  	  unless defined(&{$callpkg.'::qv'});
      }
  
      if (exists($args{'UNIVERSAL::VERSION'})) {
  	no warnings qw/redefine/;
  	*UNIVERSAL::VERSION
  		= \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'VERSION'})) {
  	*{$callpkg.'::VERSION'} = \&{$CLASS.'::_VERSION'};
      }
  
      if (exists($args{'is_strict'})) {
  	*{$callpkg.'::is_strict'} = \&{$CLASS.'::is_strict'}
  	  unless defined(&{$callpkg.'::is_strict'});
      }
  
      if (exists($args{'is_lax'})) {
  	*{$callpkg.'::is_lax'} = \&{$CLASS.'::is_lax'}
  	  unless defined(&{$callpkg.'::is_lax'});
      }
  }
  
  my $VERSION_MAX = 0x7FFFFFFF;
  
  # implement prescan_version as closely to the C version as possible
  use constant TRUE  => 1;
  use constant FALSE => 0;
  
  sub isDIGIT {
      my ($char) = shift->thischar();
      return ($char =~ /\d/);
  }
  
  sub isALPHA {
      my ($char) = shift->thischar();
      return ($char =~ /[a-zA-Z]/);
  }
  
  sub isSPACE {
      my ($char) = shift->thischar();
      return ($char =~ /\s/);
  }
  
  sub BADVERSION {
      my ($s, $errstr, $error) = @_;
      if ($errstr) {
  	$$errstr = $error;
      }
      return $s;
  }
  
  sub prescan_version {
      my ($s, $strict, $errstr, $sqv, $ssaw_decimal, $swidth, $salpha) = @_;
      my $qv          = defined $sqv          ? $$sqv          : FALSE;
      my $saw_decimal = defined $ssaw_decimal ? $$ssaw_decimal : 0;
      my $width       = defined $swidth       ? $$swidth       : 3;
      my $alpha       = defined $salpha       ? $$salpha       : FALSE;
  
      my $d = $s;
  
      if ($qv && isDIGIT($d)) {
  	goto dotted_decimal_version;
      }
  
      if ($d eq 'v') { # explicit v-string
  	$d++;
  	if (isDIGIT($d)) {
  	    $qv = TRUE;
  	}
  	else { # degenerate v-string
  	    # requires v1.2.3
  	    return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions require at least three parts)");
  	}
  
  dotted_decimal_version:
  	if ($strict && $d eq '0' && isDIGIT($d+1)) {
  	    # no leading zeros allowed
  	    return BADVERSION($s,$errstr,"Invalid version format (no leading zeros)");
  	}
  
  	while (isDIGIT($d)) { 	# integer part
  	    $d++;
  	}
  
  	if ($d eq '.')
  	{
  	    $saw_decimal++;
  	    $d++; 		# decimal point
  	}
  	else
  	{
  	    if ($strict) {
  		# require v1.2.3
  		return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions require at least three parts)");
  	    }
  	    else {
  		goto version_prescan_finish;
  	    }
  	}
  
  	{
  	    my $i = 0;
  	    my $j = 0;
  	    while (isDIGIT($d)) {	# just keep reading
  		$i++;
  		while (isDIGIT($d)) {
  		    $d++; $j++;
  		    # maximum 3 digits between decimal
  		    if ($strict && $j > 3) {
  			return BADVERSION($s,$errstr,"Invalid version format (maximum 3 digits between decimals)");
  		    }
  		}
  		if ($d eq '_') {
  		    if ($strict) {
  			return BADVERSION($s,$errstr,"Invalid version format (no underscores)");
  		    }
  		    if ( $alpha ) {
  			return BADVERSION($s,$errstr,"Invalid version format (multiple underscores)");
  		    }
  		    $d++;
  		    $alpha = TRUE;
  		}
  		elsif ($d eq '.') {
  		    if ($alpha) {
  			return BADVERSION($s,$errstr,"Invalid version format (underscores before decimal)");
  		    }
  		    $saw_decimal++;
  		    $d++;
  		}
  		elsif (!isDIGIT($d)) {
  		    last;
  		}
  		$j = 0;
  	    }
  
  	    if ($strict && $i < 2) {
  		# requires v1.2.3
  		return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions require at least three parts)");
  	    }
  	}
      } 					# end if dotted-decimal
      else
      {					# decimal versions
  	my $j = 0;
  	# special $strict case for leading '.' or '0'
  	if ($strict) {
  	    if ($d eq '.') {
  		return BADVERSION($s,$errstr,"Invalid version format (0 before decimal required)");
  	    }
  	    if ($d eq '0' && isDIGIT($d+1)) {
  		return BADVERSION($s,$errstr,"Invalid version format (no leading zeros)");
  	    }
  	}
  
  	# and we never support negative version numbers
  	if ($d eq '-') {
  	    return BADVERSION($s,$errstr,"Invalid version format (negative version number)");
  	}
  
  	# consume all of the integer part
  	while (isDIGIT($d)) {
  	    $d++;
  	}
  
  	# look for a fractional part
  	if ($d eq '.') {
  	    # we found it, so consume it
  	    $saw_decimal++;
  	    $d++;
  	}
  	elsif (!$d || $d eq ';' || isSPACE($d) || $d eq '}') {
  	    if ( $d == $s ) {
  		# found nothing
  		return BADVERSION($s,$errstr,"Invalid version format (version required)");
  	    }
  	    # found just an integer
  	    goto version_prescan_finish;
  	}
  	elsif ( $d == $s ) {
  	    # didn't find either integer or period
  	    return BADVERSION($s,$errstr,"Invalid version format (non-numeric data)");
  	}
  	elsif ($d eq '_') {
  	    # underscore can't come after integer part
  	    if ($strict) {
  		return BADVERSION($s,$errstr,"Invalid version format (no underscores)");
  	    }
  	    elsif (isDIGIT($d+1)) {
  		return BADVERSION($s,$errstr,"Invalid version format (alpha without decimal)");
  	    }
  	    else {
  		return BADVERSION($s,$errstr,"Invalid version format (misplaced underscore)");
  	    }
  	}
  	elsif ($d) {
  	    # anything else after integer part is just invalid data
  	    return BADVERSION($s,$errstr,"Invalid version format (non-numeric data)");
  	}
  
  	# scan the fractional part after the decimal point
  	if ($d && !isDIGIT($d) && ($strict || ! ($d eq ';' || isSPACE($d) || $d eq '}') )) {
  		# $strict or lax-but-not-the-end
  		return BADVERSION($s,$errstr,"Invalid version format (fractional part required)");
  	}
  
  	while (isDIGIT($d)) {
  	    $d++; $j++;
  	    if ($d eq '.' && isDIGIT($d-1)) {
  		if ($alpha) {
  		    return BADVERSION($s,$errstr,"Invalid version format (underscores before decimal)");
  		}
  		if ($strict) {
  		    return BADVERSION($s,$errstr,"Invalid version format (dotted-decimal versions must begin with 'v')");
  		}
  		$d = $s; # start all over again
  		$qv = TRUE;
  		goto dotted_decimal_version;
  	    }
  	    if ($d eq '_') {
  		if ($strict) {
  		    return BADVERSION($s,$errstr,"Invalid version format (no underscores)");
  		}
  		if ( $alpha ) {
  		    return BADVERSION($s,$errstr,"Invalid version format (multiple underscores)");
  		}
  		if ( ! isDIGIT($d+1) ) {
  		    return BADVERSION($s,$errstr,"Invalid version format (misplaced underscore)");
  		}
  		$width = $j;
  		$d++;
  		$alpha = TRUE;
  	    }
  	}
      }
  
  version_prescan_finish:
      while (isSPACE($d)) {
  	$d++;
      }
  
      if ($d && !isDIGIT($d) && (! ($d eq ';' || $d eq '}') )) {
  	# trailing non-numeric data
  	return BADVERSION($s,$errstr,"Invalid version format (non-numeric data)");
      }
      if ($saw_decimal > 1 && ($d-1) eq '.') {
  	# no trailing period allowed
  	return BADVERSION($s,$errstr,"Invalid version format (trailing decimal)");
      }
  
      if (defined $sqv) {
  	$$sqv = $qv;
      }
      if (defined $swidth) {
  	$$swidth = $width;
      }
      if (defined $ssaw_decimal) {
  	$$ssaw_decimal = $saw_decimal;
      }
      if (defined $salpha) {
  	$$salpha = $alpha;
      }
      return $d;
  }
  
  sub scan_version {
      my ($s, $rv, $qv) = @_;
      my $start;
      my $pos;
      my $last;
      my $errstr;
      my $saw_decimal = 0;
      my $width = 3;
      my $alpha = FALSE;
      my $vinf = FALSE;
      my @av;
  
      $s = new charstar $s;
  
      while (isSPACE($s)) { # leading whitespace is OK
  	$s++;
      }
  
      $last = prescan_version($s, FALSE, \$errstr, \$qv, \$saw_decimal,
  	\$width, \$alpha);
  
      if ($errstr) {
  	# 'undef' is a special case and not an error
  	if ( $s ne 'undef') {
  	    require Carp;
  	    Carp::croak($errstr);
  	}
      }
  
      $start = $s;
      if ($s eq 'v') {
  	$s++;
      }
      $pos = $s;
  
      if ( $qv ) {
  	$$rv->{qv} = $qv;
      }
      if ( $alpha ) {
  	$$rv->{alpha} = $alpha;
      }
      if ( !$qv && $width < 3 ) {
  	$$rv->{width} = $width;
      }
  
      while (isDIGIT($pos) || $pos eq '_') {
  	$pos++;
      }
      if (!isALPHA($pos)) {
  	my $rev;
  
  	for (;;) {
  	    $rev = 0;
  	    {
    		# this is atoi() that delimits on underscores
    		my $end = $pos;
    		my $mult = 1;
  		my $orev;
  
  		#  the following if() will only be true after the decimal
  		#  point of a version originally created with a bare
  		#  floating point number, i.e. not quoted in any way
  		#
   		if ( !$qv && $s > $start && $saw_decimal == 1 ) {
  		    $mult *= 100;
   		    while ( $s < $end ) {
  			next if $s eq '_';
  			$orev = $rev;
   			$rev += $s * $mult;
   			$mult /= 10;
  			if (   (abs($orev) > abs($rev))
  			    || (abs($rev) > $VERSION_MAX )) {
  			    warn("Integer overflow in version %d",
  					   $VERSION_MAX);
  			    $s = $end - 1;
  			    $rev = $VERSION_MAX;
  			    $vinf = 1;
  			}
   			$s++;
  			if ( $s eq '_' ) {
  			    $s++;
  			}
   		    }
    		}
   		else {
   		    while (--$end >= $s) {
  			next if $end eq '_';
  			$orev = $rev;
   			$rev += $end * $mult;
   			$mult *= 10;
  			if (   (abs($orev) > abs($rev))
  			    || (abs($rev) > $VERSION_MAX )) {
  			    warn("Integer overflow in version");
  			    $end = $s - 1;
  			    $rev = $VERSION_MAX;
  			    $vinf = 1;
  			}
   		    }
   		}
    	    }
  
    	    # Append revision
  	    push @av, $rev;
  	    if ( $vinf ) {
  		$s = $last;
  		last;
  	    }
  	    elsif ( $pos eq '.' ) {
  		$s = ++$pos;
  	    }
  	    elsif ( $pos eq '_' && isDIGIT($pos+1) ) {
  		$s = ++$pos;
  	    }
  	    elsif ( $pos eq ',' && isDIGIT($pos+1) ) {
  		$s = ++$pos;
  	    }
  	    elsif ( isDIGIT($pos) ) {
  		$s = $pos;
  	    }
  	    else {
  		$s = $pos;
  		last;
  	    }
  	    if ( $qv ) {
  		while ( isDIGIT($pos) || $pos eq '_') {
  		    $pos++;
  		}
  	    }
  	    else {
  		my $digits = 0;
  		while ( ( isDIGIT($pos) || $pos eq '_' ) && $digits < 3 ) {
  		    if ( $pos ne '_' ) {
  			$digits++;
  		    }
  		    $pos++;
  		}
  	    }
  	}
      }
      if ( $qv ) { # quoted versions always get at least three terms
  	my $len = $#av;
  	#  This for loop appears to trigger a compiler bug on OS X, as it
  	#  loops infinitely. Yes, len is negative. No, it makes no sense.
  	#  Compiler in question is:
  	#  gcc version 3.3 20030304 (Apple Computer, Inc. build 1640)
  	#  for ( len = 2 - len; len > 0; len-- )
  	#  av_push(MUTABLE_AV(sv), newSViv(0));
  	#
  	$len = 2 - $len;
  	while ($len-- > 0) {
  	    push @av, 0;
  	}
      }
  
      # need to save off the current version string for later
      if ( $vinf ) {
  	$$rv->{original} = "v.Inf";
  	$$rv->{vinf} = 1;
      }
      elsif ( $s > $start ) {
  	$$rv->{original} = $start->currstr($s);
  	if ( $qv && $saw_decimal == 1 && $start ne 'v' ) {
  	    # need to insert a v to be consistent
  	    $$rv->{original} = 'v' . $$rv->{original};
  	}
      }
      else {
  	$$rv->{original} = '0';
  	push(@av, 0);
      }
  
      # And finally, store the AV in the hash
      $$rv->{version} = \@av;
  
      # fix RT#19517 - special case 'undef' as string
      if ($s eq 'undef') {
  	$s += 5;
      }
  
      return $s;
  }
  
  sub new {
      my $class = shift;
      unless (defined $class or $#_ > 1) {
  	require Carp;
  	Carp::croak('Usage: version::new(class, version)');
      }
  
      my $self = bless ({}, ref ($class) || $class);
      my $qv = FALSE;
  
      if ( $#_ == 1 ) { # must be CVS-style
  	$qv = TRUE;
      }
      my $value = pop; # always going to be the last element
  
      if ( ref($value) && eval('$value->isa("version")') ) {
  	# Can copy the elements directly
  	$self->{version} = [ @{$value->{version} } ];
  	$self->{qv} = 1 if $value->{qv};
  	$self->{alpha} = 1 if $value->{alpha};
  	$self->{original} = ''.$value->{original};
  	return $self;
      }
  
      if ( not defined $value or $value =~ /^undef$/ ) {
  	# RT #19517 - special case for undef comparison
  	# or someone forgot to pass a value
  	push @{$self->{version}}, 0;
  	$self->{original} = "0";
  	return ($self);
      }
  
  
      if (ref($value) =~ m/ARRAY|HASH/) {
  	require Carp;
  	Carp::croak("Invalid version format (non-numeric data)");
      }
  
      $value = _un_vstring($value);
  
      if ($Config{d_setlocale}) {
  	use POSIX qw/locale_h/;
  	use if $Config{d_setlocale}, 'locale';
  	my $currlocale = setlocale(LC_ALL);
  
  	# if the current locale uses commas for decimal points, we
  	# just replace commas with decimal places, rather than changing
  	# locales
  	if ( localeconv()->{decimal_point} eq ',' ) {
  	    $value =~ tr/,/./;
  	}
      }
  
      # exponential notation
      if ( $value =~ /\d+.?\d*e[-+]?\d+/ ) {
  	$value = sprintf("%.9f",$value);
  	$value =~ s/(0+)$//; # trim trailing zeros
      }
  
      my $s = scan_version($value, \$self, $qv);
  
      if ($s) { # must be something left over
  	warn(sprintf "Version string '%s' contains invalid data; "
  		   ."ignoring: '%s'", $value, $s);
      }
  
      return ($self);
  }
  
  *parse = \&new;
  
  sub numify {
      my ($self) = @_;
      unless (_verify($self)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
      my $alpha = $self->{alpha} || "";
      my $len = $#{$self->{version}};
      my $digit = $self->{version}[0];
      my $string = sprintf("%d.", $digit );
  
      if ($alpha and warnings::enabled()) {
  	warnings::warn($WARN_CATEGORY, 'alpha->numify() is lossy');
      }
  
      for ( my $i = 1 ; $i <= $len ; $i++ ) {
  	$digit = $self->{version}[$i];
  	$string .= sprintf("%03d", $digit);
      }
  
      if ( $len == 0 ) {
  	$string .= sprintf("000");
      }
  
      return $string;
  }
  
  sub normal {
      my ($self) = @_;
      unless (_verify($self)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
  
      my $len = $#{$self->{version}};
      my $digit = $self->{version}[0];
      my $string = sprintf("v%d", $digit );
  
      for ( my $i = 1 ; $i <= $len ; $i++ ) {
  	$digit = $self->{version}[$i];
  	$string .= sprintf(".%d", $digit);
      }
  
      if ( $len <= 2 ) {
  	for ( $len = 2 - $len; $len != 0; $len-- ) {
  	    $string .= sprintf(".%0d", 0);
  	}
      }
  
      return $string;
  }
  
  sub stringify {
      my ($self) = @_;
      unless (_verify($self)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
      return exists $self->{original}
      	? $self->{original}
  	: exists $self->{qv}
  	    ? $self->normal
  	    : $self->numify;
  }
  
  sub vcmp {
      my ($left,$right,$swap) = @_;
      my $class = ref($left);
      unless ( UNIVERSAL::isa($right, $class) ) {
  	$right = $class->new($right);
      }
  
      if ( $swap ) {
  	($left, $right) = ($right, $left);
      }
      unless (_verify($left)) {
  	require Carp;
  	Carp::croak("Invalid version object");
      }
      unless (_verify($right)) {
  	require Carp;
  	Carp::croak("Invalid version format");
      }
      my $l = $#{$left->{version}};
      my $r = $#{$right->{version}};
      my $m = $l < $r ? $l : $r;
      my $lalpha = $left->is_alpha;
      my $ralpha = $right->is_alpha;
      my $retval = 0;
      my $i = 0;
      while ( $i <= $m && $retval == 0 ) {
  	$retval = $left->{version}[$i] <=> $right->{version}[$i];
  	$i++;
      }
  
      # possible match except for trailing 0's
      if ( $retval == 0 && $l != $r ) {
  	if ( $l < $r ) {
  	    while ( $i <= $r && $retval == 0 ) {
  		if ( $right->{version}[$i] != 0 ) {
  		    $retval = -1; # not a match after all
  		}
  		$i++;
  	    }
  	}
  	else {
  	    while ( $i <= $l && $retval == 0 ) {
  		if ( $left->{version}[$i] != 0 ) {
  		    $retval = +1; # not a match after all
  		}
  		$i++;
  	    }
  	}
      }
  
      return $retval;
  }
  
  sub vbool {
      my ($self) = @_;
      return vcmp($self,$self->new("0"),1);
  }
  
  sub vnoop {
      require Carp;
      Carp::croak("operation not supported with version object");
  }
  
  sub is_alpha {
      my ($self) = @_;
      return (exists $self->{alpha});
  }
  
  sub qv {
      my $value = shift;
      my $class = $CLASS;
      if (@_) {
  	$class = ref($value) || $value;
  	$value = shift;
      }
  
      $value = _un_vstring($value);
      $value = 'v'.$value unless $value =~ /(^v|\d+\.\d+\.\d)/;
      my $obj = $CLASS->new($value);
      return bless $obj, $class;
  }
  
  *declare = \&qv;
  
  sub is_qv {
      my ($self) = @_;
      return (exists $self->{qv});
  }
  
  
  sub _verify {
      my ($self) = @_;
      if ( ref($self)
  	&& eval { exists $self->{version} }
  	&& ref($self->{version}) eq 'ARRAY'
  	) {
  	return 1;
      }
      else {
  	return 0;
      }
  }
  
  sub _is_non_alphanumeric {
      my $s = shift;
      $s = new charstar $s;
      while ($s) {
  	return 0 if isSPACE($s); # early out
  	return 1 unless (isALPHA($s) || isDIGIT($s) || $s =~ /[.-]/);
  	$s++;
      }
      return 0;
  }
  
  sub _un_vstring {
      my $value = shift;
      # may be a v-string
      if ( length($value) >= 1 && $value !~ /[,._]/
  	&& _is_non_alphanumeric($value)) {
  	my $tvalue;
  	if ( $] >= 5.008_001 ) {
  	    $tvalue = _find_magic_vstring($value);
  	    $value = $tvalue if length $tvalue;
  	}
  	elsif ( $] >= 5.006_000 ) {
  	    $tvalue = sprintf("v%vd",$value);
  	    if ( $tvalue =~ /^v\d+(\.\d+)*$/ ) {
  		# must be a v-string
  		$value = $tvalue;
  	    }
  	}
      }
      return $value;
  }
  
  sub _find_magic_vstring {
      my $value = shift;
      my $tvalue = '';
      require B;
      my $sv = B::svref_2object(\$value);
      my $magic = ref($sv) eq 'B::PVMG' ? $sv->MAGIC : undef;
      while ( $magic ) {
  	if ( $magic->TYPE eq 'V' ) {
  	    $tvalue = $magic->PTR;
  	    $tvalue =~ s/^v?(.+)$/v$1/;
  	    last;
  	}
  	else {
  	    $magic = $magic->MOREMAGIC;
  	}
      }
      $tvalue =~ tr/_//d;
      return $tvalue;
  }
  
  sub _VERSION {
      my ($obj, $req) = @_;
      my $class = ref($obj) || $obj;
  
      no strict 'refs';
      if ( exists $INC{"$class.pm"} and not %{"$class\::"} and $] >= 5.008) {
  	 # file but no package
  	require Carp;
  	Carp::croak( "$class defines neither package nor VERSION"
  	    ."--version check failed");
      }
  
      my $version = eval "\$$class\::VERSION";
      if ( defined $version ) {
  	local $^W if $] <= 5.008;
  	$version = version::vpp->new($version);
      }
  
      if ( defined $req ) {
  	unless ( defined $version ) {
  	    require Carp;
  	    my $msg =  $] < 5.006
  	    ? "$class version $req required--this is only version "
  	    : "$class does not define \$$class\::VERSION"
  	      ."--version check failed";
  
  	    if ( $ENV{VERSION_DEBUG} ) {
  		Carp::confess($msg);
  	    }
  	    else {
  		Carp::croak($msg);
  	    }
  	}
  
  	$req = version::vpp->new($req);
  
  	if ( $req > $version ) {
  	    require Carp;
  	    if ( $req->is_qv ) {
  		Carp::croak(
  		    sprintf ("%s version %s required--".
  			"this is only version %s", $class,
  			$req->normal, $version->normal)
  		);
  	    }
  	    else {
  		Carp::croak(
  		    sprintf ("%s version %s required--".
  			"this is only version %s", $class,
  			$req->stringify, $version->stringify)
  		);
  	    }
  	}
      }
  
      return defined $version ? $version->stringify : undef;
  }
  
  1; #this line is important and will help the module return a true value
VERSION_VPP

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


=head1 NAME

dist_surveyor - determine exactly what dist versions are installed

=head1 SYNOPSIS

  dist_surveyor [options] /some/perl/lib/dir

Typically a perl library directory will have an architecture specific library
as a subdirectory. The dist_surveyor script will detect and add it automatically
if the perl being used has the same 'archname' the same as the one in the library.
If not, then specify the "archlib" directory explicitly I<first>:

  dist_surveyor [options] /some/perl/lib/dir/archname /some/perl/lib/dir

=head1 DESCRIPTION

This utility examines all the modules installed within the specified perl
library directory and uses the metacpan API to work out what versions of what
distributions could have provided those modules. It then works out which of
those candidate distributions is the most likely one.

It is fairly robust and copes well with edge cases like installation of
non-released versions from git repos and local modifications.

Distributions are written to stdout. Progress and issues are reported to stderr.

It can take a long time to run for the first time on a directory with a
large number of modules and candidate distributions.  The data fetched from
metacpan is cached so future runs are much faster.  (The system this code was
tested on took about 60 minutes to process around 500 distributions with no
cached data, and under 10 minutes for later runs that could reuse the cached
data. The cache file ended up about 40MB in size.)

=head1 Fatpacked script

A fatpacked version of this script exists in:
L<https://raw.github.com/Grinnz/Dist-Surveyor/master/dist_surveyor_packed.pl>

Please note that the packed version expects that any standard core perl
modules, including the modules L<List::Util>, L<Scalar::Util>, and L<Storable>,
are already installed on the local system. If you are planing to --makecpan,
you also need L<Compress::Zlib>.

=head1 OPTIONS

    --verbose    Show more detailed progress

    --debug      Show much more information

    --match R    Ignore modules that don't match regex R (unanchored)

    --perlver V  Ignore modules that are shipped with perl version V

    --remnants   Include old distribution versions that have left old modules behind

    --uncached   Don't use or update the persistent cache

    --makecpan D Create a CPAN repository in directory D

    --output S   List of field names to output, separate by spaces.
                 
    --format S   Printf format string with a %s for each field in --output

=head2 --makecpan

Creates a CPAN repository in the specified directory by fetching the selected
distributions into authors/id/... and writing the index files into modules/...

If the directory already exists then selected distributions that already exist
are not refetched, any distributions that already exist but aren't selected by
this run are left in place.

New package distribution information is merged into the modules/02packages index file.

Some additional files are written into a dist_surveyor subdirectory:

=head3 dist_surveyor/token_packages.txt

This file lists one unique 'token package' per distribution. It's very useful
to speed up re-running a full install after some distributions have failed.

=head1 SURVEY USAGE

Run a survey and create a mini-CPAN repository containing the distributions:

    dist_surveyor --makecpan my_cpan /some/perl/lib/dir > installed_dists.txt

It's important to give the correct perl lib directory path.

It's important to check the results related to any modules that generated
warnings during the run.

=head1 INSTALLATION USAGE

Then, to install those distributions into a new library:

    cpanm --mirror file:$PWD/my_cpan --mirror-only [-l new_lib] < installed_dists.txt

It's very likely that some distributions will fail tests and not install,
which will, in turn, cause others to fail. Once the initial run is complete
study the cpam build log file carefully and resolve the test failures.

Running cpanm with a list of distributions, as above, will always reinstall
I<all> the listed distributions. Even those already sucessfully installed.

It's much (I<much>) faster to give cpanm a list of package names as that allows
it to skip those that it knows are already installed. The L</--makecpan> option
writes a list of 'token packages', one per distribution, so you can use that
with cpanm:

    cpanm --mirror file:$PWD/my_cpan --mirror-only [-l new_lib] < my_cpan/dist_surveyor/token_packages.txt

When a distro fails tests I use the cpanm C<--look> option to investigate:

    cpanm --mirror file:$PWD/my_cpan --mirror-only --look Some::Package

I'll often end up building, testing and installing the distro from within that
cpanm look shell. Once installed I'll rerun cpanm using the full C<token_packages.txt>
file again. If there are more failures I'll repeat that sequence till they're all resolved.

=head1 BUGS

Probably.

=head1 TODO

    * Auto-detect when directory given isn't the root of a perl library dir tree.
        E.g. by matching file names to module names

    * Add support for matching Foo.pm.PL files (e.g. FCGI and common::sense)

    * For installed modules get the file modification time (last commit time)
        and use it to eliminate candidate dists that were released after that time.

    * Consider factoring in release status ('authorized') so rogue releases
        that ship copies of many other modules (like Net-Braintree-0.1.1)
        are given a lower priority.

    * Sort out ExtUtils::Perllocal::Parser situation
        Avoid hard-coded %distro_key_mod_names related to perllocal.pod where the
        dist name doesn't match the key module name.
        Or maybe just remove use of distro_key_mod_names and perllocal entirely?

    * Optimise use of metacpan. Check caching. Use ElasticSearch.pm.

    * Fully handle merging of pre-existing --makecpan directory data files.

    * Consider factoring install date in the output ordering. May help with edge cases
        where a package P is installed via distros A then B. If A is reinstalled after B
        then the reinstalled P will be from A but should be from B. (I don't know of any
        cases, but it's certainly a possibility. The LWP breakup and Class::MOP spring to
        mind as possible candidates.)

=cut

use strict;
use warnings;
use Getopt::Long; # core
use Config; # core

$| = 1;

use Dist::Surveyor;
use Dist::Surveyor::Inquiry; # internal
use Dist::Surveyor::MakeCpan;

use constant PROGNAME => 'dist_surveyor';

GetOptions(
    'match=s' => \my $opt_match,
    'v|verbose!' => \my $opt_verbose,
    'd|debug!' => \my $opt_debug,
    # target perl version, re core modules
    'perlver=s' => \my $opt_perlver,
    # include old dists that have remnant/orphaned modules installed
    'remnants!' => \my $opt_remnants,
    # don't use a persistent cache
    'uncached!' => \my $opt_uncached,
    'makecpan=s' => \my $opt_makecpan,
    # e.g., 'download_url author'
    'output=s' => \(my $opt_output ||= 'url'),
    # e.g., 'some-command --foo --file %s --authorid %s'
    'format=s' => \my $opt_format,
) or exit 1;

$opt_verbose++ if $opt_debug;
$opt_perlver = version->parse($opt_perlver || $])->numify;

our $VERBOSE = $opt_verbose;
our $DEBUG = $opt_debug;

my $major_error_count = 0; # exit status

my $distro_key_mod_names = {
    'PathTools' => 'File::Spec',
    'Template-Toolkit' => 'Template',
    'TermReadKey' => 'Term::ReadKey',
    'libwww-perl' => 'LWP',
    'ack' => 'App::Ack',
};

sub main {

    die "Usage: $0 perl-lib-directory [...]\n"
        unless @ARGV;
    my @libdirs = @ARGV;

    # check dirs and add archlib's if appropriate
    for my $libdir (@libdirs) {
        die "$libdir isn't a directory\n"
            unless -d $libdir;

        my $archdir = "$libdir/$Config{archname}";
        if (-d $archdir) {
            unshift @libdirs, $archdir
                unless grep { $_ eq $archdir } @libdirs;
        }
    }

    $::DEBUG = $opt_debug;
    $::VERBOSE = $opt_verbose;
    Dist::Surveyor::Inquiry->perma_cache() unless $opt_uncached;

    my $options = {
        opt_match => $opt_match,
        opt_perlver => $opt_perlver,
        opt_remnants => $opt_remnants,
        distro_key_mod_names => $distro_key_mod_names,
    };
    my @installed_releases = determine_installed_releases($options, \@libdirs);
    write_fields(\@installed_releases, $opt_format, [split ' ', $opt_output], \*STDOUT);

    warn sprintf "Completed survey in %.1f minutes using %d metacpan calls.\n",
        (time-$^T)/60, $Dist::Surveyor::Inquiry::metacpan_calls;


    if ($opt_makecpan) {
        my $cpan = Dist::Surveyor::MakeCpan->new(
            $opt_makecpan, PROGNAME, $distro_key_mod_names);

        warn "Updating $opt_makecpan for ".@installed_releases." releases...\n";

        for my $ri (@installed_releases) {
            $cpan->add_release($ri);
        }
        $cpan->close();
        $major_error_count += $cpan->errors();
    }

    exit $major_error_count;
}

sub write_fields {
    my ($releases, $format, $fields, $fh) = @_;

    $format ||= join("\t", ('%s') x @$fields);
    $format .= "\n";

    for my $release_data (@$releases) {
        printf $fh $format, map {
            exists $release_data->{$_} ? $release_data->{$_} : "?$_"
        } @$fields;
    }
}

main(@ARGV);

exit 0;
